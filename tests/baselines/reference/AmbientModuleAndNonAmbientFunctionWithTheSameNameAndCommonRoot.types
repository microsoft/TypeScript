//// [tests/cases/conformance/internalModules/DeclarationMerging/AmbientModuleAndNonAmbientFunctionWithTheSameNameAndCommonRoot.ts] ////

=== module.d.ts ===
declare module Point {
>Point : typeof Point
>      : ^^^^^^^^^^^^

    export var Origin: { x: number; y: number; }
>Origin : { x: number; y: number; }
>       : ^^^^^      ^^^^^      ^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

=== function.ts ===
function Point() {
>Point : typeof Point
>      : ^^^^^^^^^^^^

    return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
}

=== test.ts ===
var cl: { x: number; y: number; }
>cl : { x: number; y: number; }
>   : ^^^^^      ^^^^^      ^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

var cl = Point();
>cl : { x: number; y: number; }
>   : ^^^^^      ^^^^^      ^^^
>Point() : { x: number; y: number; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Point : typeof Point
>      : ^^^^^^^^^^^^

var cl = Point.Origin;
>cl : { x: number; y: number; }
>   : ^^^^^      ^^^^^      ^^^
>Point.Origin : { x: number; y: number; }
>             : ^^^^^      ^^^^^      ^^^
>Point : typeof Point
>      : ^^^^^^^^^^^^
>Origin : { x: number; y: number; }
>       : ^^^^^      ^^^^^      ^^^

