//// [tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleWithSameNameAndCommonRootES6.ts] ////

=== class.ts ===
namespace X.Y {
>X : Symbol(X, Decl(class.ts, 0, 0), Decl(module.ts, 0, 0))
>Y : Symbol(Y, Decl(class.ts, 0, 12), Decl(module.ts, 0, 12))

    export class Point {
>Point : Symbol(Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))

        constructor(x: number, y: number) {
>x : Symbol(x, Decl(class.ts, 2, 20))
>y : Symbol(y, Decl(class.ts, 2, 30))

            this.x = x;
>this.x : Symbol(Point.x, Decl(class.ts, 5, 9))
>this : Symbol(Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))
>x : Symbol(Point.x, Decl(class.ts, 5, 9))
>x : Symbol(x, Decl(class.ts, 2, 20))

            this.y = y;
>this.y : Symbol(Point.y, Decl(class.ts, 6, 18))
>this : Symbol(Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))
>y : Symbol(Point.y, Decl(class.ts, 6, 18))
>y : Symbol(y, Decl(class.ts, 2, 30))
        }
        x: number;
>x : Symbol(Point.x, Decl(class.ts, 5, 9))

        y: number;
>y : Symbol(Point.y, Decl(class.ts, 6, 18))
    }
}

=== module.ts ===
namespace X.Y {
>X : Symbol(X, Decl(class.ts, 0, 0), Decl(module.ts, 0, 0))
>Y : Symbol(Y, Decl(class.ts, 0, 12), Decl(module.ts, 0, 12))

    export namespace Point {
>Point : Symbol(Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))

        export var Origin = new Point(0, 0);
>Origin : Symbol(Origin, Decl(module.ts, 2, 18))
>Point : Symbol(Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))
    }
}

=== test.ts ===
//var cl: { x: number; y: number; }
var cl = new X.Y.Point(1,1);
>cl : Symbol(cl, Decl(test.ts, 1, 3), Decl(test.ts, 2, 3))
>X.Y.Point : Symbol(X.Y.Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))
>X.Y : Symbol(X.Y, Decl(class.ts, 0, 12), Decl(module.ts, 0, 12))
>X : Symbol(X, Decl(class.ts, 0, 0), Decl(module.ts, 0, 0))
>Y : Symbol(X.Y, Decl(class.ts, 0, 12), Decl(module.ts, 0, 12))
>Point : Symbol(X.Y.Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))

var cl = X.Y.Point.Origin; // error not expected here same as bug 83996 ?
>cl : Symbol(cl, Decl(test.ts, 1, 3), Decl(test.ts, 2, 3))
>X.Y.Point.Origin : Symbol(X.Y.Point.Origin, Decl(module.ts, 2, 18))
>X.Y.Point : Symbol(X.Y.Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))
>X.Y : Symbol(X.Y, Decl(class.ts, 0, 12), Decl(module.ts, 0, 12))
>X : Symbol(X, Decl(class.ts, 0, 0), Decl(module.ts, 0, 0))
>Y : Symbol(X.Y, Decl(class.ts, 0, 12), Decl(module.ts, 0, 12))
>Point : Symbol(X.Y.Point, Decl(class.ts, 0, 15), Decl(module.ts, 0, 15))
>Origin : Symbol(X.Y.Point.Origin, Decl(module.ts, 2, 18))


=== simple.ts ===
class A {
>A : Symbol(A, Decl(simple.ts, 0, 0), Decl(simple.ts, 2, 1))

    id: string;
>id : Symbol(A.id, Decl(simple.ts, 0, 9))
}

namespace A {
>A : Symbol(A, Decl(simple.ts, 0, 0), Decl(simple.ts, 2, 1))

    export var Instance = new A();
>Instance : Symbol(Instance, Decl(simple.ts, 5, 14))
>A : Symbol(A, Decl(simple.ts, 0, 0), Decl(simple.ts, 2, 1))
}

// ensure merging works as expected
var a = A.Instance;
>a : Symbol(a, Decl(simple.ts, 9, 3), Decl(simple.ts, 10, 3), Decl(simple.ts, 11, 3))
>A.Instance : Symbol(A.Instance, Decl(simple.ts, 5, 14))
>A : Symbol(A, Decl(simple.ts, 0, 0), Decl(simple.ts, 2, 1))
>Instance : Symbol(A.Instance, Decl(simple.ts, 5, 14))

var a = new A();
>a : Symbol(a, Decl(simple.ts, 9, 3), Decl(simple.ts, 10, 3), Decl(simple.ts, 11, 3))
>A : Symbol(A, Decl(simple.ts, 0, 0), Decl(simple.ts, 2, 1))

var a: { id: string };
>a : Symbol(a, Decl(simple.ts, 9, 3), Decl(simple.ts, 10, 3), Decl(simple.ts, 11, 3))
>id : Symbol(id, Decl(simple.ts, 11, 8))

