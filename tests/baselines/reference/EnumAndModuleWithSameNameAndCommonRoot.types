//// [tests/cases/conformance/internalModules/DeclarationMerging/EnumAndModuleWithSameNameAndCommonRoot.ts] ////

=== EnumAndModuleWithSameNameAndCommonRoot.ts ===
enum enumdule {
>enumdule : enumdule
>         : ^^^^^^^^

    Red, Blue
>Red : enumdule.Red
>    : ^^^^^^^^^^^^
>Blue : enumdule.Blue
>     : ^^^^^^^^^^^^^
}

module enumdule {
>enumdule : typeof enumdule
>         : ^^^^^^^^^^^^^^^

    export class Point {
>Point : Point
>      : ^^^^^

        constructor(public x: number, public y: number) { }
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
    }
}

var x: enumdule;
>x : enumdule
>  : ^^^^^^^^

var x = enumdule.Red;
>x : enumdule
>  : ^^^^^^^^
>enumdule.Red : enumdule.Red
>             : ^^^^^^^^^^^^
>enumdule : typeof enumdule
>         : ^^^^^^^^^^^^^^^
>Red : enumdule.Red
>    : ^^^^^^^^^^^^

var y: { x: number; y: number };
>y : { x: number; y: number; }
>  : ^^^^^      ^^^^^      ^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

var y = new enumdule.Point(0, 0);
>y : { x: number; y: number; }
>  : ^^^^^      ^^^^^      ^^^
>new enumdule.Point(0, 0) : enumdule.Point
>                         : ^^^^^^^^^^^^^^
>enumdule.Point : typeof enumdule.Point
>               : ^^^^^^^^^^^^^^^^^^^^^
>enumdule : typeof enumdule
>         : ^^^^^^^^^^^^^^^
>Point : typeof enumdule.Point
>      : ^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^

