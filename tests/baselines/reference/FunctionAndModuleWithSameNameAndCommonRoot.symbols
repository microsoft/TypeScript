//// [tests/cases/conformance/internalModules/DeclarationMerging/FunctionAndModuleWithSameNameAndCommonRoot.ts] ////

=== function.ts ===
namespace A {
>A : Symbol(A, Decl(function.ts, 0, 0), Decl(module.ts, 0, 0))

    export function Point() {
>Point : Symbol(Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))

        return { x: 0, y: 0 };
>x : Symbol(x, Decl(function.ts, 2, 16))
>y : Symbol(y, Decl(function.ts, 2, 22))
    }
}

=== module.ts ===
namespace A {
>A : Symbol(A, Decl(function.ts, 0, 0), Decl(module.ts, 0, 0))

    export namespace Point {
>Point : Symbol(Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))

        export var Origin = { x: 0, y: 0 };
>Origin : Symbol(Origin, Decl(module.ts, 2, 18))
>x : Symbol(x, Decl(module.ts, 2, 29))
>y : Symbol(y, Decl(module.ts, 2, 35))
    }
}

=== test.ts ===
var fn: () => { x: number; y: number };
>fn : Symbol(fn, Decl(test.ts, 0, 3), Decl(test.ts, 1, 3), Decl(simple.ts, 11, 3), Decl(simple.ts, 12, 3))
>x : Symbol(x, Decl(test.ts, 0, 15))
>y : Symbol(y, Decl(test.ts, 0, 26))

var fn = A.Point;
>fn : Symbol(fn, Decl(test.ts, 0, 3), Decl(test.ts, 1, 3), Decl(simple.ts, 11, 3), Decl(simple.ts, 12, 3))
>A.Point : Symbol(A.Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))
>A : Symbol(A, Decl(function.ts, 0, 0), Decl(module.ts, 0, 0))
>Point : Symbol(A.Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))

var cl: { x: number; y: number; }
>cl : Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3), Decl(test.ts, 5, 3), Decl(simple.ts, 14, 3), Decl(simple.ts, 15, 3) ... and 1 more)
>x : Symbol(x, Decl(test.ts, 3, 9))
>y : Symbol(y, Decl(test.ts, 3, 20))

var cl = A.Point();
>cl : Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3), Decl(test.ts, 5, 3), Decl(simple.ts, 14, 3), Decl(simple.ts, 15, 3) ... and 1 more)
>A.Point : Symbol(A.Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))
>A : Symbol(A, Decl(function.ts, 0, 0), Decl(module.ts, 0, 0))
>Point : Symbol(A.Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))

var cl = A.Point.Origin; // not expected to be an error.
>cl : Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3), Decl(test.ts, 5, 3), Decl(simple.ts, 14, 3), Decl(simple.ts, 15, 3) ... and 1 more)
>A.Point.Origin : Symbol(A.Point.Origin, Decl(module.ts, 2, 18))
>A.Point : Symbol(A.Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))
>A : Symbol(A, Decl(function.ts, 0, 0), Decl(module.ts, 0, 0))
>Point : Symbol(A.Point, Decl(function.ts, 0, 13), Decl(module.ts, 0, 13))
>Origin : Symbol(A.Point.Origin, Decl(module.ts, 2, 18))


=== simple.ts ===
namespace B {
>B : Symbol(B, Decl(simple.ts, 0, 0))

    export function Point() {
>Point : Symbol(Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))

        return { x: 0, y: 0 };
>x : Symbol(x, Decl(simple.ts, 3, 16))
>y : Symbol(y, Decl(simple.ts, 3, 22))
    }

    export namespace Point {
>Point : Symbol(Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))

        export var Origin = { x: 0, y: 0 };
>Origin : Symbol(Origin, Decl(simple.ts, 7, 18))
>x : Symbol(x, Decl(simple.ts, 7, 29))
>y : Symbol(y, Decl(simple.ts, 7, 35))
    }
}

var fn: () => { x: number; y: number };
>fn : Symbol(fn, Decl(test.ts, 0, 3), Decl(test.ts, 1, 3), Decl(simple.ts, 11, 3), Decl(simple.ts, 12, 3))
>x : Symbol(x, Decl(simple.ts, 11, 15))
>y : Symbol(y, Decl(simple.ts, 11, 26))

var fn = B.Point;  // not expected to be an error. bug 840000: [corelang] Function of fundule not assignalbe as expected
>fn : Symbol(fn, Decl(test.ts, 0, 3), Decl(test.ts, 1, 3), Decl(simple.ts, 11, 3), Decl(simple.ts, 12, 3))
>B.Point : Symbol(B.Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))
>B : Symbol(B, Decl(simple.ts, 0, 0))
>Point : Symbol(B.Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))

var cl: { x: number; y: number; }
>cl : Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3), Decl(test.ts, 5, 3), Decl(simple.ts, 14, 3), Decl(simple.ts, 15, 3) ... and 1 more)
>x : Symbol(x, Decl(simple.ts, 14, 9))
>y : Symbol(y, Decl(simple.ts, 14, 20))

var cl = B.Point();
>cl : Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3), Decl(test.ts, 5, 3), Decl(simple.ts, 14, 3), Decl(simple.ts, 15, 3) ... and 1 more)
>B.Point : Symbol(B.Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))
>B : Symbol(B, Decl(simple.ts, 0, 0))
>Point : Symbol(B.Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))

var cl = B.Point.Origin;
>cl : Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3), Decl(test.ts, 5, 3), Decl(simple.ts, 14, 3), Decl(simple.ts, 15, 3) ... and 1 more)
>B.Point.Origin : Symbol(B.Point.Origin, Decl(simple.ts, 7, 18))
>B.Point : Symbol(B.Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))
>B : Symbol(B, Decl(simple.ts, 0, 0))
>Point : Symbol(B.Point, Decl(simple.ts, 0, 13), Decl(simple.ts, 4, 5))
>Origin : Symbol(B.Point.Origin, Decl(simple.ts, 7, 18))

