//// [tests/cases/conformance/internalModules/DeclarationMerging/FunctionAndModuleWithSameNameAndDifferentCommonRoot.ts] ////

=== function.ts ===
module A {
>A : typeof A
>  : ^^^^^^^^

    export function Point() {
>Point : () => { x: number; y: number; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
    }
}

=== module.ts ===
module B {
>B : typeof B
>  : ^^^^^^^^

    export module Point {
>Point : typeof Point
>      : ^^^^^^^^^^^^

        export var Origin = { x: 0, y: 0 };
>Origin : { x: number; y: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
    }
}

=== test.ts ===
var fn: () => { x: number; y: number };
>fn : () => { x: number; y: number; }
>   : ^^^^^^                         
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

var fn = A.Point;
>fn : () => { x: number; y: number; }
>   : ^^^^^^                         
>A.Point : () => { x: number; y: number; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
>Point : () => { x: number; y: number; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

var cl: { x: number; y: number; }
>cl : { x: number; y: number; }
>   : ^^^^^      ^^^^^      ^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

var cl = B.Point.Origin;
>cl : { x: number; y: number; }
>   : ^^^^^      ^^^^^      ^^^
>B.Point.Origin : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>B.Point : typeof B.Point
>        : ^^^^^^^^^^^^^^
>B : typeof B
>  : ^^^^^^^^
>Point : typeof B.Point
>      : ^^^^^^^^^^^^^^
>Origin : { x: number; y: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^

