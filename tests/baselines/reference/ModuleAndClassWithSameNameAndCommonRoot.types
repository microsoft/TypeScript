//// [tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndClassWithSameNameAndCommonRoot.ts] ////

=== module.ts ===
module X.Y {
>X : typeof X
>  : ^^^^^^^^
>Y : typeof Y
>  : ^^^^^^^^

    export module Point {
>Point : typeof Point
>      : ^^^^^^^^^^^^

        export var Origin = new Point(0, 0);
>Origin : Point
>       : ^^^^^
>new Point(0, 0) : Point
>                : ^^^^^
>Point : typeof Point
>      : ^^^^^^^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^
    }
}

=== classPoint.ts ===
module X.Y {
>X : typeof X
>  : ^^^^^^^^
>Y : typeof Y
>  : ^^^^^^^^

    // duplicate identifier
    export class Point {
>Point : Point
>      : ^^^^^

        constructor(x: number, y: number) {
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

            this.x = x;
>this.x = x : number
>           : ^^^^^^
>this.x : number
>       : ^^^^^^
>this : this
>     : ^^^^
>x : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

            this.y = y;
>this.y = y : number
>           : ^^^^^^
>this.y : number
>       : ^^^^^^
>this : this
>     : ^^^^
>y : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
        }
        x: number;
>x : number
>  : ^^^^^^

        y: number;
>y : number
>  : ^^^^^^
    }
}

=== simple.ts ===
module A {
>A : typeof A
>  : ^^^^^^^^

    export var Instance = new A();
>Instance : A
>         : ^
>new A() : A
>        : ^
>A : typeof A
>  : ^^^^^^^^
}

// duplicate identifier
class A {
>A : A
>  : ^

    id: string;
>id : string
>   : ^^^^^^
}

