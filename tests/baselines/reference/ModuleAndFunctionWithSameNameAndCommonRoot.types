//// [tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndFunctionWithSameNameAndCommonRoot.ts] ////

=== module.ts ===
module A {
>A : typeof A
>  : ^^^^^^^^

    export module Point {
>Point : typeof Point
>      : ^^^^^^^^^^^^

        export var Origin = { x: 0, y: 0 };
>Origin : { x: number; y: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
    }
}

=== function.ts ===
module A {
>A : typeof A
>  : ^^^^^^^^

    // duplicate identifier error
    export function Point() {
>Point : typeof Point
>      : ^^^^^^^^^^^^

        return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
    }
}

=== simple.ts ===
module B {
>B : typeof B
>  : ^^^^^^^^

    export module Point {
>Point : typeof Point
>      : ^^^^^^^^^^^^

        export var Origin = { x: 0, y: 0 };
>Origin : { x: number; y: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
    }

    // duplicate identifier error
    export function Point() {
>Point : typeof Point
>      : ^^^^^^^^^^^^

        return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
    }
}

