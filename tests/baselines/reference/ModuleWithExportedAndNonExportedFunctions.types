//// [tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedFunctions.ts] ////

=== ModuleWithExportedAndNonExportedFunctions.ts ===
module A {
>A : typeof A
>  : ^^^^^^^^

    export function fn(s: string) {
>fn : (s: string) => boolean
>   : ^ ^^      ^^^^^^^^^^^^
>s : string
>  : ^^^^^^

        return true;
>true : true
>     : ^^^^
    }

    export function fng<T, U>(s: T): U {
>fng : <T, U>(s: T) => U
>    : ^ ^^ ^^ ^^ ^^^^^ 
>s : T
>  : ^

        return null;
    }

    function fn2(s: string) {
>fn2 : (s: string) => boolean
>    : ^ ^^      ^^^^^^^^^^^^
>s : string
>  : ^^^^^^

        return false;
>false : false
>      : ^^^^^
    }

    function fng2<T, U>(s: T): U {
>fng2 : <T, U>(s: T) => U
>     : ^ ^^ ^^ ^^ ^^^^^ 
>s : T
>  : ^

        return null;
    }
}

// these should not be errors since the functions are exported
var fn: (s: string) => boolean;
>fn : (s: string) => boolean
>   : ^ ^^      ^^^^^       
>s : string
>  : ^^^^^^

var fn = A.fn;
>fn : (s: string) => boolean
>   : ^ ^^      ^^^^^       
>A.fn : (s: string) => boolean
>     : ^ ^^      ^^^^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
>fn : (s: string) => boolean
>   : ^ ^^      ^^^^^^^^^^^^

var fng: <T, U>(s: T) => U;
>fng : <T, U>(s: T) => U
>    : ^ ^^ ^^ ^^ ^^^^^ 
>s : T
>  : ^

var fng = A.fng; // bug 838015
>fng : <T, U>(s: T) => U
>    : ^ ^^ ^^ ^^ ^^^^^ 
>A.fng : <T, U>(s: T) => U
>      : ^ ^^ ^^ ^^ ^^^^^ 
>A : typeof A
>  : ^^^^^^^^
>fng : <T, U>(s: T) => U
>    : ^ ^^ ^^ ^^ ^^^^^ 

// these should be errors since the functions are not exported
var fn2 = A.fn2;
>fn2 : any
>    : ^^^
>A.fn2 : any
>      : ^^^
>A : typeof A
>  : ^^^^^^^^
>fn2 : any
>    : ^^^

var fng2 = A.fng2;
>fng2 : any
>     : ^^^
>A.fng2 : any
>       : ^^^
>A : typeof A
>  : ^^^^^^^^
>fng2 : any
>     : ^^^

