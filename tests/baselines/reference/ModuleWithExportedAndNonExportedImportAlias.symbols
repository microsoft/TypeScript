//// [tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedImportAlias.ts] ////

=== ModuleWithExportedAndNonExportedImportAlias.ts ===
namespace A {
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 0))

    export interface Point {
>Point : Symbol(Point, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 13))

        x: number;
>x : Symbol(Point.x, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 1, 28))

        y: number;
>y : Symbol(Point.y, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 2, 18))
    }

    interface Point3d extends Point {
>Point3d : Symbol(Point3d, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 4, 5))
>Point : Symbol(Point, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 13))

        z: number;
>z : Symbol(Point3d.z, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 6, 37))
    }
}

namespace B {
>B : Symbol(B, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 9, 1))

    export class Line {
>Line : Symbol(Line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 11, 13))

        constructor(public start: A.Point, public end: A.Point) { }
>start : Symbol(Line.start, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 13, 20))
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 0))
>Point : Symbol(A.Point, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 13))
>end : Symbol(Line.end, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 13, 42))
>A : Symbol(A, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 0))
>Point : Symbol(A.Point, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 13))
    }
}

namespace Geometry {
>Geometry : Symbol(Geometry, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 15, 1))

    export import Points = A;
>Points : Symbol(Points, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 17, 20))
>A : Symbol(Points, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 0))

    import Lines = B;
>Lines : Symbol(Lines, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 18, 29))
>B : Symbol(Lines, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 9, 1))

    export var Origin: Points.Point = { x: 0, y: 0 };
>Origin : Symbol(Origin, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 21, 14))
>Points : Symbol(Points, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 17, 20))
>Point : Symbol(Points.Point, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 13))
>x : Symbol(x, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 21, 39))
>y : Symbol(y, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 21, 45))

    // this is valid since B.Line _is_ visible outside Geometry
    export var Unit: Lines.Line = new Lines.Line(Origin, { x: 1, y: 0 });
>Unit : Symbol(Unit, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 24, 14))
>Lines : Symbol(Lines, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 18, 29))
>Line : Symbol(Lines.Line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 11, 13))
>Lines.Line : Symbol(Lines.Line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 11, 13))
>Lines : Symbol(Lines, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 18, 29))
>Line : Symbol(Lines.Line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 11, 13))
>Origin : Symbol(Origin, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 21, 14))
>x : Symbol(x, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 24, 58))
>y : Symbol(y, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 24, 64))
}

// expected to work since all are exported
var p: { x: number; y: number };
>p : Symbol(p, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 28, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 29, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 30, 3))
>x : Symbol(x, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 28, 8))
>y : Symbol(y, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 28, 19))

var p: Geometry.Points.Point;
>p : Symbol(p, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 28, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 29, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 30, 3))
>Geometry : Symbol(Geometry, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 15, 1))
>Points : Symbol(Geometry.Points, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 17, 20))
>Point : Symbol(A.Point, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 0, 13))

var p = Geometry.Origin;
>p : Symbol(p, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 28, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 29, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 30, 3))
>Geometry.Origin : Symbol(Geometry.Origin, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 21, 14))
>Geometry : Symbol(Geometry, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 15, 1))
>Origin : Symbol(Geometry.Origin, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 21, 14))

var line: { start: { x: number; y: number }; end: { x: number; y: number; } };
>line : Symbol(line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 33, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 36, 3))
>start : Symbol(start, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 11))
>x : Symbol(x, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 20))
>y : Symbol(y, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 31))
>end : Symbol(end, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 44))
>x : Symbol(x, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 51))
>y : Symbol(y, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 62))

var line = Geometry.Unit;
>line : Symbol(line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 33, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 36, 3))
>Geometry.Unit : Symbol(Geometry.Unit, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 24, 14))
>Geometry : Symbol(Geometry, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 15, 1))
>Unit : Symbol(Geometry.Unit, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 24, 14))

// not expected to work since non are exported
var line = Geometry.Lines.Line;
>line : Symbol(line, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 32, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 33, 3), Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 36, 3))
>Geometry : Symbol(Geometry, Decl(ModuleWithExportedAndNonExportedImportAlias.ts, 15, 1))


