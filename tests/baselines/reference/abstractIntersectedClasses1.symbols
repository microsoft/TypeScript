//// [tests/cases/compiler/abstractIntersectedClasses1.ts] ////

=== abstractIntersectedClasses1.ts ===
// https://github.com/microsoft/TypeScript/issues/56738

abstract class A {
>A : Symbol(A, Decl(abstractIntersectedClasses1.ts, 0, 0))

  abstract a(): number;
>a : Symbol(A.a, Decl(abstractIntersectedClasses1.ts, 2, 18))
}

abstract class A2 {
>A2 : Symbol(A2, Decl(abstractIntersectedClasses1.ts, 4, 1))

  abstract a(): number;
>a : Symbol(A2.a, Decl(abstractIntersectedClasses1.ts, 6, 19))
}

abstract class B {
>B : Symbol(B, Decl(abstractIntersectedClasses1.ts, 8, 1))

  abstract b(): number;
>b : Symbol(B.b, Decl(abstractIntersectedClasses1.ts, 10, 18))
}

declare const Base: abstract new () => A & B;
>Base : Symbol(Base, Decl(abstractIntersectedClasses1.ts, 14, 13))
>A : Symbol(A, Decl(abstractIntersectedClasses1.ts, 0, 0))
>B : Symbol(B, Decl(abstractIntersectedClasses1.ts, 8, 1))

class Foo1 extends Base {} // error
>Foo1 : Symbol(Foo1, Decl(abstractIntersectedClasses1.ts, 14, 45))
>Base : Symbol(Base, Decl(abstractIntersectedClasses1.ts, 14, 13))

class Foo2 extends Base { // error
>Foo2 : Symbol(Foo2, Decl(abstractIntersectedClasses1.ts, 16, 26))
>Base : Symbol(Base, Decl(abstractIntersectedClasses1.ts, 14, 13))

  a() {
>a : Symbol(Foo2.a, Decl(abstractIntersectedClasses1.ts, 17, 25))

    return 10;
  }
}
class Foo3 extends Base { // ok
>Foo3 : Symbol(Foo3, Decl(abstractIntersectedClasses1.ts, 21, 1))
>Base : Symbol(Base, Decl(abstractIntersectedClasses1.ts, 14, 13))

  a() {
>a : Symbol(Foo3.a, Decl(abstractIntersectedClasses1.ts, 22, 25))

    return 10;
  }
  b() {
>b : Symbol(Foo3.b, Decl(abstractIntersectedClasses1.ts, 25, 3))

    return 42;
  }
}

declare const Base2: abstract new () => A & A2;
>Base2 : Symbol(Base2, Decl(abstractIntersectedClasses1.ts, 31, 13))
>A : Symbol(A, Decl(abstractIntersectedClasses1.ts, 0, 0))
>A2 : Symbol(A2, Decl(abstractIntersectedClasses1.ts, 4, 1))

class Bar1 extends Base2 {} // error
>Bar1 : Symbol(Bar1, Decl(abstractIntersectedClasses1.ts, 31, 47))
>Base2 : Symbol(Base2, Decl(abstractIntersectedClasses1.ts, 31, 13))

class Bar2 extends Base2 { // ok
>Bar2 : Symbol(Bar2, Decl(abstractIntersectedClasses1.ts, 33, 27))
>Base2 : Symbol(Base2, Decl(abstractIntersectedClasses1.ts, 31, 13))

  a() {
>a : Symbol(Bar2.a, Decl(abstractIntersectedClasses1.ts, 34, 26))

    return 100;
  }
}

