//// [tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithConstrainedTypeParameter.ts] ////

=== additionOperatorWithConstrainedTypeParameter.ts ===
// test for #17069
function sum<T extends Record<K, number>, K extends string>(n: number, v: T, k: K) {
>sum : <T extends Record<K, number>, K extends string>(n: number, v: T, k: K) => void
>    : ^ ^^^^^^^^^                 ^^ ^^^^^^^^^      ^^ ^^      ^^ ^^ ^^ ^^ ^^^^^^^^^
>n : number
>  : ^^^^^^
>v : T
>  : ^
>k : K
>  : ^

    n = n + v[k];
>n = n + v[k] : number
>             : ^^^^^^
>n : number
>  : ^^^^^^
>n + v[k] : number
>         : ^^^^^^
>n : number
>  : ^^^^^^
>v[k] : T[K]
>     : ^^^^
>v : T
>  : ^
>k : K
>  : ^

    n += v[k]; // += should work the same way
>n += v[k] : number
>          : ^^^^^^
>n : number
>  : ^^^^^^
>v[k] : T[K]
>     : ^^^^
>v : T
>  : ^
>k : K
>  : ^
}
function realSum<T extends Record<K, number>, K extends string>(n: number, vs: T[], k: K) {
>realSum : <T extends Record<K, number>, K extends string>(n: number, vs: T[], k: K) => void
>        : ^ ^^^^^^^^^                 ^^ ^^^^^^^^^      ^^ ^^      ^^  ^^   ^^ ^^ ^^^^^^^^^
>n : number
>  : ^^^^^^
>vs : T[]
>   : ^^^
>k : K
>  : ^

    for (const v of vs) {
>v : T
>  : ^
>vs : T[]
>   : ^^^

        n = n + v[k];
>n = n + v[k] : number
>             : ^^^^^^
>n : number
>  : ^^^^^^
>n + v[k] : number
>         : ^^^^^^
>n : number
>  : ^^^^^^
>v[k] : T[K]
>     : ^^^^
>v : T
>  : ^
>k : K
>  : ^

        n += v[k];
>n += v[k] : number
>          : ^^^^^^
>n : number
>  : ^^^^^^
>v[k] : T[K]
>     : ^^^^
>v : T
>  : ^
>k : K
>  : ^
    }
}

