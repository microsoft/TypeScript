//// [tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithUndefinedValueAndInvalidOperands.ts] ////

=== additionOperatorWithUndefinedValueAndInvalidOperands.ts ===
// If one operand is the null or undefined value, it is treated as having the type of the other operand.

function foo(): void { return undefined }
>foo : () => void
>    : ^^^^^^    
>undefined : undefined
>          : ^^^^^^^^^

var a: boolean;
>a : boolean
>  : ^^^^^^^

var b: Object;
>b : Object
>  : ^^^^^^

var c: void;
>c : void
>  : ^^^^

var d: Number;
>d : Number
>  : ^^^^^^

// undefined + boolean/Object
var r1 = undefined + a;
>r1 : any
>   : ^^^
>undefined + a : any
>              : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>a : boolean
>  : ^^^^^^^

var r2 = undefined + b;
>r2 : any
>   : ^^^
>undefined + b : any
>              : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>b : Object
>  : ^^^^^^

var r3 = undefined + c;
>r3 : any
>   : ^^^
>undefined + c : any
>              : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>c : void
>  : ^^^^

var r4 = a + undefined;
>r4 : any
>   : ^^^
>a + undefined : any
>              : ^^^
>a : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var r5 = b + undefined;
>r5 : any
>   : ^^^
>b + undefined : any
>              : ^^^
>b : Object
>  : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var r6 = undefined + c;
>r6 : any
>   : ^^^
>undefined + c : any
>              : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>c : void
>  : ^^^^

// other cases
var r7 = undefined + d;
>r7 : any
>   : ^^^
>undefined + d : any
>              : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>d : Number
>  : ^^^^^^

var r8 = undefined + true;
>r8 : any
>   : ^^^
>undefined + true : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>true : true
>     : ^^^^

var r9 = undefined + { a: '' };
>r9 : any
>   : ^^^
>undefined + { a: '' } : any
>                      : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>{ a: '' } : { a: string; }
>          : ^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>'' : ""
>   : ^^

var r10 = undefined + foo();
>r10 : any
>    : ^^^
>undefined + foo() : any
>                  : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>foo() : void
>      : ^^^^
>foo : () => void
>    : ^^^^^^    

var r11 = undefined + (() => { });
>r11 : any
>    : ^^^
>undefined + (() => { }) : any
>                        : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>(() => { }) : () => void
>            : ^^^^^^^^^^
>() => { } : () => void
>          : ^^^^^^^^^^

