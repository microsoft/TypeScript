//// [tests/cases/compiler/aiDiagnosticsTypeCentralization.ts] ////

=== aiDiagnosticsTypeCentralization.ts ===
// BAD: Type defined outside central registry
interface Product { id: string; name: string; }
>Product : Symbol(Product, Decl(aiDiagnosticsTypeCentralization.ts, 0, 0))
>id : Symbol(Product.id, Decl(aiDiagnosticsTypeCentralization.ts, 1, 19))
>name : Symbol(Product.name, Decl(aiDiagnosticsTypeCentralization.ts, 1, 31))

// GOOD: Type imported from central registry
// import { Product } from '../types/product';

const p: Product = { id: '1', name: 'Widget' };
>p : Symbol(p, Decl(aiDiagnosticsTypeCentralization.ts, 6, 5))
>Product : Symbol(Product, Decl(aiDiagnosticsTypeCentralization.ts, 0, 0))
>id : Symbol(id, Decl(aiDiagnosticsTypeCentralization.ts, 6, 20))
>name : Symbol(name, Decl(aiDiagnosticsTypeCentralization.ts, 6, 29))

// Expect AI diagnostic with:
// - why: explanation of type hygiene and centralization
// - suggestion: move type to central registry
// - highConfidenceFix: true (for move/refactor)

