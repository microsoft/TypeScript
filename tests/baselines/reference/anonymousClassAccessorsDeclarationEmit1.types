//// [tests/cases/conformance/declarationEmit/anonymousClassAccessorsDeclarationEmit1.ts] ////

=== anonymousClassAccessorsDeclarationEmit1.ts ===
export abstract class Base {
>Base : Base
>     : ^^^^

  accessor a = 1;
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
}

export function middle(Super = Base) {
>middle : (Super?: typeof Base) => typeof Middle
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Super : typeof Base
>      : ^^^^^^^^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^

  abstract class Middle extends Super {}
>Middle : Middle
>       : ^^^^^^
>Super : Base
>      : ^^^^

  return Middle;
>Middle : typeof Middle
>       : ^^^^^^^^^^^^^
}

class A {
>A : A
>  : ^

  constructor(...args: any[]) {}
>args : any[]
>     : ^^^^^
}

export function Mixin<T extends typeof A>(Super: T) {
>Mixin : <T extends typeof A>(Super: T) => { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
>      : ^ ^^^^^^^^^        ^^     ^^ ^^^^^^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
>Super : T
>      : ^

  return class B extends Super {
>class B extends Super {    get myName(): string {      return "B";    }    set myName(arg: string) {}  } : { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
>                                                                                                         : ^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>B : { new (...args: any[]): B; prototype: Mixin<any>.B; } & T
>  : ^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Super : A
>      : ^

    get myName(): string {
>myName : string
>       : ^^^^^^

      return "B";
>"B" : "B"
>    : ^^^
    }
    set myName(arg: string) {}
>myName : string
>       : ^^^^^^
>arg : string
>    : ^^^^^^

  };
}

