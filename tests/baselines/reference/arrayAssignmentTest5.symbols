//// [tests/cases/compiler/arrayAssignmentTest5.ts] ////

=== arrayAssignmentTest5.ts ===
namespace Test {
>Test : Symbol(Test, Decl(arrayAssignmentTest5.ts, 0, 0))

    interface IState {
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
    }
    interface IToken {
>IToken : Symbol(IToken, Decl(arrayAssignmentTest5.ts, 2, 5))

        startIndex: number;
>startIndex : Symbol(IToken.startIndex, Decl(arrayAssignmentTest5.ts, 3, 22))
    }
    interface IStateToken extends IToken {
>IStateToken : Symbol(IStateToken, Decl(arrayAssignmentTest5.ts, 5, 5))
>IToken : Symbol(IToken, Decl(arrayAssignmentTest5.ts, 2, 5))

        state: IState;
>state : Symbol(IStateToken.state, Decl(arrayAssignmentTest5.ts, 6, 42))
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
    }
    interface ILineTokens {
>ILineTokens : Symbol(ILineTokens, Decl(arrayAssignmentTest5.ts, 8, 5))

        tokens: IToken[];
>tokens : Symbol(ILineTokens.tokens, Decl(arrayAssignmentTest5.ts, 9, 27))
>IToken : Symbol(IToken, Decl(arrayAssignmentTest5.ts, 2, 5))

        endState: IState;
>endState : Symbol(ILineTokens.endState, Decl(arrayAssignmentTest5.ts, 10, 25))
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
    }
    interface IAction {
>IAction : Symbol(IAction, Decl(arrayAssignmentTest5.ts, 12, 5))
    }
    interface IMode {
>IMode : Symbol(IMode, Decl(arrayAssignmentTest5.ts, 14, 5))

        onEnter(line:string, state:IState, offset:number):IAction;
>onEnter : Symbol(IMode.onEnter, Decl(arrayAssignmentTest5.ts, 15, 21))
>line : Symbol(line, Decl(arrayAssignmentTest5.ts, 16, 16))
>state : Symbol(state, Decl(arrayAssignmentTest5.ts, 16, 28))
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
>offset : Symbol(offset, Decl(arrayAssignmentTest5.ts, 16, 42))
>IAction : Symbol(IAction, Decl(arrayAssignmentTest5.ts, 12, 5))

        tokenize(line:string, state:IState, includeStates:boolean):ILineTokens;
>tokenize : Symbol(IMode.tokenize, Decl(arrayAssignmentTest5.ts, 16, 66))
>line : Symbol(line, Decl(arrayAssignmentTest5.ts, 17, 17))
>state : Symbol(state, Decl(arrayAssignmentTest5.ts, 17, 29))
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
>includeStates : Symbol(includeStates, Decl(arrayAssignmentTest5.ts, 17, 43))
>ILineTokens : Symbol(ILineTokens, Decl(arrayAssignmentTest5.ts, 8, 5))
    }
    export class Bug implements IMode {
>Bug : Symbol(Bug, Decl(arrayAssignmentTest5.ts, 18, 5))
>IMode : Symbol(IMode, Decl(arrayAssignmentTest5.ts, 14, 5))

        public onEnter(line:string, state:IState, offset:number):IAction {
>onEnter : Symbol(Bug.onEnter, Decl(arrayAssignmentTest5.ts, 19, 39))
>line : Symbol(line, Decl(arrayAssignmentTest5.ts, 20, 23))
>state : Symbol(state, Decl(arrayAssignmentTest5.ts, 20, 35))
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
>offset : Symbol(offset, Decl(arrayAssignmentTest5.ts, 20, 49))
>IAction : Symbol(IAction, Decl(arrayAssignmentTest5.ts, 12, 5))

            var lineTokens:ILineTokens= this.tokenize(line, state, true);
>lineTokens : Symbol(lineTokens, Decl(arrayAssignmentTest5.ts, 21, 15))
>ILineTokens : Symbol(ILineTokens, Decl(arrayAssignmentTest5.ts, 8, 5))
>this.tokenize : Symbol(Bug.tokenize, Decl(arrayAssignmentTest5.ts, 26, 9))
>this : Symbol(Bug, Decl(arrayAssignmentTest5.ts, 18, 5))
>tokenize : Symbol(Bug.tokenize, Decl(arrayAssignmentTest5.ts, 26, 9))
>line : Symbol(line, Decl(arrayAssignmentTest5.ts, 20, 23))
>state : Symbol(state, Decl(arrayAssignmentTest5.ts, 20, 35))

            var tokens:IStateToken[]= lineTokens.tokens;
>tokens : Symbol(tokens, Decl(arrayAssignmentTest5.ts, 22, 15))
>IStateToken : Symbol(IStateToken, Decl(arrayAssignmentTest5.ts, 5, 5))
>lineTokens.tokens : Symbol(ILineTokens.tokens, Decl(arrayAssignmentTest5.ts, 9, 27))
>lineTokens : Symbol(lineTokens, Decl(arrayAssignmentTest5.ts, 21, 15))
>tokens : Symbol(ILineTokens.tokens, Decl(arrayAssignmentTest5.ts, 9, 27))

            if (tokens.length === 0) {
>tokens.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
>tokens : Symbol(tokens, Decl(arrayAssignmentTest5.ts, 22, 15))
>length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))

                return this.onEnter(line, tokens, offset);        // <== this should produce an error since onEnter can not be called with (string, IStateToken[], offset)
>this.onEnter : Symbol(Bug.onEnter, Decl(arrayAssignmentTest5.ts, 19, 39))
>this : Symbol(Bug, Decl(arrayAssignmentTest5.ts, 18, 5))
>onEnter : Symbol(Bug.onEnter, Decl(arrayAssignmentTest5.ts, 19, 39))
>line : Symbol(line, Decl(arrayAssignmentTest5.ts, 20, 23))
>tokens : Symbol(tokens, Decl(arrayAssignmentTest5.ts, 22, 15))
>offset : Symbol(offset, Decl(arrayAssignmentTest5.ts, 20, 49))
            }
        }
        public tokenize(line:string, state:IState, includeStates:boolean):ILineTokens {
>tokenize : Symbol(Bug.tokenize, Decl(arrayAssignmentTest5.ts, 26, 9))
>line : Symbol(line, Decl(arrayAssignmentTest5.ts, 27, 24))
>state : Symbol(state, Decl(arrayAssignmentTest5.ts, 27, 36))
>IState : Symbol(IState, Decl(arrayAssignmentTest5.ts, 0, 16))
>includeStates : Symbol(includeStates, Decl(arrayAssignmentTest5.ts, 27, 50))
>ILineTokens : Symbol(ILineTokens, Decl(arrayAssignmentTest5.ts, 8, 5))

            return null;
        }
    }
}

