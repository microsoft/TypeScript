//// [tests/cases/compiler/arrayAugment.ts] ////

=== arrayAugment.ts ===
interface Array<T> {
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 1 more)
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(arrayAugment.ts, 0, 16))

    split: (parts: number) => T[][];
>split : Symbol(Array.split, Decl(arrayAugment.ts, 0, 20))
>parts : Symbol(parts, Decl(arrayAugment.ts, 1, 12))
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(arrayAugment.ts, 0, 16))
}

var x = [''];
>x : Symbol(x, Decl(arrayAugment.ts, 4, 3))

var y = x.split(4);
>y : Symbol(y, Decl(arrayAugment.ts, 5, 3), Decl(arrayAugment.ts, 6, 3))
>x.split : Symbol(Array.split, Decl(arrayAugment.ts, 0, 20))
>x : Symbol(x, Decl(arrayAugment.ts, 4, 3))
>split : Symbol(Array.split, Decl(arrayAugment.ts, 0, 20))

var y: string[][]; // Expect no error here
>y : Symbol(y, Decl(arrayAugment.ts, 5, 3), Decl(arrayAugment.ts, 6, 3))

