//// [tests/cases/conformance/expressions/arrayLiterals/arrayLiteralInference.ts] ////

=== arrayLiteralInference.ts ===
// Repro from #31204

export enum AppType {
>AppType : AppType
>        : ^^^^^^^

    HeaderDetail = 'HeaderDetail',
>HeaderDetail : AppType.HeaderDetail
>             : ^^^^^^^^^^^^^^^^^^^^
>'HeaderDetail' : "HeaderDetail"
>               : ^^^^^^^^^^^^^^

    HeaderMultiDetail = 'HeaderMultiDetail',
>HeaderMultiDetail : AppType.HeaderMultiDetail
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>'HeaderMultiDetail' : "HeaderMultiDetail"
>                    : ^^^^^^^^^^^^^^^^^^^

    AdvancedList = 'AdvancedList',
>AdvancedList : AppType.AdvancedList
>             : ^^^^^^^^^^^^^^^^^^^^
>'AdvancedList' : "AdvancedList"
>               : ^^^^^^^^^^^^^^

    Standard = 'Standard',
>Standard : AppType.Standard
>         : ^^^^^^^^^^^^^^^^
>'Standard' : "Standard"
>           : ^^^^^^^^^^

    Relationship = 'Relationship',
>Relationship : AppType.Relationship
>             : ^^^^^^^^^^^^^^^^^^^^
>'Relationship' : "Relationship"
>               : ^^^^^^^^^^^^^^

    Report = 'Report',
>Report : AppType.Report
>       : ^^^^^^^^^^^^^^
>'Report' : "Report"
>         : ^^^^^^^^

    Composite = 'Composite',
>Composite : AppType.Composite
>          : ^^^^^^^^^^^^^^^^^
>'Composite' : "Composite"
>            : ^^^^^^^^^^^

    ListOnly = 'ListOnly',
>ListOnly : AppType.ListOnly
>         : ^^^^^^^^^^^^^^^^
>'ListOnly' : "ListOnly"
>           : ^^^^^^^^^^

    ModuleSettings = 'ModuleSettings'
>ModuleSettings : AppType.ModuleSettings
>               : ^^^^^^^^^^^^^^^^^^^^^^
>'ModuleSettings' : "ModuleSettings"
>                 : ^^^^^^^^^^^^^^^^
}

export enum AppStyle {
>AppStyle : AppStyle
>         : ^^^^^^^^

    Tree,
>Tree : AppStyle.Tree
>     : ^^^^^^^^^^^^^

    TreeEntity,
>TreeEntity : AppStyle.TreeEntity
>           : ^^^^^^^^^^^^^^^^^^^

    Standard,
>Standard : AppStyle.Standard
>         : ^^^^^^^^^^^^^^^^^

    MiniApp,
>MiniApp : AppStyle.MiniApp
>        : ^^^^^^^^^^^^^^^^

    PivotTable
>PivotTable : AppStyle.PivotTable
>           : ^^^^^^^^^^^^^^^^^^^
}

const appTypeStylesWithError: Map<AppType, Array<AppStyle>> = new Map([
>appTypeStylesWithError : Map<AppType, AppStyle[]>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>new Map([    [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],    [AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]],    [AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]]]) : Map<AppType.AdvancedList | AppType.Standard | AppType.Relationship, (AppStyle.Standard | AppStyle.MiniApp)[] | (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]>
>                                                                                                                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Map : MapConstructor
>    : ^^^^^^^^^^^^^^
>[    [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],    [AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]],    [AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]]] : ([AppType.Standard, (AppStyle.Standard | AppStyle.MiniApp)[]] | [AppType.Relationship, (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]] | [AppType.AdvancedList, (AppStyle.Standard | AppStyle.MiniApp)[]])[]
>                                                                                                                                                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],
>[AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]] : [AppType.Standard, (AppStyle.Standard | AppStyle.MiniApp)[]]
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AppType.Standard : AppType.Standard
>                 : ^^^^^^^^^^^^^^^^
>AppType : typeof AppType
>        : ^^^^^^^^^^^^^^
>Standard : AppType.Standard
>         : ^^^^^^^^^^^^^^^^
>[AppStyle.Standard, AppStyle.MiniApp] : (AppStyle.Standard | AppStyle.MiniApp)[]
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AppStyle.Standard : AppStyle.Standard
>                  : ^^^^^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>Standard : AppStyle.Standard
>         : ^^^^^^^^^^^^^^^^^
>AppStyle.MiniApp : AppStyle.MiniApp
>                 : ^^^^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>MiniApp : AppStyle.MiniApp
>        : ^^^^^^^^^^^^^^^^

    [AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]],
>[AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]] : [AppType.Relationship, (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]]
>                                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AppType.Relationship : AppType.Relationship
>                     : ^^^^^^^^^^^^^^^^^^^^
>AppType : typeof AppType
>        : ^^^^^^^^^^^^^^
>Relationship : AppType.Relationship
>             : ^^^^^^^^^^^^^^^^^^^^
>[AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity] : (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AppStyle.Standard : AppStyle.Standard
>                  : ^^^^^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>Standard : AppStyle.Standard
>         : ^^^^^^^^^^^^^^^^^
>AppStyle.Tree : AppStyle.Tree
>              : ^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>Tree : AppStyle.Tree
>     : ^^^^^^^^^^^^^
>AppStyle.TreeEntity : AppStyle.TreeEntity
>                    : ^^^^^^^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>TreeEntity : AppStyle.TreeEntity
>           : ^^^^^^^^^^^^^^^^^^^

    [AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]]
>[AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]] : [AppType.AdvancedList, (AppStyle.Standard | AppStyle.MiniApp)[]]
>                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AppType.AdvancedList : AppType.AdvancedList
>                     : ^^^^^^^^^^^^^^^^^^^^
>AppType : typeof AppType
>        : ^^^^^^^^^^^^^^
>AdvancedList : AppType.AdvancedList
>             : ^^^^^^^^^^^^^^^^^^^^
>[AppStyle.Standard, AppStyle.MiniApp] : (AppStyle.Standard | AppStyle.MiniApp)[]
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>AppStyle.Standard : AppStyle.Standard
>                  : ^^^^^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>Standard : AppStyle.Standard
>         : ^^^^^^^^^^^^^^^^^
>AppStyle.MiniApp : AppStyle.MiniApp
>                 : ^^^^^^^^^^^^^^^^
>AppStyle : typeof AppStyle
>         : ^^^^^^^^^^^^^^^
>MiniApp : AppStyle.MiniApp
>        : ^^^^^^^^^^^^^^^^

]);

// Repro from #31204

declare function foo<T>(...args: T[]): T[];
>foo : <T>(...args: T[]) => T[]
>    : ^ ^^^^^    ^^   ^^^^^   
>args : T[]
>     : ^^^

let b1: { x: boolean }[] = foo({ x: true }, { x: false });
>b1 : { x: boolean; }[]
>   : ^^^^^       ^^^^^
>x : boolean
>  : ^^^^^^^
>foo({ x: true }, { x: false }) : ({ x: true; } | { x: false; })[]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T>(...args: T[]) => T[]
>    : ^ ^^^^^    ^^   ^^^^^   
>{ x: true } : { x: true; }
>            : ^^^^^^^^^^^^
>x : true
>  : ^^^^
>true : true
>     : ^^^^
>{ x: false } : { x: false; }
>             : ^^^^^^^^^^^^^
>x : false
>  : ^^^^^
>false : false
>      : ^^^^^

let b2: boolean[][] = foo([true], [false]);
>b2 : boolean[][]
>   : ^^^^^^^^^^^
>foo([true], [false]) : (true[] | false[])[]
>                     : ^^^^^^^^^^^^^^^^^^^^
>foo : <T>(...args: T[]) => T[]
>    : ^ ^^^^^    ^^   ^^^^^   
>[true] : true[]
>       : ^^^^^^
>true : true
>     : ^^^^
>[false] : false[]
>        : ^^^^^^^
>false : false
>      : ^^^^^

