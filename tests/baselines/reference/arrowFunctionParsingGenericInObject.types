//// [tests/cases/compiler/arrowFunctionParsingGenericInObject.ts] ////

=== arrowFunctionParsingGenericInObject.ts ===
const fn1 = () => ({
>fn1 : () => { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>    : ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => ({    test: <T = undefined>(value: T): T => value,    extraValue: () => {},}) : () => { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>                                                                                    : ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>({    test: <T = undefined>(value: T): T => value,    extraValue: () => {},}) : { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>                                                                              : ^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    test: <T = undefined>(value: T): T => value,    extraValue: () => {},} : { test: <T = undefined>(value: T) => T; extraValue: () => void; }
>                                                                            : ^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    test: <T = undefined>(value: T): T => value,
>test : <T = undefined>(value: T) => T
>     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^ 
><T = undefined>(value: T): T => value : <T = undefined>(value: T) => T
>                                      : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^ 
>value : T
>      : ^
>value : T
>      : ^

    extraValue: () => {},
>extraValue : () => void
>           : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

})

const fn1async = () => ({
>fn1async : () => { test: <T = undefined>(value: T) => Promise<T>; extraValue: () => void; }
>         : ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => ({    test: async <T = undefined>(value: T): Promise<T> => value,    extraValue: () => {},}) : () => { test: <T = undefined>(value: T) => Promise<T>; extraValue: () => void; }
>                                                                                                   : ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>({    test: async <T = undefined>(value: T): Promise<T> => value,    extraValue: () => {},}) : { test: <T = undefined>(value: T) => Promise<T>; extraValue: () => void; }
>                                                                                             : ^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    test: async <T = undefined>(value: T): Promise<T> => value,    extraValue: () => {},} : { test: <T = undefined>(value: T) => Promise<T>; extraValue: () => void; }
>                                                                                           : ^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    test: async <T = undefined>(value: T): Promise<T> => value,
>test : <T = undefined>(value: T) => Promise<T>
>     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^          
>async <T = undefined>(value: T): Promise<T> => value : <T = undefined>(value: T) => Promise<T>
>                                                     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^          
>value : T
>      : ^
>value : T
>      : ^

    extraValue: () => {},
>extraValue : () => void
>           : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

})

const fn2 = () => ({
>fn2 : () => { test: <T>(value: T) => T; extraValue: () => void; }
>    : ^^^^^^^^^^^^^^^ ^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => ({    test: <T>(value: T): T => value,    extraValue: () => {},}) : () => { test: <T>(value: T) => T; extraValue: () => void; }
>                                                                        : ^^^^^^^^^^^^^^^ ^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>({    test: <T>(value: T): T => value,    extraValue: () => {},}) : { test: <T>(value: T) => T; extraValue: () => void; }
>                                                                  : ^^^^^^^^^ ^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    test: <T>(value: T): T => value,    extraValue: () => {},} : { test: <T>(value: T) => T; extraValue: () => void; }
>                                                                : ^^^^^^^^^ ^^     ^^ ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    test: <T>(value: T): T => value,
>test : <T>(value: T) => T
>     : ^ ^^     ^^ ^^^^^ 
><T>(value: T): T => value : <T>(value: T) => T
>                          : ^ ^^     ^^ ^^^^^ 
>value : T
>      : ^
>value : T
>      : ^

    extraValue: () => {},
>extraValue : () => void
>           : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

})

const fn2async = () => ({
>fn2async : () => { test: <T>(value: T) => Promise<T>; extraValue: () => void; }
>         : ^^^^^^^^^^^^^^^ ^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => ({    test: async <T>(value: T): Promise<T> => value,    extraValue: () => {},}) : () => { test: <T>(value: T) => Promise<T>; extraValue: () => void; }
>                                                                                       : ^^^^^^^^^^^^^^^ ^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>({    test: async <T>(value: T): Promise<T> => value,    extraValue: () => {},}) : { test: <T>(value: T) => Promise<T>; extraValue: () => void; }
>                                                                                 : ^^^^^^^^^ ^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    test: async <T>(value: T): Promise<T> => value,    extraValue: () => {},} : { test: <T>(value: T) => Promise<T>; extraValue: () => void; }
>                                                                               : ^^^^^^^^^ ^^     ^^ ^^^^^          ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    test: async <T>(value: T): Promise<T> => value,
>test : <T>(value: T) => Promise<T>
>     : ^ ^^     ^^ ^^^^^          
>async <T>(value: T): Promise<T> => value : <T>(value: T) => Promise<T>
>                                         : ^ ^^     ^^ ^^^^^          
>value : T
>      : ^
>value : T
>      : ^

    extraValue: () => {},
>extraValue : () => void
>           : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

})

const fn3 = () => ({
>fn3 : () => { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^
>() => ({    extraValue: () => {},    test: <T = undefined>(value: T): T => value,}) : () => { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>                                                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^
>({    extraValue: () => {},    test: <T = undefined>(value: T): T => value,}) : { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^
>{    extraValue: () => {},    test: <T = undefined>(value: T): T => value,} : { extraValue: () => void; test: <T = undefined>(value: T) => T; }
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^

    extraValue: () => {},
>extraValue : () => void
>           : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

    test: <T = undefined>(value: T): T => value,
>test : <T = undefined>(value: T) => T
>     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^ 
><T = undefined>(value: T): T => value : <T = undefined>(value: T) => T
>                                      : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^ 
>value : T
>      : ^
>value : T
>      : ^

})

const fn3async = () => ({
>fn3async : () => { extraValue: () => void; test: <T = undefined>(value: T) => Promise<T>; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^
>() => ({    extraValue: () => {},    test: async <T = undefined>(value: T): Promise<T> => value,}) : () => { extraValue: () => void; test: <T = undefined>(value: T) => Promise<T>; }
>                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^
>({    extraValue: () => {},    test: async <T = undefined>(value: T): Promise<T> => value,}) : { extraValue: () => void; test: <T = undefined>(value: T) => Promise<T>; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^
>{    extraValue: () => {},    test: async <T = undefined>(value: T): Promise<T> => value,} : { extraValue: () => void; test: <T = undefined>(value: T) => Promise<T>; }
>                                                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^

    extraValue: () => {},
>extraValue : () => void
>           : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

    test: async <T = undefined>(value: T): Promise<T> => value,
>test : <T = undefined>(value: T) => Promise<T>
>     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^          
>async <T = undefined>(value: T): Promise<T> => value : <T = undefined>(value: T) => Promise<T>
>                                                     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^          
>value : T
>      : ^
>value : T
>      : ^

})

const fn4 = () => ({
>fn4 : () => { extraValue: string; test: <T = undefined>(value: T) => T; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^
>() => ({    extraValue: '',    test: <T = undefined>(value: T): T => value,}) : () => { extraValue: string; test: <T = undefined>(value: T) => T; }
>                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^
>({    extraValue: '',    test: <T = undefined>(value: T): T => value,}) : { extraValue: string; test: <T = undefined>(value: T) => T; }
>                                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^
>{    extraValue: '',    test: <T = undefined>(value: T): T => value,} : { extraValue: string; test: <T = undefined>(value: T) => T; }
>                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^ ^^^

    extraValue: '',
>extraValue : string
>           : ^^^^^^
>'' : ""
>   : ^^

    test: <T = undefined>(value: T): T => value,
>test : <T = undefined>(value: T) => T
>     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^ 
><T = undefined>(value: T): T => value : <T = undefined>(value: T) => T
>                                      : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^ 
>value : T
>      : ^
>value : T
>      : ^

})

const fn4async = () => ({
>fn4async : () => { extraValue: string; test: <T = undefined>(value: T) => Promise<T>; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^
>() => ({    extraValue: '',    test: async <T = undefined>(value: T): Promise<T> => value,}) : () => { extraValue: string; test: <T = undefined>(value: T) => Promise<T>; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^
>({    extraValue: '',    test: async <T = undefined>(value: T): Promise<T> => value,}) : { extraValue: string; test: <T = undefined>(value: T) => Promise<T>; }
>                                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^
>{    extraValue: '',    test: async <T = undefined>(value: T): Promise<T> => value,} : { extraValue: string; test: <T = undefined>(value: T) => Promise<T>; }
>                                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^     ^^ ^^^^^          ^^^

    extraValue: '',
>extraValue : string
>           : ^^^^^^
>'' : ""
>   : ^^

    test: async <T = undefined>(value: T): Promise<T> => value,
>test : <T = undefined>(value: T) => Promise<T>
>     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^          
>async <T = undefined>(value: T): Promise<T> => value : <T = undefined>(value: T) => Promise<T>
>                                                     : ^ ^^^^^^^^^^^^^^     ^^ ^^^^^          
>value : T
>      : ^
>value : T
>      : ^

})

