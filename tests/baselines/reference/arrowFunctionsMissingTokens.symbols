//// [tests/cases/compiler/arrowFunctionsMissingTokens.ts] ////

=== arrowFunctionsMissingTokens.ts ===
namespace missingArrowsWithCurly {
>missingArrowsWithCurly : Symbol(missingArrowsWithCurly, Decl(arrowFunctionsMissingTokens.ts, 0, 0))

    var a = () { };
>a : Symbol(a, Decl(arrowFunctionsMissingTokens.ts, 1, 7))

    var b = (): void { }
>b : Symbol(b, Decl(arrowFunctionsMissingTokens.ts, 3, 7))

    var c = (x) { };
>c : Symbol(c, Decl(arrowFunctionsMissingTokens.ts, 5, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 5, 13))

    var d = (x: number, y: string) { };
>d : Symbol(d, Decl(arrowFunctionsMissingTokens.ts, 7, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 7, 13))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 7, 23))

    var e = (x: number, y: string): void { };
>e : Symbol(e, Decl(arrowFunctionsMissingTokens.ts, 9, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 9, 13))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 9, 23))
}

namespace missingCurliesWithArrow {
>missingCurliesWithArrow : Symbol(missingCurliesWithArrow, Decl(arrowFunctionsMissingTokens.ts, 10, 1))

    namespace withStatement {
>withStatement : Symbol(withStatement, Decl(arrowFunctionsMissingTokens.ts, 12, 35))

        var a = () => var k = 10;};
>a : Symbol(a, Decl(arrowFunctionsMissingTokens.ts, 14, 11))
>k : Symbol(k, Decl(arrowFunctionsMissingTokens.ts, 14, 25))

        var b = (): void => var k = 10;}
>b : Symbol(b, Decl(arrowFunctionsMissingTokens.ts, 16, 11))
>k : Symbol(k, Decl(arrowFunctionsMissingTokens.ts, 16, 31))

        var c = (x) => var k = 10;};
>c : Symbol(c, Decl(arrowFunctionsMissingTokens.ts, 18, 11))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 18, 17))
>k : Symbol(k, Decl(arrowFunctionsMissingTokens.ts, 18, 26))

        var d = (x: number, y: string) => var k = 10;};
>d : Symbol(d, Decl(arrowFunctionsMissingTokens.ts, 20, 11))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 20, 17))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 20, 27))
>k : Symbol(k, Decl(arrowFunctionsMissingTokens.ts, 20, 45))

        var e = (x: number, y: string): void => var k = 10;};
>e : Symbol(e, Decl(arrowFunctionsMissingTokens.ts, 22, 11))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 22, 17))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 22, 27))
>k : Symbol(k, Decl(arrowFunctionsMissingTokens.ts, 22, 51))

        var f = () => var k = 10;}
>f : Symbol(f, Decl(arrowFunctionsMissingTokens.ts, 24, 11))
>k : Symbol(k, Decl(arrowFunctionsMissingTokens.ts, 24, 25))
    }

    namespace withoutStatement {
>withoutStatement : Symbol(withoutStatement, Decl(arrowFunctionsMissingTokens.ts, 25, 5))

        var a = () => };
>a : Symbol(a, Decl(arrowFunctionsMissingTokens.ts, 28, 11))

        var b = (): void => }
>b : Symbol(b, Decl(arrowFunctionsMissingTokens.ts, 30, 11))

        var c = (x) => };
>c : Symbol(c, Decl(arrowFunctionsMissingTokens.ts, 32, 11))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 32, 17))

        var d = (x: number, y: string) => };
>d : Symbol(d, Decl(arrowFunctionsMissingTokens.ts, 34, 11))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 34, 17))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 34, 27))

        var e = (x: number, y: string): void => };
>e : Symbol(e, Decl(arrowFunctionsMissingTokens.ts, 36, 11))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 36, 17))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 36, 27))

        var f = () => }
>f : Symbol(f, Decl(arrowFunctionsMissingTokens.ts, 38, 11))
    }
}

namespace ce_nEst_pas_une_arrow_function {
>ce_nEst_pas_une_arrow_function : Symbol(ce_nEst_pas_une_arrow_function, Decl(arrowFunctionsMissingTokens.ts, 40, 1))

    var a = ();
>a : Symbol(a, Decl(arrowFunctionsMissingTokens.ts, 43, 7))

    var b = (): void;
>b : Symbol(b, Decl(arrowFunctionsMissingTokens.ts, 45, 7))

    var c = (x);
>c : Symbol(c, Decl(arrowFunctionsMissingTokens.ts, 47, 7))

    var d = (x: number, y: string);
>d : Symbol(d, Decl(arrowFunctionsMissingTokens.ts, 49, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 49, 13))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 49, 23))

    var e = (x: number, y: string): void;
>e : Symbol(e, Decl(arrowFunctionsMissingTokens.ts, 51, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 51, 13))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 51, 23))
}

namespace okay {
>okay : Symbol(okay, Decl(arrowFunctionsMissingTokens.ts, 52, 1))

    var a = () => { };
>a : Symbol(a, Decl(arrowFunctionsMissingTokens.ts, 55, 7))

    var b = (): void => { }
>b : Symbol(b, Decl(arrowFunctionsMissingTokens.ts, 57, 7))

    var c = (x) => { };
>c : Symbol(c, Decl(arrowFunctionsMissingTokens.ts, 59, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 59, 13))

    var d = (x: number, y: string) => { };
>d : Symbol(d, Decl(arrowFunctionsMissingTokens.ts, 61, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 61, 13))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 61, 23))

    var e = (x: number, y: string): void => { };
>e : Symbol(e, Decl(arrowFunctionsMissingTokens.ts, 63, 7))
>x : Symbol(x, Decl(arrowFunctionsMissingTokens.ts, 63, 13))
>y : Symbol(y, Decl(arrowFunctionsMissingTokens.ts, 63, 23))
}
