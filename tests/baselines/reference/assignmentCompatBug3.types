//// [tests/cases/compiler/assignmentCompatBug3.ts] ////

=== assignmentCompatBug3.ts ===
function makePoint(x: number, y: number) {
>makePoint : (x: number, y: number) => { readonly x: number; readonly y: number; dist: () => number; }
>          : ^ ^^      ^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    return {
>{        get x() { return x;}, // shouldn't be "void"        get y() { return y;}, // shouldn't be "void"        //x: "yo",        //y: "boo",        dist: function () {			return Math.sqrt(x*x+y*y); // shouldn't be picking up "x" and "y" from the object lit		}	} : { readonly x: number; readonly y: number; dist: () => number; }
>                                                                                                                                                                                                                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        get x() { return x;}, // shouldn't be "void"
>x : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

        get y() { return y;}, // shouldn't be "void"
>y : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

        //x: "yo",
        //y: "boo",
        dist: function () {
>dist : () => number
>     : ^^^^^^^^^^^^
>function () {			return Math.sqrt(x*x+y*y); // shouldn't be picking up "x" and "y" from the object lit		} : () => number
>                                                                                                         : ^^^^^^^^^^^^

			return Math.sqrt(x*x+y*y); // shouldn't be picking up "x" and "y" from the object lit
>Math.sqrt(x*x+y*y) : number
>                   : ^^^^^^
>Math.sqrt : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>sqrt : (x: number) => number
>     : ^ ^^      ^^^^^      
>x*x+y*y : number
>        : ^^^^^^
>x*x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>x : number
>  : ^^^^^^
>y*y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
		}
	}
}

class C {
>C : C
>  : ^

    get x() {
>x : number
>  : ^^^^^^

        return 0;
>0 : 0
>  : ^
    }
}

function foo(test: string) { }
>foo : (test: string) => void
>    : ^    ^^      ^^^^^^^^^
>test : string
>     : ^^^^^^

var x: any;
>x : any

var y: any;
>y : any

foo(x);
>foo(x) : void
>       : ^^^^
>foo : (test: string) => void
>    : ^    ^^      ^^^^^^^^^
>x : any

foo(x + y);
>foo(x + y) : void
>           : ^^^^
>foo : (test: string) => void
>    : ^    ^^      ^^^^^^^^^
>x + y : any
>x : any
>y : any

