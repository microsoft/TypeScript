//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures4.ts] ////

=== assignmentCompatWithCallSignatures4.ts ===
// These are mostly permitted with the current loose rules. All ok unless otherwise noted.

module Errors {
>Errors : typeof Errors
>       : ^^^^^^^^^^^^^

    class Base { foo: string; }
>Base : Base
>     : ^^^^
>foo : string
>    : ^^^^^^

    class Derived extends Base { bar: string; }
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^
>bar : string
>    : ^^^^^^

    class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>         : ^^^^^^^^
>Derived : Derived
>        : ^^^^^^^
>baz : string
>    : ^^^^^^

    class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>             : ^^^^^^^^^^^^
>Base : Base
>     : ^^^^
>bing : string
>     : ^^^^^^

    module WithNonGenericSignaturesInBaseType {
>WithNonGenericSignaturesInBaseType : typeof WithNonGenericSignaturesInBaseType
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        // target type with non-generic call signatures
        var a2: (x: number) => string[];
>a2 : (x: number) => string[]
>   : ^ ^^      ^^^^^        
>x : number
>  : ^^^^^^

        var a7: (x: (arg: Base) => Derived) => (r: Base) => Derived2;
>a7 : (x: (arg: Base) => Derived) => (r: Base) => Derived2
>   : ^ ^^                      ^^^^^                     
>x : (arg: Base) => Derived
>  : ^   ^^    ^^^^^       
>arg : Base
>    : ^^^^
>r : Base
>  : ^^^^

        var a8: (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
>a8 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>   : ^ ^^                      ^^ ^^                       ^^^^^                    
>x : (arg: Base) => Derived
>  : ^   ^^    ^^^^^       
>arg : Base
>    : ^^^^
>y : (arg2: Base) => Derived
>  : ^    ^^    ^^^^^       
>arg2 : Base
>     : ^^^^
>r : Base
>  : ^^^^

        var a10: (...x: Base[]) => Base;
>a10 : (...x: Base[]) => Base
>    : ^^^^ ^^      ^^^^^    
>x : Base[]
>  : ^^^^^^

        var a11: (x: { foo: string }, y: { foo: string; bar: string }) => Base;
>a11 : (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>    : ^ ^^                ^^ ^^                             ^^^^^    
>x : { foo: string; }
>  : ^^^^^^^      ^^^
>foo : string
>    : ^^^^^^
>y : { foo: string; bar: string; }
>  : ^^^^^^^      ^^^^^^^      ^^^
>foo : string
>    : ^^^^^^
>bar : string
>    : ^^^^^^

        var a12: (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
>a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>    : ^ ^^           ^^ ^^               ^^^^^              
>x : Base[]
>  : ^^^^^^
>y : Derived2[]
>  : ^^^^^^^^^^

        var a14: {
>a14 : { (x: number): number[]; (x: string): string[]; }
>    : ^^^ ^^      ^^^        ^^^ ^^      ^^^        ^^^

                (x: number): number[];
>x : number
>  : ^^^^^^

                (x: string): string[];
>x : string
>  : ^^^^^^

            };
        var a15: (x: { a: string; b: number }) => number;
>a15 : (x: { a: string; b: number; }) => number
>    : ^ ^^                         ^^^^^      
>x : { a: string; b: number; }
>  : ^^^^^      ^^^^^      ^^^
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^

        var a16: {
>a16 : { (x: { (a: number): number; (a?: number): number; }): number[]; (x: { (a: boolean): boolean; (a?: boolean): boolean; }): boolean[]; }
>    : ^^^ ^^                                              ^^^        ^^^ ^^                                                  ^^^         ^^^

                (x: {
>x : { (a: number): number; (a?: number): number; }
>  : ^^^ ^^      ^^^      ^^^ ^^^      ^^^      ^^^

                    (a: number): number;
>a : number
>  : ^^^^^^

                    (a?: number): number;
>a : number
>  : ^^^^^^

                }): number[];
                (x: {
>x : { (a: boolean): boolean; (a?: boolean): boolean; }
>  : ^^^ ^^       ^^^       ^^^ ^^^       ^^^       ^^^

                    (a: boolean): boolean;
>a : boolean
>  : ^^^^^^^

                    (a?: boolean): boolean;
>a : boolean
>  : ^^^^^^^

                }): boolean[];
            };
        var a17: {
>a17 : { (x: { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[]; }
>    : ^^^ ^^                                                            ^^^     ^^^ ^^                                                             ^^^     ^^^

                (x: {
>x : { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }
>  : ^^^ ^^^^^^^^^       ^^ ^^ ^^^ ^^^ ^^^^^^^^^    ^^ ^^ ^^^ ^^^

                    <T extends Derived>(a: T): T;
>a : T
>  : ^

                    <T extends Base>(a: T): T;
>a : T
>  : ^

                }): any[];
                (x: {
>x : { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }
>  : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^    ^^ ^^ ^^^ ^^^

                    <T extends Derived2>(a: T): T;
>a : T
>  : ^

                    <T extends Base>(a: T): T;
>a : T
>  : ^

                }): any[];
            };

        var b2: <T, U>(x: T) => U[]; 
>b2 : <T, U>(x: T) => U[]
>   : ^ ^^ ^^ ^^ ^^^^^   
>x : T
>  : ^

        a2 = b2;
>a2 = b2 : <T, U>(x: T) => U[]
>        : ^ ^^ ^^ ^^ ^^^^^   
>a2 : (x: number) => string[]
>   : ^ ^^      ^^^^^        
>b2 : <T, U>(x: T) => U[]
>   : ^ ^^ ^^ ^^ ^^^^^   

        b2 = a2;
>b2 = a2 : (x: number) => string[]
>        : ^ ^^      ^^^^^        
>b2 : <T, U>(x: T) => U[]
>   : ^ ^^ ^^ ^^ ^^^^^   
>a2 : (x: number) => string[]
>   : ^ ^^      ^^^^^        

        var b7: <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
>b7 : <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           
>x : (arg: T) => U
>  : ^   ^^ ^^^^^ 
>arg : T
>    : ^
>r : T
>  : ^

        a7 = b7;
>a7 = b7 : <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>        : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           
>a7 : (x: (arg: Base) => Derived) => (r: Base) => Derived2
>   : ^ ^^                      ^^^^^                     
>b7 : <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           

        b7 = a7;
>b7 = a7 : (x: (arg: Base) => Derived) => (r: Base) => Derived2
>        : ^ ^^                      ^^^^^                     
>b7 : <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           
>a7 : (x: (arg: Base) => Derived) => (r: Base) => Derived2
>   : ^ ^^                      ^^^^^                     

        var b8: <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; 
>b8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           
>x : (arg: T) => U
>  : ^   ^^ ^^^^^ 
>arg : T
>    : ^
>y : (arg2: { foo: number; }) => U
>  : ^    ^^                ^^^^^ 
>arg2 : { foo: number; }
>     : ^^^^^^^      ^^^
>foo : number
>    : ^^^^^^
>r : T
>  : ^

        a8 = b8; // error, { foo: number } and Base are incompatible
>a8 = b8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>        : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           
>a8 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>   : ^ ^^                      ^^ ^^                       ^^^^^                    
>b8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           

        b8 = a8; // error, { foo: number } and Base are incompatible
>b8 = a8 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>        : ^ ^^                      ^^ ^^                       ^^^^^                    
>b8 : <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           
>a8 : (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>   : ^ ^^                      ^^ ^^                       ^^^^^                    

        
        var b10: <T extends Derived>(...x: T[]) => T; 
>b10 : <T extends Derived>(...x: T[]) => T
>    : ^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 
>x : T[]
>  : ^^^

        a10 = b10;
>a10 = b10 : <T extends Derived>(...x: T[]) => T
>          : ^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 
>a10 : (...x: Base[]) => Base
>    : ^^^^ ^^      ^^^^^    
>b10 : <T extends Derived>(...x: T[]) => T
>    : ^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 

        b10 = a10;
>b10 = a10 : (...x: Base[]) => Base
>          : ^^^^ ^^      ^^^^^    
>b10 : <T extends Derived>(...x: T[]) => T
>    : ^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 
>a10 : (...x: Base[]) => Base
>    : ^^^^ ^^      ^^^^^    

        var b11: <T extends Derived>(x: T, y: T) => T; 
>b11 : <T extends Derived>(x: T, y: T) => T
>    : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : T
>  : ^

        a11 = b11;
>a11 = b11 : <T extends Derived>(x: T, y: T) => T
>          : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 
>a11 : (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>    : ^ ^^                ^^ ^^                             ^^^^^    
>b11 : <T extends Derived>(x: T, y: T) => T
>    : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 

        b11 = a11;
>b11 = a11 : (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>          : ^ ^^                ^^ ^^                             ^^^^^    
>b11 : <T extends Derived>(x: T, y: T) => T
>    : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 
>a11 : (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>    : ^ ^^                ^^ ^^                             ^^^^^    

        var b12: <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; 
>b12 : <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>    : ^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 
>x : Base[]
>  : ^^^^^^
>y : Base[]
>  : ^^^^^^

        a12 = b12;
>a12 = b12 : <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>          : ^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 
>a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>    : ^ ^^           ^^ ^^               ^^^^^              
>b12 : <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>    : ^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 

        b12 = a12;
>b12 = a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>          : ^ ^^           ^^ ^^               ^^^^^              
>b12 : <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>    : ^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 
>a12 : (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>    : ^ ^^           ^^ ^^               ^^^^^              

        var b15: <T>(x: { a: T; b: T }) => T; 
>b15 : <T>(x: { a: T; b: T; }) => T
>    : ^ ^^ ^^               ^^^^^ 
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^

        a15 = b15;
>a15 = b15 : <T>(x: { a: T; b: T; }) => T
>          : ^ ^^ ^^               ^^^^^ 
>a15 : (x: { a: string; b: number; }) => number
>    : ^ ^^                         ^^^^^      
>b15 : <T>(x: { a: T; b: T; }) => T
>    : ^ ^^ ^^               ^^^^^ 

        b15 = a15;
>b15 = a15 : (x: { a: string; b: number; }) => number
>          : ^ ^^                         ^^^^^      
>b15 : <T>(x: { a: T; b: T; }) => T
>    : ^ ^^ ^^               ^^^^^ 
>a15 : (x: { a: string; b: number; }) => number
>    : ^ ^^                         ^^^^^      

        var b15a: <T extends Base>(x: { a: T; b: T }) => number; 
>b15a : <T extends Base>(x: { a: T; b: T; }) => number
>     : ^ ^^^^^^^^^    ^^ ^^               ^^^^^      
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^

        a15 = b15a;
>a15 = b15a : <T extends Base>(x: { a: T; b: T; }) => number
>           : ^ ^^^^^^^^^    ^^ ^^               ^^^^^      
>a15 : (x: { a: string; b: number; }) => number
>    : ^ ^^                         ^^^^^      
>b15a : <T extends Base>(x: { a: T; b: T; }) => number
>     : ^ ^^^^^^^^^    ^^ ^^               ^^^^^      

        b15a = a15;
>b15a = a15 : (x: { a: string; b: number; }) => number
>           : ^ ^^                         ^^^^^      
>b15a : <T extends Base>(x: { a: T; b: T; }) => number
>     : ^ ^^^^^^^^^    ^^ ^^               ^^^^^      
>a15 : (x: { a: string; b: number; }) => number
>    : ^ ^^                         ^^^^^      

        var b16: <T>(x: (a: T) => T) => T[];
>b16 : <T>(x: (a: T) => T) => T[]
>    : ^ ^^ ^^           ^^^^^   
>x : (a: T) => T
>  : ^ ^^ ^^^^^ 
>a : T
>  : ^

        a16 = b16;
>a16 = b16 : <T>(x: (a: T) => T) => T[]
>          : ^ ^^ ^^           ^^^^^   
>a16 : { (x: { (a: number): number; (a?: number): number; }): number[]; (x: { (a: boolean): boolean; (a?: boolean): boolean; }): boolean[]; }
>    : ^^^ ^^                                              ^^^        ^^^ ^^                                                  ^^^         ^^^
>b16 : <T>(x: (a: T) => T) => T[]
>    : ^ ^^ ^^           ^^^^^   

        b16 = a16;
>b16 = a16 : { (x: { (a: number): number; (a?: number): number; }): number[]; (x: { (a: boolean): boolean; (a?: boolean): boolean; }): boolean[]; }
>          : ^^^ ^^                                              ^^^        ^^^ ^^                                                  ^^^         ^^^
>b16 : <T>(x: (a: T) => T) => T[]
>    : ^ ^^ ^^           ^^^^^   
>a16 : { (x: { (a: number): number; (a?: number): number; }): number[]; (x: { (a: boolean): boolean; (a?: boolean): boolean; }): boolean[]; }
>    : ^^^ ^^                                              ^^^        ^^^ ^^                                                  ^^^         ^^^

        var b17: <T>(x: (a: T) => T) => any[];
>b17 : <T>(x: (a: T) => T) => any[]
>    : ^ ^^ ^^           ^^^^^     
>x : (a: T) => T
>  : ^ ^^ ^^^^^ 
>a : T
>  : ^

        a17 = b17;
>a17 = b17 : <T>(x: (a: T) => T) => any[]
>          : ^ ^^ ^^           ^^^^^     
>a17 : { (x: { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[]; }
>    : ^^^ ^^                                                            ^^^     ^^^ ^^                                                             ^^^     ^^^
>b17 : <T>(x: (a: T) => T) => any[]
>    : ^ ^^ ^^           ^^^^^     

        b17 = a17;
>b17 = a17 : { (x: { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[]; }
>          : ^^^ ^^                                                            ^^^     ^^^ ^^                                                             ^^^     ^^^
>b17 : <T>(x: (a: T) => T) => any[]
>    : ^ ^^ ^^           ^^^^^     
>a17 : { (x: { <T extends Derived>(a: T): T; <T extends Base>(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[]; }
>    : ^^^ ^^                                                            ^^^     ^^^ ^^                                                             ^^^     ^^^
    }

    module WithGenericSignaturesInBaseType {
>WithGenericSignaturesInBaseType : typeof WithGenericSignaturesInBaseType
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        // target type has generic call signature
        var a2: <T>(x: T) => T[];
>a2 : <T>(x: T) => T[]
>   : ^ ^^ ^^ ^^^^^   
>x : T
>  : ^

        var b2: <T>(x: T) => string[];
>b2 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        
>x : T
>  : ^

        a2 = b2;
>a2 = b2 : <T>(x: T) => string[]
>        : ^ ^^ ^^ ^^^^^        
>a2 : <T>(x: T) => T[]
>   : ^ ^^ ^^ ^^^^^   
>b2 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        

        b2 = a2;
>b2 = a2 : <T>(x: T) => T[]
>        : ^ ^^ ^^ ^^^^^   
>b2 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        
>a2 : <T>(x: T) => T[]
>   : ^ ^^ ^^ ^^^^^   

        // target type has generic call signature
        var a3: <T>(x: T) => string[];
>a3 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        
>x : T
>  : ^

        var b3: <T>(x: T) => T[]; 
>b3 : <T>(x: T) => T[]
>   : ^ ^^ ^^ ^^^^^   
>x : T
>  : ^

        a3 = b3;
>a3 = b3 : <T>(x: T) => T[]
>        : ^ ^^ ^^ ^^^^^   
>a3 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        
>b3 : <T>(x: T) => T[]
>   : ^ ^^ ^^ ^^^^^   

        b3 = a3;
>b3 = a3 : <T>(x: T) => string[]
>        : ^ ^^ ^^ ^^^^^        
>b3 : <T>(x: T) => T[]
>   : ^ ^^ ^^ ^^^^^   
>a3 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        
    }
}
