//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignaturesWithRestParameters.ts] ////

=== assignmentCompatWithCallSignaturesWithRestParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the target for assignment

interface Base { 
    a: (...args: number[]) => number;
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>args : number[]
>     : ^^^^^^^^

    a2: (x: number, ...z: number[]) => number;
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a3: (x: number, y?: string, ...z: number[]) => number;
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a4: (x?: number, y?: string, ...z: number[]) => number;
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^
}

var a: (...args: number[]) => number; // ok, same number of required params
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>args : number[]
>     : ^^^^^^^^

    a = () => 1; // ok, same number of required params
>a = () => 1 : () => number
>            : ^^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>() => 1 : () => number
>        : ^^^^^^^^^^^^
>1 : 1
>  : ^

    a = (...args: number[]) => 1; // ok, same number of required params
>a = (...args: number[]) => 1 : (...args: number[]) => number
>                             : ^^^^    ^^        ^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>(...args: number[]) => 1 : (...args: number[]) => number
>                         : ^^^^    ^^        ^^^^^^^^^^^
>args : number[]
>     : ^^^^^^^^
>1 : 1
>  : ^

    a = (...args: string[]) => 1; // error, type mismatch
>a = (...args: string[]) => 1 : (...args: string[]) => number
>                             : ^^^^    ^^        ^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>(...args: string[]) => 1 : (...args: string[]) => number
>                         : ^^^^    ^^        ^^^^^^^^^^^
>args : string[]
>     : ^^^^^^^^
>1 : 1
>  : ^

    a = (x?: number) => 1; // ok, same number of required params
>a = (x?: number) => 1 : (x?: number) => number
>                      : ^ ^^^      ^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>(x?: number) => 1 : (x?: number) => number
>                  : ^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a = (x?: number, y?: number, z?: number) => 1; // ok, same number of required params
>a = (x?: number, y?: number, z?: number) => 1 : (x?: number, y?: number, z?: number) => number
>                                              : ^ ^^^      ^^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>(x?: number, y?: number, z?: number) => 1 : (x?: number, y?: number, z?: number) => number
>                                          : ^ ^^^      ^^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>z : number
>  : ^^^^^^
>1 : 1
>  : ^

    a = (x: number) => 1; // ok, rest param corresponds to infinite number of params
>a = (x: number) => 1 : (x: number) => number
>                     : ^ ^^      ^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>(x: number) => 1 : (x: number) => number
>                 : ^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a = (x?: string) => 1; // error, incompatible type
>a = (x?: string) => 1 : (x?: string) => number
>                      : ^ ^^^      ^^^^^^^^^^^
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>(x?: string) => 1 : (x?: string) => number
>                  : ^ ^^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^


var a2: (x: number, ...z: number[]) => number;
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a2 = () => 1; // ok, fewer required params
>a2 = () => 1 : () => number
>             : ^^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>() => 1 : () => number
>        : ^^^^^^^^^^^^
>1 : 1
>  : ^

    a2 = (...args: number[]) => 1; // ok, fewer required params
>a2 = (...args: number[]) => 1 : (...args: number[]) => number
>                              : ^^^^    ^^        ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(...args: number[]) => 1 : (...args: number[]) => number
>                         : ^^^^    ^^        ^^^^^^^^^^^
>args : number[]
>     : ^^^^^^^^
>1 : 1
>  : ^

    a2 = (x?: number) => 1; // ok, fewer required params
>a2 = (x?: number) => 1 : (x?: number) => number
>                       : ^ ^^^      ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(x?: number) => 1 : (x?: number) => number
>                  : ^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a2 = (x: number) => 1; // ok, same number of required params
>a2 = (x: number) => 1 : (x: number) => number
>                      : ^ ^^      ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(x: number) => 1 : (x: number) => number
>                 : ^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a2 = (x: number, ...args: number[]) => 1; // ok, same number of required params
>a2 = (x: number, ...args: number[]) => 1 : (x: number, ...args: number[]) => number
>                                         : ^ ^^      ^^^^^    ^^        ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(x: number, ...args: number[]) => 1 : (x: number, ...args: number[]) => number
>                                    : ^ ^^      ^^^^^    ^^        ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>args : number[]
>     : ^^^^^^^^
>1 : 1
>  : ^

    a2 = (x: number, ...args: string[]) => 1; // should be type mismatch error
>a2 = (x: number, ...args: string[]) => 1 : (x: number, ...args: string[]) => number
>                                         : ^ ^^      ^^^^^    ^^        ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(x: number, ...args: string[]) => 1 : (x: number, ...args: string[]) => number
>                                    : ^ ^^      ^^^^^    ^^        ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>args : string[]
>     : ^^^^^^^^
>1 : 1
>  : ^

    a2 = (x: number, y: number) => 1; // ok, rest param corresponds to infinite number of params
>a2 = (x: number, y: number) => 1 : (x: number, y: number) => number
>                                 : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(x: number, y: number) => 1 : (x: number, y: number) => number
>                            : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^

    a2 = (x: number, y?: number) => 1; // ok, same number of required params
>a2 = (x: number, y?: number) => 1 : (x: number, y?: number) => number
>                                  : ^ ^^      ^^ ^^^      ^^^^^^^^^^^
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>(x: number, y?: number) => 1 : (x: number, y?: number) => number
>                             : ^ ^^      ^^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^

var a3: (x: number, y?: string, ...z: number[]) => number;
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a3 = () => 1; // ok, fewer required params
>a3 = () => 1 : () => number
>             : ^^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>() => 1 : () => number
>        : ^^^^^^^^^^^^
>1 : 1
>  : ^

    a3 = (x?: number) => 1; // ok, fewer required params
>a3 = (x?: number) => 1 : (x?: number) => number
>                       : ^ ^^^      ^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x?: number) => 1 : (x?: number) => number
>                  : ^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a3 = (x: number) => 1; // ok, same number of required params
>a3 = (x: number) => 1 : (x: number) => number
>                      : ^ ^^      ^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number) => 1 : (x: number) => number
>                 : ^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a3 = (x: number, y: string) => 1;  // ok, all present params match
>a3 = (x: number, y: string) => 1 : (x: number, y: string) => number
>                                 : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number, y: string) => 1 : (x: number, y: string) => number
>                            : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>1 : 1
>  : ^

    a3 = (x: number, y?: number, z?: number) => 1;  // error
>a3 = (x: number, y?: number, z?: number) => 1 : (x: number, y?: number, z?: number) => number
>                                              : ^ ^^      ^^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number, y?: number, z?: number) => 1 : (x: number, y?: number, z?: number) => number
>                                         : ^ ^^      ^^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>z : number
>  : ^^^^^^
>1 : 1
>  : ^

    a3 = (x: number, ...z: number[]) => 1;  // error
>a3 = (x: number, ...z: number[]) => 1 : (x: number, ...z: number[]) => number
>                                      : ^ ^^      ^^^^^ ^^        ^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number, ...z: number[]) => 1 : (x: number, ...z: number[]) => number
>                                 : ^ ^^      ^^^^^ ^^        ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^
>1 : 1
>  : ^

    a3 = (x: string, y?: string, z?: string) => 1;  // error
>a3 = (x: string, y?: string, z?: string) => 1 : (x: string, y?: string, z?: string) => number
>                                              : ^ ^^      ^^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: string, y?: string, z?: string) => 1 : (x: string, y?: string, z?: string) => number
>                                         : ^ ^^      ^^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : string
>  : ^^^^^^
>1 : 1
>  : ^

var a4: (x?: number, y?: string, ...z: number[]) => number;
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a4 = () => 1; // ok, fewer required params
>a4 = () => 1 : () => number
>             : ^^^^^^^^^^^^
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>() => 1 : () => number
>        : ^^^^^^^^^^^^
>1 : 1
>  : ^

    a4 = (x?: number, y?: number) => 1; // error, type mismatch
>a4 = (x?: number, y?: number) => 1 : (x?: number, y?: number) => number
>                                   : ^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x?: number, y?: number) => 1 : (x?: number, y?: number) => number
>                              : ^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^

    a4 = (x: number) => 1; // ok, all present params match
>a4 = (x: number) => 1 : (x: number) => number
>                      : ^ ^^      ^^^^^^^^^^^
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number) => 1 : (x: number) => number
>                 : ^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    a4 = (x: number, y?: number) => 1;  // error, second param has type mismatch
>a4 = (x: number, y?: number) => 1 : (x: number, y?: number) => number
>                                  : ^ ^^      ^^ ^^^      ^^^^^^^^^^^
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number, y?: number) => 1 : (x: number, y?: number) => number
>                             : ^ ^^      ^^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^

    a4 = (x?: number, y?: string) => 1;  // ok, same number of required params with matching types
>a4 = (x?: number, y?: string) => 1 : (x?: number, y?: string) => number
>                                   : ^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x?: number, y?: string) => 1 : (x?: number, y?: string) => number
>                              : ^ ^^^      ^^ ^^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>1 : 1
>  : ^

    a4 = (x: number, ...args: string[]) => 1;  // error, rest params have type mismatch
>a4 = (x: number, ...args: string[]) => 1 : (x: number, ...args: string[]) => number
>                                         : ^ ^^      ^^^^^    ^^        ^^^^^^^^^^^
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>(x: number, ...args: string[]) => 1 : (x: number, ...args: string[]) => number
>                                    : ^ ^^      ^^^^^    ^^        ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>args : string[]
>     : ^^^^^^^^
>1 : 1
>  : ^

