//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts] ////

=== assignmentCompatWithConstructSignatures4.ts ===
// checking assignment compatibility relations for function types.

module Errors {
>Errors : typeof Errors
>       : ^^^^^^^^^^^^^

    class Base { foo: string; }
>Base : Base
>     : ^^^^
>foo : string
>    : ^^^^^^

    class Derived extends Base { bar: string; }
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^
>bar : string
>    : ^^^^^^

    class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>         : ^^^^^^^^
>Derived : Derived
>        : ^^^^^^^
>baz : string
>    : ^^^^^^

    class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>             : ^^^^^^^^^^^^
>Base : Base
>     : ^^^^
>bing : string
>     : ^^^^^^

    module WithNonGenericSignaturesInBaseType {
>WithNonGenericSignaturesInBaseType : typeof WithNonGenericSignaturesInBaseType
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        // target type with non-generic call signatures
        var a2: new (x: number) => string[];
>a2 : new (x: number) => string[]
>   : ^^^^^ ^^      ^^^^^        
>x : number
>  : ^^^^^^

        var a7: new (x: (arg: Base) => Derived) => (r: Base) => Derived2;
>a7 : new (x: (arg: Base) => Derived) => (r: Base) => Derived2
>   : ^^^^^ ^^                      ^^^^^                     
>x : (arg: Base) => Derived
>  : ^   ^^    ^^^^^       
>arg : Base
>    : ^^^^
>r : Base
>  : ^^^^

        var a8: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
>a8 : new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>   : ^^^^^ ^^                      ^^ ^^                       ^^^^^                    
>x : (arg: Base) => Derived
>  : ^   ^^    ^^^^^       
>arg : Base
>    : ^^^^
>y : (arg2: Base) => Derived
>  : ^    ^^    ^^^^^       
>arg2 : Base
>     : ^^^^
>r : Base
>  : ^^^^

        var a10: new (...x: Base[]) => Base;
>a10 : new (...x: Base[]) => Base
>    : ^^^^^^^^ ^^      ^^^^^    
>x : Base[]
>  : ^^^^^^

        var a11: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
>a11 : new (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>    : ^^^^^ ^^                ^^ ^^                             ^^^^^    
>x : { foo: string; }
>  : ^^^^^^^      ^^^
>foo : string
>    : ^^^^^^
>y : { foo: string; bar: string; }
>  : ^^^^^^^      ^^^^^^^      ^^^
>foo : string
>    : ^^^^^^
>bar : string
>    : ^^^^^^

        var a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
>a12 : new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>    : ^^^^^ ^^           ^^ ^^               ^^^^^              
>x : Base[]
>  : ^^^^^^
>y : Derived2[]
>  : ^^^^^^^^^^

        var a14: {
>a14 : { new (x: number): number[]; new (x: string): string[]; }
>    : ^^^^^^^ ^^      ^^^        ^^^^^^^ ^^      ^^^        ^^^

                new (x: number): number[];
>x : number
>  : ^^^^^^

                new (x: string): string[];
>x : string
>  : ^^^^^^

            };
        var a15: new (x: { a: string; b: number }) => number;
>a15 : new (x: { a: string; b: number; }) => number
>    : ^^^^^ ^^                         ^^^^^      
>x : { a: string; b: number; }
>  : ^^^^^      ^^^^^      ^^^
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^

        var a16: {
>a16 : { new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }
>    : ^^^^^^^ ^^                                                      ^^^        ^^^^^^^ ^^                                                          ^^^         ^^^

                new (x: {
>x : { new (a: number): number; new (a?: number): number; }
>  : ^^^^^^^ ^^      ^^^      ^^^^^^^ ^^^      ^^^      ^^^

                    new (a: number): number;
>a : number
>  : ^^^^^^

                    new (a?: number): number;
>a : number
>  : ^^^^^^

                }): number[];
                new (x: {
>x : { new (a: boolean): boolean; new (a?: boolean): boolean; }
>  : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^^       ^^^       ^^^

                    new (a: boolean): boolean;
>a : boolean
>  : ^^^^^^^

                    new (a?: boolean): boolean;
>a : boolean
>  : ^^^^^^^

                }): boolean[];
            };
        var a17: {
>a17 : { new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }
>    : ^^^^^^^ ^^                                                                    ^^^     ^^^^^^^ ^^                                                                     ^^^     ^^^

                new (x: {
>x : { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }
>  : ^^^^^^^ ^^^^^^^^^       ^^ ^^ ^^^ ^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^ ^^^

                    new <T extends Derived>(a: T): T;
>a : T
>  : ^

                    new <T extends Base>(a: T): T;
>a : T
>  : ^

                }): any[];
                new (x: {
>x : { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }
>  : ^^^^^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^^^^^ ^^^^^^^^^    ^^ ^^ ^^^ ^^^

                    new <T extends Derived2>(a: T): T;
>a : T
>  : ^

                    new <T extends Base>(a: T): T;
>a : T
>  : ^

                }): any[];
            };

        var b2: new <T, U>(x: T) => U[]; 
>b2 : new <T, U>(x: T) => U[]
>   : ^^^^^ ^^ ^^ ^^ ^^^^^   
>x : T
>  : ^

        a2 = b2; // ok
>a2 = b2 : new <T, U>(x: T) => U[]
>        : ^^^^^ ^^ ^^ ^^ ^^^^^   
>a2 : new (x: number) => string[]
>   : ^^^^^ ^^      ^^^^^        
>b2 : new <T, U>(x: T) => U[]
>   : ^^^^^ ^^ ^^ ^^ ^^^^^   

        b2 = a2; // ok
>b2 = a2 : new (x: number) => string[]
>        : ^^^^^ ^^      ^^^^^        
>b2 : new <T, U>(x: T) => U[]
>   : ^^^^^ ^^ ^^ ^^ ^^^^^   
>a2 : new (x: number) => string[]
>   : ^^^^^ ^^      ^^^^^        

        var b7: new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
>b7 : new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>   : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           
>x : (arg: T) => U
>  : ^   ^^ ^^^^^ 
>arg : T
>    : ^
>r : T
>  : ^

        a7 = b7; // ok
>a7 = b7 : new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>        : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           
>a7 : new (x: (arg: Base) => Derived) => (r: Base) => Derived2
>   : ^^^^^ ^^                      ^^^^^                     
>b7 : new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>   : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           

        b7 = a7; // ok
>b7 = a7 : new (x: (arg: Base) => Derived) => (r: Base) => Derived2
>        : ^^^^^ ^^                      ^^^^^                     
>b7 : new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V
>   : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^^^^^^^^        ^^ ^^             ^^^^^           
>a7 : new (x: (arg: Base) => Derived) => (r: Base) => Derived2
>   : ^^^^^ ^^                      ^^^^^                     

        var b8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; 
>b8 : new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>   : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           
>x : (arg: T) => U
>  : ^   ^^ ^^^^^ 
>arg : T
>    : ^
>y : (arg2: { foo: number; }) => U
>  : ^    ^^                ^^^^^ 
>arg2 : { foo: number; }
>     : ^^^^^^^      ^^^
>foo : number
>    : ^^^^^^
>r : T
>  : ^

        a8 = b8; // error, type mismatch
>a8 = b8 : new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>        : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           
>a8 : new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>   : ^^^^^ ^^                      ^^ ^^                       ^^^^^                    
>b8 : new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>   : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           

        b8 = a8; // error
>b8 = a8 : new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>        : ^^^^^ ^^                      ^^ ^^                       ^^^^^                    
>b8 : new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U
>   : ^^^^^ ^^^^^^^^^    ^^ ^^^^^^^^^       ^^ ^^             ^^ ^^                             ^^^^^           
>a8 : new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived
>   : ^^^^^ ^^                      ^^ ^^                       ^^^^^                    

        
        var b10: new <T extends Derived>(...x: T[]) => T; 
>b10 : new <T extends Derived>(...x: T[]) => T
>    : ^^^^^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 
>x : T[]
>  : ^^^

        a10 = b10; // ok
>a10 = b10 : new <T extends Derived>(...x: T[]) => T
>          : ^^^^^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 
>a10 : new (...x: Base[]) => Base
>    : ^^^^^^^^ ^^      ^^^^^    
>b10 : new <T extends Derived>(...x: T[]) => T
>    : ^^^^^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 

        b10 = a10; // ok
>b10 = a10 : new (...x: Base[]) => Base
>          : ^^^^^^^^ ^^      ^^^^^    
>b10 : new <T extends Derived>(...x: T[]) => T
>    : ^^^^^ ^^^^^^^^^       ^^^^^ ^^   ^^^^^ 
>a10 : new (...x: Base[]) => Base
>    : ^^^^^^^^ ^^      ^^^^^    

        var b11: new <T extends Derived>(x: T, y: T) => T; 
>b11 : new <T extends Derived>(x: T, y: T) => T
>    : ^^^^^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : T
>  : ^

        a11 = b11; // ok
>a11 = b11 : new <T extends Derived>(x: T, y: T) => T
>          : ^^^^^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 
>a11 : new (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>    : ^^^^^ ^^                ^^ ^^                             ^^^^^    
>b11 : new <T extends Derived>(x: T, y: T) => T
>    : ^^^^^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 

        b11 = a11; // ok
>b11 = a11 : new (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>          : ^^^^^ ^^                ^^ ^^                             ^^^^^    
>b11 : new <T extends Derived>(x: T, y: T) => T
>    : ^^^^^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^ 
>a11 : new (x: { foo: string; }, y: { foo: string; bar: string; }) => Base
>    : ^^^^^ ^^                ^^ ^^                             ^^^^^    

        var b12: new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; 
>b12 : new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>    : ^^^^^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 
>x : Base[]
>  : ^^^^^^
>y : Base[]
>  : ^^^^^^

        a12 = b12; // ok
>a12 = b12 : new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>          : ^^^^^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 
>a12 : new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>    : ^^^^^ ^^           ^^ ^^               ^^^^^              
>b12 : new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>    : ^^^^^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 

        b12 = a12; // ok
>b12 = a12 : new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>          : ^^^^^ ^^           ^^ ^^               ^^^^^              
>b12 : new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T
>    : ^^^^^ ^^^^^^^^^               ^^ ^^           ^^ ^^           ^^^^^ 
>a12 : new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
>    : ^^^^^ ^^           ^^ ^^               ^^^^^              

        var b15: new <T>(x: { a: T; b: T }) => T; 
>b15 : new <T>(x: { a: T; b: T; }) => T
>    : ^^^^^ ^^ ^^               ^^^^^ 
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^

        a15 = b15; // ok
>a15 = b15 : new <T>(x: { a: T; b: T; }) => T
>          : ^^^^^ ^^ ^^               ^^^^^ 
>a15 : new (x: { a: string; b: number; }) => number
>    : ^^^^^ ^^                         ^^^^^      
>b15 : new <T>(x: { a: T; b: T; }) => T
>    : ^^^^^ ^^ ^^               ^^^^^ 

        b15 = a15; // ok
>b15 = a15 : new (x: { a: string; b: number; }) => number
>          : ^^^^^ ^^                         ^^^^^      
>b15 : new <T>(x: { a: T; b: T; }) => T
>    : ^^^^^ ^^ ^^               ^^^^^ 
>a15 : new (x: { a: string; b: number; }) => number
>    : ^^^^^ ^^                         ^^^^^      

        var b15a: new <T extends Base>(x: { a: T; b: T }) => number; 
>b15a : new <T extends Base>(x: { a: T; b: T; }) => number
>     : ^^^^^ ^^^^^^^^^    ^^ ^^               ^^^^^      
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^

        a15 = b15a; // ok
>a15 = b15a : new <T extends Base>(x: { a: T; b: T; }) => number
>           : ^^^^^ ^^^^^^^^^    ^^ ^^               ^^^^^      
>a15 : new (x: { a: string; b: number; }) => number
>    : ^^^^^ ^^                         ^^^^^      
>b15a : new <T extends Base>(x: { a: T; b: T; }) => number
>     : ^^^^^ ^^^^^^^^^    ^^ ^^               ^^^^^      

        b15a = a15; // ok
>b15a = a15 : new (x: { a: string; b: number; }) => number
>           : ^^^^^ ^^                         ^^^^^      
>b15a : new <T extends Base>(x: { a: T; b: T; }) => number
>     : ^^^^^ ^^^^^^^^^    ^^ ^^               ^^^^^      
>a15 : new (x: { a: string; b: number; }) => number
>    : ^^^^^ ^^                         ^^^^^      

        var b16: new <T>(x: (a: T) => T) => T[];
>b16 : new <T>(x: (a: T) => T) => T[]
>    : ^^^^^ ^^ ^^           ^^^^^   
>x : (a: T) => T
>  : ^ ^^ ^^^^^ 
>a : T
>  : ^

        a16 = b16; // error
>a16 = b16 : new <T>(x: (a: T) => T) => T[]
>          : ^^^^^ ^^ ^^           ^^^^^   
>a16 : { new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }
>    : ^^^^^^^ ^^                                                      ^^^        ^^^^^^^ ^^                                                          ^^^         ^^^
>b16 : new <T>(x: (a: T) => T) => T[]
>    : ^^^^^ ^^ ^^           ^^^^^   

        b16 = a16; // error
>b16 = a16 : { new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }
>          : ^^^^^^^ ^^                                                      ^^^        ^^^^^^^ ^^                                                          ^^^         ^^^
>b16 : new <T>(x: (a: T) => T) => T[]
>    : ^^^^^ ^^ ^^           ^^^^^   
>a16 : { new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }
>    : ^^^^^^^ ^^                                                      ^^^        ^^^^^^^ ^^                                                          ^^^         ^^^

        var b17: new <T>(x: (a: T) => T) => any[];
>b17 : new <T>(x: (a: T) => T) => any[]
>    : ^^^^^ ^^ ^^           ^^^^^     
>x : (a: T) => T
>  : ^ ^^ ^^^^^ 
>a : T
>  : ^

        a17 = b17; // error
>a17 = b17 : new <T>(x: (a: T) => T) => any[]
>          : ^^^^^ ^^ ^^           ^^^^^     
>a17 : { new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }
>    : ^^^^^^^ ^^                                                                    ^^^     ^^^^^^^ ^^                                                                     ^^^     ^^^
>b17 : new <T>(x: (a: T) => T) => any[]
>    : ^^^^^ ^^ ^^           ^^^^^     

        b17 = a17; // error
>b17 = a17 : { new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }
>          : ^^^^^^^ ^^                                                                    ^^^     ^^^^^^^ ^^                                                                     ^^^     ^^^
>b17 : new <T>(x: (a: T) => T) => any[]
>    : ^^^^^ ^^ ^^           ^^^^^     
>a17 : { new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }
>    : ^^^^^^^ ^^                                                                    ^^^     ^^^^^^^ ^^                                                                     ^^^     ^^^
    }

    module WithGenericSignaturesInBaseType {
>WithGenericSignaturesInBaseType : typeof WithGenericSignaturesInBaseType
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        // target type has generic call signature
        var a2: new <T>(x: T) => T[];
>a2 : new <T>(x: T) => T[]
>   : ^^^^^ ^^ ^^ ^^^^^   
>x : T
>  : ^

        var b2: new <T>(x: T) => string[];
>b2 : new <T>(x: T) => string[]
>   : ^^^^^ ^^ ^^ ^^^^^        
>x : T
>  : ^

        a2 = b2; // ok
>a2 = b2 : new <T>(x: T) => string[]
>        : ^^^^^ ^^ ^^ ^^^^^        
>a2 : new <T>(x: T) => T[]
>   : ^^^^^ ^^ ^^ ^^^^^   
>b2 : new <T>(x: T) => string[]
>   : ^^^^^ ^^ ^^ ^^^^^        

        b2 = a2; // ok
>b2 = a2 : new <T>(x: T) => T[]
>        : ^^^^^ ^^ ^^ ^^^^^   
>b2 : new <T>(x: T) => string[]
>   : ^^^^^ ^^ ^^ ^^^^^        
>a2 : new <T>(x: T) => T[]
>   : ^^^^^ ^^ ^^ ^^^^^   

        // target type has generic call signature
        var a3: new <T>(x: T) => string[];
>a3 : new <T>(x: T) => string[]
>   : ^^^^^ ^^ ^^ ^^^^^        
>x : T
>  : ^

        var b3: new <T>(x: T) => T[]; 
>b3 : new <T>(x: T) => T[]
>   : ^^^^^ ^^ ^^ ^^^^^   
>x : T
>  : ^

        a3 = b3; // ok
>a3 = b3 : new <T>(x: T) => T[]
>        : ^^^^^ ^^ ^^ ^^^^^   
>a3 : new <T>(x: T) => string[]
>   : ^^^^^ ^^ ^^ ^^^^^        
>b3 : new <T>(x: T) => T[]
>   : ^^^^^ ^^ ^^ ^^^^^   

        b3 = a3; // ok
>b3 = a3 : new <T>(x: T) => string[]
>        : ^^^^^ ^^ ^^ ^^^^^        
>b3 : new <T>(x: T) => T[]
>   : ^^^^^ ^^ ^^ ^^^^^   
>a3 : new <T>(x: T) => string[]
>   : ^^^^^ ^^ ^^ ^^^^^        
    }
}
