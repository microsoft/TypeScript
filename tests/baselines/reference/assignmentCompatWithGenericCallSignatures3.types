//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures3.ts] ////

=== assignmentCompatWithGenericCallSignatures3.ts ===
// some complex cases of assignment compat of generic signatures that stress contextual signature instantiation

interface I<T, S> {
    <U>(f: (x: T) => (y: S) => U): U
>f : (x: T) => (y: S) => U
>  : ^ ^^ ^^^^^           
>x : T
>  : ^
>y : S
>  : ^
}

var g: <T>(x: T) => <S>(y: S) => I<T, S>
>g : <T>(x: T) => <S>(y: S) => I<T, S>
>  : ^ ^^ ^^ ^^^^^                    
>x : T
>  : ^
>y : S
>  : ^

var h: <T>(x: T) => <S>(y: S) => { <U>(f: (x: T) => (y: S) => U): U }
>h : <T>(x: T) => <S>(y: S) => { <U>(f: (x: T) => (y: S) => U): U; }
>  : ^ ^^ ^^ ^^^^^                                                  
>x : T
>  : ^
>y : S
>  : ^
>f : (x: T) => (y: S) => U
>  : ^ ^^ ^^^^^           
>x : T
>  : ^
>y : S
>  : ^

g = h // ok
>g = h : <T>(x: T) => <S>(y: S) => { <U>(f: (x: T) => (y: S) => U): U; }
>      : ^ ^^ ^^ ^^^^^                                                  
>g : <T>(x: T) => <S>(y: S) => I<T, S>
>  : ^ ^^ ^^ ^^^^^                    
>h : <T>(x: T) => <S>(y: S) => { <U>(f: (x: T) => (y: S) => U): U; }
>  : ^ ^^ ^^ ^^^^^                                                  

