//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers4.ts] ////

=== assignmentCompatWithObjectMembers4.ts ===
// members N and M of types S and T have the same name, same accessibility, same optionality, and N is not assignable M

module OnlyDerived {
>OnlyDerived : typeof OnlyDerived
>            : ^^^^^^^^^^^^^^^^^^

    class Base { foo: string; }
>Base : Base
>     : ^^^^
>foo : string
>    : ^^^^^^

    class Derived extends Base { bar: string; }
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^
>bar : string
>    : ^^^^^^

    class Derived2 extends Base { baz: string; }
>Derived2 : Derived2
>         : ^^^^^^^^
>Base : Base
>     : ^^^^
>baz : string
>    : ^^^^^^

    class S { foo: Derived; }
>S : S
>  : ^
>foo : Derived
>    : ^^^^^^^

    class T { foo: Derived2; }
>T : T
>  : ^
>foo : Derived2
>    : ^^^^^^^^

    var s: S;
>s : S
>  : ^

    var t: T;
>t : T
>  : ^

    interface S2 { foo: Derived; }
>foo : Derived
>    : ^^^^^^^

    interface T2 { foo: Derived2; }
>foo : Derived2
>    : ^^^^^^^^

    var s2: S2;
>s2 : S2
>   : ^^

    var t2: T2;
>t2 : T2
>   : ^^

    var a: { foo: Derived; }
>a : { foo: Derived; }
>  : ^^^^^^^       ^^^
>foo : Derived
>    : ^^^^^^^

    var b: { foo: Derived2; }
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^
>foo : Derived2
>    : ^^^^^^^^

    var a2 = { foo: new Derived() };
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^
>{ foo: new Derived() } : { foo: Derived; }
>                       : ^^^^^^^^^^^^^^^^^
>foo : Derived
>    : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

    var b2 = { foo: new Derived2() };
>b2 : { foo: Derived2; }
>   : ^^^^^^^^^^^^^^^^^^
>{ foo: new Derived2() } : { foo: Derived2; }
>                        : ^^^^^^^^^^^^^^^^^^
>foo : Derived2
>    : ^^^^^^^^
>new Derived2() : Derived2
>               : ^^^^^^^^
>Derived2 : typeof Derived2
>         : ^^^^^^^^^^^^^^^

    s = t; // error
>s = t : T
>      : ^
>s : S
>  : ^
>t : T
>  : ^

    t = s; // error
>t = s : S
>      : ^
>t : T
>  : ^
>s : S
>  : ^

    s = s2; // ok
>s = s2 : S2
>       : ^^
>s : S
>  : ^
>s2 : S2
>   : ^^

    s = a2; // ok
>s = a2 : { foo: Derived; }
>       : ^^^^^^^^^^^^^^^^^
>s : S
>  : ^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^

    s2 = t2; // error
>s2 = t2 : T2
>        : ^^
>s2 : S2
>   : ^^
>t2 : T2
>   : ^^

    t2 = s2; // error
>t2 = s2 : S2
>        : ^^
>t2 : T2
>   : ^^
>s2 : S2
>   : ^^

    s2 = t; // error
>s2 = t : T
>       : ^
>s2 : S2
>   : ^^
>t : T
>  : ^

    s2 = b; // error
>s2 = b : { foo: Derived2; }
>       : ^^^^^^^        ^^^
>s2 : S2
>   : ^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^

    s2 = a2; // ok
>s2 = a2 : { foo: Derived; }
>        : ^^^^^^^^^^^^^^^^^
>s2 : S2
>   : ^^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^

    a = b; // error
>a = b : { foo: Derived2; }
>      : ^^^^^^^        ^^^
>a : { foo: Derived; }
>  : ^^^^^^^       ^^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^

    b = a; // error
>b = a : { foo: Derived; }
>      : ^^^^^^^       ^^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^
>a : { foo: Derived; }
>  : ^^^^^^^       ^^^

    a = s; // ok
>a = s : S
>      : ^
>a : { foo: Derived; }
>  : ^^^^^^^       ^^^
>s : S
>  : ^

    a = s2; // ok
>a = s2 : S2
>       : ^^
>a : { foo: Derived; }
>  : ^^^^^^^       ^^^
>s2 : S2
>   : ^^

    a = a2; // ok
>a = a2 : { foo: Derived; }
>       : ^^^^^^^^^^^^^^^^^
>a : { foo: Derived; }
>  : ^^^^^^^       ^^^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^

    a2 = b2; // error
>a2 = b2 : { foo: Derived2; }
>        : ^^^^^^^^^^^^^^^^^^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^
>b2 : { foo: Derived2; }
>   : ^^^^^^^^^^^^^^^^^^

    b2 = a2; // error
>b2 = a2 : { foo: Derived; }
>        : ^^^^^^^^^^^^^^^^^
>b2 : { foo: Derived2; }
>   : ^^^^^^^^^^^^^^^^^^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^

    a2 = b; // error
>a2 = b : { foo: Derived2; }
>       : ^^^^^^^        ^^^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^

    a2 = t2; // error
>a2 = t2 : T2
>        : ^^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^
>t2 : T2
>   : ^^

    a2 = t; // error
>a2 = t : T
>       : ^
>a2 : { foo: Derived; }
>   : ^^^^^^^^^^^^^^^^^
>t : T
>  : ^
}

module WithBase {
>WithBase : typeof WithBase
>         : ^^^^^^^^^^^^^^^

    class Base { foo: string; }
>Base : Base
>     : ^^^^
>foo : string
>    : ^^^^^^

    class Derived extends Base { bar: string; }
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^
>bar : string
>    : ^^^^^^

    class Derived2 extends Base { baz: string; }
>Derived2 : Derived2
>         : ^^^^^^^^
>Base : Base
>     : ^^^^
>baz : string
>    : ^^^^^^

    class S { foo: Base; }
>S : S
>  : ^
>foo : Base
>    : ^^^^

    class T { foo: Derived2; }
>T : T
>  : ^
>foo : Derived2
>    : ^^^^^^^^

    var s: S;
>s : S
>  : ^

    var t: T;
>t : T
>  : ^

    interface S2 { foo: Base; }
>foo : Base
>    : ^^^^

    interface T2 { foo: Derived2; }
>foo : Derived2
>    : ^^^^^^^^

    var s2: S2;
>s2 : S2
>   : ^^

    var t2: T2;
>t2 : T2
>   : ^^

    var a: { foo: Base; }
>a : { foo: Base; }
>  : ^^^^^^^    ^^^
>foo : Base
>    : ^^^^

    var b: { foo: Derived2; }
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^
>foo : Derived2
>    : ^^^^^^^^

    var a2 = { foo: new Base() };
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^
>{ foo: new Base() } : { foo: Base; }
>                    : ^^^^^^^^^^^^^^
>foo : Base
>    : ^^^^
>new Base() : Base
>           : ^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^

    var b2 = { foo: new Derived2() };
>b2 : { foo: Derived2; }
>   : ^^^^^^^^^^^^^^^^^^
>{ foo: new Derived2() } : { foo: Derived2; }
>                        : ^^^^^^^^^^^^^^^^^^
>foo : Derived2
>    : ^^^^^^^^
>new Derived2() : Derived2
>               : ^^^^^^^^
>Derived2 : typeof Derived2
>         : ^^^^^^^^^^^^^^^

    s = t; // ok
>s = t : T
>      : ^
>s : S
>  : ^
>t : T
>  : ^

    t = s; // error
>t = s : S
>      : ^
>t : T
>  : ^
>s : S
>  : ^

    s = s2; // ok
>s = s2 : S2
>       : ^^
>s : S
>  : ^
>s2 : S2
>   : ^^

    s = a2; // ok
>s = a2 : { foo: Base; }
>       : ^^^^^^^^^^^^^^
>s : S
>  : ^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^

    s2 = t2; // ok
>s2 = t2 : T2
>        : ^^
>s2 : S2
>   : ^^
>t2 : T2
>   : ^^

    t2 = s2; // error
>t2 = s2 : S2
>        : ^^
>t2 : T2
>   : ^^
>s2 : S2
>   : ^^

    s2 = t; // ok
>s2 = t : T
>       : ^
>s2 : S2
>   : ^^
>t : T
>  : ^

    s2 = b; // ok
>s2 = b : { foo: Derived2; }
>       : ^^^^^^^        ^^^
>s2 : S2
>   : ^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^

    s2 = a2; // ok
>s2 = a2 : { foo: Base; }
>        : ^^^^^^^^^^^^^^
>s2 : S2
>   : ^^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^

    a = b; // ok
>a = b : { foo: Derived2; }
>      : ^^^^^^^        ^^^
>a : { foo: Base; }
>  : ^^^^^^^    ^^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^

    b = a; // error
>b = a : { foo: Base; }
>      : ^^^^^^^    ^^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^
>a : { foo: Base; }
>  : ^^^^^^^    ^^^

    a = s; // ok
>a = s : S
>      : ^
>a : { foo: Base; }
>  : ^^^^^^^    ^^^
>s : S
>  : ^

    a = s2; // ok
>a = s2 : S2
>       : ^^
>a : { foo: Base; }
>  : ^^^^^^^    ^^^
>s2 : S2
>   : ^^

    a = a2; // ok
>a = a2 : { foo: Base; }
>       : ^^^^^^^^^^^^^^
>a : { foo: Base; }
>  : ^^^^^^^    ^^^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^

    a2 = b2; // ok
>a2 = b2 : { foo: Derived2; }
>        : ^^^^^^^^^^^^^^^^^^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^
>b2 : { foo: Derived2; }
>   : ^^^^^^^^^^^^^^^^^^

    b2 = a2; // error
>b2 = a2 : { foo: Base; }
>        : ^^^^^^^^^^^^^^
>b2 : { foo: Derived2; }
>   : ^^^^^^^^^^^^^^^^^^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^

    a2 = b; // ok
>a2 = b : { foo: Derived2; }
>       : ^^^^^^^        ^^^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^
>b : { foo: Derived2; }
>  : ^^^^^^^        ^^^

    a2 = t2; // ok
>a2 = t2 : T2
>        : ^^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^
>t2 : T2
>   : ^^

    a2 = t; // ok
>a2 = t : T
>       : ^
>a2 : { foo: Base; }
>   : ^^^^^^^^^^^^^^
>t : T
>  : ^
}
