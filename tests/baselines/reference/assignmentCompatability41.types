//// [tests/cases/compiler/assignmentCompatability41.ts] ////

=== assignmentCompatability41.ts ===
module __test1__ {
>__test1__ : typeof __test1__
>          : ^^^^^^^^^^^^^^^^

    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
>one : T
>    : ^
>two : U
>    : ^
>obj4 : interfaceWithPublicAndOptional<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ one: 1 } : { one: number; }
>           : ^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^

    export var __val__obj4 = obj4;
>__val__obj4 : interfaceWithPublicAndOptional<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj4 : interfaceWithPublicAndOptional<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
module __test2__ {
>__test2__ : typeof __test2__
>          : ^^^^^^^^^^^^^^^^

    export        class classWithTwoPrivate<T,U> { constructor(private one: T, private two: U) {} }  var x6 = new classWithTwoPrivate(1, "a");;
>classWithTwoPrivate : classWithTwoPrivate<T, U>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>one : T
>    : ^
>two : U
>    : ^
>x6 : classWithTwoPrivate<number, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new classWithTwoPrivate(1, "a") : classWithTwoPrivate<number, string>
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>classWithTwoPrivate : typeof classWithTwoPrivate
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"a" : "a"
>    : ^^^

    export var __val__x6 = x6;
>__val__x6 : classWithTwoPrivate<number, string>
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x6 : classWithTwoPrivate<number, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
__test2__.__val__x6 = __test1__.__val__obj4
>__test2__.__val__x6 = __test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test2__.__val__x6 : __test2__.classWithTwoPrivate<number, string>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test2__ : typeof __test2__
>          : ^^^^^^^^^^^^^^^^
>__val__x6 : __test2__.classWithTwoPrivate<number, string>
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test1__ : typeof __test1__
>          : ^^^^^^^^^^^^^^^^
>__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

