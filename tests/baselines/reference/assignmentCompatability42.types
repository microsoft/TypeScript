//// [tests/cases/compiler/assignmentCompatability42.ts] ////

=== assignmentCompatability42.ts ===
module __test1__ {
>__test1__ : typeof __test1__
>          : ^^^^^^^^^^^^^^^^

    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
>one : T
>    : ^
>two : U
>    : ^
>obj4 : interfaceWithPublicAndOptional<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ one: 1 } : { one: number; }
>           : ^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^

    export var __val__obj4 = obj4;
>__val__obj4 : interfaceWithPublicAndOptional<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj4 : interfaceWithPublicAndOptional<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
module __test2__ {
>__test2__ : typeof __test2__
>          : ^^^^^^^^^^^^^^^^

    export     class classWithPublicPrivate<T,U> { constructor(public one: T, private two: U) {} }   var x7 = new classWithPublicPrivate(1, "a");;
>classWithPublicPrivate : classWithPublicPrivate<T, U>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : T
>    : ^
>two : U
>    : ^
>x7 : classWithPublicPrivate<number, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new classWithPublicPrivate(1, "a") : classWithPublicPrivate<number, string>
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>classWithPublicPrivate : typeof classWithPublicPrivate
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"a" : "a"
>    : ^^^

    export var __val__x7 = x7;
>__val__x7 : classWithPublicPrivate<number, string>
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x7 : classWithPublicPrivate<number, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
__test2__.__val__x7 = __test1__.__val__obj4
>__test2__.__val__x7 = __test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test2__.__val__x7 : __test2__.classWithPublicPrivate<number, string>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test2__ : typeof __test2__
>          : ^^^^^^^^^^^^^^^^
>__val__x7 : __test2__.classWithPublicPrivate<number, string>
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test1__ : typeof __test1__
>          : ^^^^^^^^^^^^^^^^
>__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

