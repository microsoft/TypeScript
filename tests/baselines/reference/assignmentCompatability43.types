//// [tests/cases/compiler/assignmentCompatability43.ts] ////

=== assignmentCompatability43.ts ===
module __test1__ {
>__test1__ : typeof __test1__
>          : ^^^^^^^^^^^^^^^^

    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
>one : T
>    : ^
>two : U
>    : ^
>obj4 : interfaceWithPublicAndOptional<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ one: 1 } : { one: number; }
>           : ^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^

    export var __val__obj4 = obj4;
>__val__obj4 : interfaceWithPublicAndOptional<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj4 : interfaceWithPublicAndOptional<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
module __test2__ {
>__test2__ : typeof __test2__
>          : ^^^^^^^^^^^^^^^^

    export                   interface interfaceTwo<T,U> { one: T; two: U; };   var obj2: interfaceTwo<number,string> = { one: 1, two: "a" };;
>one : T
>    : ^
>two : U
>    : ^
>obj2 : interfaceTwo<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ one: 1, two: "a" } : { one: number; two: string; }
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : string
>    : ^^^^^^
>"a" : "a"
>    : ^^^

    export var __val__obj2 = obj2;
>__val__obj2 : interfaceTwo<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj2 : interfaceTwo<number, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
__test2__.__val__obj2 = __test1__.__val__obj4
>__test2__.__val__obj2 = __test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test2__.__val__obj2 : __test2__.interfaceTwo<number, string>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test2__ : typeof __test2__
>          : ^^^^^^^^^^^^^^^^
>__val__obj2 : __test2__.interfaceTwo<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test1__.__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>__test1__ : typeof __test1__
>          : ^^^^^^^^^^^^^^^^
>__val__obj4 : __test1__.interfaceWithPublicAndOptional<number, string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

