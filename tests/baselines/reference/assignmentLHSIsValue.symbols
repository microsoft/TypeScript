//// [tests/cases/conformance/expressions/assignmentOperator/assignmentLHSIsValue.ts] ////

=== assignmentLHSIsValue.ts ===
// expected error for all the LHS of assignments
var value: any;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// this
class C {
>C : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))

    constructor() { this = value; }
>this : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

    foo() { this = value; }
>foo : Symbol(C.foo, Decl(assignmentLHSIsValue.ts, 5, 35))
>this : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

    static sfoo() { this = value; }
>sfoo : Symbol(C.sfoo, Decl(assignmentLHSIsValue.ts, 6, 27))
>this : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))
}

function foo() { this = value; }
>foo : Symbol(foo, Decl(assignmentLHSIsValue.ts, 8, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

this = value;
>this : Symbol(globalThis)
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// identifiers: module, class, enum, function
namespace M { export var a; }
>M : Symbol(M, Decl(assignmentLHSIsValue.ts, 12, 13))
>a : Symbol(a, Decl(assignmentLHSIsValue.ts, 15, 24))

M = value;
>M : Symbol(M, Decl(assignmentLHSIsValue.ts, 12, 13))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

C = value;
>C : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

enum E { }
>E : Symbol(E, Decl(assignmentLHSIsValue.ts, 18, 10))

E = value;
>E : Symbol(E, Decl(assignmentLHSIsValue.ts, 18, 10))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

foo = value;
>foo : Symbol(foo, Decl(assignmentLHSIsValue.ts, 8, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// literals
null = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

true = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

false = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

0 = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

'' = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

/d+/ = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// object literals
{ a: 0} = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// array literals
['', ''] = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// super
class Derived extends C {
>Derived : Symbol(Derived, Decl(assignmentLHSIsValue.ts, 37, 17))
>C : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))

    constructor() { super(); super = value; }
>super : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>super : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

    foo() { super = value }
>foo : Symbol(Derived.foo, Decl(assignmentLHSIsValue.ts, 41, 45))
>super : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

    static sfoo() { super = value; }
>sfoo : Symbol(Derived.sfoo, Decl(assignmentLHSIsValue.ts, 43, 27))
>super : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))
}

// function expression
function bar() { } = value;
>bar : Symbol(bar, Decl(assignmentLHSIsValue.ts, 46, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

() => { } = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// function calls
foo() = value;
>foo : Symbol(foo, Decl(assignmentLHSIsValue.ts, 8, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

// parentheses, the containted expression is value
(this) = value;
>this : Symbol(globalThis)
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(M) = value;
>M : Symbol(M, Decl(assignmentLHSIsValue.ts, 12, 13))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(C) = value;
>C : Symbol(C, Decl(assignmentLHSIsValue.ts, 1, 15))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(E) = value;
>E : Symbol(E, Decl(assignmentLHSIsValue.ts, 18, 10))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(foo) = value;
>foo : Symbol(foo, Decl(assignmentLHSIsValue.ts, 8, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(null) = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(true) = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(0) = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

('') = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(/d+/) = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

({}) = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

([]) = value;
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(function baz() { }) = value;
>baz : Symbol(baz, Decl(assignmentLHSIsValue.ts, 68, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

(foo()) = value;
>foo : Symbol(foo, Decl(assignmentLHSIsValue.ts, 8, 1))
>value : Symbol(value, Decl(assignmentLHSIsValue.ts, 1, 3))

