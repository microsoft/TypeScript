//// [tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunctionCapturesArguments_es6.ts] ////

=== asyncArrowFunctionCapturesArguments_es6.ts ===
class C {
>C : C
>  : ^

   method() {
>method : () => void
>       : ^^^^^^^^^^

      function other() {}
>other : () => void
>      : ^^^^^^^^^^

      var fn = async () => await other.apply(this, arguments);
>fn : () => Promise<any>
>   : ^^^^^^^^^^^^^^^^^^
>async () => await other.apply(this, arguments) : () => Promise<any>
>                                               : ^^^^^^^^^^^^^^^^^^
>await other.apply(this, arguments) : any
>other.apply(this, arguments) : any
>other.apply : (this: Function, thisArg: any, argArray?: any) => any
>            : ^    ^^        ^^       ^^   ^^        ^^^   ^^^^^   
>other : () => void
>      : ^^^^^^^^^^
>apply : (this: Function, thisArg: any, argArray?: any) => any
>      : ^    ^^        ^^       ^^   ^^        ^^^   ^^^^^   
>this : this
>     : ^^^^
>arguments : IArguments
>          : ^^^^^^^^^^
   }
}

function f() {
>f : () => () => Promise<() => Promise<number>>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

   return async () => async () => arguments.length;
>async () => async () => arguments.length : () => Promise<() => Promise<number>>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>async () => arguments.length : () => Promise<number>
>                             : ^^^^^^^^^^^^^^^^^^^^^
>arguments.length : number
>                 : ^^^^^^
>arguments : IArguments
>          : ^^^^^^^^^^
>length : number
>       : ^^^^^^
}
