//// [tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction_allowJs.ts] ////

=== file.js ===
// Error (good)
/** @type {function(): string} */
const a = () => 0
>a : () => string
>  : ^^^^^^      
>() => 0 : () => string
>        : ^^^^^^      
>0 : 0
>  : ^

// Error (good)
/** @type {function(): string} */
const b = async () => 0
>b : () => string
>  : ^^^^^^      
>async () => 0 : () => string
>              : ^^^^^^      
>0 : 0
>  : ^

// No error (bad)
/** @type {function(): string} */
const c = async () => {
>c : () => string
>  : ^^^^^^      
>async () => {	return 0} : () => string
>                        : ^^^^^^      

	return 0
>0 : 0
>  : ^
}

// Error (good)
/** @type {function(): string} */
const d = async () => {
>d : () => string
>  : ^^^^^^      
>async () => {	return ""} : () => string
>                         : ^^^^^^      

	return ""
>"" : ""
>   : ^^
}

/** @type {function(function(): string): void} */
const f = (p) => {}
>f : (arg0: () => string) => void
>  : ^^^^^^^            ^^^^^    
>(p) => {} : (p: () => string) => void
>          : ^ ^^^^^^^^      ^^^^^    
>p : () => string
>  : ^^^^^^      

// Error (good)
f(async () => {
>f(async () => {	return 0}) : void
>                           : ^^^^
>f : (arg0: () => string) => void
>  : ^^^^^^^            ^^^^^    
>async () => {	return 0} : () => Promise<number>
>                        : ^^^^^^^^^^^^^^^^^^^^^

	return 0
>0 : 0
>  : ^

})
