//// [tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts] ////

=== asyncWithVarShadowing_es6.ts ===
// https://github.com/Microsoft/TypeScript/issues/20461
declare const y: any;
>y : any

async function fn1(x) {
>fn1 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var x;
>x : any
}

async function fn2(x) {
>fn2 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var x, z;
>x : any
>z : any
}

async function fn3(x) {
>fn3 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var z;
>z : any
}

async function fn4(x) {
>fn4 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var x = y;
>x : any
>y : any
}

async function fn5(x) {
>fn5 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { x } = y;
>x : any
>  : ^^^
>y : any
}

async function fn6(x) {
>fn6 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { x, z } = y;
>x : any
>  : ^^^
>z : any
>  : ^^^
>y : any
}

async function fn7(x) {
>fn7 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { x = y } = y;
>x : any
>  : ^^^
>y : any
>  : ^^^
>y : any
}

async function fn8(x) {
>fn8 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { z: x } = y;
>z : any
>  : ^^^
>x : any
>  : ^^^
>y : any
}

async function fn9(x) {
>fn9 : (x: any) => Promise<void>
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { z: { x } } = y;
>z : any
>  : ^^^
>x : any
>  : ^^^
>y : any
}

async function fn10(x) {
>fn10 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { z: { x } = y } = y;
>z : any
>  : ^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>y : any
}

async function fn11(x) {
>fn11 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var { ...x } = y;
>x : any
>  : ^^^
>y : any
}

async function fn12(x) {
>fn12 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var [x] = y;
>x : any
>  : ^^^
>y : any
}

async function fn13(x) {
>fn13 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var [x = y] = y;
>x : any
>  : ^^^
>y : any
>  : ^^^
>y : any
}

async function fn14(x) {
>fn14 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var [, x] = y;
> : undefined
> : ^^^^^^^^^
>x : any
>  : ^^^
>y : any
}

async function fn15(x) {
>fn15 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var [...x] = y;
>x : any
>  : ^^^
>y : any
}

async function fn16(x) {
>fn16 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var [[x]] = y;
>x : any
>  : ^^^
>y : any
}

async function fn17(x) {
>fn17 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    var [[x] = y] = y;
>x : any
>  : ^^^
>y : any
>  : ^^^
>y : any
}

async function fn18({ x }) {
>fn18 : ({ x }: { x: any; }) => Promise<void>
>     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : any
>  : ^^^

    var x;
>x : any
}

async function fn19([x]) {
>fn19 : ([x]: [any]) => Promise<void>
>     : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : any
>  : ^^^

    var x;
>x : any
}

async function fn20(x) {
>fn20 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any
    {
        var x;
>x : any
    }
}

async function fn21(x) {
>fn21 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    if (y) {
>y : any

        var x;
>x : any
    }
}

async function fn22(x) {
>fn22 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    if (y) {
>y : any
    }
    else {
        var x;
>x : any
    }
}

async function fn23(x) {
>fn23 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    try {
        var x;
>x : any
    }
    catch (e) {
>e : any
    }
}

async function fn24(x) {
>fn24 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    try {

    }
    catch (e) {
>e : any

        var x;
>x : any
    }
}

async function fn25(x) {
>fn25 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    try {

    }
    catch (x) {
>x : any

        var x;
>x : any
    }
}

async function fn26(x) {
>fn26 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    try {

    }
    catch ({ x }) {
>x : any
>  : ^^^

        var x;
>x : any
    }
}

async function fn27(x) {
>fn27 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    try {
    }
    finally {
        var x;
>x : any
    }
}

async function fn28(x) {
>fn28 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    while (y) {
>y : any

        var x;
>x : any
    }
}

async function fn29(x) {
>fn29 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    do {
        var x;
>x : any
    }
    while (y);
>y : any
}

async function fn30(x) {
>fn30 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (var x = y;;) {
>x : any
>y : any

    }
}

async function fn31(x) {
>fn31 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (var { x } = y;;) {
>x : any
>  : ^^^
>y : any
    }
}

async function fn32(x) {
>fn32 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (;;) {
        var x;
>x : any
    }
}

async function fn33(x: string) {
>fn33 : (x: string) => Promise<void>
>     : ^ ^^      ^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    for (var x in y) {
>x : string
>  : ^^^^^^
>y : any
    }
}

async function fn34(x) {
>fn34 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (var z in y) {
>z : string
>  : ^^^^^^
>y : any

        var x;
>x : any
    }
}

async function fn35(x) {
>fn35 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (var x of y) {
>x : any
>y : any
    }
}

async function fn36(x) {
>fn36 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (var { x } of y) {
>x : any
>  : ^^^
>y : any
    }
}

async function fn37(x) {
>fn37 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    for (var z of y) {
>z : any
>y : any

        var x;
>x : any
    }
}

async function fn38(x) {
>fn38 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    switch (y) {
>y : any

        case y:
>y : any

            var x;
>x : any
    }
}

async function fn39(x) {
>fn39 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    foo: {
>foo : any
>    : ^^^

        var x;
>x : any

        break foo;
>foo : any
>    : ^^^
    }
}

async function fn40(x) {
>fn40 : (x: any) => Promise<void>
>     : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : any

    try {

    }
    catch {
        var x;
>x : any
    }
}

