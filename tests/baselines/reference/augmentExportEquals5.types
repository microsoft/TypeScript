//// [tests/cases/compiler/augmentExportEquals5.ts] ////

=== express.d.ts ===
declare module Express {
    export interface Request { }
    export interface Response { }
    export interface Application { }
}

declare module "express" {
>"express" : typeof import("express")
>          : ^^^^^^^^^^^^^^^^^^^^^^^^

    function e(): e.Express;
>e : typeof import("express.d.ts")
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>e : any
>  : ^^^

    namespace e {
>e : typeof import("express.d.ts")
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        interface IRoute {
            all(...handler: RequestHandler[]): IRoute;
>all : (...handler: RequestHandler[]) => IRoute
>    : ^^^^       ^^                ^^^^^      
>handler : RequestHandler[]
>        : ^^^^^^^^^^^^^^^^
        }

        interface IRouterMatcher<T> {
            (name: string|RegExp, ...handlers: RequestHandler[]): T;
>name : string | RegExp
>     : ^^^^^^^^^^^^^^^
>handlers : RequestHandler[]
>         : ^^^^^^^^^^^^^^^^
        }

        interface IRouter<T> extends RequestHandler {
            route(path: string): IRoute;
>route : (path: string) => IRoute
>      : ^    ^^      ^^^^^      
>path : string
>     : ^^^^^^
        }

        export function Router(options?: any): Router;
>Router : (options?: any) => Router
>       : ^       ^^^   ^^^^^      
>options : any

        export interface Router extends IRouter<Router> {}

        interface Errback { (err: Error): void; }
>err : Error
>    : ^^^^^

        interface Request extends Express.Request {
>Express : any
>        : ^^^

            get (name: string): string;
>get : (name: string) => string
>    : ^    ^^      ^^^^^      
>name : string
>     : ^^^^^^
        }

        interface Response extends Express.Response {
>Express : any
>        : ^^^

            charset: string;
>charset : string
>        : ^^^^^^
        }

        interface ErrorRequestHandler {
            (err: any, req: Request, res: Response, next: Function): any;
>err : any
>req : Request
>    : ^^^^^^^
>res : Response
>    : ^^^^^^^^
>next : Function
>     : ^^^^^^^^
        }

        interface RequestHandler {
            (req: Request, res: Response, next: Function): any;
>req : Request
>    : ^^^^^^^
>res : Response
>    : ^^^^^^^^
>next : Function
>     : ^^^^^^^^
        }

        interface Handler extends RequestHandler {}

        interface RequestParamHandler {
            (req: Request, res: Response, next: Function, param: any): any;
>req : Request
>    : ^^^^^^^
>res : Response
>    : ^^^^^^^^
>next : Function
>     : ^^^^^^^^
>param : any
        }

        interface Application extends IRouter<Application>, Express.Application {
>Express : any
>        : ^^^

            routes: any;
>routes : any
        }

        interface Express extends Application {
            createApplication(): Application;
>createApplication : () => Application
>                  : ^^^^^^           
        }

        var static: any;
>static : any
    }

    export = e;
>e : typeof import("express.d.ts")
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

=== augmentation.ts ===
/// <reference path="express.d.ts"/>
import * as e from "express";
>e : typeof e
>  : ^^^^^^^^

declare module "express" {
>"express" : typeof e
>          : ^^^^^^^^

    interface Request {
        id: number;
>id : number
>   : ^^^^^^
    }
}

=== consumer.ts ===
import { Request } from "express";
>Request : any
>        : ^^^

import "./augmentation";
let x: Request;
>x : Request
>  : ^^^^^^^

const y = x.id;
>y : number
>  : ^^^^^^
>x.id : number
>     : ^^^^^^
>x : Request
>  : ^^^^^^^
>id : number
>   : ^^^^^^

