//// [tests/cases/compiler/baseCheck.ts] ////

=== baseCheck.ts ===
class C { constructor(x: number, y: number) { } }
>C : C
>  : ^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

class ELoc extends C {
>ELoc : ELoc
>     : ^^^^
>C : C
>  : ^

    constructor(x: number) {
>x : number
>  : ^^^^^^

        super(0, x);
>super(0, x) : void
>            : ^^^^
>super : typeof C
>      : ^^^^^^^^
>0 : 0
>  : ^
>x : number
>  : ^^^^^^
    }
}
class ELocVar extends C {  
>ELocVar : ELocVar
>        : ^^^^^^^
>C : C
>  : ^

    constructor(x: number) {
>x : number
>  : ^^^^^^

        super(0, loc);
>super(0, loc) : void
>              : ^^^^
>super : typeof C
>      : ^^^^^^^^
>0 : 0
>  : ^
>loc : any
>    : ^^^
    }

    m() {
>m : () => void
>  : ^^^^^^^^^^

        var loc=10;
>loc : number
>    : ^^^^^^
>10 : 10
>   : ^^
    }
}

class D extends C { constructor(public z: number) { super(this.z) }  } // too few params
>D : D
>  : ^
>C : C
>  : ^
>z : number
>  : ^^^^^^
>super(this.z) : void
>              : ^^^^
>super : typeof C
>      : ^^^^^^^^
>this.z : number
>       : ^^^^^^
>this : this
>     : ^^^^
>z : number
>  : ^^^^^^

class E extends C { constructor(public z: number) { super(0, this.z) } }
>E : E
>  : ^
>C : C
>  : ^
>z : number
>  : ^^^^^^
>super(0, this.z) : void
>                 : ^^^^
>super : typeof C
>      : ^^^^^^^^
>0 : 0
>  : ^
>this.z : number
>       : ^^^^^^
>this : this
>     : ^^^^
>z : number
>  : ^^^^^^

class F extends C { constructor(public z: number) { super("hello", this.z) } } // first param type
>F : F
>  : ^
>C : C
>  : ^
>z : number
>  : ^^^^^^
>super("hello", this.z) : void
>                       : ^^^^
>super : typeof C
>      : ^^^^^^^^
>"hello" : "hello"
>        : ^^^^^^^
>this.z : number
>       : ^^^^^^
>this : this
>     : ^^^^
>z : number
>  : ^^^^^^

function f() {
>f : () => void
>  : ^^^^^^^^^^

    if (x<10) {
>x<10 : boolean
>     : ^^^^^^^
>x : any
>  : ^^^
>10 : 10
>   : ^^

      x=11;
>x=11 : 11
>     : ^^
>x : any
>  : ^^^
>11 : 11
>   : ^^
    }
    else {
        x=12;
>x=12 : 12
>     : ^^
>x : any
>  : ^^^
>12 : 12
>   : ^^
    }
}

