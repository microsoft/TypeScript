//// [tests/cases/compiler/betterErrorForAccidentalCall.ts] ////

=== betterErrorForAccidentalCall.ts ===
declare function foo(): string;
>foo : () => string
>    : ^^^^^^      

foo()(1 as number).toString();
>foo()(1 as number).toString() : any
>                              : ^^^
>foo()(1 as number).toString : any
>                            : ^^^
>foo()(1 as number) : any
>                   : ^^^
>foo() : string
>      : ^^^^^^
>foo : () => string
>    : ^^^^^^      
>1 as number : number
>            : ^^^^^^
>1 : 1
>  : ^
>toString : any
>         : ^^^

foo()   (1 as number).toString();
>foo()   (1 as number).toString() : any
>                                 : ^^^
>foo()   (1 as number).toString : any
>                               : ^^^
>foo()   (1 as number) : any
>                      : ^^^
>foo() : string
>      : ^^^^^^
>foo : () => string
>    : ^^^^^^      
>1 as number : number
>            : ^^^^^^
>1 : 1
>  : ^
>toString : any
>         : ^^^

foo()
>foo()(1 as number).toString() : any
>                              : ^^^
>foo()(1 as number).toString : any
>                            : ^^^
>foo()(1 as number) : any
>                   : ^^^
>foo() : string
>      : ^^^^^^
>foo : () => string
>    : ^^^^^^      

(1 as number).toString();
>1 as number : number
>            : ^^^^^^
>1 : 1
>  : ^
>toString : any
>         : ^^^

foo()
>foo()    (1 + 2).toString() : any
>                            : ^^^
>foo()    (1 + 2).toString : any
>                          : ^^^
>foo()    (1 + 2) : any
>                 : ^^^
>foo() : string
>      : ^^^^^^
>foo : () => string
>    : ^^^^^^      

    (1 + 2).toString();
>1 + 2 : number
>      : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>toString : any
>         : ^^^

foo()
>foo()    (<number>1).toString() : any
>                                : ^^^
>foo()    (<number>1).toString : any
>                              : ^^^
>foo()    (<number>1) : any
>                     : ^^^
>foo() : string
>      : ^^^^^^
>foo : () => string
>    : ^^^^^^      

    (<number>1).toString();
><number>1 : number
>          : ^^^^^^
>1 : 1
>  : ^
>toString : any
>         : ^^^

