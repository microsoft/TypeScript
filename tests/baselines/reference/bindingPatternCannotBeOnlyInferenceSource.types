//// [tests/cases/compiler/bindingPatternCannotBeOnlyInferenceSource.ts] ////

=== bindingPatternCannotBeOnlyInferenceSource.ts ===
declare function f<T>(): T;
>f : <T>() => T
>  : ^ ^^^^^^^ 

const {} = f();       // error (only in strictNullChecks)
>f() : unknown
>    : ^^^^^^^
>f : <T>() => T
>  : ^ ^^^^^^^ 

const { p1 } = f();   // error
>p1 : any
>   : ^^^
>f() : unknown
>    : ^^^^^^^
>f : <T>() => T
>  : ^ ^^^^^^^ 

const [] = f();       // error
>f() : unknown
>    : ^^^^^^^
>f : <T>() => T
>  : ^ ^^^^^^^ 

const [e1, e2] = f(); // error
>e1 : any
>   : ^^^
>e2 : any
>   : ^^^
>f() : unknown
>    : ^^^^^^^
>f : <T>() => T
>  : ^ ^^^^^^^ 

// Repro from #43605
type Dispatch<A = { type: any; [extraProps: string]: any }> = { <T extends A>(action: T): T };
>Dispatch : Dispatch<A>
>         : ^^^^^^^^^^^
>type : any
>     : ^^^
>extraProps : string
>           : ^^^^^^
>action : T
>       : ^

type IFuncs = { readonly [key: string]: (...p: any) => void };
>IFuncs : IFuncs
>       : ^^^^^^
>key : string
>    : ^^^^^^
>p : any
>  : ^^^

type IDestructuring<T extends IFuncs> = { readonly [key in keyof T]?: (...p: Parameters<T[key]>) => void };
>IDestructuring : IDestructuring<T>
>               : ^^^^^^^^^^^^^^^^^
>p : Parameters<T[key]>
>  : ^^^^^^^^^^^^^^^^^^

type Destructuring<T extends IFuncs, U extends IDestructuring<T>> = (dispatch: Dispatch<any>, funcs: T) => U;
>Destructuring : Destructuring<T, U>
>              : ^^^^^^^^^^^^^^^^^^^
>dispatch : Dispatch<any>
>         : ^^^^^^^^^^^^^
>funcs : T
>      : ^

const funcs1 = {
>funcs1 : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>       : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^
>{    funcA: (a: boolean): void => {},    funcB: (b: string, bb: string): void => {},    funcC: (c: number, cc: number, ccc: boolean): void => {},} : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>                                                                                                                                                   : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^

    funcA: (a: boolean): void => {},
>funcA : (a: boolean) => void
>      : ^ ^^       ^^^^^    
>(a: boolean): void => {} : (a: boolean) => void
>                         : ^ ^^       ^^^^^    
>a : boolean
>  : ^^^^^^^

    funcB: (b: string, bb: string): void => {},
>funcB : (b: string, bb: string) => void
>      : ^ ^^      ^^  ^^      ^^^^^    
>(b: string, bb: string): void => {} : (b: string, bb: string) => void
>                                    : ^ ^^      ^^  ^^      ^^^^^    
>b : string
>  : ^^^^^^
>bb : string
>   : ^^^^^^

    funcC: (c: number, cc: number, ccc: boolean): void => {},
>funcC : (c: number, cc: number, ccc: boolean) => void
>      : ^ ^^      ^^  ^^      ^^   ^^       ^^^^^    
>(c: number, cc: number, ccc: boolean): void => {} : (c: number, cc: number, ccc: boolean) => void
>                                                  : ^ ^^      ^^  ^^      ^^   ^^       ^^^^^    
>c : number
>  : ^^^^^^
>cc : number
>   : ^^^^^^
>ccc : boolean
>    : ^^^^^^^

};
type TFuncs1 = typeof funcs1;
>TFuncs1 : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>        : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^
>funcs1 : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>       : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^

declare function useReduxDispatch1<T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>): T;
>useReduxDispatch1 : <T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>) => T
>                  : ^ ^^^^^^^^^                       ^^             ^^                         ^^^^^ 
>destructuring : Destructuring<{ funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }, T>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^^^^^

const {} = useReduxDispatch1(
>useReduxDispatch1(    (d, f) => ({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    })) : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>                                                                                                                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>useReduxDispatch1 : <T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>) => T
>                  : ^ ^^^^^^^^^                       ^^             ^^                         ^^^^^ 

    (d, f) => ({
>(d, f) => ({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    }) : (d: Dispatch<any>, f: { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }) => { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>                                                                                                                                                                           : ^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>d : Dispatch<any>
>  : ^^^^^^^^^^^^^
>f : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>  : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^
>({        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    }) : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>                                                                                                                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable        funcB: (...p) => d(f.funcB(...p)),        funcC: (...p) => d(f.funcC(...p)),    } : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>                                                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable
>funcA : (a: boolean) => void
>      : ^^^^^^^^^^^^^^^^^^^^
>(...p) => d(f.funcA(...p)) : (a: boolean) => void
>                           : ^^^^^^^^^^^^^^^^^^^^
>p : [a: boolean]
>  : ^^^^^^^^^^^^
>d(f.funcA(...p)) : void
>                 : ^^^^
>d : Dispatch<any>
>  : ^^^^^^^^^^^^^
>f.funcA(...p) : void
>              : ^^^^
>f.funcA : (a: boolean) => void
>        : ^ ^^       ^^^^^    
>f : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>  : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^
>funcA : (a: boolean) => void
>      : ^ ^^       ^^^^^    
>...p : boolean
>     : ^^^^^^^
>p : [a: boolean]
>  : ^^^^^^^^^^^^

        funcB: (...p) => d(f.funcB(...p)),
>funcB : (b: string, bb: string) => void
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(...p) => d(f.funcB(...p)) : (b: string, bb: string) => void
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>p : [b: string, bb: string]
>  : ^^^^^^^^^^^^^^^^^^^^^^^
>d(f.funcB(...p)) : void
>                 : ^^^^
>d : Dispatch<any>
>  : ^^^^^^^^^^^^^
>f.funcB(...p) : void
>              : ^^^^
>f.funcB : (b: string, bb: string) => void
>        : ^ ^^      ^^  ^^      ^^^^^    
>f : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>  : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^
>funcB : (b: string, bb: string) => void
>      : ^ ^^      ^^  ^^      ^^^^^    
>...p : string
>     : ^^^^^^
>p : [b: string, bb: string]
>  : ^^^^^^^^^^^^^^^^^^^^^^^

        funcC: (...p) => d(f.funcC(...p)),
>funcC : (c: number, cc: number, ccc: boolean) => void
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(...p) => d(f.funcC(...p)) : (c: number, cc: number, ccc: boolean) => void
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>p : [c: number, cc: number, ccc: boolean]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>d(f.funcC(...p)) : void
>                 : ^^^^
>d : Dispatch<any>
>  : ^^^^^^^^^^^^^
>f.funcC(...p) : void
>              : ^^^^
>f.funcC : (c: number, cc: number, ccc: boolean) => void
>        : ^ ^^      ^^  ^^      ^^   ^^       ^^^^^    
>f : { funcA: (a: boolean) => void; funcB: (b: string, bb: string) => void; funcC: (c: number, cc: number, ccc: boolean) => void; }
>  : ^^^^^^^^^^ ^^       ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^^^^    ^^^^^^^^^^ ^^      ^^  ^^      ^^   ^^       ^^^^^    ^^^
>funcC : (c: number, cc: number, ccc: boolean) => void
>      : ^ ^^      ^^  ^^      ^^   ^^       ^^^^^    
>...p : number | boolean
>     : ^^^^^^^^^^^^^^^^
>p : [c: number, cc: number, ccc: boolean]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    })
);

