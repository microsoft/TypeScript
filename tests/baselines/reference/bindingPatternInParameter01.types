//// [tests/cases/compiler/bindingPatternInParameter01.ts] ////

=== bindingPatternInParameter01.ts ===
const nestedArray = [[[1, 2]], [[3, 4]]];
>nestedArray : number[][][]
>            : ^^^^^^^^^^^^
>[[[1, 2]], [[3, 4]]] : number[][][]
>                     : ^^^^^^^^^^^^
>[[1, 2]] : number[][]
>         : ^^^^^^^^^^
>[1, 2] : number[]
>       : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>[[3, 4]] : number[][]
>         : ^^^^^^^^^^
>[3, 4] : number[]
>       : ^^^^^^^^
>3 : 3
>  : ^
>4 : 4
>  : ^

nestedArray.forEach(([[a, b]]) => {
>nestedArray.forEach(([[a, b]]) => {  console.log(a, b);}) : void
>                                                          : ^^^^
>nestedArray.forEach : (callbackfn: (value: number[][], index: number, array: number[][][]) => void, thisArg?: any) => void
>                    : ^          ^^^     ^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^    ^^       ^^^   ^^^^^    
>nestedArray : number[][][]
>            : ^^^^^^^^^^^^
>forEach : (callbackfn: (value: number[][], index: number, array: number[][][]) => void, thisArg?: any) => void
>        : ^          ^^^     ^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^    ^^       ^^^   ^^^^^    
>([[a, b]]) => {  console.log(a, b);} : ([[a, b]]: number[][]) => void
>                                     : ^        ^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^

  console.log(a, b);
>console.log(a, b) : void
>                  : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^

});

