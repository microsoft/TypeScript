//// [tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithAnyOtherType.ts] ////

=== bitwiseNotOperatorWithAnyOtherType.ts ===
// ~ operator on any type

var ANY: any;
>ANY : Symbol(ANY, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 2, 3))

var ANY1;
>ANY1 : Symbol(ANY1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 3, 3))

var ANY2: any[] = ["", ""];
>ANY2 : Symbol(ANY2, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 4, 3))

var obj: () => {}
>obj : Symbol(obj, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 5, 3))

var obj1 = { x:"", y: () => { }};
>obj1 : Symbol(obj1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 12))
>y : Symbol(y, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 18))

function foo(): any {
>foo : Symbol(foo, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 33))

    var a;
>a : Symbol(a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 9, 7))

    return a;
>a : Symbol(a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 9, 7))
}
class A {
>A : Symbol(A, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 11, 1))

    public a: any;
>a : Symbol(A.a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 12, 9))

    static foo() {
>foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 13, 18))

        var a;
>a : Symbol(a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 15, 11))

        return a;
>a : Symbol(a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 15, 11))
    }
}
namespace M {
>M : Symbol(M, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 18, 1))

    export var n: any;
>n : Symbol(n, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 20, 14))
}
var objA = new A();
>objA : Symbol(objA, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 22, 3))
>A : Symbol(A, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 11, 1))

// any other type var
var ResultIsNumber = ~ANY1;
>ResultIsNumber : Symbol(ResultIsNumber, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 25, 3))
>ANY1 : Symbol(ANY1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 3, 3))

var ResultIsNumber1 = ~ANY2;
>ResultIsNumber1 : Symbol(ResultIsNumber1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 26, 3))
>ANY2 : Symbol(ANY2, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 4, 3))

var ResultIsNumber2 = ~A;
>ResultIsNumber2 : Symbol(ResultIsNumber2, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 27, 3))
>A : Symbol(A, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 11, 1))

var ResultIsNumber3 = ~M;
>ResultIsNumber3 : Symbol(ResultIsNumber3, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 28, 3))
>M : Symbol(M, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 18, 1))

var ResultIsNumber4 = ~obj;
>ResultIsNumber4 : Symbol(ResultIsNumber4, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 29, 3))
>obj : Symbol(obj, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 5, 3))

var ResultIsNumber5 = ~obj1;
>ResultIsNumber5 : Symbol(ResultIsNumber5, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 30, 3))
>obj1 : Symbol(obj1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 3))

// any type literal
var ResultIsNumber6 = ~undefined;
>ResultIsNumber6 : Symbol(ResultIsNumber6, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 33, 3))
>undefined : Symbol(undefined)

var ResultIsNumber7 = ~null;
>ResultIsNumber7 : Symbol(ResultIsNumber7, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 34, 3))

// any type expressions
var ResultIsNumber8 = ~ANY2[0]
>ResultIsNumber8 : Symbol(ResultIsNumber8, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 37, 3))
>ANY2 : Symbol(ANY2, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 4, 3))

var ResultIsNumber9 = ~obj1.x;
>ResultIsNumber9 : Symbol(ResultIsNumber9, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 38, 3))
>obj1.x : Symbol(x, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 12))
>obj1 : Symbol(obj1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 12))

var ResultIsNumber10 = ~obj1.y;
>ResultIsNumber10 : Symbol(ResultIsNumber10, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 39, 3))
>obj1.y : Symbol(y, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 18))
>obj1 : Symbol(obj1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 3))
>y : Symbol(y, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 18))

var ResultIsNumber11 = ~objA.a;
>ResultIsNumber11 : Symbol(ResultIsNumber11, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 40, 3))
>objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 12, 9))
>objA : Symbol(objA, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 22, 3))
>a : Symbol(A.a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 12, 9))

var ResultIsNumber12 = ~M.n;
>ResultIsNumber12 : Symbol(ResultIsNumber12, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 41, 3))
>M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 20, 14))
>M : Symbol(M, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 18, 1))
>n : Symbol(M.n, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 20, 14))

var ResultIsNumber13 = ~foo();
>ResultIsNumber13 : Symbol(ResultIsNumber13, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 42, 3))
>foo : Symbol(foo, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 33))

var ResultIsNumber14 = ~A.foo();
>ResultIsNumber14 : Symbol(ResultIsNumber14, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 43, 3))
>A.foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 13, 18))
>A : Symbol(A, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 11, 1))
>foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 13, 18))

var ResultIsNumber15 = ~(ANY + ANY1);
>ResultIsNumber15 : Symbol(ResultIsNumber15, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 44, 3))
>ANY : Symbol(ANY, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 2, 3))
>ANY1 : Symbol(ANY1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 3, 3))

var ResultIsNumber16 = ~(null + undefined);
>ResultIsNumber16 : Symbol(ResultIsNumber16, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 45, 3))
>undefined : Symbol(undefined)

var ResultIsNumber17 = ~(null + null);
>ResultIsNumber17 : Symbol(ResultIsNumber17, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 46, 3))

var ResultIsNumber18 = ~(undefined + undefined);
>ResultIsNumber18 : Symbol(ResultIsNumber18, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 47, 3))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

// multiple ~ operators
var ResultIsNumber19 = ~~ANY;
>ResultIsNumber19 : Symbol(ResultIsNumber19, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 50, 3))
>ANY : Symbol(ANY, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 2, 3))

var ResultIsNumber20 = ~~~(ANY + ANY1);
>ResultIsNumber20 : Symbol(ResultIsNumber20, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 51, 3))
>ANY : Symbol(ANY, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 2, 3))
>ANY1 : Symbol(ANY1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 3, 3))

//miss assignment operators
~ANY;
>ANY : Symbol(ANY, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 2, 3))

~ANY1;
>ANY1 : Symbol(ANY1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 3, 3))

~ANY2[0];
>ANY2 : Symbol(ANY2, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 4, 3))

~ANY, ANY1;
>ANY : Symbol(ANY, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 2, 3))
>ANY1 : Symbol(ANY1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 3, 3))

~obj1.y;
>obj1.y : Symbol(y, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 18))
>obj1 : Symbol(obj1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 3))
>y : Symbol(y, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 18))

~objA.a;
>objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 12, 9))
>objA : Symbol(objA, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 22, 3))
>a : Symbol(A.a, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 12, 9))

~M.n;
>M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 20, 14))
>M : Symbol(M, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 18, 1))
>n : Symbol(M.n, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 20, 14))

~~obj1.x;
>obj1.x : Symbol(x, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 12))
>obj1 : Symbol(obj1, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(bitwiseNotOperatorWithAnyOtherType.ts, 6, 12))

