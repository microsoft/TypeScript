//// [tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithEnumType.ts] ////

=== bitwiseNotOperatorWithEnumType.ts ===
// ~ operator on enum type

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>      : ^^^^^
>A : ENUM1.A
>  : ^^^^^^^
>B : ENUM1.B
>  : ^^^^^^^
>"" : (typeof ENUM1)[""]
>   : ^^^^^^^^^^^^^^^^^^

// enum type var
var ResultIsNumber1 = ~ENUM1;
>ResultIsNumber1 : number
>                : ^^^^^^
>~ENUM1 : number
>       : ^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^

// enum type expressions
var ResultIsNumber2 = ~ENUM1["A"];
>ResultIsNumber2 : number
>                : ^^^^^^
>~ENUM1["A"] : number
>            : ^^^^^^
>ENUM1["A"] : ENUM1.A
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"A" : "A"
>    : ^^^

var ResultIsNumber3 = ~(ENUM1.A + ENUM1["B"]);
>ResultIsNumber3 : number
>                : ^^^^^^
>~(ENUM1.A + ENUM1["B"]) : number
>                        : ^^^^^^
>(ENUM1.A + ENUM1["B"]) : number
>                       : ^^^^^^
>ENUM1.A + ENUM1["B"] : number
>                     : ^^^^^^
>ENUM1.A : ENUM1.A
>        : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>A : ENUM1.A
>  : ^^^^^^^
>ENUM1["B"] : ENUM1.B
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"B" : "B"
>    : ^^^

// multiple ~ operators
var ResultIsNumber4 = ~~~(ENUM1["A"] + ENUM1.B);
>ResultIsNumber4 : number
>                : ^^^^^^
>~~~(ENUM1["A"] + ENUM1.B) : number
>                          : ^^^^^^
>~~(ENUM1["A"] + ENUM1.B) : number
>                         : ^^^^^^
>~(ENUM1["A"] + ENUM1.B) : number
>                        : ^^^^^^
>(ENUM1["A"] + ENUM1.B) : number
>                       : ^^^^^^
>ENUM1["A"] + ENUM1.B : number
>                     : ^^^^^^
>ENUM1["A"] : ENUM1.A
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"A" : "A"
>    : ^^^
>ENUM1.B : ENUM1.B
>        : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>B : ENUM1.B
>  : ^^^^^^^

// miss assignment operators
~ENUM1;
>~ENUM1 : number
>       : ^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^

~ENUM1["A"];
>~ENUM1["A"] : number
>            : ^^^^^^
>ENUM1["A"] : ENUM1.A
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"A" : "A"
>    : ^^^

~ENUM1.A, ~ENUM1["B"];
>~ENUM1.A, ~ENUM1["B"] : number
>                      : ^^^^^^
>~ENUM1.A : number
>         : ^^^^^^
>ENUM1.A : ENUM1.A
>        : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>A : ENUM1.A
>  : ^^^^^^^
>~ENUM1["B"] : number
>            : ^^^^^^
>ENUM1["B"] : ENUM1.B
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"B" : "B"
>    : ^^^

