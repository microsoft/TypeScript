//// [tests/cases/compiler/blockScopedBindingsReassignedInLoop3.ts] ////

=== blockScopedBindingsReassignedInLoop3.ts ===
for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^
>x < y : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>++x, --y : number
>         : ^^^^^^
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>--y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    let a = () => x++ + y++;
>a : () => number
>  : ^^^^^^^^^^^^
>() => x++ + y++ : () => number
>                : ^^^^^^^^^^^^
>x++ + y++ : number
>          : ^^^^^^
>x++ : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        break;
    }
    else {
        for (let a = 1; a < 5; --a) {
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>a < 5 : boolean
>      : ^^^^^^^
>a : number
>  : ^^^^^^
>5 : 5
>  : ^
>--a : number
>    : ^^^^^^
>a : number
>  : ^^^^^^

            let f = () => a;
>f : () => number
>  : ^^^^^^^^^^^^
>() => a : () => number
>        : ^^^^^^^^^^^^
>a : number
>  : ^^^^^^

            if (a) {
>a : number
>  : ^^^^^^

                a = x;
>a = x : number
>      : ^^^^^^
>a : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

                break;
            }
            else {
                y++;
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^
            }
        }
        
        y = 5;
>y = 5 : 5
>      : ^
>y : number
>  : ^^^^^^
>5 : 5
>  : ^
    }
}


for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^
>x < y : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>++x, --y : number
>         : ^^^^^^
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>--y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    let a = () => x++ + y++;
>a : () => number
>  : ^^^^^^^^^^^^
>() => x++ + y++ : () => number
>                : ^^^^^^^^^^^^
>x++ + y++ : number
>          : ^^^^^^
>x++ : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        continue;
    }
    else {
        for (let a = 1; a < 5; --a) {
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>a < 5 : boolean
>      : ^^^^^^^
>a : number
>  : ^^^^^^
>5 : 5
>  : ^
>--a : number
>    : ^^^^^^
>a : number
>  : ^^^^^^

            let f = () => a;
>f : () => number
>  : ^^^^^^^^^^^^
>() => a : () => number
>        : ^^^^^^^^^^^^
>a : number
>  : ^^^^^^

            if (a) {
>a : number
>  : ^^^^^^

                a = x;
>a = x : number
>      : ^^^^^^
>a : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

                continue;
            }
            else {
                y++;
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^
            }
        }
        
        y = 5;
>y = 5 : 5
>      : ^
>y : number
>  : ^^^^^^
>5 : 5
>  : ^
    }
}

loop2:
>loop2 : any
>      : ^^^

for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^
>x < y : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>++x, --y : number
>         : ^^^^^^
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>--y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    let a = () => x++ + y++;
>a : () => number
>  : ^^^^^^^^^^^^
>() => x++ + y++ : () => number
>                : ^^^^^^^^^^^^
>x++ + y++ : number
>          : ^^^^^^
>x++ : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        break loop2;
>loop2 : any
>      : ^^^
    }
    else {
        loop1:
>loop1 : any
>      : ^^^

        for (let a = 1; a < 5; --a) {
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>a < 5 : boolean
>      : ^^^^^^^
>a : number
>  : ^^^^^^
>5 : 5
>  : ^
>--a : number
>    : ^^^^^^
>a : number
>  : ^^^^^^

            let f = () => a;
>f : () => number
>  : ^^^^^^^^^^^^
>() => a : () => number
>        : ^^^^^^^^^^^^
>a : number
>  : ^^^^^^

            if (a) {
>a : number
>  : ^^^^^^

                a = x;
>a = x : number
>      : ^^^^^^
>a : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

                break loop1;
>loop1 : any
>      : ^^^
            }
            else {
                y++;
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

                break loop2
>loop2 : any
>      : ^^^
            }
        }
        
        y = 5;
>y = 5 : 5
>      : ^
>y : number
>  : ^^^^^^
>5 : 5
>  : ^
    }
}

loop2:
>loop2 : any
>      : ^^^

for (let x = 1, y = 2; x < y; ++x, --y) {
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^
>x < y : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>++x, --y : number
>         : ^^^^^^
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>--y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    let a = () => x++ + y++;
>a : () => number
>  : ^^^^^^^^^^^^
>() => x++ + y++ : () => number
>                : ^^^^^^^^^^^^
>x++ + y++ : number
>          : ^^^^^^
>x++ : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        continue loop2;
>loop2 : any
>      : ^^^
    }
    else {
        loop1:
>loop1 : any
>      : ^^^

        for (let a = 1; a < 5; --a) {
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>a < 5 : boolean
>      : ^^^^^^^
>a : number
>  : ^^^^^^
>5 : 5
>  : ^
>--a : number
>    : ^^^^^^
>a : number
>  : ^^^^^^

            let f = () => a;
>f : () => number
>  : ^^^^^^^^^^^^
>() => a : () => number
>        : ^^^^^^^^^^^^
>a : number
>  : ^^^^^^

            if (a) {
>a : number
>  : ^^^^^^

                a = x;
>a = x : number
>      : ^^^^^^
>a : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

                continue loop1;
>loop1 : any
>      : ^^^
            }
            else {
                y++;
>y++ : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

                continue loop2
>loop2 : any
>      : ^^^
            }
        }
        
        y = 5;
>y = 5 : 5
>      : ^
>y : number
>  : ^^^^^^
>5 : 5
>  : ^
    }
}

