//// [tests/cases/compiler/bluebirdStaticThis.ts] ////

=== bluebirdStaticThis.ts ===
// This version is reduced from the full d.ts by removing almost all the tests
// and all the comments.
// Then it adds explicit `this` arguments to the static members.
// Tests by: Bart van der Schoor <https://github.com/Bartvds>
export declare class Promise<R> implements Promise.Thenable<R> {
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 4, 29))
>Promise.Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 4, 29))

	constructor(callback: (resolve: (thenableOrResult: R | Promise.Thenable<R>) => void, reject: (error: any) => void) => void);
>callback : Symbol(callback, Decl(bluebirdStaticThis.ts, 5, 13))
>resolve : Symbol(resolve, Decl(bluebirdStaticThis.ts, 5, 24))
>thenableOrResult : Symbol(thenableOrResult, Decl(bluebirdStaticThis.ts, 5, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 4, 29))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 4, 29))
>reject : Symbol(reject, Decl(bluebirdStaticThis.ts, 5, 85))
>error : Symbol(error, Decl(bluebirdStaticThis.ts, 5, 95))

    static try<R>(dit: typeof Promise, fn: () => Promise.Thenable<R>, args?: any[], ctx?: any): Promise<R>;
>try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 6, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 6, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>fn : Symbol(fn, Decl(bluebirdStaticThis.ts, 6, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 6, 15))
>args : Symbol(args, Decl(bluebirdStaticThis.ts, 6, 69))
>ctx : Symbol(ctx, Decl(bluebirdStaticThis.ts, 6, 83))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 6, 15))

    static try<R>(dit: typeof Promise, fn: () => R, args?: any[], ctx?: any): Promise<R>;
>try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 7, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 7, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>fn : Symbol(fn, Decl(bluebirdStaticThis.ts, 7, 38))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 7, 15))
>args : Symbol(args, Decl(bluebirdStaticThis.ts, 7, 51))
>ctx : Symbol(ctx, Decl(bluebirdStaticThis.ts, 7, 65))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 7, 15))

    static attempt<R>(dit: typeof Promise, fn: () => Promise.Thenable<R>, args?: any[], ctx?: any): Promise<R>;
>attempt : Symbol(Promise.attempt, Decl(bluebirdStaticThis.ts, 7, 89), Decl(bluebirdStaticThis.ts, 9, 111))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 9, 19))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 9, 22))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>fn : Symbol(fn, Decl(bluebirdStaticThis.ts, 9, 42))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 9, 19))
>args : Symbol(args, Decl(bluebirdStaticThis.ts, 9, 73))
>ctx : Symbol(ctx, Decl(bluebirdStaticThis.ts, 9, 87))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 9, 19))

    static attempt<R>(dit: typeof Promise, fn: () => R, args?: any[], ctx?: any): Promise<R>;
>attempt : Symbol(Promise.attempt, Decl(bluebirdStaticThis.ts, 7, 89), Decl(bluebirdStaticThis.ts, 9, 111))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 10, 19))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 10, 22))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>fn : Symbol(fn, Decl(bluebirdStaticThis.ts, 10, 42))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 10, 19))
>args : Symbol(args, Decl(bluebirdStaticThis.ts, 10, 55))
>ctx : Symbol(ctx, Decl(bluebirdStaticThis.ts, 10, 69))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 10, 19))

    static method(dit: typeof Promise, fn: Function): Function;
>method : Symbol(Promise.method, Decl(bluebirdStaticThis.ts, 10, 93))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 12, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>fn : Symbol(fn, Decl(bluebirdStaticThis.ts, 12, 38))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    static resolve(dit: typeof Promise): Promise<void>;
>resolve : Symbol(Promise.resolve, Decl(bluebirdStaticThis.ts, 12, 63), Decl(bluebirdStaticThis.ts, 14, 55), Decl(bluebirdStaticThis.ts, 15, 83))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 14, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

    static resolve<R>(dit: typeof Promise, value: Promise.Thenable<R>): Promise<R>;
>resolve : Symbol(Promise.resolve, Decl(bluebirdStaticThis.ts, 12, 63), Decl(bluebirdStaticThis.ts, 14, 55), Decl(bluebirdStaticThis.ts, 15, 83))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 15, 19))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 15, 22))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 15, 42))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 15, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 15, 19))

    static resolve<R>(dit: typeof Promise, value: R): Promise<R>;
>resolve : Symbol(Promise.resolve, Decl(bluebirdStaticThis.ts, 12, 63), Decl(bluebirdStaticThis.ts, 14, 55), Decl(bluebirdStaticThis.ts, 15, 83))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 16, 19))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 16, 22))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 16, 42))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 16, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 16, 19))

    static reject(dit: typeof Promise, reason: any): Promise<any>;
>reject : Symbol(Promise.reject, Decl(bluebirdStaticThis.ts, 16, 65), Decl(bluebirdStaticThis.ts, 18, 66))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 18, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>reason : Symbol(reason, Decl(bluebirdStaticThis.ts, 18, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

    static reject<R>(dit: typeof Promise, reason: any): Promise<R>;
>reject : Symbol(Promise.reject, Decl(bluebirdStaticThis.ts, 16, 65), Decl(bluebirdStaticThis.ts, 18, 66))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 19, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 19, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>reason : Symbol(reason, Decl(bluebirdStaticThis.ts, 19, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 19, 18))

    static defer<R>(dit: typeof Promise): Promise.Resolver<R>;
>defer : Symbol(Promise.defer, Decl(bluebirdStaticThis.ts, 19, 67))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 21, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 21, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Resolver : Symbol(Promise.Resolver)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 21, 17))

    static cast<R>(dit: typeof Promise, value: Promise.Thenable<R>): Promise<R>;
>cast : Symbol(Promise.cast, Decl(bluebirdStaticThis.ts, 21, 62), Decl(bluebirdStaticThis.ts, 23, 80))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 23, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 23, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 23, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 23, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 23, 16))

    static cast<R>(dit: typeof Promise, value: R): Promise<R>;
>cast : Symbol(Promise.cast, Decl(bluebirdStaticThis.ts, 21, 62), Decl(bluebirdStaticThis.ts, 23, 80))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 24, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 24, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 24, 39))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 24, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 24, 16))

    static bind(dit: typeof Promise, thisArg: any): Promise<void>;
>bind : Symbol(Promise.bind, Decl(bluebirdStaticThis.ts, 24, 62))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 26, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>thisArg : Symbol(thisArg, Decl(bluebirdStaticThis.ts, 26, 36))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

    static is(dit: typeof Promise, value: any): boolean;
>is : Symbol(Promise.is, Decl(bluebirdStaticThis.ts, 26, 66))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 28, 14))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 28, 34))

    static longStackTraces(dit: typeof Promise): void;
>longStackTraces : Symbol(Promise.longStackTraces, Decl(bluebirdStaticThis.ts, 28, 56))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 30, 27))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

    static delay<R>(dit: typeof Promise, value: Promise.Thenable<R>, ms: number): Promise<R>;
>delay : Symbol(Promise.delay, Decl(bluebirdStaticThis.ts, 30, 54), Decl(bluebirdStaticThis.ts, 32, 93), Decl(bluebirdStaticThis.ts, 33, 75))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 32, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 32, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 32, 40))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 32, 17))
>ms : Symbol(ms, Decl(bluebirdStaticThis.ts, 32, 68))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 32, 17))

    static delay<R>(dit: typeof Promise, value: R, ms: number): Promise<R>;
>delay : Symbol(Promise.delay, Decl(bluebirdStaticThis.ts, 30, 54), Decl(bluebirdStaticThis.ts, 32, 93), Decl(bluebirdStaticThis.ts, 33, 75))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 33, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 33, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 33, 40))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 33, 17))
>ms : Symbol(ms, Decl(bluebirdStaticThis.ts, 33, 50))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 33, 17))

    static delay(dit: typeof Promise, ms: number): Promise<void>;
>delay : Symbol(Promise.delay, Decl(bluebirdStaticThis.ts, 30, 54), Decl(bluebirdStaticThis.ts, 32, 93), Decl(bluebirdStaticThis.ts, 33, 75))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 34, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>ms : Symbol(ms, Decl(bluebirdStaticThis.ts, 34, 37))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

    static promisify(dit: typeof Promise, nodeFunction: Function, receiver?: any): Function;
>promisify : Symbol(Promise.promisify, Decl(bluebirdStaticThis.ts, 34, 65))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 36, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>nodeFunction : Symbol(nodeFunction, Decl(bluebirdStaticThis.ts, 36, 41))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>receiver : Symbol(receiver, Decl(bluebirdStaticThis.ts, 36, 65))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    static promisifyAll(dit: typeof Promise, target: Object): Object;
>promisifyAll : Symbol(Promise.promisifyAll, Decl(bluebirdStaticThis.ts, 36, 92))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 38, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>target : Symbol(target, Decl(bluebirdStaticThis.ts, 38, 44))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    static coroutine<R>(dit: typeof Promise, generatorFunction: Function): Function;
>coroutine : Symbol(Promise.coroutine, Decl(bluebirdStaticThis.ts, 38, 69))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 40, 21))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 40, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>generatorFunction : Symbol(generatorFunction, Decl(bluebirdStaticThis.ts, 40, 44))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    static spawn<R>(dit: typeof Promise, generatorFunction: Function): Promise<R>;
>spawn : Symbol(Promise.spawn, Decl(bluebirdStaticThis.ts, 40, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 42, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 42, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>generatorFunction : Symbol(generatorFunction, Decl(bluebirdStaticThis.ts, 42, 40))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 42, 17))

    static noConflict(dit: typeof Promise): typeof Promise;
>noConflict : Symbol(Promise.noConflict, Decl(bluebirdStaticThis.ts, 42, 82))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 44, 22))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

    static onPossiblyUnhandledRejection(dit: typeof Promise, handler: (reason: any) => any): void;
>onPossiblyUnhandledRejection : Symbol(Promise.onPossiblyUnhandledRejection, Decl(bluebirdStaticThis.ts, 44, 59))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 46, 40))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>handler : Symbol(handler, Decl(bluebirdStaticThis.ts, 46, 60))
>reason : Symbol(reason, Decl(bluebirdStaticThis.ts, 46, 71))

    static all<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R[]>;
>all : Symbol(Promise.all, Decl(bluebirdStaticThis.ts, 46, 98), Decl(bluebirdStaticThis.ts, 48, 102), Decl(bluebirdStaticThis.ts, 49, 84), Decl(bluebirdStaticThis.ts, 50, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 48, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 48, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 48, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 48, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 48, 15))

    static all<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R[]>;
>all : Symbol(Promise.all, Decl(bluebirdStaticThis.ts, 46, 98), Decl(bluebirdStaticThis.ts, 48, 102), Decl(bluebirdStaticThis.ts, 49, 84), Decl(bluebirdStaticThis.ts, 50, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 49, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 49, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 49, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 49, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 49, 15))

    static all<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R[]>;
>all : Symbol(Promise.all, Decl(bluebirdStaticThis.ts, 46, 98), Decl(bluebirdStaticThis.ts, 48, 102), Decl(bluebirdStaticThis.ts, 49, 84), Decl(bluebirdStaticThis.ts, 50, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 50, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 50, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 50, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 50, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 50, 15))

    static all<R>(dit: typeof Promise, values: R[]): Promise<R[]>;
>all : Symbol(Promise.all, Decl(bluebirdStaticThis.ts, 46, 98), Decl(bluebirdStaticThis.ts, 48, 102), Decl(bluebirdStaticThis.ts, 49, 84), Decl(bluebirdStaticThis.ts, 50, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 51, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 51, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 51, 38))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 51, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 51, 15))

    static props(dit: typeof Promise, object: Promise<Object>): Promise<Object>;
>props : Symbol(Promise.props, Decl(bluebirdStaticThis.ts, 51, 66), Decl(bluebirdStaticThis.ts, 53, 80))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 53, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>object : Symbol(object, Decl(bluebirdStaticThis.ts, 53, 37))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    static props(dit: typeof Promise, object: Object): Promise<Object>;
>props : Symbol(Promise.props, Decl(bluebirdStaticThis.ts, 51, 66), Decl(bluebirdStaticThis.ts, 53, 80))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 54, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>object : Symbol(object, Decl(bluebirdStaticThis.ts, 54, 37))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    static settle<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<Promise.Inspection<R>[]>;
>settle : Symbol(Promise.settle, Decl(bluebirdStaticThis.ts, 54, 71), Decl(bluebirdStaticThis.ts, 56, 125), Decl(bluebirdStaticThis.ts, 57, 107), Decl(bluebirdStaticThis.ts, 58, 107))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 56, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 56, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 56, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 56, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Inspection : Symbol(Promise.Inspection)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 56, 18))

    static settle<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<Promise.Inspection<R>[]>;
>settle : Symbol(Promise.settle, Decl(bluebirdStaticThis.ts, 54, 71), Decl(bluebirdStaticThis.ts, 56, 125), Decl(bluebirdStaticThis.ts, 57, 107), Decl(bluebirdStaticThis.ts, 58, 107))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 57, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 57, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 57, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 57, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Inspection : Symbol(Promise.Inspection)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 57, 18))

    static settle<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<Promise.Inspection<R>[]>;
>settle : Symbol(Promise.settle, Decl(bluebirdStaticThis.ts, 54, 71), Decl(bluebirdStaticThis.ts, 56, 125), Decl(bluebirdStaticThis.ts, 57, 107), Decl(bluebirdStaticThis.ts, 58, 107))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 58, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 58, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 58, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 58, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Inspection : Symbol(Promise.Inspection)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 58, 18))

    static settle<R>(dit: typeof Promise, values: R[]): Promise<Promise.Inspection<R>[]>;
>settle : Symbol(Promise.settle, Decl(bluebirdStaticThis.ts, 54, 71), Decl(bluebirdStaticThis.ts, 56, 125), Decl(bluebirdStaticThis.ts, 57, 107), Decl(bluebirdStaticThis.ts, 58, 107))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 59, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 59, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 59, 41))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 59, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Inspection : Symbol(Promise.Inspection)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 59, 18))

    static any<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>;
>any : Symbol(Promise.any, Decl(bluebirdStaticThis.ts, 59, 89), Decl(bluebirdStaticThis.ts, 61, 100), Decl(bluebirdStaticThis.ts, 62, 82), Decl(bluebirdStaticThis.ts, 63, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 61, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 61, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 61, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 61, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 61, 15))

    static any<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R>;
>any : Symbol(Promise.any, Decl(bluebirdStaticThis.ts, 59, 89), Decl(bluebirdStaticThis.ts, 61, 100), Decl(bluebirdStaticThis.ts, 62, 82), Decl(bluebirdStaticThis.ts, 63, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 62, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 62, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 62, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 62, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 62, 15))

    static any<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R>;
>any : Symbol(Promise.any, Decl(bluebirdStaticThis.ts, 59, 89), Decl(bluebirdStaticThis.ts, 61, 100), Decl(bluebirdStaticThis.ts, 62, 82), Decl(bluebirdStaticThis.ts, 63, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 63, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 63, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 63, 38))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 63, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 63, 15))

    static any<R>(dit: typeof Promise, values: R[]): Promise<R>;
>any : Symbol(Promise.any, Decl(bluebirdStaticThis.ts, 59, 89), Decl(bluebirdStaticThis.ts, 61, 100), Decl(bluebirdStaticThis.ts, 62, 82), Decl(bluebirdStaticThis.ts, 63, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 64, 15))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 64, 18))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 64, 38))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 64, 15))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 64, 15))

    static race<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>;
>race : Symbol(Promise.race, Decl(bluebirdStaticThis.ts, 64, 64), Decl(bluebirdStaticThis.ts, 66, 101), Decl(bluebirdStaticThis.ts, 67, 83), Decl(bluebirdStaticThis.ts, 68, 83))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 66, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 66, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 66, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 66, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 66, 16))

    static race<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R>;
>race : Symbol(Promise.race, Decl(bluebirdStaticThis.ts, 64, 64), Decl(bluebirdStaticThis.ts, 66, 101), Decl(bluebirdStaticThis.ts, 67, 83), Decl(bluebirdStaticThis.ts, 68, 83))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 67, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 67, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 67, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 67, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 67, 16))

    static race<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R>;
>race : Symbol(Promise.race, Decl(bluebirdStaticThis.ts, 64, 64), Decl(bluebirdStaticThis.ts, 66, 101), Decl(bluebirdStaticThis.ts, 67, 83), Decl(bluebirdStaticThis.ts, 68, 83))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 68, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 68, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 68, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 68, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 68, 16))

    static race<R>(dit: typeof Promise, values: R[]): Promise<R>;
>race : Symbol(Promise.race, Decl(bluebirdStaticThis.ts, 64, 64), Decl(bluebirdStaticThis.ts, 66, 101), Decl(bluebirdStaticThis.ts, 67, 83), Decl(bluebirdStaticThis.ts, 68, 83))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 69, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 69, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 69, 39))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 69, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 69, 16))

    static some<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: number): Promise<R[]>;
>some : Symbol(Promise.some, Decl(bluebirdStaticThis.ts, 69, 65), Decl(bluebirdStaticThis.ts, 71, 118), Decl(bluebirdStaticThis.ts, 72, 100), Decl(bluebirdStaticThis.ts, 73, 100))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 71, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 71, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 71, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 71, 16))
>count : Symbol(count, Decl(bluebirdStaticThis.ts, 71, 88))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 71, 16))

    static some<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, count: number): Promise<R[]>;
>some : Symbol(Promise.some, Decl(bluebirdStaticThis.ts, 69, 65), Decl(bluebirdStaticThis.ts, 71, 118), Decl(bluebirdStaticThis.ts, 72, 100), Decl(bluebirdStaticThis.ts, 73, 100))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 72, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 72, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 72, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 72, 16))
>count : Symbol(count, Decl(bluebirdStaticThis.ts, 72, 70))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 72, 16))

    static some<R>(dit: typeof Promise, values: Promise.Thenable<R>[], count: number): Promise<R[]>;
>some : Symbol(Promise.some, Decl(bluebirdStaticThis.ts, 69, 65), Decl(bluebirdStaticThis.ts, 71, 118), Decl(bluebirdStaticThis.ts, 72, 100), Decl(bluebirdStaticThis.ts, 73, 100))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 73, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 73, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 73, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 73, 16))
>count : Symbol(count, Decl(bluebirdStaticThis.ts, 73, 70))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 73, 16))

    static some<R>(dit: typeof Promise, values: R[], count: number): Promise<R[]>;
>some : Symbol(Promise.some, Decl(bluebirdStaticThis.ts, 69, 65), Decl(bluebirdStaticThis.ts, 71, 118), Decl(bluebirdStaticThis.ts, 72, 100), Decl(bluebirdStaticThis.ts, 73, 100))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 74, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 74, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 74, 39))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 74, 16))
>count : Symbol(count, Decl(bluebirdStaticThis.ts, 74, 52))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 74, 16))

    static join<R>(dit: typeof Promise, ...values: Promise.Thenable<R>[]): Promise<R[]>;
>join : Symbol(Promise.join, Decl(bluebirdStaticThis.ts, 74, 82), Decl(bluebirdStaticThis.ts, 76, 88))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 76, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 76, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 76, 39))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 76, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 76, 16))

    static join<R>(dit: typeof Promise, ...values: R[]): Promise<R[]>;
>join : Symbol(Promise.join, Decl(bluebirdStaticThis.ts, 74, 82), Decl(bluebirdStaticThis.ts, 76, 88))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 77, 16))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 77, 19))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 77, 39))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 77, 16))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 77, 16))

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 79, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 79, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 79, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 79, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 79, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 79, 90))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 79, 100))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 79, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 79, 108))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 79, 123))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 79, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 79, 17))

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 80, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 80, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 80, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 80, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 80, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 80, 90))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 80, 100))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 80, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 80, 108))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 80, 123))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 80, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 80, 17))

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 81, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 81, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 81, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 81, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 81, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 81, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 81, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 81, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 81, 90))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 81, 105))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 81, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 81, 17))

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 82, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 82, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 82, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 82, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 82, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 82, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 82, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 82, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 82, 90))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 82, 105))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 82, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 82, 17))

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 83, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 83, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 83, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 83, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 83, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 83, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 83, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 83, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 83, 90))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 83, 105))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 83, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 83, 17))

    static map<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 84, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 84, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 84, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 84, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 84, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 84, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 84, 82))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 84, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 84, 90))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 84, 105))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 84, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 84, 17))

    static map<R, U>(dit: typeof Promise, values: R[], mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 85, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 85, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 85, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 85, 41))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 85, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 85, 54))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 85, 64))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 85, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 85, 72))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 85, 87))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 85, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 85, 17))

    static map<R, U>(dit: typeof Promise, values: R[], mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
>map : Symbol(Promise.map, Decl(bluebirdStaticThis.ts, 77, 70), Decl(bluebirdStaticThis.ts, 79, 183), Decl(bluebirdStaticThis.ts, 80, 165), Decl(bluebirdStaticThis.ts, 81, 165), Decl(bluebirdStaticThis.ts, 82, 147) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 86, 15))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 86, 17))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 86, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 86, 41))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 86, 15))
>mapper : Symbol(mapper, Decl(bluebirdStaticThis.ts, 86, 54))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 86, 64))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 86, 15))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 86, 72))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 86, 87))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 86, 17))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 86, 17))

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 88, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 88, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 88, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 88, 44))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 88, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 88, 93))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 88, 104))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 88, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 88, 113))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 88, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 88, 125))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 88, 140))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 88, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 88, 185))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 88, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 88, 20))

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 89, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 89, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 89, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 89, 44))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 89, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 89, 93))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 89, 104))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 89, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 89, 113))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 89, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 89, 125))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 89, 140))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 89, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 89, 167))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 89, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 89, 20))

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 91, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 91, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 91, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 91, 44))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 91, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 91, 75))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 91, 86))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 91, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 91, 95))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 91, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 91, 107))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 91, 122))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 91, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 91, 167))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 91, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 91, 20))

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 92, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 92, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 92, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 92, 44))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 92, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 92, 75))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 92, 86))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 92, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 92, 95))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 92, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 92, 107))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 92, 122))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 92, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 92, 149))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 92, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 92, 20))

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 94, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 94, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 94, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 94, 44))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 94, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 94, 75))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 94, 86))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 94, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 94, 95))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 94, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 94, 107))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 94, 122))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 94, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 94, 167))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 94, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 94, 20))

    static reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 95, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 95, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 95, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 95, 44))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 95, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 95, 75))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 95, 86))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 95, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 95, 95))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 95, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 95, 107))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 95, 122))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 95, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 95, 149))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 95, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 95, 20))

    static reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 97, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 97, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 97, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 97, 44))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 97, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 97, 57))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 97, 68))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 97, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 97, 77))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 97, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 97, 89))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 97, 104))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 97, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 97, 149))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 97, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 97, 20))

    static reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
>reduce : Symbol(Promise.reduce, Decl(bluebirdStaticThis.ts, 86, 129), Decl(bluebirdStaticThis.ts, 88, 216), Decl(bluebirdStaticThis.ts, 89, 198), Decl(bluebirdStaticThis.ts, 91, 198), Decl(bluebirdStaticThis.ts, 92, 180) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 98, 18))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 98, 20))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 98, 24))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 98, 44))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 98, 18))
>reducer : Symbol(reducer, Decl(bluebirdStaticThis.ts, 98, 57))
>total : Symbol(total, Decl(bluebirdStaticThis.ts, 98, 68))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 98, 20))
>current : Symbol(current, Decl(bluebirdStaticThis.ts, 98, 77))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 98, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 98, 89))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 98, 104))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 98, 20))
>initialValue : Symbol(initialValue, Decl(bluebirdStaticThis.ts, 98, 131))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 98, 20))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 98, 20))

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 100, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 100, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 100, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 100, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 100, 90))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 100, 102))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 100, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 100, 110))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 100, 125))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 100, 18))

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 101, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 101, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 101, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 101, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 101, 90))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 101, 102))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 101, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 101, 110))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 101, 125))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 101, 18))

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 102, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 102, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 102, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 102, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 102, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 102, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 102, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 102, 92))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 102, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 102, 18))

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 103, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 103, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 103, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 103, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 103, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 103, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 103, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 103, 92))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 103, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 103, 18))

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 104, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 104, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 104, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 104, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 104, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 104, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 104, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 104, 92))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 104, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 104, 18))

    static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 105, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 105, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 105, 41))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 105, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 105, 72))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 105, 84))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 105, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 105, 92))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 105, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 105, 18))

    static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 106, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 106, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 106, 41))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 106, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 106, 54))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 106, 66))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 106, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 106, 74))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 106, 89))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Thenable : Symbol(Promise.Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 106, 18))

    static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
>filter : Symbol(Promise.filter, Decl(bluebirdStaticThis.ts, 98, 162), Decl(bluebirdStaticThis.ts, 100, 191), Decl(bluebirdStaticThis.ts, 101, 173), Decl(bluebirdStaticThis.ts, 102, 173), Decl(bluebirdStaticThis.ts, 103, 155) ... and 3 more)
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 107, 18))
>dit : Symbol(dit, Decl(bluebirdStaticThis.ts, 107, 21))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>values : Symbol(values, Decl(bluebirdStaticThis.ts, 107, 41))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 107, 18))
>filterer : Symbol(filterer, Decl(bluebirdStaticThis.ts, 107, 54))
>item : Symbol(item, Decl(bluebirdStaticThis.ts, 107, 66))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 107, 18))
>index : Symbol(index, Decl(bluebirdStaticThis.ts, 107, 74))
>arrayLength : Symbol(arrayLength, Decl(bluebirdStaticThis.ts, 107, 89))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 107, 18))
}

export declare namespace Promise {
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

	export interface Thenable<R> {
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 111, 27))

		then<U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: any) => Thenable<U>): Thenable<U>;
>then : Symbol(Thenable.then, Decl(bluebirdStaticThis.ts, 111, 31), Decl(bluebirdStaticThis.ts, 112, 104), Decl(bluebirdStaticThis.ts, 113, 95), Decl(bluebirdStaticThis.ts, 114, 94))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 112, 7))
>onFulfilled : Symbol(onFulfilled, Decl(bluebirdStaticThis.ts, 112, 10))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 112, 24))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 111, 27))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 112, 7))
>onRejected : Symbol(onRejected, Decl(bluebirdStaticThis.ts, 112, 49))
>error : Symbol(error, Decl(bluebirdStaticThis.ts, 112, 63))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 112, 7))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 112, 7))

		then<U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: any) => U): Thenable<U>;
>then : Symbol(Thenable.then, Decl(bluebirdStaticThis.ts, 111, 31), Decl(bluebirdStaticThis.ts, 112, 104), Decl(bluebirdStaticThis.ts, 113, 95), Decl(bluebirdStaticThis.ts, 114, 94))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 113, 7))
>onFulfilled : Symbol(onFulfilled, Decl(bluebirdStaticThis.ts, 113, 10))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 113, 24))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 111, 27))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 113, 7))
>onRejected : Symbol(onRejected, Decl(bluebirdStaticThis.ts, 113, 49))
>error : Symbol(error, Decl(bluebirdStaticThis.ts, 113, 64))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 113, 7))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 113, 7))

		then<U>(onFulfilled: (value: R) => U, onRejected: (error: any) => Thenable<U>): Thenable<U>;
>then : Symbol(Thenable.then, Decl(bluebirdStaticThis.ts, 111, 31), Decl(bluebirdStaticThis.ts, 112, 104), Decl(bluebirdStaticThis.ts, 113, 95), Decl(bluebirdStaticThis.ts, 114, 94))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 114, 7))
>onFulfilled : Symbol(onFulfilled, Decl(bluebirdStaticThis.ts, 114, 10))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 114, 24))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 111, 27))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 114, 7))
>onRejected : Symbol(onRejected, Decl(bluebirdStaticThis.ts, 114, 39))
>error : Symbol(error, Decl(bluebirdStaticThis.ts, 114, 53))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 114, 7))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 114, 7))

		then<U>(onFulfilled?: (value: R) => U, onRejected?: (error: any) => U): Thenable<U>;
>then : Symbol(Thenable.then, Decl(bluebirdStaticThis.ts, 111, 31), Decl(bluebirdStaticThis.ts, 112, 104), Decl(bluebirdStaticThis.ts, 113, 95), Decl(bluebirdStaticThis.ts, 114, 94))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 115, 7))
>onFulfilled : Symbol(onFulfilled, Decl(bluebirdStaticThis.ts, 115, 10))
>value : Symbol(value, Decl(bluebirdStaticThis.ts, 115, 25))
>R : Symbol(R, Decl(bluebirdStaticThis.ts, 111, 27))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 115, 7))
>onRejected : Symbol(onRejected, Decl(bluebirdStaticThis.ts, 115, 40))
>error : Symbol(error, Decl(bluebirdStaticThis.ts, 115, 55))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 115, 7))
>Thenable : Symbol(Thenable, Decl(bluebirdStaticThis.ts, 110, 34))
>U : Symbol(U, Decl(bluebirdStaticThis.ts, 115, 7))
	}

}

interface Foo {
>Foo : Symbol(Foo, Decl(bluebirdStaticThis.ts, 118, 1))

    a: number;
>a : Symbol(Foo.a, Decl(bluebirdStaticThis.ts, 120, 15))

    b: string;
>b : Symbol(Foo.b, Decl(bluebirdStaticThis.ts, 121, 14))
}
var x: any;
>x : Symbol(x, Decl(bluebirdStaticThis.ts, 124, 3))

var arr: any[];
>arr : Symbol(arr, Decl(bluebirdStaticThis.ts, 125, 3))

var foo: Foo;
>foo : Symbol(foo, Decl(bluebirdStaticThis.ts, 126, 3))
>Foo : Symbol(Foo, Decl(bluebirdStaticThis.ts, 118, 1))

var fooProm: Promise<Foo>;
>fooProm : Symbol(fooProm, Decl(bluebirdStaticThis.ts, 127, 3))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>Foo : Symbol(Foo, Decl(bluebirdStaticThis.ts, 118, 1))

fooProm = Promise.try(Promise, () => {
>fooProm : Symbol(fooProm, Decl(bluebirdStaticThis.ts, 127, 3))
>Promise.try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

	return foo;
>foo : Symbol(foo, Decl(bluebirdStaticThis.ts, 126, 3))

});
fooProm = Promise.try(Promise, () => {
>fooProm : Symbol(fooProm, Decl(bluebirdStaticThis.ts, 127, 3))
>Promise.try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

	return foo;
>foo : Symbol(foo, Decl(bluebirdStaticThis.ts, 126, 3))

}, arr);
>arr : Symbol(arr, Decl(bluebirdStaticThis.ts, 125, 3))

fooProm = Promise.try(Promise, () => {
>fooProm : Symbol(fooProm, Decl(bluebirdStaticThis.ts, 127, 3))
>Promise.try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))
>try : Symbol(Promise.try, Decl(bluebirdStaticThis.ts, 5, 125), Decl(bluebirdStaticThis.ts, 6, 107))
>Promise : Symbol(Promise, Decl(bluebirdStaticThis.ts, 0, 0), Decl(bluebirdStaticThis.ts, 108, 1))

	return foo;
>foo : Symbol(foo, Decl(bluebirdStaticThis.ts, 126, 3))

}, arr, x);
>arr : Symbol(arr, Decl(bluebirdStaticThis.ts, 125, 3))
>x : Symbol(x, Decl(bluebirdStaticThis.ts, 124, 3))

