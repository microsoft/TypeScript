//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance.ts] ////

=== callSignatureAssignabilityInInheritance.ts ===
namespace CallSignature {
>CallSignature : Symbol(CallSignature, Decl(callSignatureAssignabilityInInheritance.ts, 0, 0))

    interface Base { // T
>Base : Symbol(Base, Decl(callSignatureAssignabilityInInheritance.ts, 0, 25))

        // M's
        (x: number): void;
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 3, 9))

        (x: number, y: number): void;
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 4, 9))
>y : Symbol(y, Decl(callSignatureAssignabilityInInheritance.ts, 4, 19))
    }

    // S's
    interface I extends Base {
>I : Symbol(I, Decl(callSignatureAssignabilityInInheritance.ts, 5, 5))
>Base : Symbol(Base, Decl(callSignatureAssignabilityInInheritance.ts, 0, 25))

        // N's
        (x: number): number; // ok because base returns void
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 10, 9))

        (x: number, y: number): boolean; // ok because base returns void
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 11, 9))
>y : Symbol(y, Decl(callSignatureAssignabilityInInheritance.ts, 11, 19))

        <T>(x: T): string; // ok because base returns void
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 12, 9))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 12, 12))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 12, 9))
    }

    interface Base2 { // T
>Base2 : Symbol(Base2, Decl(callSignatureAssignabilityInInheritance.ts, 13, 5))

        // M's
        (x: number): number;
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 17, 9))
    }

    // S's
    interface I2 extends Base2 {
>I2 : Symbol(I2, Decl(callSignatureAssignabilityInInheritance.ts, 18, 5))
>Base2 : Symbol(Base2, Decl(callSignatureAssignabilityInInheritance.ts, 13, 5))

        // N's
        (x: number): string; // error because base returns non-void;
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 23, 9))
    }

    // S's
    interface I3 extends Base2 {
>I3 : Symbol(I3, Decl(callSignatureAssignabilityInInheritance.ts, 24, 5))
>Base2 : Symbol(Base2, Decl(callSignatureAssignabilityInInheritance.ts, 13, 5))

        // N's
        <T>(x: T): string; // ok, adds a new call signature
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 29, 9))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 29, 12))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 29, 9))
    }
}

namespace MemberWithCallSignature {
>MemberWithCallSignature : Symbol(MemberWithCallSignature, Decl(callSignatureAssignabilityInInheritance.ts, 31, 1))

    interface Base { // T
>Base : Symbol(Base, Decl(callSignatureAssignabilityInInheritance.ts, 33, 35))

        // M's
        a: (x: number) => void;
>a : Symbol(Base.a, Decl(callSignatureAssignabilityInInheritance.ts, 34, 20))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 36, 12))

        a2: (x: number, y: number) => void;
>a2 : Symbol(Base.a2, Decl(callSignatureAssignabilityInInheritance.ts, 36, 31))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 37, 13))
>y : Symbol(y, Decl(callSignatureAssignabilityInInheritance.ts, 37, 23))

        a3: <T>(x: T) => void;
>a3 : Symbol(Base.a3, Decl(callSignatureAssignabilityInInheritance.ts, 37, 43))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 38, 13))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 38, 16))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 38, 13))
    }

    // S's
    interface I extends Base {
>I : Symbol(I, Decl(callSignatureAssignabilityInInheritance.ts, 39, 5))
>Base : Symbol(Base, Decl(callSignatureAssignabilityInInheritance.ts, 33, 35))

        // N's
        a: (x: number) => number; // ok because base returns void
>a : Symbol(I.a, Decl(callSignatureAssignabilityInInheritance.ts, 42, 30))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 44, 12))

        a2: (x: number, y: number) => boolean; // ok because base returns void
>a2 : Symbol(I.a2, Decl(callSignatureAssignabilityInInheritance.ts, 44, 33))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 45, 13))
>y : Symbol(y, Decl(callSignatureAssignabilityInInheritance.ts, 45, 23))

        a3: <T>(x: T) => string; // ok because base returns void
>a3 : Symbol(I.a3, Decl(callSignatureAssignabilityInInheritance.ts, 45, 46))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 46, 13))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 46, 16))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 46, 13))
    }

    interface Base2 { // T
>Base2 : Symbol(Base2, Decl(callSignatureAssignabilityInInheritance.ts, 47, 5))

        // M's
        a: (x: number) => number;
>a : Symbol(Base2.a, Decl(callSignatureAssignabilityInInheritance.ts, 49, 21))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 51, 12))

        a2: <T>(x: T) => T;
>a2 : Symbol(Base2.a2, Decl(callSignatureAssignabilityInInheritance.ts, 51, 33))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 52, 13))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 52, 16))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 52, 13))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 52, 13))
    }

    // S's
    interface I2 extends Base2 {
>I2 : Symbol(I2, Decl(callSignatureAssignabilityInInheritance.ts, 53, 5))
>Base2 : Symbol(Base2, Decl(callSignatureAssignabilityInInheritance.ts, 47, 5))

        // N's
        a: (x: number) => string; // error because base returns non-void;
>a : Symbol(I2.a, Decl(callSignatureAssignabilityInInheritance.ts, 56, 32))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 58, 12))
    }

    // S's
    interface I3 extends Base2 {
>I3 : Symbol(I3, Decl(callSignatureAssignabilityInInheritance.ts, 59, 5))
>Base2 : Symbol(Base2, Decl(callSignatureAssignabilityInInheritance.ts, 47, 5))

        // N's
        a2: <T>(x: T) => string; // error because base returns non-void;
>a2 : Symbol(I3.a2, Decl(callSignatureAssignabilityInInheritance.ts, 62, 32))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 64, 13))
>x : Symbol(x, Decl(callSignatureAssignabilityInInheritance.ts, 64, 16))
>T : Symbol(T, Decl(callSignatureAssignabilityInInheritance.ts, 64, 13))
    }
}
