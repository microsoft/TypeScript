//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance.ts] ////

=== callSignatureAssignabilityInInheritance.ts ===
module CallSignature {
    interface Base { // T
        // M's
        (x: number): void;
>x : number
>  : ^^^^^^

        (x: number, y: number): void;
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
    }

    // S's
    interface I extends Base {
        // N's
        (x: number): number; // ok because base returns void
>x : number
>  : ^^^^^^

        (x: number, y: number): boolean; // ok because base returns void
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

        <T>(x: T): string; // ok because base returns void
>x : T
>  : ^
    }

    interface Base2 { // T
        // M's
        (x: number): number;
>x : number
>  : ^^^^^^
    }

    // S's
    interface I2 extends Base2 {
        // N's
        (x: number): string; // error because base returns non-void;
>x : number
>  : ^^^^^^
    }

    // S's
    interface I3 extends Base2 {
        // N's
        <T>(x: T): string; // ok, adds a new call signature
>x : T
>  : ^
    }
}

module MemberWithCallSignature {
    interface Base { // T
        // M's
        a: (x: number) => void;
>a : (x: number) => void
>  : ^ ^^      ^^^^^    
>x : number
>  : ^^^^^^

        a2: (x: number, y: number) => void;
>a2 : (x: number, y: number) => void
>   : ^ ^^      ^^ ^^      ^^^^^    
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

        a3: <T>(x: T) => void;
>a3 : <T>(x: T) => void
>   : ^ ^^ ^^ ^^^^^    
>x : T
>  : ^
    }

    // S's
    interface I extends Base {
        // N's
        a: (x: number) => number; // ok because base returns void
>a : (x: number) => number
>  : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

        a2: (x: number, y: number) => boolean; // ok because base returns void
>a2 : (x: number, y: number) => boolean
>   : ^ ^^      ^^ ^^      ^^^^^       
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

        a3: <T>(x: T) => string; // ok because base returns void
>a3 : <T>(x: T) => string
>   : ^ ^^ ^^ ^^^^^      
>x : T
>  : ^
    }

    interface Base2 { // T
        // M's
        a: (x: number) => number;
>a : (x: number) => number
>  : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

        a2: <T>(x: T) => T;
>a2 : <T>(x: T) => T
>   : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
    }

    // S's
    interface I2 extends Base2 {
        // N's
        a: (x: number) => string; // error because base returns non-void;
>a : (x: number) => string
>  : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
    }

    // S's
    interface I3 extends Base2 {
        // N's
        a2: <T>(x: T) => string; // error because base returns non-void;
>a2 : <T>(x: T) => string
>   : ^ ^^ ^^ ^^^^^      
>x : T
>  : ^
    }
}
