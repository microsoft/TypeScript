//// [tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance6.ts] ////

=== callSignatureAssignabilityInInheritance6.ts ===
// checking subtype relations for function types as it relates to contextual signature instantiation
// same as subtypingWithCallSignatures4 but using class type parameters instead of generic signatures
// all are errors

class Base { foo: string; }
>Base : Base
>     : ^^^^
>foo : string
>    : ^^^^^^

class Derived extends Base { bar: string; }
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^
>bar : string
>    : ^^^^^^

class Derived2 extends Derived { baz: string; }
>Derived2 : Derived2
>         : ^^^^^^^^
>Derived : Derived
>        : ^^^^^^^
>baz : string
>    : ^^^^^^

class OtherDerived extends Base { bing: string; }
>OtherDerived : OtherDerived
>             : ^^^^^^^^^^^^
>Base : Base
>     : ^^^^
>bing : string
>     : ^^^^^^

interface A { // T
    // M's
    a: <T>(x: T) => T[];
>a : <T>(x: T) => T[]
>  : ^ ^^ ^^ ^^^^^   
>x : T
>  : ^

    a2: <T>(x: T) => string[];
>a2 : <T>(x: T) => string[]
>   : ^ ^^ ^^ ^^^^^        
>x : T
>  : ^

    a3: <T>(x: T) => void;
>a3 : <T>(x: T) => void
>   : ^ ^^ ^^ ^^^^^    
>x : T
>  : ^

    a4: <T,U>(x: T, y: U) => string;
>a4 : <T, U>(x: T, y: U) => string
>   : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^      
>x : T
>  : ^
>y : U
>  : ^

    a5: <T,U>(x: (arg: T) => U) => T;
>a5 : <T, U>(x: (arg: T) => U) => T
>   : ^ ^^ ^^ ^^             ^^^^^ 
>x : (arg: T) => U
>  : ^   ^^ ^^^^^ 
>arg : T
>    : ^

    a6: <T extends Base>(x: (arg: T) => Derived) => T;
>a6 : <T extends Base>(x: (arg: T) => Derived) => T
>   : ^ ^^^^^^^^^    ^^ ^^                   ^^^^^ 
>x : (arg: T) => Derived
>  : ^   ^^ ^^^^^       
>arg : T
>    : ^

    a11: <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base;
>a11 : <T>(x: { foo: T; }, y: { foo: T; bar: T; }) => Base
>    : ^ ^^ ^^           ^^ ^^                   ^^^^^    
>x : { foo: T; }
>  : ^^^^^^^ ^^^
>foo : T
>    : ^
>y : { foo: T; bar: T; }
>  : ^^^^^^^ ^^^^^^^ ^^^
>foo : T
>    : ^
>bar : T
>    : ^

    a15: <T>(x: { a: T; b: T }) => T[];
>a15 : <T>(x: { a: T; b: T; }) => T[]
>    : ^ ^^ ^^               ^^^^^   
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^

    a16: <T extends Base>(x: { a: T; b: T }) => T[];
>a16 : <T extends Base>(x: { a: T; b: T; }) => T[]
>    : ^ ^^^^^^^^^    ^^ ^^               ^^^^^   
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^
}

// S's
interface I<T> extends A {
    a: (x: T) => T[]; 
>a : (x: T) => T[]
>  : ^ ^^ ^^^^^   
>x : T
>  : ^
}

interface I2<T> extends A {
    a2: (x: T) => string[]; 
>a2 : (x: T) => string[]
>   : ^ ^^ ^^^^^        
>x : T
>  : ^
}

interface I3<T> extends A {
    a3: (x: T) => T;
>a3 : (x: T) => T
>   : ^ ^^ ^^^^^ 
>x : T
>  : ^
}

interface I4<T> extends A {
    a4: <U>(x: T, y: U) => string; 
>a4 : <U>(x: T, y: U) => string
>   : ^ ^^ ^^ ^^ ^^ ^^^^^      
>x : T
>  : ^
>y : U
>  : ^
}

interface I5<T> extends A {
    a5: <U>(x: (arg: T) => U) => T; 
>a5 : <U>(x: (arg: T) => U) => T
>   : ^ ^^ ^^             ^^^^^ 
>x : (arg: T) => U
>  : ^   ^^ ^^^^^ 
>arg : T
>    : ^
}

interface I7<T> extends A {
    a11: <U>(x: { foo: T }, y: { foo: U; bar: U }) => Base; 
>a11 : <U>(x: { foo: T; }, y: { foo: U; bar: U; }) => Base
>    : ^ ^^ ^^           ^^ ^^                   ^^^^^    
>x : { foo: T; }
>  : ^^^^^^^ ^^^
>foo : T
>    : ^
>y : { foo: U; bar: U; }
>  : ^^^^^^^ ^^^^^^^ ^^^
>foo : U
>    : ^
>bar : U
>    : ^
}

interface I9<T> extends A {
    a16: (x: { a: T; b: T }) => T[]; 
>a16 : (x: { a: T; b: T; }) => T[]
>    : ^ ^^               ^^^^^   
>x : { a: T; b: T; }
>  : ^^^^^ ^^^^^ ^^^
>a : T
>  : ^
>b : T
>  : ^
}
