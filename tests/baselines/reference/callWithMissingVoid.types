//// [tests/cases/conformance/expressions/functionCalls/callWithMissingVoid.ts] ////

=== callWithMissingVoid.ts ===
// From #4260
class X<T> {
>X : X<T>
>  : ^^^^

    f(t: T) {
>f : (t: T) => { a: T; }
>  : ^ ^^ ^^^^^^^^^^^^^^
>t : T
>  : ^

        return { a: t };
>{ a: t } : { a: T; }
>         : ^^^^^^^^^
>a : T
>  : ^
>t : T
>  : ^
    }
}

declare const x: X<void>;
>x : X<void>
>  : ^^^^^^^

x.f() // no error because f expects void
>x.f() : { a: void; }
>      : ^^^^^^^^^^^^
>x.f : (t: void) => { a: void; }
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^
>x : X<void>
>  : ^^^^^^^
>f : (t: void) => { a: void; }
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^

declare const xUnion: X<void | number>;
>xUnion : X<number | void>
>       : ^^^^^^^^^^^^^^^^

xUnion.f(42) // no error because f accepts number
>xUnion.f(42) : { a: number | void; }
>             : ^^^^^^^^^^^^^^^^^^^^^
>xUnion.f : (t: number | void) => { a: number | void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>xUnion : X<number | void>
>       : ^^^^^^^^^^^^^^^^
>f : (t: number | void) => { a: number | void; }
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>42 : 42
>   : ^^

xUnion.f() // no error because f accepts void
>xUnion.f() : { a: number | void; }
>           : ^^^^^^^^^^^^^^^^^^^^^
>xUnion.f : (t: number | void) => { a: number | void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>xUnion : X<number | void>
>       : ^^^^^^^^^^^^^^^^
>f : (t: number | void) => { a: number | void; }
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const xAny: X<any>;
>xAny : X<any>
>     : ^^^^^^

xAny.f() // error, any still expects an argument
>xAny.f() : { a: any; }
>         : ^^^^^^^^^^^
>xAny.f : (t: any) => { a: any; }
>       : ^ ^^^^^^^^^^^^^^^^^^^^^
>xAny : X<any>
>     : ^^^^^^
>f : (t: any) => { a: any; }
>  : ^ ^^^^^^^^^^^^^^^^^^^^^

declare const xUnknown: X<unknown>;
>xUnknown : X<unknown>
>         : ^^^^^^^^^^

xUnknown.f() // error, unknown still expects an argument
>xUnknown.f() : { a: unknown; }
>             : ^^^^^^^^^^^^^^^
>xUnknown.f : (t: unknown) => { a: unknown; }
>           : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>xUnknown : X<unknown>
>         : ^^^^^^^^^^
>f : (t: unknown) => { a: unknown; }
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const xNever: X<never>;
>xNever : X<never>
>       : ^^^^^^^^

xNever.f() // error, never still expects an argument
>xNever.f() : { a: never; }
>           : ^^^^^^^^^^^^^
>xNever.f : (t: never) => { a: never; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^
>xNever : X<never>
>       : ^^^^^^^^
>f : (t: never) => { a: never; }
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^


// Promise has previously been updated to work without arguments, but to show this fixes the issue too.

class MyPromise<X> {
>MyPromise : MyPromise<X>
>          : ^^^^^^^^^^^^

    constructor(executor: (resolve: (value: X) => void) => void) {
>executor : (resolve: (value: X) => void) => void
>         : ^       ^^                  ^^^^^    
>resolve : (value: X) => void
>        : ^     ^^ ^^^^^    
>value : X
>      : ^

    }
}

new MyPromise<void>(resolve => resolve()); // no error
>new MyPromise<void>(resolve => resolve()) : MyPromise<void>
>                                          : ^^^^^^^^^^^^^^^
>MyPromise : typeof MyPromise
>          : ^^^^^^^^^^^^^^^^
>resolve => resolve() : (resolve: (value: void) => void) => void
>                     : ^       ^^^     ^^^^^^^^^^^    ^^^^^^^^^
>resolve : (value: void) => void
>        : ^     ^^^^^^^^^^^    
>resolve() : void
>          : ^^^^
>resolve : (value: void) => void
>        : ^     ^^^^^^^^^^^    

new MyPromise<void | number>(resolve => resolve()); // no error
>new MyPromise<void | number>(resolve => resolve()) : MyPromise<number | void>
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^
>MyPromise : typeof MyPromise
>          : ^^^^^^^^^^^^^^^^
>resolve => resolve() : (resolve: (value: number | void) => void) => void
>                     : ^       ^^^     ^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^
>resolve : (value: number | void) => void
>        : ^     ^^^^^^^^^^^^^^^^^^^^    
>resolve() : void
>          : ^^^^
>resolve : (value: number | void) => void
>        : ^     ^^^^^^^^^^^^^^^^^^^^    

new MyPromise<any>(resolve => resolve()); // error, `any` arguments cannot be omitted
>new MyPromise<any>(resolve => resolve()) : MyPromise<any>
>                                         : ^^^^^^^^^^^^^^
>MyPromise : typeof MyPromise
>          : ^^^^^^^^^^^^^^^^
>resolve => resolve() : (resolve: (value: any) => void) => void
>                     : ^       ^^^     ^^^^^^^^^^    ^^^^^^^^^
>resolve : (value: any) => void
>        : ^     ^^^^^^^^^^    
>resolve() : void
>          : ^^^^
>resolve : (value: any) => void
>        : ^     ^^^^^^^^^^    

new MyPromise<unknown>(resolve => resolve()); // error, `unknown` arguments cannot be omitted
>new MyPromise<unknown>(resolve => resolve()) : MyPromise<unknown>
>                                             : ^^^^^^^^^^^^^^^^^^
>MyPromise : typeof MyPromise
>          : ^^^^^^^^^^^^^^^^
>resolve => resolve() : (resolve: (value: unknown) => void) => void
>                     : ^       ^^^     ^^^^^^^^^^^^^^    ^^^^^^^^^
>resolve : (value: unknown) => void
>        : ^     ^^^^^^^^^^^^^^    
>resolve() : void
>          : ^^^^
>resolve : (value: unknown) => void
>        : ^     ^^^^^^^^^^^^^^    

new MyPromise<never>(resolve => resolve()); // error, `never` arguments cannot be omitted
>new MyPromise<never>(resolve => resolve()) : MyPromise<never>
>                                           : ^^^^^^^^^^^^^^^^
>MyPromise : typeof MyPromise
>          : ^^^^^^^^^^^^^^^^
>resolve => resolve() : (resolve: (value: never) => void) => void
>                     : ^       ^^^     ^^^^^^^^^^^^    ^^^^^^^^^
>resolve : (value: never) => void
>        : ^     ^^^^^^^^^^^^    
>resolve() : void
>          : ^^^^
>resolve : (value: never) => void
>        : ^     ^^^^^^^^^^^^    


// Multiple parameters

function a(x: number, y: string, z: void): void  {
>a : (x: number, y: string, z: void) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^^^^    
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : void
>  : ^^^^
    
}

a(4, "hello"); // ok
>a(4, "hello") : void
>              : ^^^^
>a : (x: number, y: string, z: void) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^^^^    
>4 : 4
>  : ^
>"hello" : "hello"
>        : ^^^^^^^

a(4, "hello", void 0); // ok
>a(4, "hello", void 0) : void
>                      : ^^^^
>a : (x: number, y: string, z: void) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^^^^    
>4 : 4
>  : ^
>"hello" : "hello"
>        : ^^^^^^^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^

a(4); // not ok
>a(4) : void
>     : ^^^^
>a : (x: number, y: string, z: void) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^^^^    
>4 : 4
>  : ^

function b(x: number, y: string, z: void, what: number): void  {
>b : (x: number, y: string, z: void, what: number) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^    ^^      ^^^^^    
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : void
>  : ^^^^
>what : number
>     : ^^^^^^
    
}

b(4, "hello", void 0, 2); // ok
>b(4, "hello", void 0, 2) : void
>                         : ^^^^
>b : (x: number, y: string, z: void, what: number) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^    ^^      ^^^^^    
>4 : 4
>  : ^
>"hello" : "hello"
>        : ^^^^^^^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^
>2 : 2
>  : ^

b(4, "hello"); // not ok
>b(4, "hello") : void
>              : ^^^^
>b : (x: number, y: string, z: void, what: number) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^    ^^      ^^^^^    
>4 : 4
>  : ^
>"hello" : "hello"
>        : ^^^^^^^

b(4, "hello", void 0); // not ok
>b(4, "hello", void 0) : void
>                      : ^^^^
>b : (x: number, y: string, z: void, what: number) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^    ^^      ^^^^^    
>4 : 4
>  : ^
>"hello" : "hello"
>        : ^^^^^^^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^

b(4); // not ok
>b(4) : void
>     : ^^^^
>b : (x: number, y: string, z: void, what: number) => void
>  : ^ ^^      ^^ ^^      ^^ ^^    ^^    ^^      ^^^^^    
>4 : 4
>  : ^

function c(x: number | void, y: void, z: void | string | number): void  {
>c : (x: number | void, y: void, z: void | string | number) => void
>  : ^ ^^             ^^ ^^    ^^ ^^                      ^^^^^    
>x : number | void
>  : ^^^^^^^^^^^^^
>y : void
>  : ^^^^
>z : string | number | void
>  : ^^^^^^^^^^^^^^^^^^^^^^
    
}

c(3, void 0, void 0); // ok
>c(3, void 0, void 0) : void
>                     : ^^^^
>c : (x: number | void, y: void, z: void | string | number) => void
>  : ^ ^^             ^^ ^^    ^^ ^^                      ^^^^^    
>3 : 3
>  : ^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^

c(3, void 0); // ok
>c(3, void 0) : void
>             : ^^^^
>c : (x: number | void, y: void, z: void | string | number) => void
>  : ^ ^^             ^^ ^^    ^^ ^^                      ^^^^^    
>3 : 3
>  : ^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^

c(3); // ok
>c(3) : void
>     : ^^^^
>c : (x: number | void, y: void, z: void | string | number) => void
>  : ^ ^^             ^^ ^^    ^^ ^^                      ^^^^^    
>3 : 3
>  : ^

c(); // ok
>c() : void
>    : ^^^^
>c : (x: number | void, y: void, z: void | string | number) => void
>  : ^ ^^             ^^ ^^    ^^ ^^                      ^^^^^    


// Spread Parameters

declare function call<TS extends unknown[]>(
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    

    handler: (...args: TS) => unknown,
>handler : (...args: TS) => unknown
>        : ^^^^    ^^  ^^^^^       
>args : TS
>     : ^^

    ...args: TS): void;
>args : TS
>     : ^^

call((x: number, y: number) => x + y) // error
>call((x: number, y: number) => x + y) : void
>                                      : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number, y: number) => x + y : (x: number, y: number) => number
>                                : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

call((x: number, y: number) => x + y, 4, 2) // ok
>call((x: number, y: number) => x + y, 4, 2) : void
>                                            : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number, y: number) => x + y : (x: number, y: number) => number
>                                : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>4 : 4
>  : ^
>2 : 2
>  : ^

call((x: number, y: void) => x, 4, void 0) // ok
>call((x: number, y: void) => x, 4, void 0) : void
>                                           : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number, y: void) => x : (x: number, y: void) => number
>                          : ^ ^^      ^^ ^^    ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : void
>  : ^^^^
>x : number
>  : ^^^^^^
>4 : 4
>  : ^
>void 0 : undefined
>       : ^^^^^^^^^
>0 : 0
>  : ^

call((x: number, y: void) => x, 4) // ok
>call((x: number, y: void) => x, 4) : void
>                                   : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number, y: void) => x : (x: number, y: void) => number
>                          : ^ ^^      ^^ ^^    ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : void
>  : ^^^^
>x : number
>  : ^^^^^^
>4 : 4
>  : ^

call((x: void, y: void) => 42) // ok
>call((x: void, y: void) => 42) : void
>                               : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: void, y: void) => 42 : (x: void, y: void) => number
>                         : ^ ^^    ^^ ^^    ^^^^^^^^^^^
>x : void
>  : ^^^^
>y : void
>  : ^^^^
>42 : 42
>   : ^^

call((x: number | void, y: number | void) => 42) // ok
>call((x: number | void, y: number | void) => 42) : void
>                                                 : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number | void, y: number | void) => 42 : (x: number | void, y: number | void) => number
>                                           : ^ ^^             ^^ ^^             ^^^^^^^^^^^
>x : number | void
>  : ^^^^^^^^^^^^^
>y : number | void
>  : ^^^^^^^^^^^^^
>42 : 42
>   : ^^

call((x: number | void, y: number | void) => 42, 4) // ok
>call((x: number | void, y: number | void) => 42, 4) : void
>                                                    : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number | void, y: number | void) => 42 : (x: number | void, y: number | void) => number
>                                           : ^ ^^             ^^ ^^             ^^^^^^^^^^^
>x : number | void
>  : ^^^^^^^^^^^^^
>y : number | void
>  : ^^^^^^^^^^^^^
>42 : 42
>   : ^^
>4 : 4
>  : ^

call((x: number | void, y: number | void) => 42, 4, 2) // ok
>call((x: number | void, y: number | void) => 42, 4, 2) : void
>                                                       : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => unknown, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                        ^^^^^    ^^  ^^^^^    
>(x: number | void, y: number | void) => 42 : (x: number | void, y: number | void) => number
>                                           : ^ ^^             ^^ ^^             ^^^^^^^^^^^
>x : number | void
>  : ^^^^^^^^^^^^^
>y : number | void
>  : ^^^^^^^^^^^^^
>42 : 42
>   : ^^
>4 : 4
>  : ^
>2 : 2
>  : ^

