//// [tests/cases/compiler/capturedLetConstInLoop6_ES6.ts] ////

=== capturedLetConstInLoop6_ES6.ts ===
// ====let
for (let x of []) {
>x : any
>  : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    (function() { return x});
>(function() { return x}) : () => any
>                         : ^^^^^^^^^
>function() { return x} : () => any
>                       : ^^^^^^^^^
>x : any
>  : ^^^

    (() => x);
>(() => x) : () => any
>          : ^^^^^^^^^
>() => x : () => any
>        : ^^^^^^^^^
>x : any
>  : ^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

        continue;
    }
}

for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    (function() { return x});
>(function() { return x}) : () => string
>                         : ^^^^^^^^^^^^
>function() { return x} : () => string
>                       : ^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    (() => x);
>(() => x) : () => string
>          : ^^^^^^^^^^^^
>() => x : () => string
>        : ^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    if (x == "1") {
>x == "1" : boolean
>         : ^^^^^^^
>x : string
>  : ^^^^^^
>"1" : "1"
>    : ^^^

        break;
    }
    if (x == "2") {
>x == "2" : boolean
>         : ^^^^^^^
>x : string
>  : ^^^^^^
>"2" : "2"
>    : ^^^

        continue;
    }
}


for (let x = 0; x < 1; ++x) {
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>x < 1 : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^

    (function() { return x});
>(function() { return x}) : () => number
>                         : ^^^^^^^^^^^^
>function() { return x} : () => number
>                       : ^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    (() => x);
>(() => x) : () => number
>          : ^^^^^^^^^^^^
>() => x : () => number
>        : ^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

        continue;
    }
}

while (1 === 1) {
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    let x;
>x : any
>  : ^^^

    (function() { return x});
>(function() { return x}) : () => any
>                         : ^^^^^^^^^
>function() { return x} : () => any
>                       : ^^^^^^^^^
>x : any
>  : ^^^

    (() => x);
>(() => x) : () => any
>          : ^^^^^^^^^
>() => x : () => any
>        : ^^^^^^^^^
>x : any
>  : ^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

        continue;
    }
}

do {
    let x;
>x : any
>  : ^^^

    (function() { return x});
>(function() { return x}) : () => any
>                         : ^^^^^^^^^
>function() { return x} : () => any
>                       : ^^^^^^^^^
>x : any
>  : ^^^

    (() => x);
>(() => x) : () => any
>          : ^^^^^^^^^
>() => x : () => any
>        : ^^^^^^^^^
>x : any
>  : ^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

        continue;
    }
} while (1 === 1)
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

for (let y = 0; y < 1; ++y) {
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
>y < 1 : boolean
>      : ^^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^
>++y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    let x = 1;
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    (function() { return x});
>(function() { return x}) : () => number
>                         : ^^^^^^^^^^^^
>function() { return x} : () => number
>                       : ^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    (() => x);
>(() => x) : () => number
>          : ^^^^^^^^^^^^
>() => x : () => number
>        : ^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

        continue;
    }
}

for (let x = 0, y = 1; x < 1; ++x) {
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^
>x < 1 : boolean
>      : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^

    (function() { return x + y});
>(function() { return x + y}) : () => number
>                             : ^^^^^^^^^^^^
>function() { return x + y} : () => number
>                           : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    (() => x + y);
>(() => x + y) : () => number
>              : ^^^^^^^^^^^^
>() => x + y : () => number
>            : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

        continue;
    }
}

while (1 === 1) {
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    let x, y;
>x : any
>  : ^^^
>y : any
>  : ^^^

    (function() { return x + y});
>(function() { return x + y}) : () => any
>                             : ^^^^^^^^^
>function() { return x + y} : () => any
>                           : ^^^^^^^^^
>x + y : any
>      : ^^^
>x : any
>  : ^^^
>y : any
>  : ^^^

    (() => x + y);
>(() => x + y) : () => any
>              : ^^^^^^^^^
>() => x + y : () => any
>            : ^^^^^^^^^
>x + y : any
>      : ^^^
>x : any
>  : ^^^
>y : any
>  : ^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

        continue;
    }
}

do {
    let x, y;
>x : any
>  : ^^^
>y : any
>  : ^^^

    (function() { return x + y});
>(function() { return x + y}) : () => any
>                             : ^^^^^^^^^
>function() { return x + y} : () => any
>                           : ^^^^^^^^^
>x + y : any
>      : ^^^
>x : any
>  : ^^^
>y : any
>  : ^^^

    (() => x + y);
>(() => x + y) : () => any
>              : ^^^^^^^^^
>() => x + y : () => any
>            : ^^^^^^^^^
>x + y : any
>      : ^^^
>x : any
>  : ^^^
>y : any
>  : ^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

        continue;
    }
} while (1 === 1)
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

for (let y = 0; y < 1; ++y) {
>y : number
>  : ^^^^^^
>0 : 0
>  : ^
>y < 1 : boolean
>      : ^^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^
>++y : number
>    : ^^^^^^
>y : number
>  : ^^^^^^

    let x = 1;
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    (function() { return x + y});
>(function() { return x + y}) : () => number
>                             : ^^^^^^^^^^^^
>function() { return x + y} : () => number
>                           : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    (() => x + y);
>(() => x + y) : () => number
>              : ^^^^^^^^^^^^
>() => x + y : () => number
>            : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

        continue;
    }
}

// ====const

for (const x of []) {
>x : any
>  : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    (function() { return x});
>(function() { return x}) : () => any
>                         : ^^^^^^^^^
>function() { return x} : () => any
>                       : ^^^^^^^^^
>x : any
>  : ^^^

    (() => x);
>(() => x) : () => any
>          : ^^^^^^^^^
>() => x : () => any
>        : ^^^^^^^^^
>x : any
>  : ^^^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

        continue;
    }
}

for (const x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    (function() { return x});
>(function() { return x}) : () => string
>                         : ^^^^^^^^^^^^
>function() { return x} : () => string
>                       : ^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    (() => x);
>(() => x) : () => string
>          : ^^^^^^^^^^^^
>() => x : () => string
>        : ^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    if (x == "1") {
>x == "1" : boolean
>         : ^^^^^^^
>x : string
>  : ^^^^^^
>"1" : "1"
>    : ^^^

        break;
    }
    if (x == "2") {
>x == "2" : boolean
>         : ^^^^^^^
>x : string
>  : ^^^^^^
>"2" : "2"
>    : ^^^

        continue;
    }
}


for (const x = 0; x < 1;) {
>x : 0
>  : ^
>0 : 0
>  : ^
>x < 1 : boolean
>      : ^^^^^^^
>x : 0
>  : ^
>1 : 1
>  : ^

    (function() { return x});
>(function() { return x}) : () => number
>                         : ^^^^^^^^^^^^
>function() { return x} : () => number
>                       : ^^^^^^^^^^^^
>x : 0
>  : ^

    (() => x);
>(() => x) : () => number
>          : ^^^^^^^^^^^^
>() => x : () => number
>        : ^^^^^^^^^^^^
>x : 0
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 0
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : 0
>  : ^
>2 : 2
>  : ^

        continue;
    }
}

while (1 === 1) {
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    const x = 1;
>x : 1
>  : ^
>1 : 1
>  : ^

    (function() { return x});
>(function() { return x}) : () => number
>                         : ^^^^^^^^^^^^
>function() { return x} : () => number
>                       : ^^^^^^^^^^^^
>x : 1
>  : ^

    (() => x);
>(() => x) : () => number
>          : ^^^^^^^^^^^^
>() => x : () => number
>        : ^^^^^^^^^^^^
>x : 1
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : never
>  : ^^^^^
>2 : 2
>  : ^

        continue;
    }
}

do {
    const x = 1;
>x : 1
>  : ^
>1 : 1
>  : ^

    (function() { return x});
>(function() { return x}) : () => number
>                         : ^^^^^^^^^^^^
>function() { return x} : () => number
>                       : ^^^^^^^^^^^^
>x : 1
>  : ^

    (() => x);
>(() => x) : () => number
>          : ^^^^^^^^^^^^
>() => x : () => number
>        : ^^^^^^^^^^^^
>x : 1
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : never
>  : ^^^^^
>2 : 2
>  : ^

        continue;
    }
} while (1 === 1)
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

for (const y = 0; y < 1;) {
>y : 0
>  : ^
>0 : 0
>  : ^
>y < 1 : boolean
>      : ^^^^^^^
>y : 0
>  : ^
>1 : 1
>  : ^

    const x = 1;
>x : 1
>  : ^
>1 : 1
>  : ^

    (function() { return x});
>(function() { return x}) : () => number
>                         : ^^^^^^^^^^^^
>function() { return x} : () => number
>                       : ^^^^^^^^^^^^
>x : 1
>  : ^

    (() => x);
>(() => x) : () => number
>          : ^^^^^^^^^^^^
>() => x : () => number
>        : ^^^^^^^^^^^^
>x : 1
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : never
>  : ^^^^^
>2 : 2
>  : ^

        continue;
    }
}

for (const x = 0, y = 1; x < 1;) {
>x : 0
>  : ^
>0 : 0
>  : ^
>y : 1
>  : ^
>1 : 1
>  : ^
>x < 1 : boolean
>      : ^^^^^^^
>x : 0
>  : ^
>1 : 1
>  : ^

    (function() { return x + y});
>(function() { return x + y}) : () => number
>                             : ^^^^^^^^^^^^
>function() { return x + y} : () => number
>                           : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 0
>  : ^
>y : 1
>  : ^

    (() => x + y);
>(() => x + y) : () => number
>              : ^^^^^^^^^^^^
>() => x + y : () => number
>            : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 0
>  : ^
>y : 1
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 0
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : 0
>  : ^
>2 : 2
>  : ^

        continue;
    }
}

while (1 === 1) {
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    const x = 1, y = 1;
>x : 1
>  : ^
>1 : 1
>  : ^
>y : 1
>  : ^
>1 : 1
>  : ^

    (function() { return x + y});
>(function() { return x + y}) : () => number
>                             : ^^^^^^^^^^^^
>function() { return x + y} : () => number
>                           : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 1
>  : ^
>y : 1
>  : ^

    (() => x + y);
>(() => x + y) : () => number
>              : ^^^^^^^^^^^^
>() => x + y : () => number
>            : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 1
>  : ^
>y : 1
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : never
>  : ^^^^^
>2 : 2
>  : ^

        continue;
    }
}

do {
    const x = 1, y = 1;
>x : 1
>  : ^
>1 : 1
>  : ^
>y : 1
>  : ^
>1 : 1
>  : ^

    (function() { return x + y});
>(function() { return x + y}) : () => number
>                             : ^^^^^^^^^^^^
>function() { return x + y} : () => number
>                           : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 1
>  : ^
>y : 1
>  : ^

    (() => x + y);
>(() => x + y) : () => number
>              : ^^^^^^^^^^^^
>() => x + y : () => number
>            : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 1
>  : ^
>y : 1
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : never
>  : ^^^^^
>2 : 2
>  : ^

        continue;
    }
} while (1 === 1)
>1 === 1 : boolean
>        : ^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

for (const y = 0; y < 1;) {
>y : 0
>  : ^
>0 : 0
>  : ^
>y < 1 : boolean
>      : ^^^^^^^
>y : 0
>  : ^
>1 : 1
>  : ^

    const x = 1;
>x : 1
>  : ^
>1 : 1
>  : ^

    (function() { return x + y});
>(function() { return x + y}) : () => number
>                             : ^^^^^^^^^^^^
>function() { return x + y} : () => number
>                           : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 1
>  : ^
>y : 0
>  : ^

    (() => x + y);
>(() => x + y) : () => number
>              : ^^^^^^^^^^^^
>() => x + y : () => number
>            : ^^^^^^^^^^^^
>x + y : number
>      : ^^^^^^
>x : 1
>  : ^
>y : 0
>  : ^

    if (x == 1) {
>x == 1 : boolean
>       : ^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^

        break;
    }
    if (x == 2) {
>x == 2 : boolean
>       : ^^^^^^^
>x : never
>  : ^^^^^
>2 : 2
>  : ^

        continue;
    }
}


