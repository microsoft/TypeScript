//// [tests/cases/conformance/jsdoc/checkJsdocTypeTagOnObjectProperty2.ts] ////

=== 0.js ===
// @ts-check
var lol;
>lol : any
>    : ^^^

const obj = {
>obj : { bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>    : ^^^^^^^                  ^^^^^^^^^^^^^^^^      ^^^      ^^^^^^^^^^^     ^^                 ^^^^^^^^^^^^^     ^^                 ^^^^^^^      ^^^
>{  /** @type {string|undefined} */  bar: 42,  /** @type {function(number): number} */  method1(n1) {      return "42";  },  /** @type {function(number): number} */  method2: (n1) => "lol",  /** @type {function(number): number} */  arrowFunc: (num="0") => num + 42,  /** @type {string} */  lol} : { bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>                                                                                                                                                                                                                                                                                                      : ^^^^^^^                  ^^^^^^^^^^^^^^^^      ^^^      ^^^^^^^^^^^     ^^                 ^^^^^^^^^^^^^     ^^                 ^^^^^^^      ^^^

  /** @type {string|undefined} */
  bar: 42,
>bar : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>42 : 42
>   : ^^

  /** @type {function(number): number} */
  method1(n1) {
>method1 : (n1: number) => number
>        : ^  ^^^^^^^^^^^^^      
>n1 : number
>   : ^^^^^^

      return "42";
>"42" : "42"
>     : ^^^^

  },
  /** @type {function(number): number} */
  method2: (n1) => "lol",
>method2 : (arg0: number) => number
>        : ^^^^^^^      ^^^^^      
>(n1) => "lol" : (n1: number) => number
>              : ^  ^^^^^^^^^^^^^      
>n1 : number
>   : ^^^^^^
>"lol" : "lol"
>      : ^^^^^

  /** @type {function(number): number} */
  arrowFunc: (num="0") => num + 42,
>arrowFunc : (arg0: number) => number
>          : ^^^^^^^      ^^^^^      
>(num="0") => num + 42 : (num?: number) => number
>                      : ^   ^^^^^^^^^^^^^^      
>num : number
>    : ^^^^^^
>"0" : "0"
>    : ^^^
>num + 42 : number
>         : ^^^^^^
>num : number
>    : ^^^^^^
>42 : 42
>   : ^^

  /** @type {string} */
  lol
>lol : string
>    : ^^^^^^
}
lol = "string"
>lol = "string" : "string"
>               : ^^^^^^^^
>lol : any
>    : ^^^
>"string" : "string"
>         : ^^^^^^^^

/** @type {string} */
var s = obj.method1(0);
>s : string
>  : ^^^^^^
>obj.method1(0) : number
>               : ^^^^^^
>obj.method1 : (arg0: number) => number
>            : ^^^^^^^      ^^^^^      
>obj : { bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>    : ^^^^^^^                  ^^^^^^^^^^^^^^^^      ^^^      ^^^^^^^^^^^     ^^                 ^^^^^^^^^^^^^     ^^                 ^^^^^^^      ^^^
>method1 : (arg0: number) => number
>        : ^^^^^^^      ^^^^^      
>0 : 0
>  : ^

/** @type {string} */
var s1 = obj.method2("0");
>s1 : string
>   : ^^^^^^
>obj.method2("0") : number
>                 : ^^^^^^
>obj.method2 : (arg0: number) => number
>            : ^^^^^^^      ^^^^^      
>obj : { bar: string | undefined; method1(arg0: number): number; method2: (arg0: number) => number; arrowFunc: (arg0: number) => number; lol: string; }
>    : ^^^^^^^                  ^^^^^^^^^^^^^^^^      ^^^      ^^^^^^^^^^^     ^^                 ^^^^^^^^^^^^^     ^^                 ^^^^^^^      ^^^
>method2 : (arg0: number) => number
>        : ^^^^^^^      ^^^^^      
>"0" : "0"
>    : ^^^

