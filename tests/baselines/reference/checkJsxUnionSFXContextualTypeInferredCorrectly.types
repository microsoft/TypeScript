//// [tests/cases/conformance/jsx/checkJsxUnionSFXContextualTypeInferredCorrectly.tsx] ////

=== Performance Stats ===
Assignability cache: 2,500
Type Count: 10,000
Instantiation count: 100,000
Symbol count: 50,000

=== checkJsxUnionSFXContextualTypeInferredCorrectly.tsx ===
/// <reference path="react16.d.ts" />

import React from 'react';
>React : typeof React
>      : ^^^^^^^^^^^^

interface PS {
    multi: false
>multi : false
>      : ^^^^^
>false : false
>      : ^^^^^

    value: string | undefined
>value : string | undefined
>      : ^^^^^^^^^^^^^^^^^^

    onChange: (selection: string | undefined) => void
>onChange : (selection: string | undefined) => void
>         : ^         ^^                  ^^^^^    
>selection : string | undefined
>          : ^^^^^^^^^^^^^^^^^^
}

interface PM {
    multi: true
>multi : true
>      : ^^^^
>true : true
>     : ^^^^

    value: string[]
>value : string[]
>      : ^^^^^^^^

    onChange: (selection: string[]) => void
>onChange : (selection: string[]) => void
>         : ^         ^^        ^^^^^    
>selection : string[]
>          : ^^^^^^^^
}

export function ComponentWithUnion(props: PM | PS) {
>ComponentWithUnion : (props: PM | PS) => JSX.Element
>                   : ^     ^^       ^^^^^^^^^^^^^^^^
>props : PS | PM
>      : ^^^^^^^

    return <h1></h1>;
><h1></h1> : JSX.Element
>          : ^^^^^^^^^^^
>h1 : any
>   : ^^^
>h1 : any
>   : ^^^
}

// Usage with React tsx
export function HereIsTheError() {
>HereIsTheError : () => JSX.Element
>               : ^^^^^^^^^^^^^^^^^

    return (
>(        <ComponentWithUnion            multi={false}            value={'s'}            onChange={val => console.log(val)} // <- this throws an error        />    ) : JSX.Element
>                                                                                                                                                                     : ^^^^^^^^^^^

        <ComponentWithUnion
><ComponentWithUnion            multi={false}            value={'s'}            onChange={val => console.log(val)} // <- this throws an error        /> : JSX.Element
>                                                                                                                                                       : ^^^^^^^^^^^
>ComponentWithUnion : (props: PM | PS) => JSX.Element
>                   : ^     ^^       ^^^^^^^^^^^^^^^^

            multi={false}
>multi : false
>      : ^^^^^
>false : false
>      : ^^^^^

            value={'s'}
>value : string
>      : ^^^^^^
>'s' : "s"
>    : ^^^

            onChange={val => console.log(val)} // <- this throws an error
>onChange : (val: string | undefined) => void
>         : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>val => console.log(val) : (val: string | undefined) => void
>                        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>val : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>console.log(val) : void
>                 : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>val : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

        />
    );
}

// Usage with pure TypeScript
ComponentWithUnion({
>ComponentWithUnion({    multi: false,    value: 's',    onChange: val => console.log(val) // <- this works fine}) : JSX.Element
>                                                                                                                  : ^^^^^^^^^^^
>ComponentWithUnion : (props: PM | PS) => JSX.Element
>                   : ^     ^^       ^^^^^^^^^^^^^^^^
>{    multi: false,    value: 's',    onChange: val => console.log(val) // <- this works fine} : { multi: false; value: string; onChange: (val: string | undefined) => void; }
>                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    multi: false,
>multi : false
>      : ^^^^^
>false : false
>      : ^^^^^

    value: 's',
>value : string
>      : ^^^^^^
>'s' : "s"
>    : ^^^

    onChange: val => console.log(val) // <- this works fine
>onChange : (val: string | undefined) => void
>         : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>val => console.log(val) : (val: string | undefined) => void
>                        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>val : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>console.log(val) : void
>                 : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>val : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

});

