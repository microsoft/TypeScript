//// [tests/cases/compiler/circularContextualReturnType.ts] ////

=== circularContextualReturnType.ts ===
// Repro from #17711

Object.freeze({
>Object.freeze({    foo() {        return Object.freeze('a');    },}) : Readonly<{ foo(): string; }>
>                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>              : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>       : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>{    foo() {        return Object.freeze('a');    },} : { foo(): string; }
>                                                      : ^^^^^^^^^^^^^^^^^^

    foo() {
>foo : () => string
>    : ^^^^^^^^^^^^

        return Object.freeze('a');
>Object.freeze('a') : string
>                   : ^^^^^^
>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>              : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>       : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>'a' : "a"
>    : ^^^

    },
});

