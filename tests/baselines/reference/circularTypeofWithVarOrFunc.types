//// [tests/cases/conformance/types/specifyingTypes/typeQueries/circularTypeofWithVarOrFunc.ts] ////

=== circularTypeofWithVarOrFunc.ts ===
type typeAlias1 = typeof varOfAliasedType1;
>typeAlias1 : any
>           : ^^^
>varOfAliasedType1 : any
>                  : ^^^

var varOfAliasedType1: typeAlias1;
>varOfAliasedType1 : any
>                  : ^^^

var varOfAliasedType2: typeAlias2;
>varOfAliasedType2 : any
>                  : ^^^

type typeAlias2 = typeof varOfAliasedType2;
>typeAlias2 : any
>           : ^^^
>varOfAliasedType2 : any
>                  : ^^^

function func(): typeAlias3 { return null; }
>func : () => typeAlias3
>     : ^^^^^^          

var varOfAliasedType3 = func();
>varOfAliasedType3 : any
>                  : ^^^
>func() : any
>       : ^^^
>func : () => typeAlias3
>     : ^^^^^^          

type typeAlias3 = typeof varOfAliasedType3;
>typeAlias3 : any
>           : ^^^
>varOfAliasedType3 : any
>                  : ^^^

// Repro from #26104

interface Input {
  a: number;
>a : number
>  : ^^^^^^

  b: number;
>b : number
>  : ^^^^^^
}

type R = ReturnType<typeof mul>;
>R : any
>  : ^^^
>mul : (input: Input) => R
>    : ^     ^^     ^^^^^ 

function mul(input: Input): R {
>mul : (input: Input) => R
>    : ^     ^^     ^^^^^ 
>input : Input
>      : ^^^^^

  return input.a * input.b;
>input.a * input.b : number
>                  : ^^^^^^
>input.a : number
>        : ^^^^^^
>input : Input
>      : ^^^^^
>a : number
>  : ^^^^^^
>input.b : number
>        : ^^^^^^
>input : Input
>      : ^^^^^
>b : number
>  : ^^^^^^
}

// Repro from #26104

type R2 = ReturnType<typeof f>;
>R2 : any
>   : ^^^
>f : () => R2
>  : ^^^^^^  

function f(): R2 { return 0; }
>f : () => R2
>  : ^^^^^^  
>0 : 0
>  : ^

