//// [tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts] ////

=== classAbstractMergedDeclaration.ts ===
abstract class CM {}
>CM : Symbol(CM, Decl(classAbstractMergedDeclaration.ts, 0, 0), Decl(classAbstractMergedDeclaration.ts, 0, 20))

namespace CM {}
>CM : Symbol(CM, Decl(classAbstractMergedDeclaration.ts, 0, 0), Decl(classAbstractMergedDeclaration.ts, 0, 20))

namespace MC {}
>MC : Symbol(MC, Decl(classAbstractMergedDeclaration.ts, 1, 15), Decl(classAbstractMergedDeclaration.ts, 3, 15))

abstract class MC {}
>MC : Symbol(MC, Decl(classAbstractMergedDeclaration.ts, 1, 15), Decl(classAbstractMergedDeclaration.ts, 3, 15))

abstract class CI {}
>CI : Symbol(CI, Decl(classAbstractMergedDeclaration.ts, 4, 20), Decl(classAbstractMergedDeclaration.ts, 6, 20))

interface CI {}
>CI : Symbol(CI, Decl(classAbstractMergedDeclaration.ts, 4, 20), Decl(classAbstractMergedDeclaration.ts, 6, 20))

interface IC {}
>IC : Symbol(IC, Decl(classAbstractMergedDeclaration.ts, 7, 15), Decl(classAbstractMergedDeclaration.ts, 9, 15))

abstract class IC {}
>IC : Symbol(IC, Decl(classAbstractMergedDeclaration.ts, 7, 15), Decl(classAbstractMergedDeclaration.ts, 9, 15))

abstract class CC1 {}
>CC1 : Symbol(CC1, Decl(classAbstractMergedDeclaration.ts, 10, 20))

class CC1 {}
>CC1 : Symbol(CC1, Decl(classAbstractMergedDeclaration.ts, 12, 21))

class CC2 {}
>CC2 : Symbol(CC2, Decl(classAbstractMergedDeclaration.ts, 13, 12))

abstract class CC2 {}
>CC2 : Symbol(CC2, Decl(classAbstractMergedDeclaration.ts, 15, 12))

declare abstract class DCI {}
>DCI : Symbol(DCI, Decl(classAbstractMergedDeclaration.ts, 16, 21), Decl(classAbstractMergedDeclaration.ts, 18, 29))

interface DCI {}
>DCI : Symbol(DCI, Decl(classAbstractMergedDeclaration.ts, 16, 21), Decl(classAbstractMergedDeclaration.ts, 18, 29))

interface DIC {}
>DIC : Symbol(DIC, Decl(classAbstractMergedDeclaration.ts, 19, 16), Decl(classAbstractMergedDeclaration.ts, 21, 16))

declare abstract class DIC {}
>DIC : Symbol(DIC, Decl(classAbstractMergedDeclaration.ts, 19, 16), Decl(classAbstractMergedDeclaration.ts, 21, 16))

declare abstract class DCC1 {}
>DCC1 : Symbol(DCC1, Decl(classAbstractMergedDeclaration.ts, 22, 29))

declare class DCC1 {}
>DCC1 : Symbol(DCC1, Decl(classAbstractMergedDeclaration.ts, 24, 30))

declare class DCC2 {}
>DCC2 : Symbol(DCC2, Decl(classAbstractMergedDeclaration.ts, 25, 21))

declare abstract class DCC2 {}
>DCC2 : Symbol(DCC2, Decl(classAbstractMergedDeclaration.ts, 27, 21))

new CM;
>CM : Symbol(CM, Decl(classAbstractMergedDeclaration.ts, 0, 0), Decl(classAbstractMergedDeclaration.ts, 0, 20))

new MC;
>MC : Symbol(MC, Decl(classAbstractMergedDeclaration.ts, 1, 15), Decl(classAbstractMergedDeclaration.ts, 3, 15))

new CI;
>CI : Symbol(CI, Decl(classAbstractMergedDeclaration.ts, 4, 20), Decl(classAbstractMergedDeclaration.ts, 6, 20))

new IC;
>IC : Symbol(IC, Decl(classAbstractMergedDeclaration.ts, 7, 15), Decl(classAbstractMergedDeclaration.ts, 9, 15))

new CC1;
>CC1 : Symbol(CC1, Decl(classAbstractMergedDeclaration.ts, 10, 20))

new CC2;
>CC2 : Symbol(CC2, Decl(classAbstractMergedDeclaration.ts, 13, 12))

new DCI;
>DCI : Symbol(DCI, Decl(classAbstractMergedDeclaration.ts, 16, 21), Decl(classAbstractMergedDeclaration.ts, 18, 29))

new DIC;
>DIC : Symbol(DIC, Decl(classAbstractMergedDeclaration.ts, 19, 16), Decl(classAbstractMergedDeclaration.ts, 21, 16))

new DCC1;
>DCC1 : Symbol(DCC1, Decl(classAbstractMergedDeclaration.ts, 22, 29))

new DCC2;
>DCC2 : Symbol(DCC2, Decl(classAbstractMergedDeclaration.ts, 25, 21))

