//// [tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractSuperCalls.ts] ////

=== classAbstractSuperCalls.ts ===
class A {
>A : A
>  : ^

    foo() { return 1; }
>foo : () => number
>    : ^^^^^^^^^^^^
>1 : 1
>  : ^
}

abstract class B extends A {
>B : B
>  : ^
>A : A
>  : ^

    abstract foo();
>foo : () => any
>    : ^^^^^^^^^

    bar() { super.foo(); }
>bar : () => void
>    : ^^^^^^^^^^
>super.foo() : number
>            : ^^^^^^
>super.foo : () => number
>          : ^^^^^^^^^^^^
>super : A
>      : ^
>foo : () => number
>    : ^^^^^^^^^^^^

    baz() { return this.foo; }
>baz : () => () => any
>    : ^^^^^^^^^^^^^^^
>this.foo : () => any
>         : ^^^^^^^^^
>this : this
>     : ^^^^
>foo : () => any
>    : ^^^^^^^^^
}

class C extends B {
>C : C
>  : ^
>B : B
>  : ^

    foo() { return 2; }
>foo : () => number
>    : ^^^^^^^^^^^^
>2 : 2
>  : ^

    qux() { return super.foo() || super.foo; } // 2 errors, foo is abstract
>qux : () => any
>    : ^^^^^^^^^
>super.foo() || super.foo : any
>                         : ^^^
>super.foo() : any
>            : ^^^
>super.foo : () => any
>          : ^^^^^^^^^
>super : B
>      : ^
>foo : () => any
>    : ^^^^^^^^^
>super.foo : () => any
>          : ^^^^^^^^^
>super : B
>      : ^
>foo : () => any
>    : ^^^^^^^^^

    norf() { return super.bar(); }
>norf : () => void
>     : ^^^^^^^^^^
>super.bar() : void
>            : ^^^^
>super.bar : () => void
>          : ^^^^^^^^^^
>super : B
>      : ^
>bar : () => void
>    : ^^^^^^^^^^
}

class AA {
>AA : AA
>   : ^^

    foo() { return 1; }
>foo : () => number
>    : ^^^^^^^^^^^^
>1 : 1
>  : ^

    bar() { return this.foo(); }
>bar : () => number
>    : ^^^^^^^^^^^^
>this.foo() : number
>           : ^^^^^^
>this.foo : () => number
>         : ^^^^^^^^^^^^
>this : this
>     : ^^^^
>foo : () => number
>    : ^^^^^^^^^^^^
}

abstract class BB extends AA {
>BB : BB
>   : ^^
>AA : AA
>   : ^^

    abstract foo();
>foo : () => any
>    : ^^^^^^^^^

    // inherits bar. But BB is abstract, so this is OK.
}

