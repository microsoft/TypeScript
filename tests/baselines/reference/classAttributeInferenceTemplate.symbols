//// [tests/cases/compiler/classAttributeInferenceTemplate.ts] ////

=== classAttributeInferenceTemplate.ts ===
class MyClass {
>MyClass : Symbol(MyClass, Decl(classAttributeInferenceTemplate.ts, 0, 0))

    property;
>property : Symbol(MyClass.property, Decl(classAttributeInferenceTemplate.ts, 0, 15))

    property2;
>property2 : Symbol(MyClass.property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))

    constructor() {
        const variable = 'something'
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 5, 13))

        this.property = `foo`;
>this.property : Symbol(MyClass.property, Decl(classAttributeInferenceTemplate.ts, 0, 15))
>this : Symbol(MyClass, Decl(classAttributeInferenceTemplate.ts, 0, 0))
>property : Symbol(MyClass.property, Decl(classAttributeInferenceTemplate.ts, 0, 15))

        this.property2 = `foo-${variable}`;
>this.property2 : Symbol(MyClass.property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
>this : Symbol(MyClass, Decl(classAttributeInferenceTemplate.ts, 0, 0))
>property2 : Symbol(MyClass.property2, Decl(classAttributeInferenceTemplate.ts, 1, 13))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 5, 13))

        const localProperty = `foo-${variable}`;
>localProperty : Symbol(localProperty, Decl(classAttributeInferenceTemplate.ts, 10, 13))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 5, 13))
    }
}

class MyClass2 {
>MyClass2 : Symbol(MyClass2, Decl(classAttributeInferenceTemplate.ts, 12, 1))

    accessor property;
>property : Symbol(MyClass2.property, Decl(classAttributeInferenceTemplate.ts, 14, 16))

    accessor property2;
>property2 : Symbol(MyClass2.property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))

    constructor() {
        const variable = 'something'
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 19, 13))

        this.property = `foo`;
>this.property : Symbol(MyClass2.property, Decl(classAttributeInferenceTemplate.ts, 14, 16))
>this : Symbol(MyClass2, Decl(classAttributeInferenceTemplate.ts, 12, 1))
>property : Symbol(MyClass2.property, Decl(classAttributeInferenceTemplate.ts, 14, 16))

        this.property2 = `foo-${variable}`;
>this.property2 : Symbol(MyClass2.property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
>this : Symbol(MyClass2, Decl(classAttributeInferenceTemplate.ts, 12, 1))
>property2 : Symbol(MyClass2.property2, Decl(classAttributeInferenceTemplate.ts, 15, 22))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 19, 13))

        const localProperty = `foo-${variable}`;
>localProperty : Symbol(localProperty, Decl(classAttributeInferenceTemplate.ts, 24, 13))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 19, 13))
    }
}

class MyClass3 {
>MyClass3 : Symbol(MyClass3, Decl(classAttributeInferenceTemplate.ts, 26, 1))

    property;
>property : Symbol(MyClass3.property, Decl(classAttributeInferenceTemplate.ts, 28, 16))

    property2;
>property2 : Symbol(MyClass3.property2, Decl(classAttributeInferenceTemplate.ts, 29, 13))

    constructor() {
        (() => {
            const variable = 'something'
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 34, 17))

            this.property = `foo`;
>this.property : Symbol(MyClass3.property, Decl(classAttributeInferenceTemplate.ts, 28, 16))
>this : Symbol(MyClass3, Decl(classAttributeInferenceTemplate.ts, 26, 1))
>property : Symbol(MyClass3.property, Decl(classAttributeInferenceTemplate.ts, 28, 16))

            this.property2 = `foo-${variable}`;
>this.property2 : Symbol(MyClass3.property2, Decl(classAttributeInferenceTemplate.ts, 29, 13))
>this : Symbol(MyClass3, Decl(classAttributeInferenceTemplate.ts, 26, 1))
>property2 : Symbol(MyClass3.property2, Decl(classAttributeInferenceTemplate.ts, 29, 13))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 34, 17))

            const localProperty = `foo-${variable}`;
>localProperty : Symbol(localProperty, Decl(classAttributeInferenceTemplate.ts, 39, 17))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 34, 17))

        })();
    }
}

class MyClass4 {
>MyClass4 : Symbol(MyClass4, Decl(classAttributeInferenceTemplate.ts, 42, 1))

    accessor property;
>property : Symbol(MyClass4.property, Decl(classAttributeInferenceTemplate.ts, 44, 16))

    accessor property2;
>property2 : Symbol(MyClass4.property2, Decl(classAttributeInferenceTemplate.ts, 45, 22))

    constructor() {
        (() => {
            const variable = 'something'
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 50, 17))

            this.property = `foo`;
>this.property : Symbol(MyClass4.property, Decl(classAttributeInferenceTemplate.ts, 44, 16))
>this : Symbol(MyClass4, Decl(classAttributeInferenceTemplate.ts, 42, 1))
>property : Symbol(MyClass4.property, Decl(classAttributeInferenceTemplate.ts, 44, 16))

            this.property2 = `foo-${variable}`;
>this.property2 : Symbol(MyClass4.property2, Decl(classAttributeInferenceTemplate.ts, 45, 22))
>this : Symbol(MyClass4, Decl(classAttributeInferenceTemplate.ts, 42, 1))
>property2 : Symbol(MyClass4.property2, Decl(classAttributeInferenceTemplate.ts, 45, 22))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 50, 17))

            const localProperty = `foo-${variable}`;
>localProperty : Symbol(localProperty, Decl(classAttributeInferenceTemplate.ts, 55, 17))
>variable : Symbol(variable, Decl(classAttributeInferenceTemplate.ts, 50, 17))

        })();
    }
}

