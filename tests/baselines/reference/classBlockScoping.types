//// [tests/cases/compiler/classBlockScoping.ts] ////

=== classBlockScoping.ts ===
function f(b: boolean) {
>f : (b: boolean) => void
>  : ^ ^^       ^^^^^^^^^
>b : boolean
>  : ^^^^^^^

  let Foo: any;
>Foo : any

  if (b) {
>b : boolean
>  : ^^^^^^^

    Foo = class Foo {
>Foo = class Foo {      static y = new Foo();      static x() {        new Foo();      }      m() {        new Foo();      }    } : typeof Foo
>                                                                                                                                 : ^^^^^^^^^^
>Foo : any
>class Foo {      static y = new Foo();      static x() {        new Foo();      }      m() {        new Foo();      }    } : typeof Foo
>                                                                                                                           : ^^^^^^^^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^

      static y = new Foo();
>y : Foo
>  : ^^^
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^

      static x() {
>x : () => void
>  : ^^^^^^^^^^

        new Foo();
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^
      }

      m() {
>m : () => void
>  : ^^^^^^^^^^

        new Foo();
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^
      }
    };

    new Foo();
>new Foo() : any
>Foo : any
  }
  else {
    class Foo {
>Foo : Foo
>    : ^^^

      static y = new Foo();
>y : Foo
>  : ^^^
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^

      static x() {
>x : () => void
>  : ^^^^^^^^^^

        new Foo();
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^
      }

      m() {
>m : () => void
>  : ^^^^^^^^^^

        new Foo();
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^
      }
    }

    new Foo();
>new Foo() : Foo
>          : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^
  }
}
