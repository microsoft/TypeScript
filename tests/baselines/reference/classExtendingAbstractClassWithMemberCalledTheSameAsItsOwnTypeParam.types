//// [tests/cases/compiler/classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.ts] ////

=== classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.ts ===
interface IObserver {
	handleChange<T, TChange>(observable: IObservable<T, TChange>, change: TChange): void;
>handleChange : <T, TChange>(observable: IObservable<T, TChange>, change: TChange) => void
>             : ^ ^^       ^^          ^^                       ^^      ^^       ^^^^^    
>observable : IObservable<T, TChange>
>           : ^^^^^^^^^^^^^^^^^^^^^^^
>change : TChange
>       : ^^^^^^^
}

interface IObservable<T, TChange = unknown> {
	get(): T;
>get : () => T
>    : ^^^^^^ 

	readonly TChange: TChange;
>TChange : TChange
>        : ^^^^^^^
}

export interface IReader {
	readObservable<T>(observable: IObservable<T, any>): T;
>readObservable : <T>(observable: IObservable<T, any>) => T
>               : ^ ^^          ^^                   ^^^^^ 
>observable : IObservable<T, any>
>           : ^^^^^^^^^^^^^^^^^^^
}

export abstract class ConvenientObservable<T, TChange> implements IObservable<T, TChange> {
>ConvenientObservable : ConvenientObservable<T, TChange>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	get TChange(): TChange { return null!; }
>TChange : TChange
>        : ^^^^^^^
>null! : never
>      : ^^^^^

	public abstract get(): T;
>get : () => T
>    : ^^^^^^ 
}

export abstract class BaseObservable<T, TChange = void> extends ConvenientObservable<T, TChange> {
>BaseObservable : BaseObservable<T, TChange>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>ConvenientObservable : ConvenientObservable<T, TChange>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	protected readonly observers = new Set<IObserver>();
>observers : Set<IObserver>
>          : ^^^^^^^^^^^^^^
>new Set<IObserver>() : Set<IObserver>
>                     : ^^^^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^
}

