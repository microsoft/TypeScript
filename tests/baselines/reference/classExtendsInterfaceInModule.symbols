//// [tests/cases/compiler/classExtendsInterfaceInModule.ts] ////

=== classExtendsInterfaceInModule.ts ===
namespace M {
>M : Symbol(M, Decl(classExtendsInterfaceInModule.ts, 0, 0))

  export interface I1 {}
>I1 : Symbol(I1, Decl(classExtendsInterfaceInModule.ts, 0, 13))

  export interface I2<T> {}
>I2 : Symbol(I2, Decl(classExtendsInterfaceInModule.ts, 1, 24))
>T : Symbol(T, Decl(classExtendsInterfaceInModule.ts, 2, 22))
}
class C1 extends M.I1 {}
>C1 : Symbol(C1, Decl(classExtendsInterfaceInModule.ts, 3, 1))
>M : Symbol(M, Decl(classExtendsInterfaceInModule.ts, 0, 0))

class C2<T> extends M.I2<T> {}
>C2 : Symbol(C2, Decl(classExtendsInterfaceInModule.ts, 4, 24))
>T : Symbol(T, Decl(classExtendsInterfaceInModule.ts, 5, 9))
>M : Symbol(M, Decl(classExtendsInterfaceInModule.ts, 0, 0))
>T : Symbol(T, Decl(classExtendsInterfaceInModule.ts, 5, 9))

namespace Mod {
>Mod : Symbol(Mod, Decl(classExtendsInterfaceInModule.ts, 5, 30))

	export namespace Nested {
>Nested : Symbol(Nested, Decl(classExtendsInterfaceInModule.ts, 7, 15))

		export interface I {}
>I : Symbol(I, Decl(classExtendsInterfaceInModule.ts, 8, 26))
	}
}

class D extends Mod.Nested.I {}
>D : Symbol(D, Decl(classExtendsInterfaceInModule.ts, 11, 1))
>Mod.Nested : Symbol(Mod.Nested, Decl(classExtendsInterfaceInModule.ts, 7, 15))
>Mod : Symbol(Mod, Decl(classExtendsInterfaceInModule.ts, 5, 30))
>Nested : Symbol(Mod.Nested, Decl(classExtendsInterfaceInModule.ts, 7, 15))

