//// [tests/cases/compiler/classMemberInitializerWithLamdaScoping3.ts] ////

=== classMemberInitializerWithLamdaScoping3_0.ts ===
var field1: string;
>field1 : string
>       : ^^^^^^

=== classMemberInitializerWithLamdaScoping3_1.ts ===
declare var console: {
>console : { log(msg?: any): void; }
>        : ^^^^^^   ^^^   ^^^    ^^^

    log(msg?: any): void;
>log : (msg?: any) => void
>    : ^   ^^^   ^^^^^    
>msg : any
>    : ^^^

};
export class Test1 {
>Test1 : Test1
>      : ^^^^^

    constructor(private field1: string) {
>field1 : string
>       : ^^^^^^
    }
    messageHandler = () => {
>messageHandler : () => void
>               : ^^^^^^^^^^
>() => {        console.log(field1); // But this should be error as the field1 will resolve to var field1                              // but since this code would be generated inside constructor, in generated js                             // it would resolve to private field1 and thats not what user intended here.     } : () => void
>                                                                                                                                                                                                                                                                                                                                   : ^^^^^^^^^^

        console.log(field1); // But this should be error as the field1 will resolve to var field1 
>console.log(field1) : void
>                    : ^^^^
>console.log : (msg?: any) => void
>            : ^   ^^^   ^^^^^    
>console : { log(msg?: any): void; }
>        : ^^^^^^   ^^^   ^^^    ^^^
>log : (msg?: any) => void
>    : ^   ^^^   ^^^^^    
>field1 : any
>       : ^^^

                             // but since this code would be generated inside constructor, in generated js
                             // it would resolve to private field1 and thats not what user intended here. 
    };
}
