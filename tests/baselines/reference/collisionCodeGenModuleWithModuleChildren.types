//// [tests/cases/compiler/collisionCodeGenModuleWithModuleChildren.ts] ////

=== collisionCodeGenModuleWithModuleChildren.ts ===
namespace M {
>M : typeof M
>  : ^^^^^^^^

    export var x = 3;
>x : number
>  : ^^^^^^
>3 : 3
>  : ^

    namespace m1 {
>m1 : typeof m1
>   : ^^^^^^^^^

        var M = 10;
>M : number
>  : ^^^^^^
>10 : 10
>   : ^^

        var p = x;
>p : number
>  : ^^^^^^
>x : number
>  : ^^^^^^
    }
}

namespace M {
>M : typeof M
>  : ^^^^^^^^

    namespace m2 {
>m2 : typeof m2
>   : ^^^^^^^^^

        class M {
>M : M
>  : ^
        }
        var p = x;
>p : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

        var p2 = new M();
>p2 : M
>   : ^
>new M() : M
>        : ^
>M : typeof M
>  : ^^^^^^^^
    }
}

namespace M {
>M : typeof M
>  : ^^^^^^^^

    namespace m3 {
>m3 : typeof m3
>   : ^^^^^^^^^

        function M() {
>M : () => void
>  : ^^^^^^^^^^
        }
        var p = x;
>p : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

        var p2 = M();
>p2 : void
>   : ^^^^
>M() : void
>    : ^^^^
>M : () => void
>  : ^^^^^^^^^^
    }
}

namespace M { // shouldnt be _M
>M : typeof M
>  : ^^^^^^^^

    namespace m3 {
>m3 : typeof m3
>   : ^^^^^^^^^

        interface M {
        }
        var p = x;
>p : number
>  : ^^^^^^
>x : number
>  : ^^^^^^

        var p2: M;
>p2 : M
>   : ^
    }
}

namespace M {
>M : typeof M
>  : ^^^^^^^^

    namespace m4 {
>m4 : typeof m4
>   : ^^^^^^^^^

        namespace M {
>M : typeof M
>  : ^^^^^^^^

            var p = x;
>p : number
>  : ^^^^^^
>x : number
>  : ^^^^^^
        }
    }
}
