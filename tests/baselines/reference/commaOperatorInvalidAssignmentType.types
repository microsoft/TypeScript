//// [tests/cases/conformance/expressions/commaOperator/commaOperatorInvalidAssignmentType.ts] ////

=== commaOperatorInvalidAssignmentType.ts ===
var BOOLEAN: boolean;
>BOOLEAN : boolean
>        : ^^^^^^^

var NUMBER: number;
>NUMBER : number
>       : ^^^^^^

var STRING: string;
>STRING : string
>       : ^^^^^^

var resultIsBoolean: boolean
>resultIsBoolean : boolean
>                : ^^^^^^^

var resultIsNumber: number
>resultIsNumber : number
>               : ^^^^^^

var resultIsString: string
>resultIsString : string
>               : ^^^^^^

//Expect errors when the results type is different form the second operand
resultIsBoolean = (BOOLEAN, STRING);
>resultIsBoolean = (BOOLEAN, STRING) : string
>                                    : ^^^^^^
>resultIsBoolean : boolean
>                : ^^^^^^^
>(BOOLEAN, STRING) : string
>                  : ^^^^^^
>BOOLEAN, STRING : string
>                : ^^^^^^
>BOOLEAN : boolean
>        : ^^^^^^^
>STRING : string
>       : ^^^^^^

resultIsBoolean = (BOOLEAN, NUMBER);
>resultIsBoolean = (BOOLEAN, NUMBER) : number
>                                    : ^^^^^^
>resultIsBoolean : boolean
>                : ^^^^^^^
>(BOOLEAN, NUMBER) : number
>                  : ^^^^^^
>BOOLEAN, NUMBER : number
>                : ^^^^^^
>BOOLEAN : boolean
>        : ^^^^^^^
>NUMBER : number
>       : ^^^^^^

resultIsNumber = (NUMBER, BOOLEAN);
>resultIsNumber = (NUMBER, BOOLEAN) : boolean
>                                   : ^^^^^^^
>resultIsNumber : number
>               : ^^^^^^
>(NUMBER, BOOLEAN) : boolean
>                  : ^^^^^^^
>NUMBER, BOOLEAN : boolean
>                : ^^^^^^^
>NUMBER : number
>       : ^^^^^^
>BOOLEAN : boolean
>        : ^^^^^^^

resultIsNumber = (NUMBER, STRING);
>resultIsNumber = (NUMBER, STRING) : string
>                                  : ^^^^^^
>resultIsNumber : number
>               : ^^^^^^
>(NUMBER, STRING) : string
>                 : ^^^^^^
>NUMBER, STRING : string
>               : ^^^^^^
>NUMBER : number
>       : ^^^^^^
>STRING : string
>       : ^^^^^^

resultIsString = (STRING, BOOLEAN);
>resultIsString = (STRING, BOOLEAN) : boolean
>                                   : ^^^^^^^
>resultIsString : string
>               : ^^^^^^
>(STRING, BOOLEAN) : boolean
>                  : ^^^^^^^
>STRING, BOOLEAN : boolean
>                : ^^^^^^^
>STRING : string
>       : ^^^^^^
>BOOLEAN : boolean
>        : ^^^^^^^

resultIsString = (STRING, NUMBER);
>resultIsString = (STRING, NUMBER) : number
>                                  : ^^^^^^
>resultIsString : string
>               : ^^^^^^
>(STRING, NUMBER) : number
>                 : ^^^^^^
>STRING, NUMBER : number
>               : ^^^^^^
>STRING : string
>       : ^^^^^^
>NUMBER : number
>       : ^^^^^^

