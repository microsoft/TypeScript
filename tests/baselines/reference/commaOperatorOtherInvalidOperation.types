//// [tests/cases/conformance/expressions/commaOperator/commaOperatorOtherInvalidOperation.ts] ////

=== commaOperatorOtherInvalidOperation.ts ===
//Expect to have compiler errors
//Comma operator in function arguments and return
function foo(x: number, y: string) {
>foo : (x: number, y: string) => string
>    : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^

    return x, y;
>x, y : string
>     : ^^^^^^
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
}
var resultIsString: number = foo(1, "123"); //error here
>resultIsString : number
>               : ^^^^^^
>foo(1, "123") : string
>              : ^^^^^^
>foo : (x: number, y: string) => string
>    : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>"123" : "123"
>      : ^^^^^

//TypeParameters
function foo1<T1, T2>() {
>foo1 : <T1, T2>() => void
>     : ^  ^^  ^^^^^^^^^^^

    var x: T1;
>x : T1
>  : ^^

    var y: T2;
>y : T2
>  : ^^

    var result: T1 = (x, y); //error here
>result : T1
>       : ^^
>(x, y) : T2
>       : ^^
>x, y : T2
>     : ^^
>x : T1
>  : ^^
>y : T2
>  : ^^
}
