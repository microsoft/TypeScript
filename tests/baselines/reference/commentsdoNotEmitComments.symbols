//// [tests/cases/compiler/commentsdoNotEmitComments.ts] ////

=== commentsdoNotEmitComments.ts ===
/** Variable comments*/
var myVariable = 10;
>myVariable : Symbol(myVariable, Decl(commentsdoNotEmitComments.ts, 1, 3))

/** function comments*/
function foo(/** parameter comment*/p: number) {
>foo : Symbol(foo, Decl(commentsdoNotEmitComments.ts, 1, 20))
>p : Symbol(p, Decl(commentsdoNotEmitComments.ts, 4, 13))
}

/** variable with function type comment*/
var fooVar: () => void;
>fooVar : Symbol(fooVar, Decl(commentsdoNotEmitComments.ts, 8, 3))

foo(50);
>foo : Symbol(foo, Decl(commentsdoNotEmitComments.ts, 1, 20))

fooVar();
>fooVar : Symbol(fooVar, Decl(commentsdoNotEmitComments.ts, 8, 3))

/**class comment*/
class c {
>c : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))

    /** constructor comment*/
    constructor() {
    }

    /** property comment */
    public b = 10;
>b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))

    /** function comment */
    public myFoo() {
>myFoo : Symbol(c.myFoo, Decl(commentsdoNotEmitComments.ts, 19, 18))

        return this.b;
>this.b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
>this : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))
>b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
    }

    /** getter comment*/
    public get prop1() {
>prop1 : Symbol(c.prop1, Decl(commentsdoNotEmitComments.ts, 24, 5), Decl(commentsdoNotEmitComments.ts, 29, 5))

        return this.b;
>this.b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
>this : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))
>b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
    }

    /** setter comment*/
    public set prop1(val: number) {
>prop1 : Symbol(c.prop1, Decl(commentsdoNotEmitComments.ts, 24, 5), Decl(commentsdoNotEmitComments.ts, 29, 5))
>val : Symbol(val, Decl(commentsdoNotEmitComments.ts, 32, 21))

        this.b = val;
>this.b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
>this : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))
>b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
>val : Symbol(val, Decl(commentsdoNotEmitComments.ts, 32, 21))
    }

    /** overload signature1*/
    public foo1(a: number): string;
>foo1 : Symbol(c.foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
>a : Symbol(a, Decl(commentsdoNotEmitComments.ts, 37, 16))

    /** Overload signature 2*/
    public foo1(b: string): string;
>foo1 : Symbol(c.foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 39, 16))

    /** overload implementation signature*/
    public foo1(aOrb) {
>foo1 : Symbol(c.foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
>aOrb : Symbol(aOrb, Decl(commentsdoNotEmitComments.ts, 41, 16))

        return aOrb.toString();
>aOrb : Symbol(aOrb, Decl(commentsdoNotEmitComments.ts, 41, 16))
    }
}

/**instance comment*/
var i = new c();
>i : Symbol(i, Decl(commentsdoNotEmitComments.ts, 47, 3))
>c : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))

/** interface comments*/
interface i1 {
>i1 : Symbol(i1, Decl(commentsdoNotEmitComments.ts, 47, 16))

    /** caller comments*/
    (a: number): number;
>a : Symbol(a, Decl(commentsdoNotEmitComments.ts, 52, 5))

    /** new comments*/
    new (b: string);
>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 55, 9))

    /**indexer property*/
    [a: number]: string;
>a : Symbol(a, Decl(commentsdoNotEmitComments.ts, 58, 5))

    /** function property;*/
    myFoo(/*param prop*/a: number): string;
>myFoo : Symbol(i1.myFoo, Decl(commentsdoNotEmitComments.ts, 58, 24))
>a : Symbol(a, Decl(commentsdoNotEmitComments.ts, 61, 10))

    /** prop*/
    prop: string;
>prop : Symbol(i1.prop, Decl(commentsdoNotEmitComments.ts, 61, 43))
}

/**interface instance comments*/
var i1_i: i1;
>i1_i : Symbol(i1_i, Decl(commentsdoNotEmitComments.ts, 68, 3))
>i1 : Symbol(i1, Decl(commentsdoNotEmitComments.ts, 47, 16))

/** this is module comment*/
namespace m1 {
>m1 : Symbol(m1, Decl(commentsdoNotEmitComments.ts, 68, 13))

    /** class b */
    export class b {
>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 71, 14))

        constructor(public x: number) {
>x : Symbol(b.x, Decl(commentsdoNotEmitComments.ts, 74, 20))
           
        }
    }

    /// module m2
    export namespace m2 {
>m2 : Symbol(m2, Decl(commentsdoNotEmitComments.ts, 77, 5))
    }
}

/// this is x
declare var x;
>x : Symbol(x, Decl(commentsdoNotEmitComments.ts, 85, 11))


/** const enum member value comment (generated by TS) */
const enum color { red, green, blue }
>color : Symbol(color, Decl(commentsdoNotEmitComments.ts, 85, 14))
>red : Symbol(color.red, Decl(commentsdoNotEmitComments.ts, 89, 18))
>green : Symbol(color.green, Decl(commentsdoNotEmitComments.ts, 89, 23))
>blue : Symbol(color.blue, Decl(commentsdoNotEmitComments.ts, 89, 30))

var shade: color = color.green;
>shade : Symbol(shade, Decl(commentsdoNotEmitComments.ts, 90, 3))
>color : Symbol(color, Decl(commentsdoNotEmitComments.ts, 85, 14))
>color.green : Symbol(color.green, Decl(commentsdoNotEmitComments.ts, 89, 23))
>color : Symbol(color, Decl(commentsdoNotEmitComments.ts, 85, 14))
>green : Symbol(color.green, Decl(commentsdoNotEmitComments.ts, 89, 23))

