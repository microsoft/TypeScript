//// [tests/cases/compiler/complexClassRelationships.ts] ////

=== complexClassRelationships.ts ===
// There should be no errors in this file
class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    public static createEmpty(): Derived {
>createEmpty : () => Derived
>            : ^^^^^^       

        var item = new Derived();
>item : Derived
>     : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

        return item;
>item : Derived
>     : ^^^^^^^
    }
}
class BaseCollection<T extends Base> {
>BaseCollection : BaseCollection<T>
>               : ^^^^^^^^^^^^^^^^^

    constructor(f: () => T) {
>f : () => T
>  : ^^^^^^ 

        (item: Thing) => { return [item.Components]; };
>(item: Thing) => { return [item.Components]; } : (item: Thing) => ComponentCollection<any>[]
>                                               : ^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Thing
>     : ^^^^^
>[item.Components] : ComponentCollection<any>[]
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>item.Components : ComponentCollection<any>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^
>item : Thing
>     : ^^^^^
>Components : ComponentCollection<any>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^
    }
}
class Base {
>Base : Base
>     : ^^^^

    ownerCollection: BaseCollection<Base>;
>ownerCollection : BaseCollection<Base>
>                : ^^^^^^^^^^^^^^^^^^^^
}

class Thing {
>Thing : Thing
>      : ^^^^^

    public get Components(): ComponentCollection<any> { return null }
>Components : ComponentCollection<any>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^
}

class ComponentCollection<T> {
>ComponentCollection : ComponentCollection<T>
>                    : ^^^^^^^^^^^^^^^^^^^^^^

    private static sortComponents(p: Foo) {
>sortComponents : (p: Foo) => GenericType<string>
>               : ^ ^^   ^^^^^^^^^^^^^^^^^^^^^^^^
>p : Foo
>  : ^^^

        return p.prop1;
>p.prop1 : GenericType<string>
>        : ^^^^^^^^^^^^^^^^^^^
>p : Foo
>  : ^^^
>prop1 : GenericType<string>
>      : ^^^^^^^^^^^^^^^^^^^
    }
}

class Foo {
>Foo : Foo
>    : ^^^

    public get prop1() {
>prop1 : GenericType<string>
>      : ^^^^^^^^^^^^^^^^^^^

        return new GenericType<string>(this);
>new GenericType<string>(this) : GenericType<string>
>                              : ^^^^^^^^^^^^^^^^^^^
>GenericType : typeof GenericType
>            : ^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
    }
    public populate() {
>populate : () => void
>         : ^^^^^^^^^^

        this.prop2;
>this.prop2 : BaseCollection<Derived>
>           : ^^^^^^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>prop2 : BaseCollection<Derived>
>      : ^^^^^^^^^^^^^^^^^^^^^^^
    }
    public get prop2(): BaseCollection<Derived> {
>prop2 : BaseCollection<Derived>
>      : ^^^^^^^^^^^^^^^^^^^^^^^

        return new BaseCollection<Derived>(Derived.createEmpty);
>new BaseCollection<Derived>(Derived.createEmpty) : BaseCollection<Derived>
>                                                 : ^^^^^^^^^^^^^^^^^^^^^^^
>BaseCollection : typeof BaseCollection
>               : ^^^^^^^^^^^^^^^^^^^^^
>Derived.createEmpty : () => Derived
>                    : ^^^^^^       
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>createEmpty : () => Derived
>            : ^^^^^^       
    }
}

class GenericType<T> {
>GenericType : GenericType<T>
>            : ^^^^^^^^^^^^^^

    constructor(parent: FooBase) { }
>parent : FooBase
>       : ^^^^^^^
}

class FooBase {
>FooBase : FooBase
>        : ^^^^^^^

    public populate() {
>populate : () => void
>         : ^^^^^^^^^^

    }
}
