//// [tests/cases/conformance/expressions/assignmentOperator/compoundAdditionAssignmentLHSCanBeAssigned.ts] ////

=== compoundAdditionAssignmentLHSCanBeAssigned.ts ===
enum E { a, b }
>E : E
>  : ^
>a : E.a
>  : ^^^
>b : E.b
>  : ^^^

var a: any;
>a : any
>  : ^^^

var b: void;
>b : void
>  : ^^^^

var x1: any;
>x1 : any
>   : ^^^

x1 += a;
>x1 += a : any
>        : ^^^
>x1 : any
>   : ^^^
>a : any
>  : ^^^

x1 += b;
>x1 += b : any
>        : ^^^
>x1 : any
>   : ^^^
>b : void
>  : ^^^^

x1 += true;
>x1 += true : any
>           : ^^^
>x1 : any
>   : ^^^
>true : true
>     : ^^^^

x1 += 0;
>x1 += 0 : any
>        : ^^^
>x1 : any
>   : ^^^
>0 : 0
>  : ^

x1 += '';
>x1 += '' : string
>         : ^^^^^^
>x1 : any
>   : ^^^
>'' : ""
>   : ^^

x1 += E.a;
>x1 += E.a : any
>          : ^^^
>x1 : any
>   : ^^^
>E.a : E.a
>    : ^^^
>E : typeof E
>  : ^^^^^^^^
>a : E.a
>  : ^^^

x1 += {};
>x1 += {} : any
>         : ^^^
>x1 : any
>   : ^^^
>{} : {}
>   : ^^

x1 += null;
>x1 += null : any
>           : ^^^
>x1 : any
>   : ^^^

x1 += undefined;
>x1 += undefined : any
>                : ^^^
>x1 : any
>   : ^^^
>undefined : undefined
>          : ^^^^^^^^^

var x2: string;
>x2 : string
>   : ^^^^^^

x2 += a;
>x2 += a : string
>        : ^^^^^^
>x2 : string
>   : ^^^^^^
>a : any
>  : ^^^

x2 += b;
>x2 += b : string
>        : ^^^^^^
>x2 : string
>   : ^^^^^^
>b : void
>  : ^^^^

x2 += true;
>x2 += true : string
>           : ^^^^^^
>x2 : string
>   : ^^^^^^
>true : true
>     : ^^^^

x2 += 0;
>x2 += 0 : string
>        : ^^^^^^
>x2 : string
>   : ^^^^^^
>0 : 0
>  : ^

x2 += '';
>x2 += '' : string
>         : ^^^^^^
>x2 : string
>   : ^^^^^^
>'' : ""
>   : ^^

x2 += E.a;
>x2 += E.a : string
>          : ^^^^^^
>x2 : string
>   : ^^^^^^
>E.a : E.a
>    : ^^^
>E : typeof E
>  : ^^^^^^^^
>a : E.a
>  : ^^^

x2 += {};
>x2 += {} : string
>         : ^^^^^^
>x2 : string
>   : ^^^^^^
>{} : {}
>   : ^^

x2 += null;
>x2 += null : string
>           : ^^^^^^
>x2 : string
>   : ^^^^^^

x2 += undefined;
>x2 += undefined : string
>                : ^^^^^^
>x2 : string
>   : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var x3: number;
>x3 : number
>   : ^^^^^^

x3 += a;
>x3 += a : any
>        : ^^^
>x3 : number
>   : ^^^^^^
>a : any
>  : ^^^

x3 += 0;
>x3 += 0 : number
>        : ^^^^^^
>x3 : number
>   : ^^^^^^
>0 : 0
>  : ^

x3 += E.a;
>x3 += E.a : number
>          : ^^^^^^
>x3 : number
>   : ^^^^^^
>E.a : E.a
>    : ^^^
>E : typeof E
>  : ^^^^^^^^
>a : E.a
>  : ^^^

x3 += null;
>x3 += null : any
>           : ^^^
>x3 : number
>   : ^^^^^^

x3 += undefined;
>x3 += undefined : any
>                : ^^^
>x3 : number
>   : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var x4: E;
>x4 : E
>   : ^

x4 += a;
>x4 += a : any
>        : ^^^
>x4 : E
>   : ^
>a : any
>  : ^^^

x4 += 0;
>x4 += 0 : number
>        : ^^^^^^
>x4 : E
>   : ^
>0 : 0
>  : ^

x4 += E.a;
>x4 += E.a : number
>          : ^^^^^^
>x4 : E
>   : ^
>E.a : E.a
>    : ^^^
>E : typeof E
>  : ^^^^^^^^
>a : E.a
>  : ^^^

x4 += null;
>x4 += null : any
>           : ^^^
>x4 : E
>   : ^

x4 += undefined;
>x4 += undefined : any
>                : ^^^
>x4 : E
>   : ^
>undefined : undefined
>          : ^^^^^^^^^

var x5: boolean;
>x5 : boolean
>   : ^^^^^^^

x5 += a;
>x5 += a : any
>        : ^^^
>x5 : boolean
>   : ^^^^^^^
>a : any
>  : ^^^

var x6: {};
>x6 : {}
>   : ^^

x6 += a;
>x6 += a : any
>        : ^^^
>x6 : {}
>   : ^^
>a : any
>  : ^^^

x6 += '';
>x6 += '' : string
>         : ^^^^^^
>x6 : {}
>   : ^^
>'' : ""
>   : ^^

var x7: void;
>x7 : void
>   : ^^^^

x7 += a;
>x7 += a : any
>        : ^^^
>x7 : void
>   : ^^^^
>a : any
>  : ^^^

