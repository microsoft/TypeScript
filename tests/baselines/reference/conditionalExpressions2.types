//// [tests/cases/compiler/conditionalExpressions2.ts] ////

=== conditionalExpressions2.ts ===
var a = false ? 1 : null;
>a : number
>  : ^^^^^^
>false ? 1 : null : 1
>                 : ^
>false : false
>      : ^^^^^
>1 : 1
>  : ^

var b = false ? undefined : 0;
>b : number
>  : ^^^^^^
>false ? undefined : 0 : 0
>                      : ^
>false : false
>      : ^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>0 : 0
>  : ^

var c = false ? 1 : 0;
>c : number
>  : ^^^^^^
>false ? 1 : 0 : 0 | 1
>              : ^^^^^
>false : false
>      : ^^^^^
>1 : 1
>  : ^
>0 : 0
>  : ^

var d = false ? false : true;
>d : boolean
>  : ^^^^^^^
>false ? false : true : boolean
>                     : ^^^^^^^
>false : false
>      : ^^^^^
>false : false
>      : ^^^^^
>true : true
>     : ^^^^

var e = false ? "foo" : "bar";
>e : string
>  : ^^^^^^
>false ? "foo" : "bar" : "foo" | "bar"
>                      : ^^^^^^^^^^^^^
>false : false
>      : ^^^^^
>"foo" : "foo"
>      : ^^^^^
>"bar" : "bar"
>      : ^^^^^

var f = false ? null : undefined;
>f : any
>false ? null : undefined : null
>                         : ^^^^
>false : false
>      : ^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var g = true ? {g:5} : null;
>g : { g: number; }
>  : ^^^^^^^^^^^^^^
>true ? {g:5} : null : { g: number; }
>                    : ^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>{g:5} : { g: number; }
>      : ^^^^^^^^^^^^^^
>g : number
>  : ^^^^^^
>5 : 5
>  : ^

var h = [{h:5}, null];
>h : { h: number; }[]
>  : ^^^^^^^^^^^^^^^^
>[{h:5}, null] : { h: number; }[]
>              : ^^^^^^^^^^^^^^^^
>{h:5} : { h: number; }
>      : ^^^^^^^^^^^^^^
>h : number
>  : ^^^^^^
>5 : 5
>  : ^

function i() { if (true) { return { x: 5 }; } else { return null; } }
>i : () => { x: number; }
>  : ^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>{ x: 5 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>5 : 5
>  : ^

