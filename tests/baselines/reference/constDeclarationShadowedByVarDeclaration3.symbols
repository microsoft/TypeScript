//// [tests/cases/compiler/constDeclarationShadowedByVarDeclaration3.ts] ////

=== constDeclarationShadowedByVarDeclaration3.ts ===
// Ensure only checking for const declarations shadowed by vars
class Rule {
>Rule : Symbol(Rule, Decl(constDeclarationShadowedByVarDeclaration3.ts, 0, 0))

    public regex: RegExp = new RegExp('');
>regex : Symbol(Rule.regex, Decl(constDeclarationShadowedByVarDeclaration3.ts, 1, 12))
>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    public name: string = '';
>name : Symbol(Rule.name, Decl(constDeclarationShadowedByVarDeclaration3.ts, 2, 42))

    constructor(name: string) {
>name : Symbol(name, Decl(constDeclarationShadowedByVarDeclaration3.ts, 5, 16))

        this.name = name;
>this.name : Symbol(Rule.name, Decl(constDeclarationShadowedByVarDeclaration3.ts, 2, 42))
>this : Symbol(Rule, Decl(constDeclarationShadowedByVarDeclaration3.ts, 0, 0))
>name : Symbol(Rule.name, Decl(constDeclarationShadowedByVarDeclaration3.ts, 2, 42))
>name : Symbol(name, Decl(constDeclarationShadowedByVarDeclaration3.ts, 5, 16))
    }
}
