//// [tests/cases/compiler/constDeclarations-access5.ts] ////

=== constDeclarations_access_2.ts ===
///<reference path='constDeclarations_access_1.ts'/>
import m = require('constDeclarations_access_1');
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))

// Errors
m.x = 1;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x += 2;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x -= 3;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x *= 4;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x /= 5;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x %= 6;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x <<= 7;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x >>= 8;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x >>>= 9;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x &= 10;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x |= 11;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x ^= 12;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))

m.x++;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x--;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

++m.x;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

--m.x;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

++((m.x));
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m["x"] = 0;
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>"x" : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

// OK
var a = m.x + 1;
>a : Symbol(a, Decl(constDeclarations_access_2.ts, 26, 3))
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

function f(v: number) { }
>f : Symbol(f, Decl(constDeclarations_access_2.ts, 26, 16))
>v : Symbol(v, Decl(constDeclarations_access_2.ts, 28, 11))

f(m.x);
>f : Symbol(f, Decl(constDeclarations_access_2.ts, 26, 16))
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

if (m.x) { }
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

(m.x);
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

-m.x;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

+m.x;
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))

m.x.toString();
>m.x.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
>m.x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>m : Symbol(m, Decl(constDeclarations_access_2.ts, 0, 0))
>x : Symbol(m.x, Decl(constDeclarations_access_1.ts, 0, 12))
>toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))

=== constDeclarations_access_1.ts ===
export const x = 0;
>x : Symbol(x, Decl(constDeclarations_access_1.ts, 0, 12))

