//// [tests/cases/compiler/constDeclarations-scopes.ts] ////

=== constDeclarations-scopes.ts ===
// global
const c = "string";
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 1, 5))

var n: number;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))

// Control flow statements with blocks
if (true) { 
    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 7, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 7, 9))
}
else { 
    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 11, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 11, 9))
}

while (true) { 
    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 16, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 16, 9))
}

do { 
   const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 21, 8))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 21, 8))

} while (true);

var obj;
>obj : Symbol(obj, Decl(constDeclarations-scopes.ts, 25, 3))

with (obj) {
>obj : Symbol(obj, Decl(constDeclarations-scopes.ts, 25, 3))

    const c = 0;
    n = c;
}

for (var i = 0; i < 10; i++) {
>i : Symbol(i, Decl(constDeclarations-scopes.ts, 31, 8))
>i : Symbol(i, Decl(constDeclarations-scopes.ts, 31, 8))
>i : Symbol(i, Decl(constDeclarations-scopes.ts, 31, 8))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 32, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 32, 9))
}

for (var i2 in {}) {
>i2 : Symbol(i2, Decl(constDeclarations-scopes.ts, 36, 8))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 37, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 37, 9))
}

if (true) {
    label: const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 42, 16))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 42, 16))
}

while (false) {
    label2: label3: label4: const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 47, 33))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 47, 33))
}

// Try/catch/finally
try {
    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 53, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 53, 9))
}
catch (e) {
>e : Symbol(e, Decl(constDeclarations-scopes.ts, 56, 7))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 57, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 57, 9))
}
finally {
    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 61, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 61, 9))
}

// Switch
switch (0) {
    case 0:
        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 68, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 68, 13))

        break;
}

// blocks
{
    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 75, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 75, 9))
    {
        const c = false;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 78, 13))

        var b: boolean = c;
>b : Symbol(b, Decl(constDeclarations-scopes.ts, 79, 11))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 78, 13))
    }
}

// functions

function F() {
>F : Symbol(F, Decl(constDeclarations-scopes.ts, 81, 1))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 86, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 86, 9))
}

var F2 = () => {
>F2 : Symbol(F2, Decl(constDeclarations-scopes.ts, 90, 3))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 91, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 91, 9))

};

var F3 = function () {
>F3 : Symbol(F3, Decl(constDeclarations-scopes.ts, 95, 3))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 96, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 96, 9))

};

// modules
namespace m {
>m : Symbol(m, Decl(constDeclarations-scopes.ts, 98, 2))

    const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 102, 9))

    n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 102, 9))

    {
       const c = false;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 106, 12))

       var b2: boolean = c;
>b2 : Symbol(b2, Decl(constDeclarations-scopes.ts, 107, 10))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 106, 12))
    }
}

// methods
class C {
>C : Symbol(C, Decl(constDeclarations-scopes.ts, 109, 1))

    constructor() {
        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 114, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 114, 13))
    }

    method() {
>method : Symbol(C.method, Decl(constDeclarations-scopes.ts, 116, 5))

        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 119, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 119, 13))
    }

    get v() {
>v : Symbol(C.v, Decl(constDeclarations-scopes.ts, 121, 5), Decl(constDeclarations-scopes.ts, 127, 5))

        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 124, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 124, 13))

        return n;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
    }

    set v(value) {
>v : Symbol(C.v, Decl(constDeclarations-scopes.ts, 121, 5), Decl(constDeclarations-scopes.ts, 127, 5))
>value : Symbol(value, Decl(constDeclarations-scopes.ts, 129, 10))

        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 130, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 130, 13))
    }
}

// object literals
var o = {
>o : Symbol(o, Decl(constDeclarations-scopes.ts, 136, 3))

    f() {
>f : Symbol(f, Decl(constDeclarations-scopes.ts, 136, 9))

        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 138, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 138, 13))

    },
    f2: () => {
>f2 : Symbol(f2, Decl(constDeclarations-scopes.ts, 140, 6))

        const c = 0;
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 142, 13))

        n = c;
>n : Symbol(n, Decl(constDeclarations-scopes.ts, 3, 3))
>c : Symbol(c, Decl(constDeclarations-scopes.ts, 142, 13))
    }
}
