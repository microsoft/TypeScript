//// [tests/cases/compiler/constDeclarations-validContexts.ts] ////

=== constDeclarations-validContexts.ts ===
// Control flow statements with blocks
if (true) { 
>true : true
>     : ^^^^

    const c1 = 0;
>c1 : 0
>   : ^
>0 : 0
>  : ^
}
else { 
    const c2 = 0;
>c2 : 0
>   : ^
>0 : 0
>  : ^
}

while (true) { 
>true : true
>     : ^^^^

    const c3 = 0;
>c3 : 0
>   : ^
>0 : 0
>  : ^
}

do { 
    const c4 = 0;
>c4 : 0
>   : ^
>0 : 0
>  : ^

} while (true);
>true : true
>     : ^^^^

var obj;
>obj : any
>    : ^^^

with (obj) {
>obj : any
>    : ^^^

    const c5 = 0;
>c5 : any
>   : ^^^
>0 : any
>  : ^^^
}

for (var i = 0; i < 10; i++) {
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 10 : boolean
>       : ^^^^^^^
>i : number
>  : ^^^^^^
>10 : 10
>   : ^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    const c6 = 0;
>c6 : 0
>   : ^
>0 : 0
>  : ^
}

for (var i2 in {}) {
>i2 : string
>   : ^^^^^^
>{} : {}
>   : ^^

    const c7 = 0;
>c7 : 0
>   : ^
>0 : 0
>  : ^
}

if (true) {
>true : true
>     : ^^^^

    label: const c8 = 0;
>label : any
>      : ^^^
>c8 : 0
>   : ^
>0 : 0
>  : ^
}

while (false) {
>false : false
>      : ^^^^^

    label2: label3: label4: const c9 = 0;
>label2 : any
>       : ^^^
>label3 : any
>       : ^^^
>label4 : any
>       : ^^^
>c9 : 0
>   : ^
>0 : 0
>  : ^
}

// Try/catch/finally
try {
    const c10 = 0;
>c10 : 0
>    : ^
>0 : 0
>  : ^
}
catch (e) {
>e : any
>  : ^^^

    const c11 = 0;
>c11 : 0
>    : ^
>0 : 0
>  : ^
}
finally {
    const c12 = 0;
>c12 : 0
>    : ^
>0 : 0
>  : ^
}

// Switch
switch (0) {
>0 : 0
>  : ^

    case 0:
>0 : 0
>  : ^

        const c13 = 0;
>c13 : 0
>    : ^
>0 : 0
>  : ^

        break;
    default:
        const c14 = 0;
>c14 : 0
>    : ^
>0 : 0
>  : ^

        break;
}

// blocks
{
    const c15 = 0;
>c15 : 0
>    : ^
>0 : 0
>  : ^
    {
        const c16 = 0
>c16 : 0
>    : ^
>0 : 0
>  : ^

        label17: const c17 = 0;
>label17 : any
>        : ^^^
>c17 : 0
>    : ^
>0 : 0
>  : ^
    }
}

// global
const c18 = 0;
>c18 : 0
>    : ^
>0 : 0
>  : ^

// functions
function F() {
>F : () => void
>  : ^^^^^^^^^^

    const c19 = 0;
>c19 : 0
>    : ^
>0 : 0
>  : ^
}

var F2 = () => {
>F2 : () => void
>   : ^^^^^^^^^^
>() => {    const c20 = 0;} : () => void
>                           : ^^^^^^^^^^

    const c20 = 0;
>c20 : 0
>    : ^
>0 : 0
>  : ^

};

var F3 = function () {
>F3 : () => void
>   : ^^^^^^^^^^
>function () {    const c21 = 0;} : () => void
>                                 : ^^^^^^^^^^

    const c21 = 0;
>c21 : 0
>    : ^
>0 : 0
>  : ^

};

// modules
module m {
>m : typeof m
>  : ^^^^^^^^

    const c22 = 0;
>c22 : 0
>    : ^
>0 : 0
>  : ^

    {
          const c23 = 0;
>c23 : 0
>    : ^
>0 : 0
>  : ^
    }
}

// methods
class C {
>C : C
>  : ^

    constructor() {
        const c24 = 0;
>c24 : 0
>    : ^
>0 : 0
>  : ^
    }

    method() {
>method : () => void
>       : ^^^^^^^^^^

        const c25 = 0;
>c25 : 0
>    : ^
>0 : 0
>  : ^
    }

    get v() {
>v : number
>  : ^^^^^^

        const c26 = 0;
>c26 : 0
>    : ^
>0 : 0
>  : ^

        return c26; 
>c26 : 0
>    : ^
    }

    set v(value) {
>v : number
>  : ^^^^^^
>value : number
>      : ^^^^^^

        const c27 = value;
>c27 : number
>    : ^^^^^^
>value : number
>      : ^^^^^^
    }
}

// object literals
var o = {
>o : { f(): void; f2: () => void; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    f() {        const c28 = 0;    },    f2: () => {        const c29 = 0;    }} : { f(): void; f2: () => void; }
>                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    f() {
>f : () => void
>  : ^^^^^^^^^^

        const c28 = 0;
>c28 : 0
>    : ^
>0 : 0
>  : ^

    },
    f2: () => {
>f2 : () => void
>   : ^^^^^^^^^^
>() => {        const c29 = 0;    } : () => void
>                                   : ^^^^^^^^^^

        const c29 = 0;
>c29 : 0
>    : ^
>0 : 0
>  : ^
    }
}
