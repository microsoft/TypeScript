//// [tests/cases/conformance/constEnums/constEnumNoObjectPrototypePropertyAccess.ts] ////

=== constEnumNoObjectPrototypePropertyAccess.ts ===
// https://github.com/microsoft/TypeScript/issues/55421

const enum Bebra {}
>Bebra : Bebra
>      : ^^^^^

console.log(Bebra.constructor)
>console.log(Bebra.constructor) : void
>                               : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.constructor : any
>                  : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>constructor : any
>            : ^^^

console.log(Bebra.hasOwnProperty)
>console.log(Bebra.hasOwnProperty) : void
>                                  : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.hasOwnProperty : any
>                     : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>hasOwnProperty : any
>               : ^^^

console.log(Bebra.isPrototypeOf)
>console.log(Bebra.isPrototypeOf) : void
>                                 : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.isPrototypeOf : any
>                    : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>isPrototypeOf : any
>              : ^^^

console.log(Bebra.propertyIsEnumerable)
>console.log(Bebra.propertyIsEnumerable) : void
>                                        : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.propertyIsEnumerable : any
>                           : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>propertyIsEnumerable : any
>                     : ^^^

console.log(Bebra.toLocaleString)
>console.log(Bebra.toLocaleString) : void
>                                  : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.toLocaleString : any
>                     : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>toLocaleString : any
>               : ^^^

console.log(Bebra.toString)
>console.log(Bebra.toString) : void
>                            : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.toString : any
>               : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>toString : any
>         : ^^^

console.log(Bebra.valueOf)
>console.log(Bebra.valueOf) : void
>                           : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>Bebra.valueOf : any
>              : ^^^
>Bebra : typeof Bebra
>      : ^^^^^^^^^^^^
>valueOf : any
>        : ^^^

