//// [tests/cases/compiler/constEnumNoPreserveDeclarationReexport.ts] ////

=== ConstEnum.d.ts ===
export const enum MyConstEnum {
>MyConstEnum : MyConstEnum
>            : ^^^^^^^^^^^

    Foo,
>Foo : MyConstEnum.Foo
>    : ^^^^^^^^^^^^^^^

    Bar
>Bar : MyConstEnum.Bar
>    : ^^^^^^^^^^^^^^^
}
=== ImportExport.d.ts ===
import { MyConstEnum } from './ConstEnum';
>MyConstEnum : typeof MyConstEnum
>            : ^^^^^^^^^^^^^^^^^^

export default MyConstEnum;
>MyConstEnum : MyConstEnum
>            : ^^^^^^^^^^^

=== ReExport.d.ts ===
export { MyConstEnum as default } from './ConstEnum';
>MyConstEnum : typeof import("ConstEnum").MyConstEnum
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>default : typeof import("ConstEnum").MyConstEnum
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=== usages.ts ===
import {MyConstEnum} from "./ConstEnum";
>MyConstEnum : typeof MyConstEnum
>            : ^^^^^^^^^^^^^^^^^^

import AlsoEnum from "./ImportExport";
>AlsoEnum : typeof MyConstEnum
>         : ^^^^^^^^^^^^^^^^^^

import StillEnum from "./ReExport";
>StillEnum : typeof MyConstEnum
>          : ^^^^^^^^^^^^^^^^^^

MyConstEnum.Foo;
>MyConstEnum.Foo : MyConstEnum.Foo
>                : ^^^^^^^^^^^^^^^
>MyConstEnum : typeof MyConstEnum
>            : ^^^^^^^^^^^^^^^^^^
>Foo : MyConstEnum.Foo
>    : ^^^^^^^^^^^^^^^

AlsoEnum.Foo;
>AlsoEnum.Foo : MyConstEnum.Foo
>             : ^^^^^^^^^^^^^^^
>AlsoEnum : typeof MyConstEnum
>         : ^^^^^^^^^^^^^^^^^^
>Foo : MyConstEnum.Foo
>    : ^^^^^^^^^^^^^^^

StillEnum.Foo;
>StillEnum.Foo : MyConstEnum.Foo
>              : ^^^^^^^^^^^^^^^
>StillEnum : typeof MyConstEnum
>          : ^^^^^^^^^^^^^^^^^^
>Foo : MyConstEnum.Foo
>    : ^^^^^^^^^^^^^^^

