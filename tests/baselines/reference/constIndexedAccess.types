//// [tests/cases/compiler/constIndexedAccess.ts] ////

=== constIndexedAccess.ts ===
const enum numbers {
>numbers : numbers
>        : ^^^^^^^

    zero,
>zero : numbers.zero
>     : ^^^^^^^^^^^^

    one
>one : numbers.one
>    : ^^^^^^^^^^^
}

interface indexAccess {
    0: string;
>0 : string
>  : ^^^^^^

    1: number;
>1 : number
>  : ^^^^^^
}

let test: indexAccess;
>test : indexAccess
>     : ^^^^^^^^^^^

let s = test[0];
>s : string
>  : ^^^^^^
>test[0] : string
>        : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>0 : 0
>  : ^

let n = test[1];
>n : number
>  : ^^^^^^
>test[1] : number
>        : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>1 : 1
>  : ^

let s1 = test[numbers.zero];
>s1 : string
>   : ^^^^^^
>test[numbers.zero] : string
>                   : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>numbers.zero : numbers.zero
>             : ^^^^^^^^^^^^
>numbers : typeof numbers
>        : ^^^^^^^^^^^^^^
>zero : numbers.zero
>     : ^^^^^^^^^^^^

let n1 = test[numbers.one];
>n1 : number
>   : ^^^^^^
>test[numbers.one] : number
>                  : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>numbers.one : numbers.one
>            : ^^^^^^^^^^^
>numbers : typeof numbers
>        : ^^^^^^^^^^^^^^
>one : numbers.one
>    : ^^^^^^^^^^^

let s2 = test[numbers["zero"]];
>s2 : string
>   : ^^^^^^
>test[numbers["zero"]] : string
>                      : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>numbers["zero"] : numbers.zero
>                : ^^^^^^^^^^^^
>numbers : typeof numbers
>        : ^^^^^^^^^^^^^^
>"zero" : "zero"
>       : ^^^^^^

let n2 = test[numbers["one"]];
>n2 : number
>   : ^^^^^^
>test[numbers["one"]] : number
>                     : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>numbers["one"] : numbers.one
>               : ^^^^^^^^^^^
>numbers : typeof numbers
>        : ^^^^^^^^^^^^^^
>"one" : "one"
>      : ^^^^^

enum numbersNotConst {
>numbersNotConst : numbersNotConst
>                : ^^^^^^^^^^^^^^^

    zero,
>zero : numbersNotConst.zero
>     : ^^^^^^^^^^^^^^^^^^^^

    one
>one : numbersNotConst.one
>    : ^^^^^^^^^^^^^^^^^^^
}

let s3 = test[numbersNotConst.zero];
>s3 : string
>   : ^^^^^^
>test[numbersNotConst.zero] : string
>                           : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>numbersNotConst.zero : numbersNotConst.zero
>                     : ^^^^^^^^^^^^^^^^^^^^
>numbersNotConst : typeof numbersNotConst
>                : ^^^^^^^^^^^^^^^^^^^^^^
>zero : numbersNotConst.zero
>     : ^^^^^^^^^^^^^^^^^^^^

let n3 = test[numbersNotConst.one];
>n3 : number
>   : ^^^^^^
>test[numbersNotConst.one] : number
>                          : ^^^^^^
>test : indexAccess
>     : ^^^^^^^^^^^
>numbersNotConst.one : numbersNotConst.one
>                    : ^^^^^^^^^^^^^^^^^^^
>numbersNotConst : typeof numbersNotConst
>                : ^^^^^^^^^^^^^^^^^^^^^^
>one : numbersNotConst.one
>    : ^^^^^^^^^^^^^^^^^^^

