//// [tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny2.ts] ////

=== constraintSatisfactionWithAny2.ts ===
// errors expected for type parameter cannot be referenced in the constraints of the same list
// any is not a valid type argument unless there is no constraint, or the constraint is any

declare function foo<Z, T extends <U>(x: U) => Z>(y: T): Z;
>foo : <Z, T extends <U>(x: U) => Z>(y: T) => Z
>    : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^^^^ 
>x : U
>  : ^
>y : T
>  : ^

var a: any;
>a : any

foo(a);
>foo(a) : unknown
>       : ^^^^^^^
>foo : <Z, T extends <U>(x: U) => Z>(y: T) => Z
>    : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^^^^ 
>a : any

foo<any, any>(a);
>foo<any, any>(a) : any
>foo : <Z, T extends <U>(x: U) => Z>(y: T) => Z
>    : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^^^^ 
>a : any

