constructSignatureAssignabilityInInheritance.ts(3,8): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
constructSignatureAssignabilityInInheritance.ts(35,8): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
constructSignatureAssignabilityInInheritance.ts(61,15): error TS2430: Interface 'I2' incorrectly extends interface 'Base2'.
  The types returned by 'new a(...)' are incompatible between these types.
    Type 'string' is not assignable to type 'number'.
constructSignatureAssignabilityInInheritance.ts(67,15): error TS2430: Interface 'I3' incorrectly extends interface 'Base2'.
  The types returned by 'new a2(...)' are incompatible between these types.
    Type 'string' is not assignable to type 'T'.
      'T' could be instantiated with an arbitrary type which could be unrelated to 'string'.


==== constructSignatureAssignabilityInInheritance.ts (4 errors) ====
    // Checking basic subtype relations with construct signatures
    
    module ConstructSignature {
           ~~~~~~~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        interface Base { // T
            // M's
            new (x: number): void; // BUG 842221
            new (x: number, y: number): number;
        }
    
        // S's
        interface I extends Base {
            // N's
            new (x: number): number; // satisfies subtype for both of base's call signatures
            new (x: number, y: number): boolean; // so this one hides the base type member that is identical modulo return types
        }
    
        interface Base2 { // T
            // M's
            new (x: number): number;
        }
    
        // S's
        interface I2 extends Base2 {
            // N's
            new (x: number): string; // error because return types don't match
        }
    
        // S's
        interface I3 extends Base2 {
            // N's
            new <T>(x: T): string; // ok, adds a new call signature
        }
    }
    
    module MemberWithConstructSignature {
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        interface Base { // T
            // M's
            a: new (x: number) => void;
            a2: new (x: number, y: number) => void;
            a3: new <T>(x: T) => void;
        }
    
        var b: Base;
        var r = new b.a(1);
    
        // S's
        interface I extends Base {
            // N's
            a: new (x: number) => number; // ok because base returns void
            a2: new (x: number, y: number) => boolean; // ok because base returns void
            a3: new <T>(x: T) => string; // ok because base returns void
        }
    
        interface Base2 { // T
            // M's
            a: new (x: number) => number;
            a2: new <T>(x: T) => T;
        }
    
        // S's
        interface I2 extends Base2 {
                  ~~
!!! error TS2430: Interface 'I2' incorrectly extends interface 'Base2'.
!!! error TS2430:   The types returned by 'new a(...)' are incompatible between these types.
!!! error TS2430:     Type 'string' is not assignable to type 'number'.
            // N's
            a: new (x: number) => string; // error because base returns non-void;
        }
    
        // S's
        interface I3 extends Base2 {
                  ~~
!!! error TS2430: Interface 'I3' incorrectly extends interface 'Base2'.
!!! error TS2430:   The types returned by 'new a2(...)' are incompatible between these types.
!!! error TS2430:     Type 'string' is not assignable to type 'T'.
!!! error TS2430:       'T' could be instantiated with an arbitrary type which could be unrelated to 'string'.
            // N's
            a2: new <T>(x: T) => string; // error because base returns non-void;
        }
    }