//// [tests/cases/conformance/classes/members/constructorFunctionTypes/constructorHasPrototypeProperty.ts] ////

=== constructorHasPrototypeProperty.ts ===
namespace NonGeneric {
>NonGeneric : Symbol(NonGeneric, Decl(constructorHasPrototypeProperty.ts, 0, 0))

    class C {
>C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 0, 22))

        foo: string;
>foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
    }

    class D extends C {
>D : Symbol(D, Decl(constructorHasPrototypeProperty.ts, 3, 5))
>C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 0, 22))

        bar: string;
>bar : Symbol(D.bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
    }

    var r = C.prototype;
>r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 9, 7))
>C.prototype : Symbol(C.prototype)
>C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 0, 22))
>prototype : Symbol(C.prototype)

    r.foo;
>r.foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))
>r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 9, 7))
>foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 1, 13))

    var r2 = D.prototype;
>r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 11, 7))
>D.prototype : Symbol(D.prototype)
>D : Symbol(D, Decl(constructorHasPrototypeProperty.ts, 3, 5))
>prototype : Symbol(D.prototype)

    r2.bar;
>r2.bar : Symbol(D.bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
>r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 11, 7))
>bar : Symbol(D.bar, Decl(constructorHasPrototypeProperty.ts, 5, 23))
}

namespace Generic {
>Generic : Symbol(Generic, Decl(constructorHasPrototypeProperty.ts, 13, 1))

    class C<T,U> {
>C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 15, 19))
>T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 16, 12))
>U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 16, 14))

        foo: T;
>foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
>T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 16, 12))

        bar: U;
>bar : Symbol(C.bar, Decl(constructorHasPrototypeProperty.ts, 17, 15))
>U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 16, 14))
    }

    class D<T,U> extends C<T,U> {
>D : Symbol(D, Decl(constructorHasPrototypeProperty.ts, 19, 5))
>T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 21, 12))
>U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 21, 14))
>C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 15, 19))
>T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 21, 12))
>U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 21, 14))

        baz: T;
>baz : Symbol(D.baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
>T : Symbol(T, Decl(constructorHasPrototypeProperty.ts, 21, 12))

        bing: U;
>bing : Symbol(D.bing, Decl(constructorHasPrototypeProperty.ts, 22, 15))
>U : Symbol(U, Decl(constructorHasPrototypeProperty.ts, 21, 14))
    }

    var r = C.prototype; // C<any, any>
>r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 26, 7))
>C.prototype : Symbol(C.prototype)
>C : Symbol(C, Decl(constructorHasPrototypeProperty.ts, 15, 19))
>prototype : Symbol(C.prototype)

    var ra = r.foo; // any
>ra : Symbol(ra, Decl(constructorHasPrototypeProperty.ts, 27, 7))
>r.foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))
>r : Symbol(r, Decl(constructorHasPrototypeProperty.ts, 26, 7))
>foo : Symbol(C.foo, Decl(constructorHasPrototypeProperty.ts, 16, 18))

    var r2 = D.prototype; // D<any, any>
>r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 28, 7))
>D.prototype : Symbol(D.prototype)
>D : Symbol(D, Decl(constructorHasPrototypeProperty.ts, 19, 5))
>prototype : Symbol(D.prototype)

    var rb = r2.baz; // any
>rb : Symbol(rb, Decl(constructorHasPrototypeProperty.ts, 29, 7))
>r2.baz : Symbol(D.baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
>r2 : Symbol(r2, Decl(constructorHasPrototypeProperty.ts, 28, 7))
>baz : Symbol(D.baz, Decl(constructorHasPrototypeProperty.ts, 21, 33))
}
