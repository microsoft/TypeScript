//// [tests/cases/compiler/contextualReturnTypeOfIIFE.ts] ////

=== contextualReturnTypeOfIIFE.ts ===
const test1: Promise<[one: number, two: string]> = (async () => {
>test1 : Promise<[one: number, two: string]>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(async () => {    return [1, 'two'];})() : Promise<[number, string]>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>(async () => {    return [1, 'two'];}) : () => Promise<[number, string]>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>async () => {    return [1, 'two'];} : () => Promise<[number, string]>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return [1, 'two'];
>[1, 'two'] : [number, string]
>           : ^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>'two' : "two"
>      : ^^^^^

})();

const test2: Promise<[one: number, two: string]> = new Promise(
>test2 : Promise<[one: number, two: string]>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Promise(    (resolve) => resolve([1, 'two']),) : Promise<[one: number, two: string]>
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^

    (resolve) => resolve([1, 'two']),
>(resolve) => resolve([1, 'two']) : (resolve: (value: [one: number, two: string] | PromiseLike<[one: number, two: string]>) => void) => void
>                                 : ^       ^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^
>resolve : (value: [one: number, two: string] | PromiseLike<[one: number, two: string]>) => void
>        : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>resolve([1, 'two']) : void
>                    : ^^^^
>resolve : (value: [one: number, two: string] | PromiseLike<[one: number, two: string]>) => void
>        : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
>[1, 'two'] : [number, string]
>           : ^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>'two' : "two"
>      : ^^^^^

);

const obj: { foo: [one: number, two: string] } = {
>obj : { foo: [one: number, two: string]; }
>    : ^^^^^^^                          ^^^
>foo : [one: number, two: string]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    foo: (() => [1, 'two'])()} : { foo: [number, string]; }
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    foo: (() => [1, 'two'])()
>foo : [number, string]
>    : ^^^^^^^^^^^^^^^^
>(() => [1, 'two'])() : [number, string]
>                     : ^^^^^^^^^^^^^^^^
>(() => [1, 'two']) : () => [number, string]
>                   : ^^^^^^^^^^^^^^^^^^^^^^
>() => [1, 'two'] : () => [number, string]
>                 : ^^^^^^^^^^^^^^^^^^^^^^
>[1, 'two'] : [number, string]
>           : ^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>'two' : "two"
>      : ^^^^^

};

