//// [tests/cases/compiler/contextualSignatureInstatiationContravariance.ts] ////

=== contextualSignatureInstatiationContravariance.ts ===
interface Animal { x }
>x : any
>  : ^^^

interface Giraffe extends Animal { y }
>y : any
>  : ^^^

interface Elephant extends Animal { y2 }
>y2 : any
>   : ^^^

var f2: <T extends Animal>(x: T, y: T) => void;
>f2 : <T extends Animal>(x: T, y: T) => void
>   : ^ ^^^^^^^^^      ^^ ^^ ^^ ^^ ^^^^^    
>x : T
>  : ^
>y : T
>  : ^

var g2: (g: Giraffe, e: Elephant) => void;
>g2 : (g: Giraffe, e: Elephant) => void
>   : ^ ^^       ^^ ^^        ^^^^^    
>g : Giraffe
>  : ^^^^^^^
>e : Elephant
>  : ^^^^^^^^

g2 = f2; // error because Giraffe and Elephant are disjoint types
>g2 = f2 : <T extends Animal>(x: T, y: T) => void
>        : ^ ^^^^^^^^^      ^^ ^^ ^^ ^^ ^^^^^    
>g2 : (g: Giraffe, e: Elephant) => void
>   : ^ ^^       ^^ ^^        ^^^^^    
>f2 : <T extends Animal>(x: T, y: T) => void
>   : ^ ^^^^^^^^^      ^^ ^^ ^^ ^^ ^^^^^    

var h2: (g1: Giraffe, g2: Giraffe) => void;
>h2 : (g1: Giraffe, g2: Giraffe) => void
>   : ^  ^^       ^^  ^^       ^^^^^    
>g1 : Giraffe
>   : ^^^^^^^
>g2 : Giraffe
>   : ^^^^^^^

h2 = f2; // valid because Giraffe satisfies the constraint. It is safe in the traditional contravariant fashion.
>h2 = f2 : <T extends Animal>(x: T, y: T) => void
>        : ^ ^^^^^^^^^      ^^ ^^ ^^ ^^ ^^^^^    
>h2 : (g1: Giraffe, g2: Giraffe) => void
>   : ^  ^^       ^^  ^^       ^^^^^    
>f2 : <T extends Animal>(x: T, y: T) => void
>   : ^ ^^^^^^^^^      ^^ ^^ ^^ ^^ ^^^^^    

