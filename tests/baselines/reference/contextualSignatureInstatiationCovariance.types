//// [tests/cases/compiler/contextualSignatureInstatiationCovariance.ts] ////

=== contextualSignatureInstatiationCovariance.ts ===
interface Animal { x }
>x : any

interface TallThing { x2 }
>x2 : any

interface Giraffe extends Animal, TallThing { y }
>y : any

var f2: <T extends Giraffe>(x: T, y: T) => void;
>f2 : <T extends Giraffe>(x: T, y: T) => void
>   : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^    
>x : T
>  : ^
>y : T
>  : ^

var g2: (a: Animal, t: TallThing) => void;
>g2 : (a: Animal, t: TallThing) => void
>   : ^ ^^      ^^ ^^         ^^^^^    
>a : Animal
>  : ^^^^^^
>t : TallThing
>  : ^^^^^^^^^

g2 = f2; // While neither Animal nor TallThing satisfy the constraint, T is at worst a Giraffe and compatible with both via covariance.
>g2 = f2 : <T extends Giraffe>(x: T, y: T) => void
>        : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^    
>g2 : (a: Animal, t: TallThing) => void
>   : ^ ^^      ^^ ^^         ^^^^^    
>f2 : <T extends Giraffe>(x: T, y: T) => void
>   : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^    

var h2: (a1: Animal, a2: Animal) => void;
>h2 : (a1: Animal, a2: Animal) => void
>   : ^  ^^      ^^  ^^      ^^^^^    
>a1 : Animal
>   : ^^^^^^
>a2 : Animal
>   : ^^^^^^

h2 = f2; // Animal does not satisfy the constraint, but T is at worst a Giraffe and compatible with Animal via covariance.
>h2 = f2 : <T extends Giraffe>(x: T, y: T) => void
>        : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^    
>h2 : (a1: Animal, a2: Animal) => void
>   : ^  ^^      ^^  ^^      ^^^^^    
>f2 : <T extends Giraffe>(x: T, y: T) => void
>   : ^ ^^^^^^^^^       ^^ ^^ ^^ ^^ ^^^^^    

