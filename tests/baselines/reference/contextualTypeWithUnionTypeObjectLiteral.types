//// [tests/cases/conformance/types/union/contextualTypeWithUnionTypeObjectLiteral.ts] ////

=== contextualTypeWithUnionTypeObjectLiteral.ts ===
var str: string;
>str : string
>    : ^^^^^^

var num: number;
>num : number
>    : ^^^^^^

var strOrNumber: string | number = str || num;
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^
>str || num : string | number
>           : ^^^^^^^^^^^^^^^
>str : string
>    : ^^^^^^
>num : number
>    : ^^^^^^

var objStr: { prop: string };
>objStr : { prop: string; }
>       : ^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^

var objNum: { prop: number };
>objNum : { prop: number; }
>       : ^^^^^^^^      ^^^
>prop : number
>     : ^^^^^^

var objStrOrNum1: { prop: string } | { prop: number } = objStr || objNum;
>objStrOrNum1 : { prop: string; } | { prop: number; }
>             : ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>prop : number
>     : ^^^^^^
>objStr || objNum : { prop: string; } | { prop: number; }
>                 : ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>objStr : { prop: string; }
>       : ^^^^^^^^      ^^^
>objNum : { prop: number; }
>       : ^^^^^^^^      ^^^

var objStrOrNum2: { prop: string | number } = objStr || objNum;
>objStrOrNum2 : { prop: string | number; }
>             : ^^^^^^^^               ^^^
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>objStr || objNum : { prop: string; } | { prop: number; }
>                 : ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>objStr : { prop: string; }
>       : ^^^^^^^^      ^^^
>objNum : { prop: number; }
>       : ^^^^^^^^      ^^^

// Below is error because :
// Spec says:
// S is a union type and each constituent type of S is assignable to T.
// T is a union type and S is assignable to at least one constituent type of T.
// In case of objStrOrNum3, the S is not union Type but object Literal so we go to next step. 
// Since T is union Type we only allow the assignment of either object with property of type string or object with property of type number but do not allow object with property of type string | number
var objStrOrNum3: { prop: string } | { prop: number } = {
>objStrOrNum3 : { prop: string; } | { prop: number; }
>             : ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>prop : number
>     : ^^^^^^
>{    prop: strOrNumber} : { prop: string | number; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    prop: strOrNumber
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

};
var objStrOrNum4: { prop: string | number } = {
>objStrOrNum4 : { prop: string | number; }
>             : ^^^^^^^^               ^^^
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>{    prop: strOrNumber} : { prop: string | number; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    prop: strOrNumber
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

};
var objStrOrNum5: { prop: string; anotherP: string; } | { prop: number } = { prop: strOrNumber };
>objStrOrNum5 : { prop: string; anotherP: string; } | { prop: number; }
>             : ^^^^^^^^      ^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>anotherP : string
>         : ^^^^^^
>prop : number
>     : ^^^^^^
>{ prop: strOrNumber } : { prop: string | number; }
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

var objStrOrNum6: { prop: string; anotherP: string; } | { prop: number } = {
>objStrOrNum6 : { prop: string; anotherP: string; } | { prop: number; }
>             : ^^^^^^^^      ^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>anotherP : string
>         : ^^^^^^
>prop : number
>     : ^^^^^^
>{    prop: strOrNumber,    anotherP: str} : { prop: string | number; anotherP: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    prop: strOrNumber,
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

    anotherP: str
>anotherP : string
>         : ^^^^^^
>str : string
>    : ^^^^^^

};
var objStrOrNum7: { prop: string; anotherP: string; } | { prop: number; anotherP1: number } = {
>objStrOrNum7 : { prop: string; anotherP: string; } | { prop: number; anotherP1: number; }
>             : ^^^^^^^^      ^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>anotherP : string
>         : ^^^^^^
>prop : number
>     : ^^^^^^
>anotherP1 : number
>          : ^^^^^^
>{    prop: strOrNumber,    anotherP: str} : { prop: string | number; anotherP: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    prop: strOrNumber,
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

    anotherP: str
>anotherP : string
>         : ^^^^^^
>str : string
>    : ^^^^^^

};
var objStrOrNum8: { prop: string; anotherP: string; } | { prop: number; anotherP1: number } = {
>objStrOrNum8 : { prop: string; anotherP: string; } | { prop: number; anotherP1: number; }
>             : ^^^^^^^^      ^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>anotherP : string
>         : ^^^^^^
>prop : number
>     : ^^^^^^
>anotherP1 : number
>          : ^^^^^^
>{    prop: strOrNumber,    anotherP: str,    anotherP1: num} : { prop: string | number; anotherP: string; anotherP1: number; }
>                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    prop: strOrNumber,
>prop : string | number
>     : ^^^^^^^^^^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

    anotherP: str,
>anotherP : string
>         : ^^^^^^
>str : string
>    : ^^^^^^

    anotherP1: num
>anotherP1 : number
>          : ^^^^^^
>num : number
>    : ^^^^^^

};
interface I11 {
    commonMethodDifferentReturnType(a: string, b: number): string;
>commonMethodDifferentReturnType : (a: string, b: number) => string
>                                : ^ ^^      ^^ ^^      ^^^^^      
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^
}
interface I21 {
    commonMethodDifferentReturnType(a: string, b: number): number;
>commonMethodDifferentReturnType : (a: string, b: number) => number
>                                : ^ ^^      ^^ ^^      ^^^^^      
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^
}
var i11: I11;
>i11 : I11
>    : ^^^

var i21: I21;
>i21 : I21
>    : ^^^

var i11Ori21: I11 | I21 = i11;
>i11Ori21 : I11 | I21
>         : ^^^^^^^^^
>i11 : I11
>    : ^^^

var i11Ori21: I11 | I21 = i21;
>i11Ori21 : I11 | I21
>         : ^^^^^^^^^
>i21 : I21
>    : ^^^

var i11Ori21: I11 | I21 = { // Like i1
>i11Ori21 : I11 | I21
>         : ^^^^^^^^^
>{ // Like i1    commonMethodDifferentReturnType: (a, b) => {        var z = a.charAt(b);        return z;    },} : { commonMethodDifferentReturnType: (a: string, b: number) => string; }
>                                                                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^

    commonMethodDifferentReturnType: (a, b) => {
>commonMethodDifferentReturnType : (a: string, b: number) => string
>                                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^
>(a, b) => {        var z = a.charAt(b);        return z;    } : (a: string, b: number) => string
>                                                              : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^

        var z = a.charAt(b);
>z : string
>  : ^^^^^^
>a.charAt(b) : string
>            : ^^^^^^
>a.charAt : (pos: number) => string
>         : ^   ^^      ^^^^^      
>a : string
>  : ^^^^^^
>charAt : (pos: number) => string
>       : ^   ^^      ^^^^^      
>b : number
>  : ^^^^^^

        return z;
>z : string
>  : ^^^^^^

    },
};
var i11Ori21: I11 | I21 = { // Like i2
>i11Ori21 : I11 | I21
>         : ^^^^^^^^^
>{ // Like i2    commonMethodDifferentReturnType: (a, b) => {        var z = a.charCodeAt(b);        return z;    },} : { commonMethodDifferentReturnType: (a: string, b: number) => number; }
>                                                                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^

    commonMethodDifferentReturnType: (a, b) => {
>commonMethodDifferentReturnType : (a: string, b: number) => number
>                                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^
>(a, b) => {        var z = a.charCodeAt(b);        return z;    } : (a: string, b: number) => number
>                                                                  : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^

        var z = a.charCodeAt(b);
>z : number
>  : ^^^^^^
>a.charCodeAt(b) : number
>                : ^^^^^^
>a.charCodeAt : (index: number) => number
>             : ^     ^^      ^^^^^      
>a : string
>  : ^^^^^^
>charCodeAt : (index: number) => number
>           : ^     ^^      ^^^^^      
>b : number
>  : ^^^^^^

        return z;
>z : number
>  : ^^^^^^

    },
};
var strOrNumber: string | number;
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

var i11Ori21: I11 | I21 = { // Like i1 and i2 both
>i11Ori21 : I11 | I21
>         : ^^^^^^^^^
>{ // Like i1 and i2 both    commonMethodDifferentReturnType: (a, b) => strOrNumber,} : { commonMethodDifferentReturnType: (a: string, b: number) => string | number; }
>                                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    commonMethodDifferentReturnType: (a, b) => strOrNumber,
>commonMethodDifferentReturnType : (a: string, b: number) => string | number
>                                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(a, b) => strOrNumber : (a: string, b: number) => string | number
>                      : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^
>strOrNumber : string | number
>            : ^^^^^^^^^^^^^^^

};
