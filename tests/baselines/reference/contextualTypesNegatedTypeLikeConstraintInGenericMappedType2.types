//// [tests/cases/compiler/contextualTypesNegatedTypeLikeConstraintInGenericMappedType2.ts] ////

=== contextualTypesNegatedTypeLikeConstraintInGenericMappedType2.ts ===
type Tags<D extends string, P> = P extends Record<D, infer X> ? X : never;
>Tags : Tags<D, P>
>     : ^^^^^^^^^^

declare const typeTags: <I>() => <
>typeTags : <I>() => <P extends { readonly [Tag in Tags<"_tag", I> & string]: (_: Extract<I, { readonly _tag: Tag; }>) => any; } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never; }>(fields: P) => unknown
>         : ^ ^^^^^^^                                                                                                                                                                                                    

  P extends {
    readonly [Tag in Tags<"_tag", I> & string]: (
      _: Extract<I, { readonly _tag: Tag }>,
>_ : Extract<I, { readonly _tag: Tag; }>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^
>_tag : Tag
>     : ^^^

    ) => any;
  } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never },
>(
  fields: P,
>fields : P
>       : ^

) => unknown;

type Value = { _tag: "A"; a: number } | { _tag: "B"; b: number };
>Value : Value
>      : ^^^^^
>_tag : "A"
>     : ^^^
>a : number
>  : ^^^^^^
>_tag : "B"
>     : ^^^
>b : number
>  : ^^^^^^

const matcher = typeTags<Value>();
>matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^       
>typeTags<Value>() : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
>                  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^       
>typeTags : <I>() => <P extends { readonly [Tag in Tags<"_tag", I> & string]: (_: Extract<I, { readonly _tag: Tag; }>) => any; } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never; }>(fields: P) => unknown
>         : ^ ^^^^^^^                                                                                                                                                                                                    

matcher({
>matcher({  A: (_) => _.a,  B: (_) => "fail",}) : unknown
>                                               : ^^^^^^^
>matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^       
>{  A: (_) => _.a,  B: (_) => "fail",} : { A: (_: { _tag: "A"; a: number; }) => number; B: (_: { _tag: "B"; b: number; }) => string; }
>                                      : ^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^^^^

  A: (_) => _.a,
>A : (_: { _tag: "A"; a: number; }) => number
>  : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>(_) => _.a : (_: { _tag: "A"; a: number; }) => number
>           : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>_ : { _tag: "A"; a: number; }
>  : ^^^^^^^^   ^^^^^      ^^^
>_.a : number
>    : ^^^^^^
>_ : { _tag: "A"; a: number; }
>  : ^^^^^^^^   ^^^^^      ^^^
>a : number
>  : ^^^^^^

  B: (_) => "fail",
>B : (_: { _tag: "B"; b: number; }) => string
>  : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>(_) => "fail" : (_: { _tag: "B"; b: number; }) => string
>              : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>_ : { _tag: "B"; b: number; }
>  : ^^^^^^^^   ^^^^^      ^^^
>"fail" : "fail"
>       : ^^^^^^

});

matcher({
>matcher({  A: (_) => _.a,  B: (_) => "fail",  C: (_) => "fail",}) : unknown
>                                                                  : ^^^^^^^
>matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^   ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^       
>{  A: (_) => _.a,  B: (_) => "fail",  C: (_) => "fail",} : { A: (_: { _tag: "A"; a: number; }) => number; B: (_: { _tag: "B"; b: number; }) => string; C: (_: any) => string; }
>                                                         : ^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^

  A: (_) => _.a,
>A : (_: { _tag: "A"; a: number; }) => number
>  : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>(_) => _.a : (_: { _tag: "A"; a: number; }) => number
>           : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>_ : { _tag: "A"; a: number; }
>  : ^^^^^^^^   ^^^^^      ^^^
>_.a : number
>    : ^^^^^^
>_ : { _tag: "A"; a: number; }
>  : ^^^^^^^^   ^^^^^      ^^^
>a : number
>  : ^^^^^^

  B: (_) => "fail",
>B : (_: { _tag: "B"; b: number; }) => string
>  : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>(_) => "fail" : (_: { _tag: "B"; b: number; }) => string
>              : ^ ^^^^^^^^^^   ^^^^^      ^^^^^^^^^^^^^^
>_ : { _tag: "B"; b: number; }
>  : ^^^^^^^^   ^^^^^      ^^^
>"fail" : "fail"
>       : ^^^^^^

  C: (_) => "fail",
>C : (_: any) => string
>  : ^ ^^^^^^^^^^^^^^^^
>(_) => "fail" : (_: any) => string
>              : ^ ^^^^^^^^^^^^^^^^
>_ : any
>  : ^^^
>"fail" : "fail"
>       : ^^^^^^

});

