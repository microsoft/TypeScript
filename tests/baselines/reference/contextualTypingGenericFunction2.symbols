//// [tests/cases/compiler/contextualTypingGenericFunction2.ts] ////

=== contextualTypingGenericFunction2.ts ===
// https://github.com/microsoft/TypeScript/issues/61791

declare const fn1: <T, Args extends Array<any>, Ret>(
>fn1 : Symbol(fn1, Decl(contextualTypingGenericFunction2.ts, 2, 13))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 2, 20))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 2, 22))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 2, 47))

  self: T,
>self : Symbol(self, Decl(contextualTypingGenericFunction2.ts, 2, 53))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 2, 20))

  body: (this: T, ...args: Args) => Ret,
>body : Symbol(body, Decl(contextualTypingGenericFunction2.ts, 3, 10))
>this : Symbol(this, Decl(contextualTypingGenericFunction2.ts, 4, 9))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 2, 20))
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 4, 17))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 2, 22))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 2, 47))

) => (...args: Args) => Ret;
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 5, 6))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 2, 22))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 2, 47))

export const result1 = fn1({ message: "foo" }, function (n: number) {
>result1 : Symbol(result1, Decl(contextualTypingGenericFunction2.ts, 7, 12))
>fn1 : Symbol(fn1, Decl(contextualTypingGenericFunction2.ts, 2, 13))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 7, 28))
>n : Symbol(n, Decl(contextualTypingGenericFunction2.ts, 7, 57))

  this.message;
>this.message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 7, 28))
>this : Symbol(this, Decl(contextualTypingGenericFunction2.ts, 4, 9))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 7, 28))

});

export const result2 = fn1({ message: "foo" }, function <N>(n: N) {
>result2 : Symbol(result2, Decl(contextualTypingGenericFunction2.ts, 11, 12))
>fn1 : Symbol(fn1, Decl(contextualTypingGenericFunction2.ts, 2, 13))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 11, 28))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 11, 57))
>n : Symbol(n, Decl(contextualTypingGenericFunction2.ts, 11, 60))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 11, 57))

  this.message;
>this.message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 11, 28))
>this : Symbol(this, Decl(contextualTypingGenericFunction2.ts, 4, 9))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 11, 28))

});

declare const fn2: <Args extends Array<any>, Ret>(
>fn2 : Symbol(fn2, Decl(contextualTypingGenericFunction2.ts, 15, 13))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 15, 20))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 15, 44))

  body: (first: string, ...args: Args) => Ret,
>body : Symbol(body, Decl(contextualTypingGenericFunction2.ts, 15, 50))
>first : Symbol(first, Decl(contextualTypingGenericFunction2.ts, 16, 9))
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 16, 23))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 15, 20))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 15, 44))

) => (...args: Args) => Ret;
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 17, 6))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 15, 20))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 15, 44))

export const result3 = fn2(function <N>(first, n: N) {});
>result3 : Symbol(result3, Decl(contextualTypingGenericFunction2.ts, 19, 12))
>fn2 : Symbol(fn2, Decl(contextualTypingGenericFunction2.ts, 15, 13))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 19, 37))
>first : Symbol(first, Decl(contextualTypingGenericFunction2.ts, 19, 40))
>n : Symbol(n, Decl(contextualTypingGenericFunction2.ts, 19, 46))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 19, 37))

declare const fn3: <Args extends Array<any>, Ret>(
>fn3 : Symbol(fn3, Decl(contextualTypingGenericFunction2.ts, 21, 13))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 21, 20))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 21, 44))

  body: (...args: Args) => (arg: string) => Ret,
>body : Symbol(body, Decl(contextualTypingGenericFunction2.ts, 21, 50))
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 22, 9))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 21, 20))
>arg : Symbol(arg, Decl(contextualTypingGenericFunction2.ts, 22, 28))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 21, 44))

) => (...args: Args) => Ret;
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 23, 6))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 21, 20))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 21, 44))

export const result4 = fn3(function <N>(n: N) {
>result4 : Symbol(result4, Decl(contextualTypingGenericFunction2.ts, 25, 12))
>fn3 : Symbol(fn3, Decl(contextualTypingGenericFunction2.ts, 21, 13))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 25, 37))
>n : Symbol(n, Decl(contextualTypingGenericFunction2.ts, 25, 40))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 25, 37))

    return (arg) => {
>arg : Symbol(arg, Decl(contextualTypingGenericFunction2.ts, 26, 12))

        return 10
    }
});

declare function fn4<T, P>(config: {
>fn4 : Symbol(fn4, Decl(contextualTypingGenericFunction2.ts, 29, 3))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 31, 21))
>P : Symbol(P, Decl(contextualTypingGenericFunction2.ts, 31, 23))
>config : Symbol(config, Decl(contextualTypingGenericFunction2.ts, 31, 27))

  context: T;
>context : Symbol(context, Decl(contextualTypingGenericFunction2.ts, 31, 36))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 31, 21))

  callback: (params: P) => (context: T, params: P) => number;
>callback : Symbol(callback, Decl(contextualTypingGenericFunction2.ts, 32, 13))
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 33, 13))
>P : Symbol(P, Decl(contextualTypingGenericFunction2.ts, 31, 23))
>context : Symbol(context, Decl(contextualTypingGenericFunction2.ts, 33, 28))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 31, 21))
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 33, 39))
>P : Symbol(P, Decl(contextualTypingGenericFunction2.ts, 31, 23))

  other?: (arg: string) => void;
>other : Symbol(other, Decl(contextualTypingGenericFunction2.ts, 33, 61))
>arg : Symbol(arg, Decl(contextualTypingGenericFunction2.ts, 34, 11))

}): (params: P) => number;
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 35, 5))
>P : Symbol(P, Decl(contextualTypingGenericFunction2.ts, 31, 23))

export const result5 = fn4({
>result5 : Symbol(result5, Decl(contextualTypingGenericFunction2.ts, 37, 12))
>fn4 : Symbol(fn4, Decl(contextualTypingGenericFunction2.ts, 29, 3))

  context: 1,
>context : Symbol(context, Decl(contextualTypingGenericFunction2.ts, 37, 28))

  callback: <N,>(params: N) => {
>callback : Symbol(callback, Decl(contextualTypingGenericFunction2.ts, 38, 13))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 39, 13))
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 39, 17))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 39, 13))

    return (a, b) => a + 1;
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 40, 12))
>b : Symbol(b, Decl(contextualTypingGenericFunction2.ts, 40, 14))
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 40, 12))

  },
});

export const result6 = fn4({
>result6 : Symbol(result6, Decl(contextualTypingGenericFunction2.ts, 44, 12))
>fn4 : Symbol(fn4, Decl(contextualTypingGenericFunction2.ts, 29, 3))

  context: 1,
>context : Symbol(context, Decl(contextualTypingGenericFunction2.ts, 44, 28))

  callback: <N,>(params: N) => {
>callback : Symbol(callback, Decl(contextualTypingGenericFunction2.ts, 45, 13))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 46, 13))
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 46, 17))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 46, 13))

    return (a, b) => a + 1;
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 47, 12))
>b : Symbol(b, Decl(contextualTypingGenericFunction2.ts, 47, 14))
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 47, 12))

  },
  other: (_) => {} // outer context-sensitive function
>other : Symbol(other, Decl(contextualTypingGenericFunction2.ts, 48, 4))
>_ : Symbol(_, Decl(contextualTypingGenericFunction2.ts, 49, 10))

});

// should error
export const result7 = fn4({
>result7 : Symbol(result7, Decl(contextualTypingGenericFunction2.ts, 53, 12))
>fn4 : Symbol(fn4, Decl(contextualTypingGenericFunction2.ts, 29, 3))

  context: 1,
>context : Symbol(context, Decl(contextualTypingGenericFunction2.ts, 53, 28))

  callback: <N,>(params: N) => {
>callback : Symbol(callback, Decl(contextualTypingGenericFunction2.ts, 54, 13))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 55, 13))
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 55, 17))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 55, 13))

    return (a: boolean, b) => a ? 1 : 2;
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 56, 12))
>b : Symbol(b, Decl(contextualTypingGenericFunction2.ts, 56, 23))
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 56, 12))

  },
  other: (_) => {} // outer context-sensitive function
>other : Symbol(other, Decl(contextualTypingGenericFunction2.ts, 57, 4))
>_ : Symbol(_, Decl(contextualTypingGenericFunction2.ts, 58, 10))

});

 // should error
export const result8 = fn4({
>result8 : Symbol(result8, Decl(contextualTypingGenericFunction2.ts, 62, 12))
>fn4 : Symbol(fn4, Decl(contextualTypingGenericFunction2.ts, 29, 3))

  context: 1,
>context : Symbol(context, Decl(contextualTypingGenericFunction2.ts, 62, 28))

  callback: <N,>(params: N) => {
>callback : Symbol(callback, Decl(contextualTypingGenericFunction2.ts, 63, 13))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 64, 13))
>params : Symbol(params, Decl(contextualTypingGenericFunction2.ts, 64, 17))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 64, 13))

    return (a, b) => true;
>a : Symbol(a, Decl(contextualTypingGenericFunction2.ts, 65, 12))
>b : Symbol(b, Decl(contextualTypingGenericFunction2.ts, 65, 14))

  },
  other: (_) => {} // outer context-sensitive function
>other : Symbol(other, Decl(contextualTypingGenericFunction2.ts, 66, 4))
>_ : Symbol(_, Decl(contextualTypingGenericFunction2.ts, 67, 10))

});

declare const fnGen1: <T, Args extends Array<any>, Ret>(
>fnGen1 : Symbol(fnGen1, Decl(contextualTypingGenericFunction2.ts, 70, 13))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 70, 23))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 70, 25))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 70, 50))

  self: T,
>self : Symbol(self, Decl(contextualTypingGenericFunction2.ts, 70, 56))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 70, 23))

  body: (this: T, ...args: Args) => Generator<any, Ret, never>,
>body : Symbol(body, Decl(contextualTypingGenericFunction2.ts, 71, 10))
>this : Symbol(this, Decl(contextualTypingGenericFunction2.ts, 72, 9))
>T : Symbol(T, Decl(contextualTypingGenericFunction2.ts, 70, 23))
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 72, 17))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 70, 25))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 70, 50))

) => (...args: Args) => Ret;
>args : Symbol(args, Decl(contextualTypingGenericFunction2.ts, 73, 6))
>Args : Symbol(Args, Decl(contextualTypingGenericFunction2.ts, 70, 25))
>Ret : Symbol(Ret, Decl(contextualTypingGenericFunction2.ts, 70, 50))

export const result9 = fnGen1({ message: "foo" }, function* (n: number) {
>result9 : Symbol(result9, Decl(contextualTypingGenericFunction2.ts, 75, 12))
>fnGen1 : Symbol(fnGen1, Decl(contextualTypingGenericFunction2.ts, 70, 13))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 75, 31))
>n : Symbol(n, Decl(contextualTypingGenericFunction2.ts, 75, 61))

  this.message;
>this.message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 75, 31))
>this : Symbol(this, Decl(contextualTypingGenericFunction2.ts, 72, 9))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 75, 31))

});

export const result10 = fnGen1({ message: "foo" }, function* <N>(n: N) {
>result10 : Symbol(result10, Decl(contextualTypingGenericFunction2.ts, 79, 12))
>fnGen1 : Symbol(fnGen1, Decl(contextualTypingGenericFunction2.ts, 70, 13))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 79, 32))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 79, 62))
>n : Symbol(n, Decl(contextualTypingGenericFunction2.ts, 79, 65))
>N : Symbol(N, Decl(contextualTypingGenericFunction2.ts, 79, 62))

  this.message;
>this.message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 79, 32))
>this : Symbol(this, Decl(contextualTypingGenericFunction2.ts, 72, 9))
>message : Symbol(message, Decl(contextualTypingGenericFunction2.ts, 79, 32))

});

