//// [tests/cases/compiler/contextualTypingOfLambdaReturnExpression.ts] ////

=== contextualTypingOfLambdaReturnExpression.ts ===
function callb(lam: (l: number) => void);
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>      : ^^^   ^^                   ^^^^^^^^^   ^^                   ^^^^^^^^^
>lam : (l: number) => void
>    : ^ ^^      ^^^^^    
>l : number
>  : ^^^^^^

function callb(lam: (n: string) => void);
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>      : ^^^   ^^                   ^^^^^^^^^   ^^                   ^^^^^^^^^
>lam : (n: string) => void
>    : ^ ^^      ^^^^^    
>n : string
>  : ^^^^^^

function callb(a) { }
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>      : ^^^   ^^                   ^^^^^^^^^   ^^                   ^^^^^^^^^
>a : any
>  : ^^^

callb((a) => a.length); // Ok, we choose the second overload because the first one gave us an error when trying to resolve the lambda return type
>callb((a) => a.length) : any
>                       : ^^^
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>      : ^^^   ^^                   ^^^^^^^^^   ^^                   ^^^^^^^^^
>(a) => a.length : (a: number) => any
>                : ^ ^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a.length : any
>         : ^^^
>a : number
>  : ^^^^^^
>length : any
>       : ^^^

callb((a) => { a.length; }); // Error, we picked the first overload and errored when type checking the lambda body
>callb((a) => { a.length; }) : any
>                            : ^^^
>callb : { (lam: (l: number) => void): any; (lam: (n: string) => void): any; }
>      : ^^^   ^^                   ^^^^^^^^^   ^^                   ^^^^^^^^^
>(a) => { a.length; } : (a: number) => void
>                     : ^ ^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>a.length : any
>         : ^^^
>a : number
>  : ^^^^^^
>length : any
>       : ^^^

