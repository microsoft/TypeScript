//// [tests/cases/compiler/contextualTypingOfObjectLiterals.ts] ////

=== contextualTypingOfObjectLiterals.ts ===
var obj1: { [x: string]: string; };
>obj1 : { [x: string]: string; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

var obj2 = {x: ""};
>obj2 : { x: string; }
>     : ^^^^^^^^^^^^^^
>{x: ""} : { x: string; }
>        : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"" : ""
>   : ^^

obj1 = {}; // Ok
>obj1 = {} : {}
>          : ^^
>obj1 : { [x: string]: string; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>{} : {}
>   : ^^

obj1 = obj2; // Error - indexer doesn't match
>obj1 = obj2 : { x: string; }
>            : ^^^^^^^^^^^^^^
>obj1 : { [x: string]: string; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>obj2 : { x: string; }
>     : ^^^^^^^^^^^^^^

function f(x: { [s: string]: string }) { }
>f : (x: { [s: string]: string; }) => void
>  : ^ ^^                        ^^^^^^^^^
>x : { [s: string]: string; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^

f({}); // Ok
>f({}) : void
>      : ^^^^
>f : (x: { [s: string]: string; }) => void
>  : ^ ^^                        ^^^^^^^^^
>{} : {}
>   : ^^

f(obj1); // Ok
>f(obj1) : void
>        : ^^^^
>f : (x: { [s: string]: string; }) => void
>  : ^ ^^                        ^^^^^^^^^
>obj1 : { [x: string]: string; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^

f(obj2); // Error - indexer doesn't match
>f(obj2) : void
>        : ^^^^
>f : (x: { [s: string]: string; }) => void
>  : ^ ^^                        ^^^^^^^^^
>obj2 : { x: string; }
>     : ^^^^^^^^^^^^^^

