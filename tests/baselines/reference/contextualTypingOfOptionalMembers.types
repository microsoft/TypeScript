//// [tests/cases/compiler/contextualTypingOfOptionalMembers.tsx] ////

=== index.tsx ===
interface ActionsObject<State> {
    [prop: string]: (state: State) => State;
>prop : string
>     : ^^^^^^
>state : State
>      : ^^^^^
}

interface Options<State, Actions> {
    state?: State;
>state : State | undefined
>      : ^^^^^^^^^^^^^^^^^

    view?: (state: State, actions: Actions) => any;
>view : ((state: State, actions: Actions) => any) | undefined
>     : ^^     ^^     ^^       ^^       ^^^^^   ^^^^^^^^^^^^^
>state : State
>      : ^^^^^
>actions : Actions
>        : ^^^^^^^

    actions: string | Actions;
>actions : string | Actions
>        : ^^^^^^^^^^^^^^^^
}

declare function app<State, Actions extends ActionsObject<State>>(obj: Options<State, Actions>): void;
>app : <State, Actions extends ActionsObject<State>>(obj: Options<State, Actions>) => void
>    : ^     ^^       ^^^^^^^^^                    ^^   ^^                       ^^^^^    
>obj : Options<State, Actions>
>    : ^^^^^^^^^^^^^^^^^^^^^^^

app({
>app({    state: 100,    actions: {        foo: s => s // Should be typed number => number    },    view: (s, a) => undefined as any,}) : void
>                                                                                                                                       : ^^^^
>app : <State, Actions extends ActionsObject<State>>(obj: Options<State, Actions>) => void
>    : ^     ^^       ^^^^^^^^^                    ^^   ^^                       ^^^^^    
>{    state: 100,    actions: {        foo: s => s // Should be typed number => number    },    view: (s, a) => undefined as any,} : { state: number; actions: { foo: (s: number) => number; }; view: (s: number, a: { foo: (s: number) => number; }) => any; }
>                                                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^

    state: 100,
>state : number
>      : ^^^^^^
>100 : 100
>    : ^^^

    actions: {
>actions : { foo: (s: number) => number; }
>        : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>{        foo: s => s // Should be typed number => number    } : { foo: (s: number) => number; }
>                                                              : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^

        foo: s => s // Should be typed number => number
>foo : (s: number) => number
>    : ^ ^^^^^^^^^^^^^^^^^^^
>s => s : (s: number) => number
>       : ^ ^^^^^^^^^^^^^^^^^^^
>s : number
>  : ^^^^^^
>s : number
>  : ^^^^^^

    },
    view: (s, a) => undefined as any,
>view : (s: number, a: { foo: (s: number) => number; }) => any
>     : ^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   
>(s, a) => undefined as any : (s: number, a: { foo: (s: number) => number; }) => any
>                           : ^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   
>s : number
>  : ^^^^^^
>a : { foo: (s: number) => number; }
>  : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>undefined as any : any
>undefined : undefined
>          : ^^^^^^^^^

});


interface Bar {
    bar: (a: number) => void;
>bar : (a: number) => void
>    : ^ ^^      ^^^^^    
>a : number
>  : ^^^^^^
}

declare function foo<T extends Bar>(x: string | T): T;
>foo : <T extends Bar>(x: string | T) => T
>    : ^ ^^^^^^^^^   ^^ ^^          ^^^^^ 
>x : string | T
>  : ^^^^^^^^^^

const y = foo({
>y : { bar(x: number): void; }
>  : ^^^^^^ ^^^^^^^^^^^^^^^^^^
>foo({    bar(x) { // Should be typed number => void    }}) : { bar(x: number): void; }
>                                                           : ^^^^^^ ^^^^^^^^^^^^^^^^^^
>foo : <T extends Bar>(x: string | T) => T
>    : ^ ^^^^^^^^^   ^^ ^^          ^^^^^ 
>{    bar(x) { // Should be typed number => void    }} : { bar(x: number): void; }
>                                                      : ^^^^^^ ^^^^^^^^^^^^^^^^^^

    bar(x) { // Should be typed number => void
>bar : (x: number) => void
>    : ^ ^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
    }
});

interface Options2<State, Actions> {
    state?: State;
>state : State | undefined
>      : ^^^^^^^^^^^^^^^^^

    view?: (state: State, actions: Actions) => any;
>view : ((state: State, actions: Actions) => any) | undefined
>     : ^^     ^^     ^^       ^^       ^^^^^   ^^^^^^^^^^^^^
>state : State
>      : ^^^^^
>actions : Actions
>        : ^^^^^^^

    actions?: Actions;
>actions : Actions | undefined
>        : ^^^^^^^^^^^^^^^^^^^
}

declare function app2<State, Actions extends ActionsObject<State>>(obj: Options2<State, Actions>): void;
>app2 : <State, Actions extends ActionsObject<State>>(obj: Options2<State, Actions>) => void
>     : ^     ^^       ^^^^^^^^^                    ^^   ^^                        ^^^^^    
>obj : Options2<State, Actions>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^

app2({
>app2({    state: 100,    actions: {        foo: s => s // Should be typed number => number    },    view: (s, a) => undefined as any,}) : void
>                                                                                                                                        : ^^^^
>app2 : <State, Actions extends ActionsObject<State>>(obj: Options2<State, Actions>) => void
>     : ^     ^^       ^^^^^^^^^                    ^^   ^^                        ^^^^^    
>{    state: 100,    actions: {        foo: s => s // Should be typed number => number    },    view: (s, a) => undefined as any,} : { state: number; actions: { foo: (s: number) => number; }; view: (s: number, a: { foo: (s: number) => number; }) => any; }
>                                                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^

    state: 100,
>state : number
>      : ^^^^^^
>100 : 100
>    : ^^^

    actions: {
>actions : { foo: (s: number) => number; }
>        : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>{        foo: s => s // Should be typed number => number    } : { foo: (s: number) => number; }
>                                                              : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^

        foo: s => s // Should be typed number => number
>foo : (s: number) => number
>    : ^ ^^^^^^^^^^^^^^^^^^^
>s => s : (s: number) => number
>       : ^ ^^^^^^^^^^^^^^^^^^^
>s : number
>  : ^^^^^^
>s : number
>  : ^^^^^^

    },
    view: (s, a) => undefined as any,
>view : (s: number, a: { foo: (s: number) => number; }) => any
>     : ^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   
>(s, a) => undefined as any : (s: number, a: { foo: (s: number) => number; }) => any
>                           : ^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   
>s : number
>  : ^^^^^^
>a : { foo: (s: number) => number; }
>  : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>undefined as any : any
>undefined : undefined
>          : ^^^^^^^^^

});


type ActionsArray<State> = ((state: State) => State)[];
>ActionsArray : ActionsArray<State>
>             : ^^^^^^^^^^^^^^^^^^^
>state : State
>      : ^^^^^

declare function app3<State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>): void;
>app3 : <State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>) => void
>     : ^     ^^       ^^^^^^^^^                   ^^   ^^                       ^^^^^    
>obj : Options<State, Actions>
>    : ^^^^^^^^^^^^^^^^^^^^^^^

app3({
>app3({    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,}) : void
>                                                                                                                                   : ^^^^
>app3 : <State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>) => void
>     : ^     ^^       ^^^^^^^^^                   ^^   ^^                       ^^^^^    
>{    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,} : { state: number; actions: ((s: number) => number)[]; view: (s: number, a: ((s: number) => number)[]) => any; }
>                                                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^

    state: 100,
>state : number
>      : ^^^^^^
>100 : 100
>    : ^^^

    actions: [
>actions : ((s: number) => number)[]
>        : ^^ ^^^^^^^^^^^^^^^^^^^^^^
>[        s => s // Should be typed number => number    ] : ((s: number) => number)[]
>                                                         : ^^ ^^^^^^^^^^^^^^^^^^^^^^

        s => s // Should be typed number => number
>s => s : (s: number) => number
>       : ^ ^^^^^^^^^^^^^^^^^^^
>s : number
>  : ^^^^^^
>s : number
>  : ^^^^^^

    ],
    view: (s, a) => undefined as any,
>view : (s: number, a: ((s: number) => number)[]) => any
>     : ^ ^^^^^^^^^^ ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   
>(s, a) => undefined as any : (s: number, a: ((s: number) => number)[]) => any
>                           : ^ ^^^^^^^^^^ ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   
>s : number
>  : ^^^^^^
>a : ((s: number) => number)[]
>  : ^^ ^^^^^^^^^^^^^^^^^^^^^^
>undefined as any : any
>undefined : undefined
>          : ^^^^^^^^^

});

namespace JSX {
    export interface Element {}
    export interface IntrinsicElements {}
}

interface ActionsObjectOr<State> {
    [prop: string]: ((state: State) => State) | State;
>prop : string
>     : ^^^^^^
>state : State
>      : ^^^^^
}

declare function App4<State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State }): JSX.Element;
>App4 : <State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State; }) => JSX.Element
>     : ^     ^^       ^^^^^^^^^                      ^^     ^^                                                      ^^^^^           
>props : (string | Actions) & { state: State; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^
>state : State
>      : ^^^^^
>JSX : any
>    : ^^^

const a = <App4 state={100} foo={s => s} />; // TODO: should be number => number, but JSX resolution is missing an inferential pass
>a : JSX.Element
>  : ^^^^^^^^^^^
><App4 state={100} foo={s => s} /> : JSX.Element
>                                  : ^^^^^^^^^^^
>App4 : <State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State; }) => JSX.Element
>     : ^     ^^       ^^^^^^^^^                      ^^     ^^                                                      ^^^^^           
>state : number
>      : ^^^^^^
>100 : 100
>    : ^^^
>foo : (s: number) => number
>    : ^ ^^^^^^^^^^^^^^^^^^^
>s => s : (s: number) => number
>       : ^ ^^^^^^^^^^^^^^^^^^^
>s : number
>  : ^^^^^^
>s : number
>  : ^^^^^^

