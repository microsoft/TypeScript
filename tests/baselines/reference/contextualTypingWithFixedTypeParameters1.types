//// [tests/cases/compiler/contextualTypingWithFixedTypeParameters1.ts] ////

=== contextualTypingWithFixedTypeParameters1.ts ===
var f10: <T>(x: T, b: () => (a: T) => void, y: T) => T;
>f10 : <T>(x: T, b: () => (a: T) => void, y: T) => T
>    : ^ ^^ ^^ ^^ ^^                    ^^ ^^ ^^^^^ 
>x : T
>  : ^
>b : () => (a: T) => void
>  : ^^^^^^              
>a : T
>  : ^
>y : T
>  : ^

f10('', () => a => a.foo, ''); // a is ""
>f10('', () => a => a.foo, '') : string
>                              : ^^^^^^
>f10 : <T>(x: T, b: () => (a: T) => void, y: T) => T
>    : ^ ^^ ^^ ^^ ^^                    ^^ ^^ ^^^^^ 
>'' : ""
>   : ^^
>() => a => a.foo : () => (a: string) => any
>                 : ^^^^^^^ ^^^^^^^^^^^^^^^^
>a => a.foo : (a: string) => any
>           : ^ ^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a.foo : any
>      : ^^^
>a : string
>  : ^^^^^^
>foo : any
>    : ^^^
>'' : ""
>   : ^^

var r9 = f10('', () => (a => a.foo), 1); // error
>r9 : string
>   : ^^^^^^
>f10('', () => (a => a.foo), 1) : ""
>                               : ^^
>f10 : <T>(x: T, b: () => (a: T) => void, y: T) => T
>    : ^ ^^ ^^ ^^ ^^                    ^^ ^^ ^^^^^ 
>'' : ""
>   : ^^
>() => (a => a.foo) : () => (a: "") => any
>                   : ^^^^^^^ ^^^^^^^^^^^^
>(a => a.foo) : (a: "") => any
>             : ^ ^^^^^^^^^^^^
>a => a.foo : (a: "") => any
>           : ^ ^^^^^^^^^^^^
>a : ""
>  : ^^
>a.foo : any
>      : ^^^
>a : ""
>  : ^^
>foo : any
>    : ^^^
>1 : 1
>  : ^

