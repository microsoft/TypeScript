//// [tests/cases/compiler/contextualTypingWithGenericAndNonGenericSignature.ts] ////

=== contextualTypingWithGenericAndNonGenericSignature.ts ===
//â€¢	If e is a FunctionExpression or ArrowFunctionExpression with no type parameters and no parameter or return type annotations, and T is a function type with EXACTLY ONE non - generic call signature, then any inferences made for type parameters referenced by the parameters of Tâ€™s call signature are fixed(section 4.12.2) and e is processed with the contextual type T, as described in section 4.9.3.

var f2: {
>f2 : { (x: string, y: number): string; <T, U>(x: T, y: U): T; }
>   : ^^^ ^^      ^^ ^^      ^^^      ^^^ ^^ ^^ ^^ ^^ ^^ ^^^ ^^^

    (x: string, y: number): string;
>x : string
>  : ^^^^^^
>y : number
>  : ^^^^^^

    <T, U>(x: T, y: U): T
>x : T
>  : ^
>y : U
>  : ^

};

f2 = (x, y) => { return x }
>f2 = (x, y) => { return x } : (x: any, y: any) => any
>                            : ^ ^^^^^^^ ^^^^^^^^^^^^^
>f2 : { (x: string, y: number): string; <T, U>(x: T, y: U): T; }
>   : ^^^ ^^      ^^ ^^      ^^^      ^^^ ^^ ^^ ^^ ^^ ^^ ^^^ ^^^
>(x, y) => { return x } : (x: any, y: any) => any
>                       : ^ ^^^^^^^ ^^^^^^^^^^^^^
>x : any
>y : any
>x : any

var f3: {
>f3 : { <T, U>(x: T, y: U): T; (x: string, y: number): string; }
>   : ^^^ ^^ ^^ ^^ ^^ ^^ ^^^ ^^^ ^^      ^^ ^^      ^^^      ^^^

    <T, U>(x: T, y: U): T
>x : T
>  : ^
>y : U
>  : ^

    (x: string, y: number): string;
>x : string
>  : ^^^^^^
>y : number
>  : ^^^^^^

};

f3 = (x, y) => { return x }
>f3 = (x, y) => { return x } : (x: any, y: any) => any
>                            : ^ ^^^^^^^ ^^^^^^^^^^^^^
>f3 : { <T, U>(x: T, y: U): T; (x: string, y: number): string; }
>   : ^^^ ^^ ^^ ^^ ^^ ^^ ^^^ ^^^ ^^      ^^ ^^      ^^^      ^^^
>(x, y) => { return x } : (x: any, y: any) => any
>                       : ^ ^^^^^^^ ^^^^^^^^^^^^^
>x : any
>y : any
>x : any

