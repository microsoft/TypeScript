//// [tests/cases/compiler/contextualTypingWithGenericSignature.ts] ////

=== contextualTypingWithGenericSignature.ts ===
// If e is a FunctionExpression or ArrowFunctionExpression with no type parameters and no parameter or return type annotations, and T is a function type with EXACTLY ONE non - generic call signature, then any inferences made for type parameters referenced by the parameters of Tâ€™s call signature are fixed(section 4.12.2) and e is processed with the contextual type T, as described in section 4.9.3.

var f2: {
>f2 : <T, U>(x: T, y: U) => T
>   : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 

    <T, U>(x: T, y: U): T
>x : T
>  : ^
>y : U
>  : ^

};

f2 = (x, y) => { return x }
>f2 = (x, y) => { return x } : <T, U>(x: T, y: U) => T
>                            : ^ ^^ ^^ ^^^^^ ^^^^^^^^^
>f2 : <T, U>(x: T, y: U) => T
>   : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>(x, y) => { return x } : <T, U>(x: T, y: U) => T
>                       : ^ ^^ ^^ ^^^^^ ^^^^^^^^^
>x : T
>  : ^
>y : U
>  : ^
>x : T
>  : ^

