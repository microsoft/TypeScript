//// [tests/cases/compiler/contextuallyTypedByDiscriminableUnion2.ts] ////

=== contextuallyTypedByDiscriminableUnion2.ts ===
type Props =
>Props : Props
>      : ^^^^^

  | {
      parentId: string[];
>parentId : string[]
>         : ^^^^^^^^

      onChange: (event: { id: string }) => void;
>onChange : (event: { id: string; }) => void
>         : ^     ^^               ^^^^^    
>event : { id: string; }
>      : ^^^^^^      ^^^
>id : string
>   : ^^^^^^

      onChange2: () => void;
>onChange2 : () => void
>          : ^^^^^^    
    }
  | {
      parentId?: never;
>parentId : undefined
>         : ^^^^^^^^^

      onChange: (event: { id: number }) => void;
>onChange : (event: { id: number; }) => void
>         : ^     ^^               ^^^^^    
>event : { id: number; }
>      : ^^^^^^      ^^^
>id : number
>   : ^^^^^^

    };

function NonGenericComponent(props: Props) {
>NonGenericComponent : (props: Props) => null
>                    : ^     ^^     ^^^^^^^^^
>props : Props
>      : ^^^^^

  return null;
}

NonGenericComponent({
>NonGenericComponent({  onChange: (e) => {},}) : null
>                                              : ^^^^
>NonGenericComponent : (props: Props) => null
>                    : ^     ^^     ^^^^^^^^^
>{  onChange: (e) => {},} : { onChange: (e: { id: number; }) => void; }
>                         : ^^^^^^^^^^^^^ ^^^^^^^^      ^^^^^^^^^^^^^^^

  onChange: (e) => {},
>onChange : (e: { id: number; }) => void
>         : ^ ^^^^^^^^      ^^^^^^^^^^^^
>(e) => {} : (e: { id: number; }) => void
>          : ^ ^^^^^^^^      ^^^^^^^^^^^^
>e : { id: number; }
>  : ^^^^^^      ^^^

});

const parentId: string[] = [];
>parentId : string[]
>         : ^^^^^^^^
>[] : never[]
>   : ^^^^^^^

NonGenericComponent({
>NonGenericComponent({  parentId,  onChange: (e) => {},  onChange2: () => {},}) : null
>                                                                               : ^^^^
>NonGenericComponent : (props: Props) => null
>                    : ^     ^^     ^^^^^^^^^
>{  parentId,  onChange: (e) => {},  onChange2: () => {},} : { parentId: string[]; onChange: (e: { id: string; }) => void; onChange2: () => void; }
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  parentId,
>parentId : string[]
>         : ^^^^^^^^

  onChange: (e) => {},
>onChange : (e: { id: string; }) => void
>         : ^ ^^^^^^^^      ^^^^^^^^^^^^
>(e) => {} : (e: { id: string; }) => void
>          : ^ ^^^^^^^^      ^^^^^^^^^^^^
>e : { id: string; }
>  : ^^^^^^      ^^^

  onChange2: () => {},
>onChange2 : () => void
>          : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

});

NonGenericComponent({
>NonGenericComponent({  parentId: parentId,  onChange: (e) => {},  onChange2: () => {},}) : null
>                                                                                         : ^^^^
>NonGenericComponent : (props: Props) => null
>                    : ^     ^^     ^^^^^^^^^
>{  parentId: parentId,  onChange: (e) => {},  onChange2: () => {},} : { parentId: string[]; onChange: (e: { id: string; }) => void; onChange2: () => void; }
>                                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  parentId: parentId,
>parentId : string[]
>         : ^^^^^^^^
>parentId : string[]
>         : ^^^^^^^^

  onChange: (e) => {},
>onChange : (e: { id: string; }) => void
>         : ^ ^^^^^^^^      ^^^^^^^^^^^^
>(e) => {} : (e: { id: string; }) => void
>          : ^ ^^^^^^^^      ^^^^^^^^^^^^
>e : { id: string; }
>  : ^^^^^^      ^^^

  onChange2: () => {},
>onChange2 : () => void
>          : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

});

NonGenericComponent({
>NonGenericComponent({  parentId: [],  onChange: (e) => {},  onChange2: () => {},}) : null
>                                                                                   : ^^^^
>NonGenericComponent : (props: Props) => null
>                    : ^     ^^     ^^^^^^^^^
>{  parentId: [],  onChange: (e) => {},  onChange2: () => {},} : { parentId: never[]; onChange: (e: { id: string; }) => void; onChange2: () => void; }
>                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  parentId: [],
>parentId : never[]
>         : ^^^^^^^
>[] : never[]
>   : ^^^^^^^

  onChange: (e) => {},
>onChange : (e: { id: string; }) => void
>         : ^ ^^^^^^^^      ^^^^^^^^^^^^
>(e) => {} : (e: { id: string; }) => void
>          : ^ ^^^^^^^^      ^^^^^^^^^^^^
>e : { id: string; }
>  : ^^^^^^      ^^^

  onChange2: () => {},
>onChange2 : () => void
>          : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

});

