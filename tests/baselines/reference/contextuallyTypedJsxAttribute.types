//// [tests/cases/compiler/contextuallyTypedJsxAttribute.ts] ////

=== index.tsx ===
interface Elements {
  foo: { callback?: (value: number) => void };
>foo : { callback?: (value: number) => void; }
>    : ^^^^^^^^^^^^^                       ^^^
>callback : (value: number) => void
>         : ^     ^^      ^^^^^    
>value : number
>      : ^^^^^^

  bar: { callback?: (value: string) => void };
>bar : { callback?: (value: string) => void; }
>    : ^^^^^^^^^^^^^                       ^^^
>callback : (value: string) => void
>         : ^     ^^      ^^^^^    
>value : string
>      : ^^^^^^
}

type Props<C extends keyof Elements> = { as?: C } & Elements[C];
>Props : Props<C>
>      : ^^^^^^^^
>as : C
>   : ^

declare function Test<C extends keyof Elements>(props: Props<C>): null;
>Test : <C extends keyof Elements>(props: Props<C>) => null
>     : ^ ^^^^^^^^^              ^^     ^^        ^^^^^    
>props : Props<C>
>      : ^^^^^^^^

<Test
><Test  as="bar"  callback={(value) => {}}/> : error
>Test : <C extends keyof Elements>(props: Props<C>) => null
>     : ^ ^^^^^^^^^              ^^     ^^        ^^^^^    

  as="bar"
>as : "bar"
>   : ^^^^^

  callback={(value) => {}}
>callback : (value: string) => void
>         : ^     ^^^^^^^^^^^^^^^^^
>(value) => {} : (value: string) => void
>              : ^     ^^^^^^^^^^^^^^^^^
>value : string
>      : ^^^^^^

/>;

Test({
>Test({  as: "bar",  callback: (value) => {},}) : null
>                                               : ^^^^
>Test : <C extends keyof Elements>(props: Props<C>) => null
>     : ^ ^^^^^^^^^              ^^     ^^        ^^^^^    
>{  as: "bar",  callback: (value) => {},} : { as: "bar"; callback: (value: string) => void; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^

  as: "bar",
>as : "bar"
>   : ^^^^^
>"bar" : "bar"
>      : ^^^^^

  callback: (value) => {},
>callback : (value: string) => void
>         : ^     ^^^^^^^^^^^^^^^^^
>(value) => {} : (value: string) => void
>              : ^     ^^^^^^^^^^^^^^^^^
>value : string
>      : ^^^^^^

});

<Test<'bar'>
><Test<'bar'>  as="bar"  callback={(value) => {}}/> : error
>Test : <C extends keyof Elements>(props: Props<C>) => null
>     : ^ ^^^^^^^^^              ^^     ^^        ^^^^^    

  as="bar"
>as : "bar"
>   : ^^^^^

  callback={(value) => {}}
>callback : (value: string) => void
>         : ^     ^^^^^^^^^^^^^^^^^
>(value) => {} : (value: string) => void
>              : ^     ^^^^^^^^^^^^^^^^^
>value : string
>      : ^^^^^^

/>;

