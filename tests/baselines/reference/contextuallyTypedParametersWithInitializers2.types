//// [tests/cases/compiler/contextuallyTypedParametersWithInitializers2.ts] ////

=== contextuallyTypedParametersWithInitializers2.ts ===
declare function test1<
>test1 : <TContext, TMethods extends Record<string, (ctx: TContext, ...args: never[]) => unknown>>(context: TContext, methods: TMethods) => void
>      : ^        ^^        ^^^^^^^^^                                                            ^^       ^^        ^^       ^^        ^^^^^    

  TContext,
  TMethods extends Record<string, (ctx: TContext, ...args: never[]) => unknown>,
>ctx : TContext
>    : ^^^^^^^^
>args : never[]
>     : ^^^^^^^

>(context: TContext, methods: TMethods): void;
>context : TContext
>        : ^^^^^^^^
>methods : TMethods
>        : ^^^^^^^^

test1(
>test1(  {    count: 0,  },  {    checkLimit: (ctx, max = 500) => {},    hasAccess: (ctx, user: { name: string }) => {},  },) : void
>                                                                                                                             : ^^^^
>test1 : <TContext, TMethods extends Record<string, (ctx: TContext, ...args: never[]) => unknown>>(context: TContext, methods: TMethods) => void
>      : ^        ^^        ^^^^^^^^^                                                            ^^       ^^        ^^       ^^        ^^^^^    
  {
>{    count: 0,  } : { count: number; }
>                  : ^^^^^^^^^^^^^^^^^^

    count: 0,
>count : number
>      : ^^^^^^
>0 : 0
>  : ^

  },
  {
>{    checkLimit: (ctx, max = 500) => {},    hasAccess: (ctx, user: { name: string }) => {},  } : { checkLimit: (ctx: { count: number; }, max?: number) => void; hasAccess: (ctx: { count: number; }, user: { name: string; }) => void; }
>                                                                                               : ^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^    ^^                 ^^^^^^^^^^^^

    checkLimit: (ctx, max = 500) => {},
>checkLimit : (ctx: { count: number; }, max?: number) => void
>           : ^   ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^
>(ctx, max = 500) => {} : (ctx: { count: number; }, max?: number) => void
>                       : ^   ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^
>ctx : { count: number; }
>    : ^^^^^^^^^^^^^^^^^^
>max : number
>    : ^^^^^^
>500 : 500
>    : ^^^

    hasAccess: (ctx, user: { name: string }) => {},
>hasAccess : (ctx: { count: number; }, user: { name: string; }) => void
>          : ^   ^^^^^^^^^^^^^^^^^^^^^^    ^^                 ^^^^^^^^^
>(ctx, user: { name: string }) => {} : (ctx: { count: number; }, user: { name: string; }) => void
>                                    : ^   ^^^^^^^^^^^^^^^^^^^^^^    ^^                 ^^^^^^^^^
>ctx : { count: number; }
>    : ^^^^^^^^^^^^^^^^^^
>user : { name: string; }
>     : ^^^^^^^^      ^^^
>name : string
>     : ^^^^^^

  },
);

declare const num: number;
>num : number
>    : ^^^^^^

const test2: (arg: 1 | 2) => void = (arg = num) => {};
>test2 : (arg: 1 | 2) => void
>      : ^   ^^     ^^^^^    
>arg : 1 | 2
>    : ^^^^^
>(arg = num) => {} : (arg?: number) => void
>                  : ^   ^^^^^^^^^^^^^^^^^^
>arg : number
>    : ^^^^^^
>num : number
>    : ^^^^^^

const test3: (arg: number) => void = (arg = 1) => {};
>test3 : (arg: number) => void
>      : ^   ^^      ^^^^^    
>arg : number
>    : ^^^^^^
>(arg = 1) => {} : (arg?: number) => void
>                : ^   ^^^^^^^^^^^^^^^^^^
>arg : number
>    : ^^^^^^
>1 : 1
>  : ^

