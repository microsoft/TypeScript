//// [tests/cases/compiler/contextuallyTypedParametersWithInitializers3.ts] ////

=== contextuallyTypedParametersWithInitializers3.ts ===
type CanvasDirection = "RIGHT" | "LEFT";
>CanvasDirection : CanvasDirection
>                : ^^^^^^^^^^^^^^^

interface GraphActions {
  setDirection: (direction: CanvasDirection) => void;
>setDirection : (direction: CanvasDirection) => void
>             : ^         ^^               ^^^^^    
>direction : CanvasDirection
>          : ^^^^^^^^^^^^^^^
}

export declare function create<T>(config: T): void;
>create : <T>(config: T) => void
>       : ^ ^^      ^^ ^^^^^    
>config : T
>       : ^

declare function takesDirection(direction: CanvasDirection): void;
>takesDirection : (direction: CanvasDirection) => void
>               : ^         ^^               ^^^^^    
>direction : CanvasDirection
>          : ^^^^^^^^^^^^^^^

create<GraphActions>({
>create<GraphActions>({  setDirection: (direction = "RIGHT") => {    takesDirection(direction);  },}) : void
>                                                                                                     : ^^^^
>create : <T>(config: T) => void
>       : ^ ^^      ^^ ^^^^^    
>{  setDirection: (direction = "RIGHT") => {    takesDirection(direction);  },} : { setDirection: (direction?: CanvasDirection) => void; }
>                                                                               : ^^^^^^^^^^^^^^^^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  setDirection: (direction = "RIGHT") => {
>setDirection : (direction?: CanvasDirection) => void
>             : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(direction = "RIGHT") => {    takesDirection(direction);  } : (direction?: CanvasDirection) => void
>                                                            : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>direction : CanvasDirection
>          : ^^^^^^^^^^^^^^^
>"RIGHT" : "RIGHT"
>        : ^^^^^^^

    takesDirection(direction);
>takesDirection(direction) : void
>                          : ^^^^
>takesDirection : (direction: CanvasDirection) => void
>               : ^         ^^               ^^^^^    
>direction : CanvasDirection
>          : ^^^^^^^^^^^^^^^

  },
});
