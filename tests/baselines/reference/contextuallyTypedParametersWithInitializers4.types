//// [tests/cases/compiler/contextuallyTypedParametersWithInitializers4.ts] ////

=== contextuallyTypedParametersWithInitializers4.ts ===
declare function test<
>test : <TContext, TMethods extends Record<string, (ctx: TContext, ...args: (1 | 2)[]) => unknown>>(context: TContext, methods: TMethods) => void
>     : ^        ^^        ^^^^^^^^^                                                              ^^       ^^        ^^       ^^        ^^^^^    

  TContext,
  TMethods extends Record<string, (ctx: TContext, ...args: (1 | 2)[]) => unknown>,
>ctx : TContext
>    : ^^^^^^^^
>args : (1 | 2)[]
>     : ^^^^^^^^^

>(context: TContext, methods: TMethods): void;
>context : TContext
>        : ^^^^^^^^
>methods : TMethods
>        : ^^^^^^^^

test(
>test(  {    count: 0,  },  {    checkLimit: (ctx, max = 3) => {},  },) : void
>                                                                       : ^^^^
>test : <TContext, TMethods extends Record<string, (ctx: TContext, ...args: (1 | 2)[]) => unknown>>(context: TContext, methods: TMethods) => void
>     : ^        ^^        ^^^^^^^^^                                                              ^^       ^^        ^^       ^^        ^^^^^    
  {
>{    count: 0,  } : { count: number; }
>                  : ^^^^^^^^^^^^^^^^^^

    count: 0,
>count : number
>      : ^^^^^^
>0 : 0
>  : ^

  },
  {
>{    checkLimit: (ctx, max = 3) => {},  } : { checkLimit: (ctx: { count: number; }, max?: number) => void; }
>                                          : ^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^

    checkLimit: (ctx, max = 3) => {},
>checkLimit : (ctx: { count: number; }, max?: number) => void
>           : ^   ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^
>(ctx, max = 3) => {} : (ctx: { count: number; }, max?: number) => void
>                     : ^   ^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^
>ctx : { count: number; }
>    : ^^^^^^^^^^^^^^^^^^
>max : number
>    : ^^^^^^
>3 : 3
>  : ^

  },
);

