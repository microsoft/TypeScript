//// [tests/cases/compiler/contextuallyTypedParametersWithQuestionToken.ts] ////

=== contextuallyTypedParametersWithQuestionToken.ts ===
// https://github.com/microsoft/TypeScript/issues/54948

function acceptNum(num: number) {}
>acceptNum : (num: number) => void
>          : ^   ^^      ^^^^^^^^^
>num : number
>    : ^^^^^^

const f1: (a: string, b: number) => void = function self(a, b?) {
>f1 : (a: string, b: number) => void
>   : ^ ^^      ^^ ^^      ^^^^^    
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^
>function self(a, b?) {  acceptNum(b); // error  self("");  self("", undefined);} : (a: string, b?: number | undefined) => void
>                                                                                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>self : (a: string, b?: number | undefined) => void
>     : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>b : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

  acceptNum(b); // error
>acceptNum(b) : void
>             : ^^^^
>acceptNum : (num: number) => void
>          : ^   ^^      ^^^^^^^^^
>b : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

  self("");
>self("") : void
>         : ^^^^
>self : (a: string, b?: number | undefined) => void
>     : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"" : ""
>   : ^^

  self("", undefined);
>self("", undefined) : void
>                    : ^^^^
>self : (a: string, b?: number | undefined) => void
>     : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"" : ""
>   : ^^
>undefined : undefined
>          : ^^^^^^^^^

};

const f2: (a: string, b: number) => void = function self(a, b?: number) {
>f2 : (a: string, b: number) => void
>   : ^ ^^      ^^ ^^      ^^^^^    
>a : string
>  : ^^^^^^
>b : number
>  : ^^^^^^
>function self(a, b?: number) {  acceptNum(b); // error  self("");  self("", undefined);} : (a: string, b?: number) => void
>                                                                                         : ^ ^^^^^^^^^^ ^^^      ^^^^^^^^^
>self : (a: string, b?: number) => void
>     : ^ ^^^^^^^^^^ ^^^      ^^^^^^^^^
>a : string
>  : ^^^^^^
>b : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

  acceptNum(b); // error
>acceptNum(b) : void
>             : ^^^^
>acceptNum : (num: number) => void
>          : ^   ^^      ^^^^^^^^^
>b : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

  self("");
>self("") : void
>         : ^^^^
>self : (a: string, b?: number) => void
>     : ^ ^^^^^^^^^^ ^^^      ^^^^^^^^^
>"" : ""
>   : ^^

  self("", undefined);
>self("", undefined) : void
>                    : ^^^^
>self : (a: string, b?: number) => void
>     : ^ ^^^^^^^^^^ ^^^      ^^^^^^^^^
>"" : ""
>   : ^^
>undefined : undefined
>          : ^^^^^^^^^

};

