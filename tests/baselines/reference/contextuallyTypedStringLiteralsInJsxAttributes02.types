//// [tests/cases/conformance/types/contextualTypes/jsxAttributes/contextuallyTypedStringLiteralsInJsxAttributes02.tsx] ////

=== file.tsx ===
import React = require('react')
>React : typeof React
>      : ^^^^^^^^^^^^

export interface ClickableProps {
    children?: string;
>children : string
>         : ^^^^^^

    className?: string;
>className : string
>          : ^^^^^^
}

export interface ButtonProps extends ClickableProps {
    onClick: (k: "left" | "right") => void;
>onClick : (k: "left" | "right") => void
>        : ^ ^^                ^^^^^    
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
}

export interface LinkProps extends ClickableProps {
    goTo: "home" | "contact";
>goTo : "home" | "contact"
>     : ^^^^^^^^^^^^^^^^^^
}

export function MainButton(buttonProps: ButtonProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>buttonProps : ButtonProps
>            : ^^^^^^^^^^^
>JSX : any
>    : ^^^

export function MainButton(linkProps: LinkProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>linkProps : LinkProps
>          : ^^^^^^^^^
>JSX : any
>    : ^^^

export function MainButton(props: ButtonProps | LinkProps): JSX.Element {
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>props : ButtonProps | LinkProps
>      : ^^^^^^^^^^^^^^^^^^^^^^^
>JSX : any
>    : ^^^

    const linkProps = props as LinkProps;
>linkProps : LinkProps
>          : ^^^^^^^^^
>props as LinkProps : LinkProps
>                   : ^^^^^^^^^
>props : ButtonProps | LinkProps
>      : ^^^^^^^^^^^^^^^^^^^^^^^

    if(linkProps.goTo) {
>linkProps.goTo : "home" | "contact"
>               : ^^^^^^^^^^^^^^^^^^
>linkProps : LinkProps
>          : ^^^^^^^^^
>goTo : "home" | "contact"
>     : ^^^^^^^^^^^^^^^^^^

        return this._buildMainLink(props);
>this._buildMainLink(props) : any
>                           : ^^^
>this._buildMainLink : any
>                    : ^^^
>this : any
>     : ^^^
>_buildMainLink : any
>               : ^^^
>props : ButtonProps | LinkProps
>      : ^^^^^^^^^^^^^^^^^^^^^^^
    }

    return this._buildMainButton(props);
>this._buildMainButton(props) : any
>                             : ^^^
>this._buildMainButton : any
>                      : ^^^
>this : any
>     : ^^^
>_buildMainButton : any
>                 : ^^^
>props : ButtonProps | LinkProps
>      : ^^^^^^^^^^^^^^^^^^^^^^^
}

const b0 = <MainButton {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type "left" | "right"
>b0 : JSX.Element
>   : ^^^^^^^^^^^
><MainButton {...{onClick: (k) => {console.log(k)}}} extra /> : JSX.Element
>                                                             : ^^^^^^^^^^^
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>{onClick: (k) => {console.log(k)}} : { onClick: (k: "left" | "right") => void; }
>                                   : ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>onClick : (k: "left" | "right") => void
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(k) => {console.log(k)} : (k: "left" | "right") => void
>                        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
>console.log(k) : void
>               : ^^^^
>console.log : (message?: any, ...optionalParams: any[]) => void
>            : ^       ^^^   ^^^^^              ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (message?: any, ...optionalParams: any[]) => void
>    : ^       ^^^   ^^^^^              ^^     ^^^^^    
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
>extra : true
>      : ^^^^

const b2 = <MainButton onClick={(k)=>{console.log(k)}} extra />;  // k has type "left" | "right"
>b2 : JSX.Element
>   : ^^^^^^^^^^^
><MainButton onClick={(k)=>{console.log(k)}} extra /> : JSX.Element
>                                                     : ^^^^^^^^^^^
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>onClick : (k: "left" | "right") => void
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(k)=>{console.log(k)} : (k: "left" | "right") => void
>                      : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
>console.log(k) : void
>               : ^^^^
>console.log : (message?: any, ...optionalParams: any[]) => void
>            : ^       ^^^   ^^^^^              ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (message?: any, ...optionalParams: any[]) => void
>    : ^       ^^^   ^^^^^              ^^     ^^^^^    
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
>extra : true
>      : ^^^^

const b3 = <MainButton {...{goTo:"home"}} extra />;  // goTo has type"home" | "contact"
>b3 : JSX.Element
>   : ^^^^^^^^^^^
><MainButton {...{goTo:"home"}} extra /> : JSX.Element
>                                        : ^^^^^^^^^^^
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>{goTo:"home"} : { goTo: "home"; }
>              : ^^^^^^^^^^^^^^^^^
>goTo : "home"
>     : ^^^^^^
>"home" : "home"
>       : ^^^^^^
>extra : true
>      : ^^^^

const b4 = <MainButton goTo="home" extra />;  // goTo has type "home" | "contact"
>b4 : JSX.Element
>   : ^^^^^^^^^^^
><MainButton goTo="home" extra /> : JSX.Element
>                                 : ^^^^^^^^^^^
>MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
>           : ^^^           ^^           ^^^           ^^^         ^^         ^^^           ^^^
>goTo : "home"
>     : ^^^^^^
>extra : true
>      : ^^^^

export function NoOverload(buttonProps: ButtonProps): JSX.Element { return undefined }
>NoOverload : (buttonProps: ButtonProps) => JSX.Element
>           : ^           ^^           ^^^^^           
>buttonProps : ButtonProps
>            : ^^^^^^^^^^^
>JSX : any
>    : ^^^
>undefined : undefined
>          : ^^^^^^^^^

const c1 = <NoOverload  {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type any
>c1 : JSX.Element
>   : ^^^^^^^^^^^
><NoOverload  {...{onClick: (k) => {console.log(k)}}} extra /> : JSX.Element
>                                                              : ^^^^^^^^^^^
>NoOverload : (buttonProps: ButtonProps) => JSX.Element
>           : ^           ^^           ^^^^^           
>{onClick: (k) => {console.log(k)}} : { onClick: (k: "left" | "right") => void; }
>                                   : ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>onClick : (k: "left" | "right") => void
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(k) => {console.log(k)} : (k: "left" | "right") => void
>                        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
>console.log(k) : void
>               : ^^^^
>console.log : (message?: any, ...optionalParams: any[]) => void
>            : ^       ^^^   ^^^^^              ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (message?: any, ...optionalParams: any[]) => void
>    : ^       ^^^   ^^^^^              ^^     ^^^^^    
>k : "left" | "right"
>  : ^^^^^^^^^^^^^^^^
>extra : true
>      : ^^^^

export function NoOverload1(linkProps: LinkProps): JSX.Element { return undefined }
>NoOverload1 : (linkProps: LinkProps) => JSX.Element
>            : ^         ^^         ^^^^^           
>linkProps : LinkProps
>          : ^^^^^^^^^
>JSX : any
>    : ^^^
>undefined : undefined
>          : ^^^^^^^^^

const d1 = <NoOverload1 {...{goTo:"home"}} extra  />;  // goTo has type "home" | "contact"
>d1 : JSX.Element
>   : ^^^^^^^^^^^
><NoOverload1 {...{goTo:"home"}} extra  /> : JSX.Element
>                                          : ^^^^^^^^^^^
>NoOverload1 : (linkProps: LinkProps) => JSX.Element
>            : ^         ^^         ^^^^^           
>{goTo:"home"} : { goTo: "home"; }
>              : ^^^^^^^^^^^^^^^^^
>goTo : "home"
>     : ^^^^^^
>"home" : "home"
>       : ^^^^^^
>extra : true
>      : ^^^^

