//// [tests/cases/compiler/contravariantOnlyInferenceFromAnnotatedFunction.ts] ////

=== contravariantOnlyInferenceFromAnnotatedFunction.ts ===
// repro from #52580

type Funcs<A, B extends Record<string, unknown>> = {
>Funcs : Funcs<A, B>
>      : ^^^^^^^^^^^

  [K in keyof B]: {
    fn: (a: A, b: B) => void;
>fn : (a: A, b: B) => void
>   : ^ ^^ ^^ ^^ ^^^^^    
>a : A
>  : ^
>b : B
>  : ^

    thing: B[K];
>thing : B[K]
>      : ^^^^

  };
}

declare function foo<A, B extends Record<string, unknown>>(fns: Funcs<A, B>): [A, B]
>foo : <A, B extends Record<string, unknown>>(fns: Funcs<A, B>) => [A, B]
>    : ^ ^^ ^^^^^^^^^                       ^^   ^^           ^^^^^      
>fns : Funcs<A, B>
>    : ^^^^^^^^^^^

const result = foo({
>result : [string, { bar: string; }]
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo({  bar: {    fn: (a: string) => {},    thing: 'asd',  },}) : [string, { bar: string; }]
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <A, B extends Record<string, unknown>>(fns: Funcs<A, B>) => [A, B]
>    : ^ ^^ ^^^^^^^^^                       ^^   ^^           ^^^^^      
>{  bar: {    fn: (a: string) => {},    thing: 'asd',  },} : { bar: { fn: (a: string) => void; thing: string; }; }
>                                                          : ^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  bar: {
>bar : { fn: (a: string) => void; thing: string; }
>    : ^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    fn: (a: string) => {},    thing: 'asd',  } : { fn: (a: string) => void; thing: string; }
>                                                : ^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    fn: (a: string) => {},
>fn : (a: string) => void
>   : ^ ^^      ^^^^^^^^^
>(a: string) => {} : (a: string) => void
>                  : ^ ^^      ^^^^^^^^^
>a : string
>  : ^^^^^^

    thing: 'asd',
>thing : string
>      : ^^^^^^
>'asd' : "asd"
>      : ^^^^^

  },
});

