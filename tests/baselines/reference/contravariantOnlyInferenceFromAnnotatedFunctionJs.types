//// [tests/cases/compiler/contravariantOnlyInferenceFromAnnotatedFunctionJs.ts] ////

=== index.js ===
/**
 * @typedef {{ [K in keyof B]: { fn: (a: A, b: B) => void; thing: B[K]; } }} Funcs
 * @template A
 * @template {Record<string, unknown>} B
 */

/**
 * @template A
 * @template {Record<string, unknown>} B
 * @param {Funcs<A, B>} fns
 * @returns {[A, B]}
 */
function foo(fns) {
>foo : <A, B extends Record<string, unknown>>(fns: Funcs<A, B>) => [A, B]
>    : ^ ^^ ^^^^^^^^^                       ^^   ^^           ^^^^^      
>fns : Funcs<A, B>
>    : ^^^^^^^^^^^

  return /** @type {any} */ (null);
>(null) : any
}

const result = foo({
>result : [string, { bar: string; }]
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo({  bar: {    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  },}) : [string, { bar: string; }]
>                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <A, B extends Record<string, unknown>>(fns: Funcs<A, B>) => [A, B]
>    : ^ ^^ ^^^^^^^^^                       ^^   ^^           ^^^^^      
>{  bar: {    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  },} : { bar: { fn: (a: string) => void; thing: string; }; }
>                                                                                     : ^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  bar: {
>bar : { fn: (a: string) => void; thing: string; }
>    : ^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  } : { fn: (a: string) => void; thing: string; }
>                                                                           : ^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    fn:
>fn : (a: string) => void
>   : ^ ^^      ^^^^^^^^^

      /** @param {string} a */
      (a) => {},
>(a) => {} : (a: string) => void
>          : ^ ^^      ^^^^^^^^^
>a : string
>  : ^^^^^^

    thing: "asd",
>thing : string
>      : ^^^^^^
>"asd" : "asd"
>      : ^^^^^

  },
});
