//// [tests/cases/compiler/contravariantOnlyInferenceWithAnnotatedOptionalParameterJs.ts] ////

=== index.js ===
/**
 * @template T
 * @param {(value: T, index: number) => boolean} predicate
 * @returns {T}
 */
function filter(predicate) {
>filter : <T>(predicate: (value: T, index: number) => boolean) => T
>       : ^ ^^         ^^                                    ^^^^^ 
>predicate : (value: T, index: number) => boolean
>          : ^     ^^ ^^     ^^      ^^^^^       

  return /** @type {any} */ (null);
>(null) : any
}

const a = filter(
>a : number | undefined
>  : ^^^^^^^^^^^^^^^^^^
>filter(  /**   * @param {number} [pose]   */  (pose) => true) : number | undefined
>                                                              : ^^^^^^^^^^^^^^^^^^
>filter : <T>(predicate: (value: T, index: number) => boolean) => T
>       : ^ ^^         ^^                                    ^^^^^ 

  /**
   * @param {number} [pose]
   */
  (pose) => true
>(pose) => true : (pose?: number) => true
>               : ^    ^^^      ^^^^^^^^^
>pose : number | undefined
>     : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

);

const b = filter(
>b : number | undefined
>  : ^^^^^^^^^^^^^^^^^^
>filter(  /**   * @param {number} [pose]   * @param {number} [_]   */  (pose, _) => true) : number | undefined
>                                                                                         : ^^^^^^^^^^^^^^^^^^
>filter : <T>(predicate: (value: T, index: number) => boolean) => T
>       : ^ ^^         ^^                                    ^^^^^ 

  /**
   * @param {number} [pose]
   * @param {number} [_]
   */
  (pose, _) => true
>(pose, _) => true : (pose?: number, _?: number) => true
>                  : ^    ^^^      ^^ ^^^      ^^^^^^^^^
>pose : number | undefined
>     : ^^^^^^^^^^^^^^^^^^
>_ : number | undefined
>  : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

);

