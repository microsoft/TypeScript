//// [tests/cases/conformance/controlFlow/controlFlowAliasing2.ts] ////

=== controlFlowAliasing2.ts ===
// https://github.com/microsoft/TypeScript/issues/61784

type Test = TestA | TestB;
>Test : Test
>     : ^^^^

interface TestA {
  type: 'a';
>type : "a"
>     : ^^^

  name: string;
>name : string
>     : ^^^^^^
}

interface TestB {
  type: 'b';
>type : "b"
>     : ^^^

  value: number;
>value : number
>      : ^^^^^^
}

function _tcb1(this: { test: Test }) {
>_tcb1 : (this: { test: Test; }) => void
>      : ^    ^^               ^^^^^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  // TS generated by Angular's Type Check block
  const _t1 = (((((this).test)).type));
>_t1 : "a" | "b"
>    : ^^^^^^^^^
>(((((this).test)).type)) : "a" | "b"
>                         : ^^^^^^^^^
>((((this).test)).type) : "a" | "b"
>                       : ^^^^^^^^^
>(((this).test)).type : "a" | "b"
>                     : ^^^^^^^^^
>(((this).test)) : Test
>                : ^^^^
>((this).test) : Test
>              : ^^^^
>(this).test : Test
>            : ^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^
>type : "a" | "b"
>     : ^^^^^^^^^

  if (_t1 === "a") {
>_t1 === "a" : boolean
>            : ^^^^^^^
>_t1 : "a" | "b"
>    : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above, without the parenthesis
  const _t2 = this.test.type;
>_t2 : "a" | "b"
>    : ^^^^^^^^^
>this.test.type : "a" | "b"
>               : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^
>type : "a" | "b"
>     : ^^^^^^^^^

  if (_t2 === "a") {
>_t2 === "a" : boolean
>            : ^^^^^^^
>_t2 : "a" | "b"
>    : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above without parenthesis at both places
  const testType = this.test.type;
>testType : "a" | "b"
>         : ^^^^^^^^^
>this.test.type : "a" | "b"
>               : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^
>type : "a" | "b"
>     : ^^^^^^^^^

  if (testType === "a") {
>testType === "a" : boolean
>                 : ^^^^^^^
>testType : "a" | "b"
>         : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    this.test.name;
>this.test.name : string
>               : ^^^^^^
>this.test : TestA
>          : ^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }
}

function _tcb2(this: { test: Test }) {
>_tcb2 : (this: { test: Test; }) => void
>      : ^    ^^               ^^^^^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  // TS generated by Angular's Type Check block
  const _t1 = (((((this).test)).type));
>_t1 : "a" | "b"
>    : ^^^^^^^^^
>(((((this).test)).type)) : "a" | "b"
>                         : ^^^^^^^^^
>((((this).test)).type) : "a" | "b"
>                       : ^^^^^^^^^
>(((this).test)).type : "a" | "b"
>                     : ^^^^^^^^^
>(((this).test)) : Test
>                : ^^^^
>((this).test) : Test
>              : ^^^^
>(this).test : Test
>            : ^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^
>type : "a" | "b"
>     : ^^^^^^^^^

  if ("a" === _t1) {
>"a" === _t1 : boolean
>            : ^^^^^^^
>"a" : "a"
>    : ^^^
>_t1 : "a" | "b"
>    : ^^^^^^^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above, without the parenthesis
  const _t2 = this.test.type;
>_t2 : "a" | "b"
>    : ^^^^^^^^^
>this.test.type : "a" | "b"
>               : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^
>type : "a" | "b"
>     : ^^^^^^^^^

  if ("a" === _t2) {
>"a" === _t2 : boolean
>            : ^^^^^^^
>"a" : "a"
>    : ^^^
>_t2 : "a" | "b"
>    : ^^^^^^^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above without parenthesis at both places
  const testType = this.test.type;
>testType : "a" | "b"
>         : ^^^^^^^^^
>this.test.type : "a" | "b"
>               : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^
>type : "a" | "b"
>     : ^^^^^^^^^

  if ("a" === testType) {
>"a" === testType : boolean
>                 : ^^^^^^^
>"a" : "a"
>    : ^^^
>testType : "a" | "b"
>         : ^^^^^^^^^

    this.test.name;
>this.test.name : string
>               : ^^^^^^
>this.test : TestA
>          : ^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }
}

function _tcb3(this: { test: Test }) {
>_tcb3 : (this: { test: Test; }) => void
>      : ^    ^^               ^^^^^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  const { type: _t1 } = (((((this).test))));
>type : any
>     : ^^^
>_t1 : "a" | "b"
>    : ^^^^^^^^^
>(((((this).test)))) : Test
>                    : ^^^^
>((((this).test))) : Test
>                  : ^^^^
>(((this).test)) : Test
>                : ^^^^
>((this).test) : Test
>              : ^^^^
>(this).test : Test
>            : ^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  if (_t1 === "a") {
>_t1 === "a" : boolean
>            : ^^^^^^^
>_t1 : "a" | "b"
>    : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above, without the parenthesis
  const { type: _t2 } = this.test;
>type : any
>     : ^^^
>_t2 : "a" | "b"
>    : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  if (_t2 === "a") {
>_t2 === "a" : boolean
>            : ^^^^^^^
>_t2 : "a" | "b"
>    : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above without parenthesis at both places
  const { type: testType } = this.test;
>type : any
>     : ^^^
>testType : "a" | "b"
>         : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  if (testType === "a") {
>testType === "a" : boolean
>                 : ^^^^^^^
>testType : "a" | "b"
>         : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    this.test.name;
>this.test.name : string
>               : ^^^^^^
>this.test : TestA
>          : ^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }
}

function _tcb4(this: { test: Test }) {
>_tcb4 : (this: { test: Test; }) => void
>      : ^    ^^               ^^^^^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  const { type: _t1 } = (((((this).test))));
>type : any
>     : ^^^
>_t1 : "a" | "b"
>    : ^^^^^^^^^
>(((((this).test)))) : Test
>                    : ^^^^
>((((this).test))) : Test
>                  : ^^^^
>(((this).test)) : Test
>                : ^^^^
>((this).test) : Test
>              : ^^^^
>(this).test : Test
>            : ^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  if ("a" === _t1) {
>"a" === _t1 : boolean
>            : ^^^^^^^
>"a" : "a"
>    : ^^^
>_t1 : "a" | "b"
>    : ^^^^^^^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above, without the parenthesis
  const { type: _t2 } = this.test;
>type : any
>     : ^^^
>_t2 : "a" | "b"
>    : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  if ("a" === _t2) {
>"a" === _t2 : boolean
>            : ^^^^^^^
>"a" : "a"
>    : ^^^
>_t2 : "a" | "b"
>    : ^^^^^^^^^

    (((((this).test)).name));
>(((((this).test)).name)) : string
>                         : ^^^^^^
>((((this).test)).name) : string
>                       : ^^^^^^
>(((this).test)).name : string
>                     : ^^^^^^
>(((this).test)) : TestA
>                : ^^^^^
>((this).test) : TestA
>              : ^^^^^
>(this).test : TestA
>            : ^^^^^
>(this) : { test: Test; }
>       : ^^^^^^^^    ^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }

  // Same as above without parenthesis at both places
  const { type: testType } = this.test;
>type : any
>     : ^^^
>testType : "a" | "b"
>         : ^^^^^^^^^
>this.test : Test
>          : ^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : Test
>     : ^^^^

  if ("a" === testType) {
>"a" === testType : boolean
>                 : ^^^^^^^
>"a" : "a"
>    : ^^^
>testType : "a" | "b"
>         : ^^^^^^^^^

    this.test.name;
>this.test.name : string
>               : ^^^^^^
>this.test : TestA
>          : ^^^^^
>this : { test: Test; }
>     : ^^^^^^^^    ^^^
>test : TestA
>     : ^^^^^
>name : string
>     : ^^^^^^
  }
}

export {};

