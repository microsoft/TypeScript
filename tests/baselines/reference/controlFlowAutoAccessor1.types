//// [tests/cases/compiler/controlFlowAutoAccessor1.ts] ////

=== controlFlowAutoAccessor1.ts ===
class Example {
>Example : Example
>        : ^^^^^^^

  accessor test;
>test : number
>     : ^^^^^^

  constructor(test: number) {
>test : number
>     : ^^^^^^

    this.test = test;
>this.test = test : number
>                 : ^^^^^^
>this.test : number
>          : ^^^^^^
>this : this
>     : ^^^^
>test : number
>     : ^^^^^^
>test : number
>     : ^^^^^^
  }

  getTest() {
>getTest : () => number
>        : ^^^^^^^^^^^^

    return this.test;
>this.test : number
>          : ^^^^^^
>this : this
>     : ^^^^
>test : number
>     : ^^^^^^
  }
}

class Example2 {
>Example2 : Example2
>         : ^^^^^^^^

  accessor test;
>test : number | undefined
>     : ^^^^^^^^^^^^^^^^^^

  constructor(test: number | undefined) {
>test : number | undefined
>     : ^^^^^^^^^^^^^^^^^^

    this.test = test;
>this.test = test : number | undefined
>                 : ^^^^^^^^^^^^^^^^^^
>this.test : number | undefined
>          : ^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>test : number | undefined
>     : ^^^^^^^^^^^^^^^^^^
>test : number | undefined
>     : ^^^^^^^^^^^^^^^^^^
  }

  getTest() {
>getTest : () => number
>        : ^^^^^^^^^^^^

    if (this.test) {
>this.test : number | undefined
>          : ^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>test : number | undefined
>     : ^^^^^^^^^^^^^^^^^^

      return this.test;
>this.test : number
>          : ^^^^^^
>this : this
>     : ^^^^
>test : number
>     : ^^^^^^
    }
    return 0;
>0 : 0
>  : ^
  }
}

// https://github.com/microsoft/TypeScript/issues/59728

class Example3 {
>Example3 : Example3
>         : ^^^^^^^^

  accessor value;
>value : number | null
>      : ^^^^^^^^^^^^^

  constructor(n: number) {
>n : number
>  : ^^^^^^

    this.value = n;
>this.value = n : number
>               : ^^^^^^
>this.value : number | null
>           : ^^^^^^^^^^^^^
>this : this
>     : ^^^^
>value : number | null
>      : ^^^^^^^^^^^^^
>n : number
>  : ^^^^^^

    if (n < 0) {
>n < 0 : boolean
>      : ^^^^^^^
>n : number
>  : ^^^^^^
>0 : 0
>  : ^

      this.value = null;
>this.value = null : null
>                  : ^^^^
>this.value : number | null
>           : ^^^^^^^^^^^^^
>this : this
>     : ^^^^
>value : number | null
>      : ^^^^^^^^^^^^^
    }
  }
}

declare var n: number;
>n : number
>  : ^^^^^^

class Example4 {
>Example4 : Example4
>         : ^^^^^^^^

  static accessor value;
>value : number | null
>      : ^^^^^^^^^^^^^

  static {
    this.value = n;
>this.value = n : number
>               : ^^^^^^
>this.value : number | null
>           : ^^^^^^^^^^^^^
>this : typeof Example4
>     : ^^^^^^^^^^^^^^^
>value : number | null
>      : ^^^^^^^^^^^^^
>n : number
>  : ^^^^^^

    if (n < 0) {
>n < 0 : boolean
>      : ^^^^^^^
>n : number
>  : ^^^^^^
>0 : 0
>  : ^

      this.value = null;
>this.value = null : null
>                  : ^^^^
>this.value : number | null
>           : ^^^^^^^^^^^^^
>this : typeof Example4
>     : ^^^^^^^^^^^^^^^
>value : number | null
>      : ^^^^^^^^^^^^^
    }
  }
}

class Example5 {
>Example5 : Example5
>         : ^^^^^^^^

  static accessor value; // error
>value : any
>      : ^^^
}
Example5.value = 123;
>Example5.value = 123 : 123
>                     : ^^^
>Example5.value : any
>               : ^^^
>Example5 : typeof Example5
>         : ^^^^^^^^^^^^^^^
>value : any
>      : ^^^
>123 : 123
>    : ^^^

Example5.value++;
>Example5.value++ : number
>                 : ^^^^^^
>Example5.value : any
>               : ^^^
>Example5 : typeof Example5
>         : ^^^^^^^^^^^^^^^
>value : any
>      : ^^^

