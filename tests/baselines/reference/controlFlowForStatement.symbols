//// [tests/cases/conformance/controlFlow/controlFlowForStatement.ts] ////

=== controlFlowForStatement.ts ===
let cond: boolean;
>cond : Symbol(cond, Decl(controlFlowForStatement.ts, 0, 3))

function a() {
>a : Symbol(a, Decl(controlFlowForStatement.ts, 0, 18))

    let x: string | number | boolean;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 2, 7))

    for (x = ""; cond; x = 5) {
>x : Symbol(x, Decl(controlFlowForStatement.ts, 2, 7))
>cond : Symbol(cond, Decl(controlFlowForStatement.ts, 0, 3))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 2, 7))

        x; // string | number
>x : Symbol(x, Decl(controlFlowForStatement.ts, 2, 7))
    }
}
function b() {
>b : Symbol(b, Decl(controlFlowForStatement.ts, 6, 1))

    let x: string | number | boolean;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 8, 7))

    for (x = 5; cond; x = x.length) {
>x : Symbol(x, Decl(controlFlowForStatement.ts, 8, 7))
>cond : Symbol(cond, Decl(controlFlowForStatement.ts, 0, 3))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 8, 7))
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 8, 7))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

        x; // number
>x : Symbol(x, Decl(controlFlowForStatement.ts, 8, 7))

        x = "";
>x : Symbol(x, Decl(controlFlowForStatement.ts, 8, 7))
    }
}
function c() {
>c : Symbol(c, Decl(controlFlowForStatement.ts, 13, 1))

    let x: string | number | boolean;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 15, 7))

    for (x = 5; x = x.toExponential(); x = 5) {
>x : Symbol(x, Decl(controlFlowForStatement.ts, 15, 7))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 15, 7))
>x.toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 15, 7))
>toExponential : Symbol(Number.toExponential, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 15, 7))

        x; // string
>x : Symbol(x, Decl(controlFlowForStatement.ts, 15, 7))
    }
}
function d() {
>d : Symbol(d, Decl(controlFlowForStatement.ts, 19, 1))

    let x: string | number | boolean;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 21, 7))

    for (x = ""; typeof x === "string"; x = 5) {
>x : Symbol(x, Decl(controlFlowForStatement.ts, 21, 7))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 21, 7))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 21, 7))

        x; // string
>x : Symbol(x, Decl(controlFlowForStatement.ts, 21, 7))
    }
}
function e() {
>e : Symbol(e, Decl(controlFlowForStatement.ts, 25, 1))

    let x: string | number | boolean | RegExp;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 27, 7))
>RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    for (x = "" || 0; typeof x !== "string"; x = "" || true) {
>x : Symbol(x, Decl(controlFlowForStatement.ts, 27, 7))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 27, 7))
>x : Symbol(x, Decl(controlFlowForStatement.ts, 27, 7))

        x; // number | boolean
>x : Symbol(x, Decl(controlFlowForStatement.ts, 27, 7))
    }
}
function f() {
>f : Symbol(f, Decl(controlFlowForStatement.ts, 31, 1))

    let x: string | number | boolean;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 33, 7))

    for (; typeof x !== "string";) {
>x : Symbol(x, Decl(controlFlowForStatement.ts, 33, 7))

        x; // number | boolean
>x : Symbol(x, Decl(controlFlowForStatement.ts, 33, 7))

        if (typeof x === "number") break;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 33, 7))

        x = undefined;
>x : Symbol(x, Decl(controlFlowForStatement.ts, 33, 7))
>undefined : Symbol(undefined)
    }
    x; // string | number
>x : Symbol(x, Decl(controlFlowForStatement.ts, 33, 7))
}

