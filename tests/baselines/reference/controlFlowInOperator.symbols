//// [tests/cases/conformance/controlFlow/controlFlowInOperator.ts] ////

=== controlFlowInOperator.ts ===
const a = 'a';
>a : Symbol(a, Decl(controlFlowInOperator.ts, 0, 5))

const b = 'b';
>b : Symbol(b, Decl(controlFlowInOperator.ts, 1, 5))

const d = 'd';
>d : Symbol(d, Decl(controlFlowInOperator.ts, 2, 5))

type A = { [a]: number; };
>A : Symbol(A, Decl(controlFlowInOperator.ts, 2, 14))
>[a] : Symbol([a], Decl(controlFlowInOperator.ts, 4, 10))
>a : Symbol(a, Decl(controlFlowInOperator.ts, 0, 5))

type B = { [b]: string; };
>B : Symbol(B, Decl(controlFlowInOperator.ts, 4, 26))
>[b] : Symbol([b], Decl(controlFlowInOperator.ts, 5, 10))
>b : Symbol(b, Decl(controlFlowInOperator.ts, 1, 5))

declare const c: A | B;
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))
>A : Symbol(A, Decl(controlFlowInOperator.ts, 2, 14))
>B : Symbol(B, Decl(controlFlowInOperator.ts, 4, 26))

if ('a' in c) {
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))

    c;      // A
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))

    c['a']; // number;
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))
>'a' : Symbol([a], Decl(controlFlowInOperator.ts, 4, 10))
}

if ('d' in c) {
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))

    c; // never
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))
}

if (a in c) {
>a : Symbol(a, Decl(controlFlowInOperator.ts, 0, 5))
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))

    c;    // A
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))

    c[a]; // number;
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))
>a : Symbol(a, Decl(controlFlowInOperator.ts, 0, 5))
}

if (d in c) {
>d : Symbol(d, Decl(controlFlowInOperator.ts, 2, 5))
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))

    c; // never
>c : Symbol(c, Decl(controlFlowInOperator.ts, 7, 13))
}

// repro from https://github.com/microsoft/TypeScript/issues/54790

function uniqueID_54790(
>uniqueID_54790 : Symbol(uniqueID_54790, Decl(controlFlowInOperator.ts, 25, 1))

  id: string | undefined,
>id : Symbol(id, Decl(controlFlowInOperator.ts, 29, 24))

  seenIDs: { [key: string]: string }
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 30, 25))
>key : Symbol(key, Decl(controlFlowInOperator.ts, 31, 14))

): string {
  if (id === undefined) {
>id : Symbol(id, Decl(controlFlowInOperator.ts, 29, 24))
>undefined : Symbol(undefined)

    id = "1";
>id : Symbol(id, Decl(controlFlowInOperator.ts, 29, 24))
  }
  if (!(id in seenIDs)) {
>id : Symbol(id, Decl(controlFlowInOperator.ts, 29, 24))
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 30, 25))

    return id;
>id : Symbol(id, Decl(controlFlowInOperator.ts, 29, 24))
  }
  for (let i = 1; i < Number.MAX_VALUE; i++) {
>i : Symbol(i, Decl(controlFlowInOperator.ts, 39, 10))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 39, 10))
>Number.MAX_VALUE : Symbol(NumberConstructor.MAX_VALUE, Decl(lib.es5.d.ts, --, --))
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2020.number.d.ts, --, --))
>MAX_VALUE : Symbol(NumberConstructor.MAX_VALUE, Decl(lib.es5.d.ts, --, --))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 39, 10))

    const newID = `${id}-${i}`;
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 40, 9))
>id : Symbol(id, Decl(controlFlowInOperator.ts, 29, 24))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 39, 10))

    if (!(newID in seenIDs)) {
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 40, 9))
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 30, 25))

      return newID;
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 40, 9))
    }
  }
  throw Error("heat death of the universe");
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2022.error.d.ts, --, --))
}

function uniqueID_54790_2(id: string | number, seenIDs: object) {
>uniqueID_54790_2 : Symbol(uniqueID_54790_2, Decl(controlFlowInOperator.ts, 46, 1))
>id : Symbol(id, Decl(controlFlowInOperator.ts, 48, 26))
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 48, 46))

  id = "a";
>id : Symbol(id, Decl(controlFlowInOperator.ts, 48, 26))

  for (let i = 1; i < 3; i++) {
>i : Symbol(i, Decl(controlFlowInOperator.ts, 50, 10))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 50, 10))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 50, 10))

    const newID = `${id}`;
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 51, 9))
>id : Symbol(id, Decl(controlFlowInOperator.ts, 48, 26))

    if (newID in seenIDs) {
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 51, 9))
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 48, 46))
    }
  }
}

function uniqueID_54790_3(id: string | number, seenIDs: object) {
>uniqueID_54790_3 : Symbol(uniqueID_54790_3, Decl(controlFlowInOperator.ts, 55, 1))
>id : Symbol(id, Decl(controlFlowInOperator.ts, 57, 26))
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 57, 46))

  id = "a";
>id : Symbol(id, Decl(controlFlowInOperator.ts, 57, 26))

  for (let i = 1; i < 3; i++) {
>i : Symbol(i, Decl(controlFlowInOperator.ts, 59, 10))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 59, 10))
>i : Symbol(i, Decl(controlFlowInOperator.ts, 59, 10))

    const newID = id;
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 60, 9))
>id : Symbol(id, Decl(controlFlowInOperator.ts, 57, 26))

    if (newID in seenIDs) {
>newID : Symbol(newID, Decl(controlFlowInOperator.ts, 60, 9))
>seenIDs : Symbol(seenIDs, Decl(controlFlowInOperator.ts, 57, 46))
    }
  }
}

