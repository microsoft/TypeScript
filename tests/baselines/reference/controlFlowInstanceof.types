//// [tests/cases/compiler/controlFlowInstanceof.ts] ////

=== controlFlowInstanceof.ts ===
// Repros from #10167

function f1(s: Set<string> | Set<number>) {
>f1 : (s: Set<string> | Set<number>) => void
>   : ^ ^^                         ^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

    s = new Set<number>();
>s = new Set<number>() : Set<number>
>                      : ^^^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>new Set<number>() : Set<number>
>                  : ^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^

    s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^

    if (s instanceof Set) {
>s instanceof Set : boolean
>                 : ^^^^^^^
>s : Set<number>
>  : ^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^

        s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^
    }
    s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^

    s.add(42);
>s.add(42) : Set<number>
>          : ^^^^^^^^^^^
>s.add : (value: number) => Set<number>
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^
>s : Set<number>
>  : ^^^^^^^^^^^
>add : (value: number) => Set<number>
>    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^
>42 : 42
>   : ^^
}

function f2(s: Set<string> | Set<number>) {
>f2 : (s: Set<string> | Set<number>) => void
>   : ^ ^^                         ^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

    s = new Set<number>();
>s = new Set<number>() : Set<number>
>                      : ^^^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>new Set<number>() : Set<number>
>                  : ^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^

    s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^

    if (s instanceof Promise) {
>s instanceof Promise : boolean
>                     : ^^^^^^^
>s : Set<number>
>  : ^^^^^^^^^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^

        s;  // Set<number> & Promise<any>
>s : Set<number> & Promise<any>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^

    s.add(42);
>s.add(42) : Set<number>
>          : ^^^^^^^^^^^
>s.add : (value: number) => Set<number>
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^
>s : Set<number>
>  : ^^^^^^^^^^^
>add : (value: number) => Set<number>
>    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^
>42 : 42
>   : ^^
}

function f3(s: Set<string> | Set<number>) {
>f3 : (s: Set<string> | Set<number>) => void
>   : ^ ^^                         ^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

    s;  // Set<string> | Set<number>
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

    if (s instanceof Set) {
>s instanceof Set : boolean
>                 : ^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^

        s;  // Set<string> | Set<number>
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    else {
        s;  // never
>s : never
>  : ^^^^^
    }
}

function f4(s: Set<string> | Set<number>) {
>f4 : (s: Set<string> | Set<number>) => void
>   : ^ ^^                         ^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

    s = new Set<number>();
>s = new Set<number>() : Set<number>
>                      : ^^^^^^^^^^^
>s : Set<string> | Set<number>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>new Set<number>() : Set<number>
>                  : ^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^

    s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^

    if (s instanceof Set) {
>s instanceof Set : boolean
>                 : ^^^^^^^
>s : Set<number>
>  : ^^^^^^^^^^^
>Set : SetConstructor
>    : ^^^^^^^^^^^^^^

        s;  // Set<number>
>s : Set<number>
>  : ^^^^^^^^^^^
    }
    else {
        s;  // never
>s : never
>  : ^^^^^
    }
}

// More tests

class A { a: string }
>A : A
>  : ^
>a : string
>  : ^^^^^^

class B extends A { b: string }
>B : B
>  : ^
>A : A
>  : ^
>b : string
>  : ^^^^^^

class C extends A { c: string }
>C : C
>  : ^
>A : A
>  : ^
>c : string
>  : ^^^^^^

function foo(x: A | undefined) {
>foo : (x: A | undefined) => void
>    : ^ ^^             ^^^^^^^^^
>x : A | undefined
>  : ^^^^^^^^^^^^^

    x;  // A | undefined
>x : A | undefined
>  : ^^^^^^^^^^^^^

    if (x instanceof B || x instanceof C) {
>x instanceof B || x instanceof C : boolean
>                                 : ^^^^^^^
>x instanceof B : boolean
>               : ^^^^^^^
>x : A | undefined
>  : ^^^^^^^^^^^^^
>B : typeof B
>  : ^^^^^^^^
>x instanceof C : boolean
>               : ^^^^^^^
>x : A | undefined
>  : ^^^^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^

        x;  // B | C
>x : B | C
>  : ^^^^^
    }
    x;  // A | undefined
>x : A | undefined
>  : ^^^^^^^^^^^^^

    if (x instanceof B && x instanceof C) {
>x instanceof B && x instanceof C : boolean
>                                 : ^^^^^^^
>x instanceof B : boolean
>               : ^^^^^^^
>x : A | undefined
>  : ^^^^^^^^^^^^^
>B : typeof B
>  : ^^^^^^^^
>x instanceof C : boolean
>               : ^^^^^^^
>x : B
>  : ^
>C : typeof C
>  : ^^^^^^^^

        x;  // B & C
>x : B & C
>  : ^^^^^
    }
    x;  // A | undefined
>x : A | undefined
>  : ^^^^^^^^^^^^^

    if (!x) {
>!x : boolean
>   : ^^^^^^^
>x : A | undefined
>  : ^^^^^^^^^^^^^

        return;
    }
    x;  // A
>x : A
>  : ^

    if (x instanceof B) {
>x instanceof B : boolean
>               : ^^^^^^^
>x : A
>  : ^
>B : typeof B
>  : ^^^^^^^^

        x;  // B
>x : B
>  : ^

        if (x instanceof C) {
>x instanceof C : boolean
>               : ^^^^^^^
>x : B
>  : ^
>C : typeof C
>  : ^^^^^^^^

            x;  // B & C
>x : B & C
>  : ^^^^^
        }
        else {
            x;  // B
>x : B
>  : ^
        }
        x;  // B
>x : B
>  : ^
    }
    else {
        x;  // A
>x : A
>  : ^
    }
    x;  // A
>x : A
>  : ^
}

// X is neither assignable to Y nor a subtype of Y
// Y is assignable to X, but not a subtype of X

interface X {
    x?: string;
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
}

class Y {
>Y : Y
>  : ^

    y: string;
>y : string
>  : ^^^^^^
}

function goo(x: X) {
>goo : (x: X) => void
>    : ^ ^^ ^^^^^^^^^
>x : X
>  : ^

    x;
>x : X
>  : ^

    if (x instanceof Y) {
>x instanceof Y : boolean
>               : ^^^^^^^
>x : X
>  : ^
>Y : typeof Y
>  : ^^^^^^^^

        x.y;
>x.y : string
>    : ^^^^^^
>x : X & Y
>  : ^^^^^
>y : string
>  : ^^^^^^
    }
    x;
>x : X
>  : ^
}

// Repro from #27282

declare const x: (() => void)|null;
>x : (() => void) | null
>  : ^^^^^^^    ^^^^^^^^

declare const ctor: Function;
>ctor : Function
>     : ^^^^^^^^

if (x instanceof ctor) {
>x instanceof ctor : boolean
>                  : ^^^^^^^
>x : (() => void) | null
>  : ^^^^^^^    ^^^^^^^^
>ctor : Function
>     : ^^^^^^^^

    x();
>x() : void
>    : ^^^^
>x : () => void
>  : ^^^^^^    
}

// Repro from #27550 (based on uglify code)
=== uglify.js ===
/** @constructor */
function AtTop(val) { this.val = val }
>AtTop : typeof AtTop
>      : ^^^^^^^^^^^^
>val : any
>this.val = val : any
>this.val : any
>this : this
>     : ^^^^
>val : any
>    : ^^^
>val : any

/** @type {*} */
var v = 1;
>v : any
>1 : 1
>  : ^

if (v instanceof AtTop) {
>v instanceof AtTop : boolean
>                   : ^^^^^^^
>v : any
>AtTop : typeof AtTop
>      : ^^^^^^^^^^^^

    v.val
>v.val : any
>v : AtTop
>  : ^^^^^
>val : any
>    : ^^^
}

