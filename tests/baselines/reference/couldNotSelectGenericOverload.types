//// [tests/cases/compiler/couldNotSelectGenericOverload.ts] ////

=== couldNotSelectGenericOverload.ts ===
function makeArray<T>(items: T[]): T[] { return items; }
>makeArray : <T>(items: T[]) => T[]
>          : ^ ^^     ^^   ^^^^^   
>items : T[]
>      : ^^^
>items : T[]
>      : ^^^

var b = [1, ""];
>b : (string | number)[]
>  : ^^^^^^^^^^^^^^^^^^^
>[1, ""] : (string | number)[]
>        : ^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"" : ""
>   : ^^

var b1G = makeArray(1, ""); // any, no error
>b1G : unknown[]
>    : ^^^^^^^^^
>makeArray(1, "") : unknown[]
>                 : ^^^^^^^^^
>makeArray : <T>(items: T[]) => T[]
>          : ^ ^^     ^^   ^^^^^   
>1 : 1
>  : ^
>"" : ""
>   : ^^

var b2G = makeArray(b); // any[]
>b2G : (string | number)[]
>    : ^^^^^^^^^^^^^^^^^^^
>makeArray(b) : (string | number)[]
>             : ^^^^^^^^^^^^^^^^^^^
>makeArray : <T>(items: T[]) => T[]
>          : ^ ^^     ^^   ^^^^^   
>b : (string | number)[]
>  : ^^^^^^^^^^^^^^^^^^^

function makeArray2(items: any[]): any[] { return items; }
>makeArray2 : (items: any[]) => any[]
>           : ^     ^^     ^^^^^     
>items : any[]
>      : ^^^^^
>items : any[]
>      : ^^^^^

var b3G = makeArray2(1, ""); // error
>b3G : any[]
>    : ^^^^^
>makeArray2(1, "") : any[]
>                  : ^^^^^
>makeArray2 : (items: any[]) => any[]
>           : ^     ^^     ^^^^^     
>1 : 1
>  : ^
>"" : ""
>   : ^^

