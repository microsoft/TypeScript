//// [tests/cases/compiler/declFileTypeAnnotationTypeQuery.ts] ////

=== declFileTypeAnnotationTypeQuery.ts ===
class c {
>c : c
>  : ^
}
module m {
>m : typeof m
>  : ^^^^^^^^

    export class c {
>c : c
>  : ^
    }
    export class g<T> {
>g : g<T>
>  : ^^^^
    }
}
class g<T> {
>g : g<T>
>  : ^^^^
}

// Just the name
function foo(): typeof c {
>foo : () => typeof c
>    : ^^^^^^        
>c : typeof c
>  : ^^^^^^^^

    return c;
>c : typeof c
>  : ^^^^^^^^
}
function foo2() {
>foo2 : () => typeof c
>     : ^^^^^^^^^^^^^^

    return c;
>c : typeof c
>  : ^^^^^^^^
}

// Qualified name
function foo3(): typeof m.c {
>foo3 : () => typeof m.c
>     : ^^^^^^          
>m.c : typeof m.c
>    : ^^^^^^^^^^
>m : typeof m
>  : ^^^^^^^^
>c : typeof m.c
>  : ^^^^^^^^^^

    return m.c;
>m.c : typeof m.c
>    : ^^^^^^^^^^
>m : typeof m
>  : ^^^^^^^^
>c : typeof m.c
>  : ^^^^^^^^^^
}
function foo4() {
>foo4 : () => typeof m.c
>     : ^^^^^^^^^^^^^^^^

    return m.c;
>m.c : typeof m.c
>    : ^^^^^^^^^^
>m : typeof m
>  : ^^^^^^^^
>c : typeof m.c
>  : ^^^^^^^^^^
}

// Just the name with type arguments
function foo5(): typeof g {
>foo5 : () => typeof g
>     : ^^^^^^        
>g : typeof g
>  : ^^^^^^^^

    return g;
>g : typeof g
>  : ^^^^^^^^
}
function foo6() {
>foo6 : () => typeof g
>     : ^^^^^^^^^^^^^^

    return g;
>g : typeof g
>  : ^^^^^^^^
}

// Qualified name with type arguments
function foo7(): typeof m.g {
>foo7 : () => typeof m.g
>     : ^^^^^^          
>m.g : typeof m.g
>    : ^^^^^^^^^^
>m : typeof m
>  : ^^^^^^^^
>g : typeof m.g
>  : ^^^^^^^^^^

    return m.g
>m.g : typeof m.g
>    : ^^^^^^^^^^
>m : typeof m
>  : ^^^^^^^^
>g : typeof m.g
>  : ^^^^^^^^^^
}
function foo8() {
>foo8 : () => typeof m.g
>     : ^^^^^^^^^^^^^^^^

    return m.g
>m.g : typeof m.g
>    : ^^^^^^^^^^
>m : typeof m
>  : ^^^^^^^^
>g : typeof m.g
>  : ^^^^^^^^^^
}
