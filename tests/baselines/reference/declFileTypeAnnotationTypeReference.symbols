//// [tests/cases/compiler/declFileTypeAnnotationTypeReference.ts] ////

=== declFileTypeAnnotationTypeReference.ts ===
class c {
>c : Symbol(c, Decl(declFileTypeAnnotationTypeReference.ts, 0, 0))
}
namespace m {
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))

    export class c {
>c : Symbol(c, Decl(declFileTypeAnnotationTypeReference.ts, 2, 13))
    }
    export class g<T> {
>g : Symbol(g, Decl(declFileTypeAnnotationTypeReference.ts, 4, 5))
>T : Symbol(T, Decl(declFileTypeAnnotationTypeReference.ts, 5, 19))
    }
}
class g<T> {
>g : Symbol(g, Decl(declFileTypeAnnotationTypeReference.ts, 7, 1))
>T : Symbol(T, Decl(declFileTypeAnnotationTypeReference.ts, 8, 8))
}

// Just the name
function foo(): c {
>foo : Symbol(foo, Decl(declFileTypeAnnotationTypeReference.ts, 9, 1))
>c : Symbol(c, Decl(declFileTypeAnnotationTypeReference.ts, 0, 0))

    return new c();
>c : Symbol(c, Decl(declFileTypeAnnotationTypeReference.ts, 0, 0))
}
function foo2() {
>foo2 : Symbol(foo2, Decl(declFileTypeAnnotationTypeReference.ts, 14, 1))

    return new c();
>c : Symbol(c, Decl(declFileTypeAnnotationTypeReference.ts, 0, 0))
}

// Qualified name
function foo3(): m.c {
>foo3 : Symbol(foo3, Decl(declFileTypeAnnotationTypeReference.ts, 17, 1))
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))
>c : Symbol(m.c, Decl(declFileTypeAnnotationTypeReference.ts, 2, 13))

    return new m.c();
>m.c : Symbol(m.c, Decl(declFileTypeAnnotationTypeReference.ts, 2, 13))
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))
>c : Symbol(m.c, Decl(declFileTypeAnnotationTypeReference.ts, 2, 13))
}
function foo4() {
>foo4 : Symbol(foo4, Decl(declFileTypeAnnotationTypeReference.ts, 22, 1))

    return new m.c();
>m.c : Symbol(m.c, Decl(declFileTypeAnnotationTypeReference.ts, 2, 13))
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))
>c : Symbol(m.c, Decl(declFileTypeAnnotationTypeReference.ts, 2, 13))
}

// Just the name with type arguments
function foo5(): g<string> {
>foo5 : Symbol(foo5, Decl(declFileTypeAnnotationTypeReference.ts, 25, 1))
>g : Symbol(g, Decl(declFileTypeAnnotationTypeReference.ts, 7, 1))

    return new g<string>();
>g : Symbol(g, Decl(declFileTypeAnnotationTypeReference.ts, 7, 1))
}
function foo6() {
>foo6 : Symbol(foo6, Decl(declFileTypeAnnotationTypeReference.ts, 30, 1))

    return new g<string>();
>g : Symbol(g, Decl(declFileTypeAnnotationTypeReference.ts, 7, 1))
}

// Qualified name with type arguments
function foo7(): m.g<number> {
>foo7 : Symbol(foo7, Decl(declFileTypeAnnotationTypeReference.ts, 33, 1))
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))
>g : Symbol(m.g, Decl(declFileTypeAnnotationTypeReference.ts, 4, 5))

    return new m.g<number>();
>m.g : Symbol(m.g, Decl(declFileTypeAnnotationTypeReference.ts, 4, 5))
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))
>g : Symbol(m.g, Decl(declFileTypeAnnotationTypeReference.ts, 4, 5))
}
function foo8() {
>foo8 : Symbol(foo8, Decl(declFileTypeAnnotationTypeReference.ts, 38, 1))

    return new m.g<number>();
>m.g : Symbol(m.g, Decl(declFileTypeAnnotationTypeReference.ts, 4, 5))
>m : Symbol(m, Decl(declFileTypeAnnotationTypeReference.ts, 1, 1))
>g : Symbol(m.g, Decl(declFileTypeAnnotationTypeReference.ts, 4, 5))
}
