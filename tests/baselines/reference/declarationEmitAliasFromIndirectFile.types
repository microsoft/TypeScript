//// [tests/cases/compiler/declarationEmitAliasFromIndirectFile.ts] ////

=== locale.d.ts ===
export type Locale = {
>Locale : Locale
>       : ^^^^^^

    weekdays: {
>weekdays : { shorthand: [string, string, string, string, string, string, string]; longhand: [string, string, string, string, string, string, string]; }
>         : ^^^^^^^^^^^^^                                                        ^^^^^^^^^^^^                                                        ^^^

        shorthand: [string, string, string, string, string, string, string];
>shorthand : [string, string, string, string, string, string, string]
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        longhand: [string, string, string, string, string, string, string];
>longhand : [string, string, string, string, string, string, string]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
};
export type CustomLocale = {
>CustomLocale : CustomLocale
>             : ^^^^^^^^^^^^

    weekdays: {
>weekdays : { shorthand: [string, string, string, string, string, string, string]; longhand: [string, string, string, string, string, string, string]; }
>         : ^^^^^^^^^^^^^                                                        ^^^^^^^^^^^^                                                        ^^^

        shorthand: [string, string, string, string, string, string, string];
>shorthand : [string, string, string, string, string, string, string]
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        longhand: [string, string, string, string, string, string, string];
>longhand : [string, string, string, string, string, string, string]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
};
export type key = "ar" | "bg";
>key : key
>    : ^^^

=== instance.d.ts ===
import { Locale, CustomLocale, key as LocaleKey } from "./locale";
>Locale : any
>       : ^^^
>CustomLocale : any
>             : ^^^
>key : any
>    : ^^^
>LocaleKey : any
>          : ^^^

export interface FlatpickrFn {
    l10ns: {[k in LocaleKey]?: CustomLocale } & { default: Locale };
>l10ns : { ar?: CustomLocale; bg?: CustomLocale; } & { default: Locale; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>default : Locale
>        : ^^^^^^
}

=== app.ts ===
import { FlatpickrFn } from "./instance";
>FlatpickrFn : any
>            : ^^^

const fp = { l10ns: {} } as FlatpickrFn;
>fp : FlatpickrFn
>   : ^^^^^^^^^^^
>{ l10ns: {} } as FlatpickrFn : FlatpickrFn
>                             : ^^^^^^^^^^^
>{ l10ns: {} } : { l10ns: {}; }
>              : ^^^^^^^^^^^^^^
>l10ns : {}
>      : ^^
>{} : {}
>   : ^^

export default fp.l10ns;
>fp.l10ns : { ar?: import("locale").CustomLocale; bg?: import("locale").CustomLocale; } & { default: import("locale").Locale; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^  ^^^^^^^^^
>fp : FlatpickrFn
>   : ^^^^^^^^^^^
>l10ns : { ar?: import("locale").CustomLocale; bg?: import("locale").CustomLocale; } & { default: import("locale").Locale; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^  ^^^^^^^^^

