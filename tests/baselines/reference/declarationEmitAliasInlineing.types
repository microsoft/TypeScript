//// [tests/cases/compiler/declarationEmitAliasInlineing.ts] ////

=== a.ts ===
type O = {
>O : O
>  : ^

    prop: string
>prop : string
>     : ^^^^^^

    prop2: string
>prop2 : string
>      : ^^^^^^
}

type I = {
>I : I
>  : ^

    prop: string
>prop : string
>     : ^^^^^^
}

export const fn = (v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {};
>fn : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
>   : ^ ^^         ^^ ^^               ^^   ^^       ^^  ^^                ^^^^^^^^^
>(v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {} : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
>                                                                             : ^ ^^         ^^ ^^               ^^   ^^       ^^  ^^                ^^^^^^^^^
>v : string
>  : ^^^^^^
>p : Omit<O, "prop">
>  : ^^^^^^^^^^^^^^^
>key : keyof O
>    : ^^^^^^^
>p2 : Omit<O, "prop">
>   : ^^^^^^^^^^^^^^^

=== aExp.ts ===
export type O = {
>O : O
>  : ^

    prop: string
>prop : string
>     : ^^^^^^

    prop2: string
>prop2 : string
>      : ^^^^^^
}

export type I = {
>I : I
>  : ^

    prop: string
>prop : string
>     : ^^^^^^
}

export const fnExp = (v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {};
>fnExp : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
>      : ^ ^^         ^^ ^^               ^^   ^^       ^^  ^^                ^^^^^^^^^
>(v: O['prop'], p: Omit<O, 'prop'>, key: keyof O, p2: Omit<O, keyof I>) => {} : (v: O["prop"], p: Omit<O, "prop">, key: keyof O, p2: Omit<O, keyof I>) => void
>                                                                             : ^ ^^         ^^ ^^               ^^   ^^       ^^  ^^                ^^^^^^^^^
>v : string
>  : ^^^^^^
>p : Omit<O, "prop">
>  : ^^^^^^^^^^^^^^^
>key : keyof O
>    : ^^^^^^^
>p2 : Omit<O, "prop">
>   : ^^^^^^^^^^^^^^^

=== b.ts ===
import {fn} from './a'
>fn : (v: string, p: Omit<{ prop: string; prop2: string; }, "prop">, key: keyof { prop: string; prop2: string; }, p2: Omit<{ prop: string; prop2: string; }, "prop">) => void
>   : ^ ^^^^^^^^^^ ^^     ^^^^^^^^      ^^^^^^^^^      ^^^         ^^   ^^^^^^^^^^^^^^^^      ^^^^^^^^^      ^^^^^  ^^     ^^^^^^^^      ^^^^^^^^^      ^^^  ^^^^^^ ^^^^^^^^^

import {fnExp} from './aExp'
>fnExp : (v: import("aExp").O["prop"], p: Omit<import("aExp").O, "prop">, key: keyof import("aExp").O, p2: Omit<import("aExp").O, keyof import("aExp").I>) => void
>      : ^ ^^       ^^^^^^  ^        ^^ ^^            ^^^^^^  ^         ^^   ^^             ^^^^^^  ^^^  ^^            ^^^^^^  ^               ^^^^^^  ^ ^^^^^^^^^

export const f = fn;
>f : (v: string, p: Omit<{ prop: string; prop2: string; }, "prop">, key: keyof { prop: string; prop2: string; }, p2: Omit<{ prop: string; prop2: string; }, "prop">) => void
>  : ^ ^^^^^^^^^^ ^^     ^^^^^^^^      ^^^^^^^^^      ^^^         ^^   ^^^^^^^^^^^^^^^^      ^^^^^^^^^      ^^^^^  ^^     ^^^^^^^^      ^^^^^^^^^      ^^^  ^^^^^^ ^^^^^^^^^
>fn : (v: string, p: Omit<{ prop: string; prop2: string; }, "prop">, key: keyof { prop: string; prop2: string; }, p2: Omit<{ prop: string; prop2: string; }, "prop">) => void
>   : ^ ^^^^^^^^^^ ^^     ^^^^^^^^      ^^^^^^^^^      ^^^         ^^   ^^^^^^^^^^^^^^^^      ^^^^^^^^^      ^^^^^  ^^     ^^^^^^^^      ^^^^^^^^^      ^^^  ^^^^^^ ^^^^^^^^^

export const fExp = fnExp;
>fExp : (v: import("aExp").O["prop"], p: Omit<import("aExp").O, "prop">, key: keyof import("aExp").O, p2: Omit<import("aExp").O, keyof import("aExp").I>) => void
>     : ^ ^^       ^^^^^^  ^        ^^ ^^            ^^^^^^  ^         ^^   ^^             ^^^^^^  ^^^  ^^            ^^^^^^  ^               ^^^^^^  ^ ^^^^^^^^^
>fnExp : (v: import("aExp").O["prop"], p: Omit<import("aExp").O, "prop">, key: keyof import("aExp").O, p2: Omit<import("aExp").O, keyof import("aExp").I>) => void
>      : ^ ^^       ^^^^^^  ^        ^^ ^^            ^^^^^^  ^         ^^   ^^             ^^^^^^  ^^^  ^^            ^^^^^^  ^               ^^^^^^  ^ ^^^^^^^^^

