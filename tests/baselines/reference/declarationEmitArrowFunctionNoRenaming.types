//// [tests/cases/compiler/declarationEmitArrowFunctionNoRenaming.ts] ////

=== declarationEmitArrowFunctionNoRenaming.ts ===
export type Brand<
>Brand : Brand<Base, Branding, ReservedName>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  Base,
  Branding,
  ReservedName extends string = "__type__"
> = Base & { [K in ReservedName]: Branding } & { __witness__: Base };
>__witness__ : Base
>            : ^^^^

export type BoundedInteger<
>BoundedInteger : BoundedInteger<LowerBound, UpperBound>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  LowerBound extends number,
  UpperBound extends number
> = Brand<number, "BoundedInteger">;

export const toBoundedInteger =
>toBoundedInteger : <LowerBound extends number, UpperBound extends number>(bounds: { lowerBound: LowerBound; upperBound: UpperBound; }) => (n: number) => BoundedInteger<LowerBound, UpperBound>
>                 : ^          ^^^^^^^^^      ^^          ^^^^^^^^^      ^^      ^^                                                   ^^^^^^         ^^^^^                                      

  <LowerBound extends number, UpperBound extends number>(bounds: {
><LowerBound extends number, UpperBound extends number>(bounds: {    lowerBound: LowerBound;    upperBound: UpperBound;  }) =>  (    n: number  ): BoundedInteger<LowerBound, UpperBound> =>  // Implementation doesn't matter here    ({} as any) : <LowerBound extends number, UpperBound extends number>(bounds: { lowerBound: LowerBound; upperBound: UpperBound; }) => (n: number) => BoundedInteger<LowerBound, UpperBound>
>                                                                                                                                                                                                                                                  : ^          ^^^^^^^^^      ^^          ^^^^^^^^^      ^^      ^^                                                   ^^^^^^         ^^^^^                                      
>bounds : { lowerBound: LowerBound; upperBound: UpperBound; }
>       : ^^^^^^^^^^^^^^          ^^^^^^^^^^^^^^          ^^^

    lowerBound: LowerBound;
>lowerBound : LowerBound
>           : ^^^^^^^^^^

    upperBound: UpperBound;
>upperBound : UpperBound
>           : ^^^^^^^^^^

  }) =>
  (
>(    n: number  ): BoundedInteger<LowerBound, UpperBound> =>  // Implementation doesn't matter here    ({} as any) : (n: number) => BoundedInteger<LowerBound, UpperBound>
>                                                                                                                   : ^ ^^      ^^^^^                                      

    n: number
>n : number
>  : ^^^^^^

  ): BoundedInteger<LowerBound, UpperBound> =>
  // Implementation doesn't matter here
    ({} as any)
>({} as any) : any
>{} as any : any
>{} : {}
>   : ^^

