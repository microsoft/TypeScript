//// [tests/cases/compiler/declarationEmitBindingPatternsFunctionExpr.ts] ////

=== declarationEmitBindingPatternsFunctionExpr.ts ===
type Named = { name: string }
>Named : Named
>      : ^^^^^
>name : string
>     : ^^^^^^

// Tempting to remove alias if unused 
let notReferenced = ({ name: alias }: Named) => { }
>notReferenced : ({ name: alias }: Named) => void
>              : ^               ^^     ^^^^^^^^^
>({ name: alias }: Named) => { } : ({ name: alias }: Named) => void
>                                : ^               ^^     ^^^^^^^^^
>name : any
>     : ^^^
>alias : string
>      : ^^^^^^

// Resons we can't remove aliases that are not used in the function signature: 

// 1.Causes duplicate identifier if we remove alias
const duplicateIndetifiers = ({ name: alias, name: alias2 }: Named) => { }
>duplicateIndetifiers : ({ name: alias, name: alias2 }: Named) => void
>                     : ^                             ^^     ^^^^^^^^^
>({ name: alias, name: alias2 }: Named) => { } : ({ name: alias, name: alias2 }: Named) => void
>                                              : ^                             ^^     ^^^^^^^^^
>name : any
>     : ^^^
>alias : string
>      : ^^^^^^
>name : any
>     : ^^^
>alias2 : string
>       : ^^^^^^

const duplicateIndetifiers2 = (name: string, { name: alias }: Named) => { }
>duplicateIndetifiers2 : (name: string, { name: alias }: Named) => void
>                      : ^    ^^      ^^               ^^     ^^^^^^^^^
>(name: string, { name: alias }: Named) => { } : (name: string, { name: alias }: Named) => void
>                                              : ^    ^^      ^^               ^^     ^^^^^^^^^
>name : string
>     : ^^^^^^
>name : any
>     : ^^^
>alias : string
>      : ^^^^^^

const duplicateIndetifiers3 = ({ name: alias }: Named, { name: alias2 }: Named) => { }
>duplicateIndetifiers3 : ({ name: alias }: Named, { name: alias2 }: Named) => void
>                      : ^               ^^     ^^                ^^     ^^^^^^^^^
>({ name: alias }: Named, { name: alias2 }: Named) => { } : ({ name: alias }: Named, { name: alias2 }: Named) => void
>                                                         : ^               ^^     ^^                ^^     ^^^^^^^^^
>name : any
>     : ^^^
>alias : string
>      : ^^^^^^
>name : any
>     : ^^^
>alias2 : string
>       : ^^^^^^

let value = "";
>value : string
>      : ^^^^^^
>"" : ""
>   : ^^

// 2.Can change in meaning for typeof value if we remove alias
const shadowedVariable = ({ value: alias }: { value: string }): typeof value => value;
>shadowedVariable : ({ value: alias }: { value: string; }) => typeof value
>                 : ^                ^^                  ^^^^^            
>({ value: alias }: { value: string }): typeof value => value : ({ value: alias }: { value: string; }) => typeof value
>                                                             : ^                ^^                  ^^^^^            
>value : any
>      : ^^^
>alias : string
>      : ^^^^^^
>value : string
>      : ^^^^^^
>value : string
>      : ^^^^^^
>value : string
>      : ^^^^^^

