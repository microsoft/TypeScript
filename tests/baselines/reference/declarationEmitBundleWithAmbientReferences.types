//// [tests/cases/compiler/declarationEmitBundleWithAmbientReferences.ts] ////

=== lib/lib.d.ts ===
declare module "lib/result" {
>"lib/result" : typeof import("lib/result")
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    export type Result<E extends Error, T> = (E & Failure<E>) | (T & Success<T>);
>Result : Result<E, T>
>       : ^^^^^^^^^^^^

    export interface Failure<E extends Error> { }
    export interface Success<T> { }
}

=== src/datastore_result.ts ===
import { Result } from "lib/result";
>Result : any
>       : ^^^

export type T<T> = Result<Error, T>;
>T : import("src/datastore_result").T<T>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=== src/conditional_directive_field.ts ===
import * as DatastoreResult from "src/datastore_result";
>DatastoreResult : typeof DatastoreResult
>                : ^^^^^^^^^^^^^^^^^^^^^^

export const build = (): DatastoreResult.T<string> => {
>build : () => DatastoreResult.T<string>
>      : ^^^^^^                         
>(): DatastoreResult.T<string> => {	return null;} : () => DatastoreResult.T<string>
>                                                 : ^^^^^^                         
>DatastoreResult : any
>                : ^^^

	return null;
};

