//// [tests/cases/compiler/declarationEmitMappedTypePropertyFromNumericStringKey.ts] ////

=== declarationEmitMappedTypePropertyFromNumericStringKey.ts ===
export const f = (<T>(arg: {[K in keyof T]: T[K] | string}) => arg)({'0': 0}); // Original prop uses string syntax
>f : { '0': string | number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>(<T>(arg: {[K in keyof T]: T[K] | string}) => arg)({'0': 0}) : { '0': string | number; }
>                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^
>(<T>(arg: {[K in keyof T]: T[K] | string}) => arg) : <T>(arg: { [K in keyof T]: T[K] | string; }) => { [K in keyof T]: string | T[K]; }
>                                                   : ^ ^^   ^^                                  ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><T>(arg: {[K in keyof T]: T[K] | string}) => arg : <T>(arg: { [K in keyof T]: T[K] | string; }) => { [K in keyof T]: string | T[K]; }
>                                                 : ^ ^^   ^^                                  ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>arg : { [K in keyof T]: string | T[K]; }
>    : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>arg : { [K in keyof T]: string | T[K]; }
>    : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{'0': 0} : { '0': number; }
>         : ^^^^^^^^^^^^^^^^
>'0' : number
>    : ^^^^^^
>0 : 0
>  : ^

