//// [tests/cases/compiler/declarationEmitNestedGenerics.ts] ////

=== declarationEmitNestedGenerics.ts ===
function f<T>(p: T) {
>f : <T>(p: T) => <T_1>(x: T_1) => typeof p
>  : ^ ^^ ^^ ^^^^^^^^^^^ ^^   ^^^^^        
>p : T
>  : ^

    let g: <T>(x: T) => typeof p = null as any;
>g : <T_1>(x: T_1) => typeof p
>  : ^^^^^^ ^^   ^^^^^        
>x : T
>  : ^
>p : T_1
>  : ^^^
>null as any : any

    return g;
>g : <T_1>(x: T_1) => typeof p
>  : ^^^^^^ ^^   ^^^^^        
}

function g<T>(x: T) {
>g : <T>(x: T) => T extends (infer T_1)[] ? T_1 : T
>  : ^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : T
>  : ^

    let y: typeof x extends (infer T)[] ? T : typeof x = null as any;
>y : T extends (infer T_1)[] ? T_1 : T
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : T
>  : ^
>x : T
>  : ^
>null as any : any

    return y;
>y : T extends (infer T_1)[] ? T_1 : T
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
