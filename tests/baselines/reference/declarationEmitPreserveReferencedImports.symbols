//// [tests/cases/compiler/declarationEmitPreserveReferencedImports.ts] ////

=== utils.ts ===
export interface Evt { }
>Evt : Symbol(Evt, Decl(utils.ts, 0, 0))


=== decl.ts ===
import {Evt} from './utils'
>Evt : Symbol(Evt, Decl(decl.ts, 0, 8))

export const o = <T>(o: T) => () : T => null!
>o : Symbol(o, Decl(decl.ts, 1, 12))
>T : Symbol(T, Decl(decl.ts, 1, 18))
>o : Symbol(o, Decl(decl.ts, 1, 21))
>T : Symbol(T, Decl(decl.ts, 1, 18))
>T : Symbol(T, Decl(decl.ts, 1, 18))

=== main.ts ===
import { o }  from './decl'
>o : Symbol(o, Decl(main.ts, 0, 8))

import { Evt }  from './utils'
>Evt : Symbol(Evt, Decl(main.ts, 1, 8))

export const f = { o: o({ v: null! as Evt}) };
>f : Symbol(f, Decl(main.ts, 3, 12))
>o : Symbol(o, Decl(main.ts, 3, 18))
>o : Symbol(o, Decl(main.ts, 0, 8))
>v : Symbol(v, Decl(main.ts, 3, 25))
>Evt : Symbol(Evt, Decl(main.ts, 1, 8))

