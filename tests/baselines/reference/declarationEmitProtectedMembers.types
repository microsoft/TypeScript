//// [tests/cases/compiler/declarationEmitProtectedMembers.ts] ////

=== declarationEmitProtectedMembers.ts ===
// Class with protected members
class C1 {
>C1 : C1
>   : ^^

    protected x: number;
>x : number
>  : ^^^^^^

    protected f() {
>f : () => number
>  : ^^^^^^^^^^^^

        return this.x;
>this.x : number
>       : ^^^^^^
>this : this
>     : ^^^^
>x : number
>  : ^^^^^^
    }

    protected set accessor(a: number) { }
>accessor : number
>         : ^^^^^^
>a : number
>  : ^^^^^^

    protected get accessor() { return 0; }
>accessor : number
>         : ^^^^^^
>0 : 0
>  : ^

    protected static sx: number;
>sx : number
>   : ^^^^^^

    protected static sf() {
>sf : () => number
>   : ^^^^^^^^^^^^

        return this.sx;
>this.sx : number
>        : ^^^^^^
>this : typeof C1
>     : ^^^^^^^^^
>sx : number
>   : ^^^^^^
    }

    protected static set staticSetter(a: number) { }
>staticSetter : number
>             : ^^^^^^
>a : number
>  : ^^^^^^

    protected static get staticGetter() { return 0; }
>staticGetter : number
>             : ^^^^^^
>0 : 0
>  : ^
}

// Derived class overriding protected members
class C2 extends C1 {
>C2 : C2
>   : ^^
>C1 : C1
>   : ^^

    protected f() {
>f : () => number
>  : ^^^^^^^^^^^^

        return super.f() + this.x;
>super.f() + this.x : number
>                   : ^^^^^^
>super.f() : number
>          : ^^^^^^
>super.f : () => number
>        : ^^^^^^^^^^^^
>super : C1
>      : ^^
>f : () => number
>  : ^^^^^^^^^^^^
>this.x : number
>       : ^^^^^^
>this : this
>     : ^^^^
>x : number
>  : ^^^^^^
    }
    protected static sf() {
>sf : () => number
>   : ^^^^^^^^^^^^

        return super.sf() + this.sx;
>super.sf() + this.sx : number
>                     : ^^^^^^
>super.sf() : number
>           : ^^^^^^
>super.sf : () => number
>         : ^^^^^^^^^^^^
>super : typeof C1
>      : ^^^^^^^^^
>sf : () => number
>   : ^^^^^^^^^^^^
>this.sx : number
>        : ^^^^^^
>this : typeof C2
>     : ^^^^^^^^^
>sx : number
>   : ^^^^^^
    }
}

// Derived class making protected members public
class C3 extends C2 {
>C3 : C3
>   : ^^
>C2 : C2
>   : ^^

    x: number;
>x : number
>  : ^^^^^^

    static sx: number;
>sx : number
>   : ^^^^^^

    f() {
>f : () => number
>  : ^^^^^^^^^^^^

        return super.f();
>super.f() : number
>          : ^^^^^^
>super.f : () => number
>        : ^^^^^^^^^^^^
>super : C2
>      : ^^
>f : () => number
>  : ^^^^^^^^^^^^
    }
    static sf() {
>sf : () => number
>   : ^^^^^^^^^^^^

        return super.sf();
>super.sf() : number
>           : ^^^^^^
>super.sf : () => number
>         : ^^^^^^^^^^^^
>super : typeof C2
>      : ^^^^^^^^^
>sf : () => number
>   : ^^^^^^^^^^^^
    }

    static get staticGetter() { return 1; }
>staticGetter : number
>             : ^^^^^^
>1 : 1
>  : ^
}

// Protected properties in constructors
class C4 {
>C4 : C4
>   : ^^

    constructor(protected a: number, protected b) { }
>a : number
>  : ^^^^^^
>b : any
}
