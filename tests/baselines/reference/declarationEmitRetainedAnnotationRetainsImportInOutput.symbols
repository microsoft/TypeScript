//// [tests/cases/compiler/declarationEmitRetainedAnnotationRetainsImportInOutput.ts] ////

=== node_modules/whatever/index.d.ts ===
export type Whatever<T> = {x: T};
>Whatever : Symbol(Whatever, Decl(index.d.ts, 0, 0))
>T : Symbol(T, Decl(index.d.ts, 0, 21))
>x : Symbol(x, Decl(index.d.ts, 0, 27))
>T : Symbol(T, Decl(index.d.ts, 0, 21))

export declare function something<T>(cb: () => Whatever<T>): Whatever<T>;
>something : Symbol(something, Decl(index.d.ts, 0, 33))
>T : Symbol(T, Decl(index.d.ts, 1, 34))
>cb : Symbol(cb, Decl(index.d.ts, 1, 37))
>Whatever : Symbol(Whatever, Decl(index.d.ts, 0, 0))
>T : Symbol(T, Decl(index.d.ts, 1, 34))
>Whatever : Symbol(Whatever, Decl(index.d.ts, 0, 0))
>T : Symbol(T, Decl(index.d.ts, 1, 34))

=== index.ts ===
import * as E from 'whatever';
>E : Symbol(E, Decl(index.ts, 0, 6))

export const run = <E>(i: () => E.Whatever<E>): E.Whatever<E> => E.something(i);
>run : Symbol(run, Decl(index.ts, 2, 12))
>E : Symbol(E, Decl(index.ts, 2, 20))
>i : Symbol(i, Decl(index.ts, 2, 23))
>E : Symbol(E, Decl(index.ts, 0, 6))
>Whatever : Symbol(E.Whatever, Decl(index.d.ts, 0, 0))
>E : Symbol(E, Decl(index.ts, 2, 20))
>E : Symbol(E, Decl(index.ts, 0, 6))
>Whatever : Symbol(E.Whatever, Decl(index.d.ts, 0, 0))
>E : Symbol(E, Decl(index.ts, 2, 20))
>E.something : Symbol(E.something, Decl(index.d.ts, 0, 33))
>E : Symbol(E, Decl(index.ts, 0, 6))
>something : Symbol(E.something, Decl(index.d.ts, 0, 33))
>i : Symbol(i, Decl(index.ts, 2, 23))

