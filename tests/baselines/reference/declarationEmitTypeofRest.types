//// [tests/cases/compiler/declarationEmitTypeofRest.ts] ////

=== v1.ts ===
export const v1 = (...a: [n: "n", a: "a"]): {
>v1 : (n: "n", a: "a") => { a: [n: "n", a: "a"]; }
>   : ^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^   
>(...a: [n: "n", a: "a"]): {    /** r rest param */    a: typeof a,} => {    return null!} : (n: "n", a: "a") => { a: [n: "n", a: "a"]; }
>                                                                                          : ^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^   
>a : [n: "n", a: "a"]
>  : ^^^^^^^^^^^^^^^^

    /** r rest param */
    a: typeof a,
>a : [n: "n", a: "a"]
>  : ^^^^^^^^^^^^^^^^
>a : [n: "n", a: "a"]
>  : ^^^^^^^^^^^^^^^^

} => {
    return null!
>null! : null
>      : ^^^^
}

=== v2.ts ===
const n = Symbol();
>n : unique symbol
>  : ^^^^^^^^^^^^^
>Symbol() : unique symbol
>         : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^

export const v2 = (...a: [n: "n", a: "a"]): {
>v2 : (n: "n", a: "a") => { a: [n: "n", a: "a"]; n: unique symbol; }
>   : ^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^   
>(...a: [n: "n", a: "a"]): {    /** r rest param */    a: typeof a,    /** module var */    n: typeof n,} => {    return null!} : (n: "n", a: "a") => { a: [n: "n", a: "a"]; n: unique symbol; }
>                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^   
>a : [n: "n", a: "a"]
>  : ^^^^^^^^^^^^^^^^

    /** r rest param */
    a: typeof a,
>a : [n: "n", a: "a"]
>  : ^^^^^^^^^^^^^^^^
>a : [n: "n", a: "a"]
>  : ^^^^^^^^^^^^^^^^

    /** module var */
    n: typeof n,
>n : unique symbol
>  : ^^^^^^^^^^^^^
>n : unique symbol
>  : ^^^^^^^^^^^^^

} => {
    return null!
>null! : null
>      : ^^^^
}
