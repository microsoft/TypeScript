//// [tests/cases/compiler/declarationEmitUsingTypeAlias1.ts] ////

=== node_modules/some-dep/dist/inner.d.ts ===
export declare type Other = { other: string };
>Other : Symbol(Other, Decl(inner.d.ts, 0, 0))
>other : Symbol(other, Decl(inner.d.ts, 0, 29))

export declare type SomeType = { arg: Other };
>SomeType : Symbol(SomeType, Decl(inner.d.ts, 0, 46))
>arg : Symbol(arg, Decl(inner.d.ts, 1, 32))
>Other : Symbol(Other, Decl(inner.d.ts, 0, 0))

=== node_modules/some-dep/dist/index.d.ts ===
export type OtherType = import('./inner').Other;
>OtherType : Symbol(OtherType, Decl(index.d.ts, 0, 0))
>Other : Symbol(Other, Decl(inner.d.ts, 0, 0))

export type SomeType = import('./inner').SomeType;
>SomeType : Symbol(SomeType, Decl(index.d.ts, 0, 48))
>SomeType : Symbol(SomeType, Decl(inner.d.ts, 0, 46))

=== src/index.ts ===
import { SomeType } from "some-dep";
>SomeType : Symbol(SomeType, Decl(index.ts, 0, 8))

export const foo = (thing: SomeType) => {
>foo : Symbol(foo, Decl(index.ts, 2, 12))
>thing : Symbol(thing, Decl(index.ts, 2, 20))
>SomeType : Symbol(SomeType, Decl(index.ts, 0, 8))

  return thing;
>thing : Symbol(thing, Decl(index.ts, 2, 20))

};

export const bar = (thing: SomeType) => {
>bar : Symbol(bar, Decl(index.ts, 6, 12))
>thing : Symbol(thing, Decl(index.ts, 6, 20))
>SomeType : Symbol(SomeType, Decl(index.ts, 0, 8))

  return thing.arg;
>thing.arg : Symbol(arg, Decl(inner.d.ts, 1, 32))
>thing : Symbol(thing, Decl(index.ts, 6, 20))
>arg : Symbol(arg, Decl(inner.d.ts, 1, 32))

};
