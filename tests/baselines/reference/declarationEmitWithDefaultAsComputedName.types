//// [tests/cases/compiler/declarationEmitWithDefaultAsComputedName.ts] ////

=== other.ts ===
type Experiment<Name> = {
>Experiment : Experiment<Name>
>           : ^^^^^^^^^^^^^^^^

    name: Name;
>name : Name
>     : ^^^^

};
declare const createExperiment: <Name extends string>(
>createExperiment : <Name extends string>(options: Experiment<Name>) => Experiment<Name>
>                 : ^    ^^^^^^^^^      ^^       ^^                ^^^^^                

    options: Experiment<Name>
>options : Experiment<Name>
>        : ^^^^^^^^^^^^^^^^

) => Experiment<Name>;
export default createExperiment({
>createExperiment({    name: "foo"}) : Experiment<"foo">
>                                    : ^^^^^^^^^^^^^^^^^
>createExperiment : <Name extends string>(options: Experiment<Name>) => Experiment<Name>
>                 : ^    ^^^^^^^^^      ^^       ^^                ^^^^^                
>{    name: "foo"} : { name: "foo"; }
>                  : ^^^^^^^^^^^^^^^^

    name: "foo"
>name : "foo"
>     : ^^^^^
>"foo" : "foo"
>      : ^^^^^

});

=== main.ts ===
import other from "./other";
>other : { name: "foo"; }
>      : ^^^^^^^^^^^^^^^^

export const obj = {
>obj : { foo: number; }
>    : ^^^^^^^^^^^^^^^^
>{    [other.name]: 1,} : { foo: number; }
>                       : ^^^^^^^^^^^^^^^^

    [other.name]: 1,
>[other.name] : number
>             : ^^^^^^
>other.name : "foo"
>           : ^^^^^
>other : { name: "foo"; }
>      : ^^^^^^^^^^^^^^^^
>name : "foo"
>     : ^^^^^
>1 : 1
>  : ^

};
