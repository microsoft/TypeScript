//// [tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithNumberTypeInvalidOperations.ts] ////

=== decrementOperatorWithNumberTypeInvalidOperations.ts ===
// -- operator on number type
var NUMBER: number;
>NUMBER : number
>       : ^^^^^^

var NUMBER1: number[] = [1, 2];
>NUMBER1 : number[]
>        : ^^^^^^^^
>[1, 2] : number[]
>       : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

function foo(): number { return 1; }
>foo : () => number
>    : ^^^^^^      
>1 : 1
>  : ^

class A {
>A : A
>  : ^

    public a: number;
>a : number
>  : ^^^^^^

    static foo() { return 1; }
>foo : () => number
>    : ^^^^^^^^^^^^
>1 : 1
>  : ^
}
module M {
>M : typeof M
>  : ^^^^^^^^

    export var n: number;
>n : number
>  : ^^^^^^
}

var objA = new A();
>objA : A
>     : ^
>new A() : A
>        : ^
>A : typeof A
>  : ^^^^^^^^

//number type var
var ResultIsNumber1 = --NUMBER1;
>ResultIsNumber1 : number
>                : ^^^^^^
>--NUMBER1 : number
>          : ^^^^^^
>NUMBER1 : number[]
>        : ^^^^^^^^

var ResultIsNumber2 = NUMBER1--;
>ResultIsNumber2 : number
>                : ^^^^^^
>NUMBER1-- : number
>          : ^^^^^^
>NUMBER1 : number[]
>        : ^^^^^^^^

// number type literal
var ResultIsNumber3 = --1;
>ResultIsNumber3 : number
>                : ^^^^^^
>--1 : number
>    : ^^^^^^
>1 : 1
>  : ^

var ResultIsNumber4 = --{ x: 1, y: 2};
>ResultIsNumber4 : number
>                : ^^^^^^
>--{ x: 1, y: 2} : number
>                : ^^^^^^
>{ x: 1, y: 2} : { x: number; y: number; }
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^

var ResultIsNumber5 = --{ x: 1, y: (n: number) => { return n; } };
>ResultIsNumber5 : number
>                : ^^^^^^
>--{ x: 1, y: (n: number) => { return n; } } : number
>                                            : ^^^^^^
>{ x: 1, y: (n: number) => { return n; } } : { x: number; y: (n: number) => number; }
>                                          : ^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : (n: number) => number
>  : ^ ^^      ^^^^^^^^^^^
>(n: number) => { return n; } : (n: number) => number
>                             : ^ ^^      ^^^^^^^^^^^
>n : number
>  : ^^^^^^
>n : number
>  : ^^^^^^

var ResultIsNumber6 = 1--;
>ResultIsNumber6 : number
>                : ^^^^^^
>1-- : number
>    : ^^^^^^
>1 : 1
>  : ^

var ResultIsNumber7 = { x: 1, y: 2 }--;
>ResultIsNumber7 : number
>                : ^^^^^^
>{ x: 1, y: 2 }-- : number
>                 : ^^^^^^
>{ x: 1, y: 2 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^

var ResultIsNumber8 = { x: 1, y: (n: number) => { return n; } }--;
>ResultIsNumber8 : number
>                : ^^^^^^
>{ x: 1, y: (n: number) => { return n; } }-- : number
>                                            : ^^^^^^
>{ x: 1, y: (n: number) => { return n; } } : { x: number; y: (n: number) => number; }
>                                          : ^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : (n: number) => number
>  : ^ ^^      ^^^^^^^^^^^
>(n: number) => { return n; } : (n: number) => number
>                             : ^ ^^      ^^^^^^^^^^^
>n : number
>  : ^^^^^^
>n : number
>  : ^^^^^^

// number type expressions
var ResultIsNumber9 = --foo();
>ResultIsNumber9 : number
>                : ^^^^^^
>--foo() : number
>        : ^^^^^^
>foo() : number
>      : ^^^^^^
>foo : () => number
>    : ^^^^^^      

var ResultIsNumber10 = --A.foo();
>ResultIsNumber10 : number
>                 : ^^^^^^
>--A.foo() : number
>          : ^^^^^^
>A.foo() : number
>        : ^^^^^^
>A.foo : () => number
>      : ^^^^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
>foo : () => number
>    : ^^^^^^^^^^^^

var ResultIsNumber11 = --(NUMBER + NUMBER);
>ResultIsNumber11 : number
>                 : ^^^^^^
>--(NUMBER + NUMBER) : number
>                    : ^^^^^^
>(NUMBER + NUMBER) : number
>                  : ^^^^^^
>NUMBER + NUMBER : number
>                : ^^^^^^
>NUMBER : number
>       : ^^^^^^
>NUMBER : number
>       : ^^^^^^

var ResultIsNumber12 = foo()--;
>ResultIsNumber12 : number
>                 : ^^^^^^
>foo()-- : number
>        : ^^^^^^
>foo() : number
>      : ^^^^^^
>foo : () => number
>    : ^^^^^^      

var ResultIsNumber13 = A.foo()--;
>ResultIsNumber13 : number
>                 : ^^^^^^
>A.foo()-- : number
>          : ^^^^^^
>A.foo() : number
>        : ^^^^^^
>A.foo : () => number
>      : ^^^^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
>foo : () => number
>    : ^^^^^^^^^^^^

var ResultIsNumber14 = (NUMBER + NUMBER)--;
>ResultIsNumber14 : number
>                 : ^^^^^^
>(NUMBER + NUMBER)-- : number
>                    : ^^^^^^
>(NUMBER + NUMBER) : number
>                  : ^^^^^^
>NUMBER + NUMBER : number
>                : ^^^^^^
>NUMBER : number
>       : ^^^^^^
>NUMBER : number
>       : ^^^^^^

// miss assignment operator
--1;
>--1 : number
>    : ^^^^^^
>1 : 1
>  : ^

--NUMBER1;
>--NUMBER1 : number
>          : ^^^^^^
>NUMBER1 : number[]
>        : ^^^^^^^^

--foo();
>--foo() : number
>        : ^^^^^^
>foo() : number
>      : ^^^^^^
>foo : () => number
>    : ^^^^^^      

1--;
>1-- : number
>    : ^^^^^^
>1 : 1
>  : ^

NUMBER1--;
>NUMBER1-- : number
>          : ^^^^^^
>NUMBER1 : number[]
>        : ^^^^^^^^

foo()--;
>foo()-- : number
>        : ^^^^^^
>foo() : number
>      : ^^^^^^
>foo : () => number
>    : ^^^^^^      

