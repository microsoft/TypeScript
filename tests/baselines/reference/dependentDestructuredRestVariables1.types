//// [tests/cases/conformance/controlFlow/dependentDestructuredRestVariables1.tsx] ////

=== Performance Stats ===
Assignability cache: 2,500
Type Count: 10,000
Instantiation count: 100,000
Symbol count: 50,000

=== dependentDestructuredRestVariables1.tsx ===
/// <reference path="react16.d.ts" />

import React from "react";
>React : typeof React
>      : ^^^^^^^^^^^^

// https://github.com/microsoft/TypeScript/issues/46680

type Action1 = { kind: "A"; payload: number } | { kind: "B"; payload: string };
>Action1 : Action1
>        : ^^^^^^^
>kind : "A"
>     : ^^^
>payload : number
>        : ^^^^^^
>kind : "B"
>     : ^^^
>payload : string
>        : ^^^^^^

function example1({ kind, ...rest }: Action1) {
>example1 : ({ kind, ...rest }: Action1) => void
>         : ^                 ^^       ^^^^^^^^^
>kind : "A" | "B"
>     : ^^^^^^^^^
>rest : { payload: number; } | { payload: string; }
>     : ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^      ^^^

  if (kind === "A") {
>kind === "A" : boolean
>             : ^^^^^^^
>kind : "A" | "B"
>     : ^^^^^^^^^
>"A" : "A"
>    : ^^^

    rest.payload.toFixed();
>rest.payload.toFixed() : string
>                       : ^^^^^^
>rest.payload.toFixed : (fractionDigits?: number) => string
>                     : ^              ^^^      ^^^^^      
>rest.payload : number
>             : ^^^^^^
>rest : { payload: number; }
>     : ^^^^^^^^^^^      ^^^
>payload : number
>        : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      
  }
  if (kind === "B") {
>kind === "B" : boolean
>             : ^^^^^^^
>kind : "A" | "B"
>     : ^^^^^^^^^
>"B" : "B"
>    : ^^^

    rest.payload.toUpperCase();
>rest.payload.toUpperCase() : string
>                           : ^^^^^^
>rest.payload.toUpperCase : () => string
>                         : ^^^^^^      
>rest.payload : string
>             : ^^^^^^
>rest : { payload: string; }
>     : ^^^^^^^^^^^      ^^^
>payload : string
>        : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
  }
}

type Action2 = [kind: "A", payload: number] | [kind: "B", payload: string];
>Action2 : Action2
>        : ^^^^^^^

function example2([kind, ...rest]: Action2) {
>example2 : ([kind, ...rest]: Action2) => void
>         : ^               ^^       ^^^^^^^^^
>kind : "A" | "B"
>     : ^^^^^^^^^
>rest : [payload: number] | [payload: string]
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  if (kind === "A") {
>kind === "A" : boolean
>             : ^^^^^^^
>kind : "A" | "B"
>     : ^^^^^^^^^
>"A" : "A"
>    : ^^^

    rest[0].toFixed();
>rest[0].toFixed() : string
>                  : ^^^^^^
>rest[0].toFixed : (fractionDigits?: number) => string
>                : ^              ^^^      ^^^^^      
>rest[0] : number
>        : ^^^^^^
>rest : [payload: number]
>     : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      
  }
  if (kind === "B") {
>kind === "B" : boolean
>             : ^^^^^^^
>kind : "A" | "B"
>     : ^^^^^^^^^
>"B" : "B"
>    : ^^^

    rest[0].toUpperCase();
>rest[0].toUpperCase() : string
>                      : ^^^^^^
>rest[0].toUpperCase : () => string
>                    : ^^^^^^      
>rest[0] : string
>        : ^^^^^^
>rest : [payload: string]
>     : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>toUpperCase : () => string
>            : ^^^^^^      
  }
}

type Props1 =
>Props1 : Props1
>       : ^^^^^^

  | ({ as: "div" } & React.ComponentPropsWithRef<"div">)
>as : "div"
>   : ^^^^^
>React : any
>      : ^^^

  | ({ as: "span" } & React.ComponentPropsWithRef<"span">);
>as : "span"
>   : ^^^^^^
>React : any
>      : ^^^

function MyComponent1({ as, ...rest }: Props1) {
>MyComponent1 : ({ as, ...rest }: Props1) => JSX.Element | undefined
>             : ^               ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>as : "div" | "span"
>   : ^^^^^^^^^^^^^^
>rest : { children?: React.ReactNode; style?: React.CSSProperties | undefined; title?: string | undefined; defaultChecked?: boolean | undefined; defaultValue?: string | string[] | undefined; suppressContentEditableWarning?: boolean | undefined; suppressHydrationWarning?: boolean | undefined; accessKey?: string | undefined; className?: string | undefined; contentEditable?: boolean | undefined; contextMenu?: string | undefined; dir?: string | undefined; draggable?: boolean | undefined; hidden?: boolean | undefined; id?: string | undefined; lang?: string | undefined; placeholder?: string | undefined; slot?: string | undefined; spellCheck?: boolean | undefined; tabIndex?: number | undefined; inputMode?: string | undefined; is?: string | undefined; radioGroup?: string | undefined; role?: string | undefined; about?: string | undefined; datatype?: string | undefined; inlist?: any; prefix?: string | undefined; property?: string | undefined; resource?: string | undefined; typeof?: string | undefined; vocab?: string | undefined; autoCapitalize?: string | undefined; autoCorrect?: string | undefined; autoSave?: string | undefined; color?: string | undefined; itemProp?: string | undefined; itemScope?: boolean | undefined; itemType?: string | undefined; itemID?: string | undefined; itemRef?: string | undefined; results?: number | undefined; security?: string | undefined; unselectable?: "on" | "off" | undefined; 'aria-activedescendant'?: string | undefined; 'aria-atomic'?: boolean | "false" | "true" | undefined; 'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined; 'aria-busy'?: boolean | "false" | "true" | undefined; 'aria-checked'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-colcount'?: number | undefined; 'aria-colindex'?: number | undefined; 'aria-colspan'?: number | undefined; 'aria-controls'?: string | undefined; 'aria-current'?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined; 'aria-describedby'?: string | undefined; 'aria-details'?: string | undefined; 'aria-disabled'?: boolean | "false" | "true" | undefined; 'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined; 'aria-errormessage'?: string | undefined; 'aria-expanded'?: boolean | "false" | "true" | undefined; 'aria-flowto'?: string | undefined; 'aria-grabbed'?: boolean | "false" | "true" | undefined; 'aria-haspopup'?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined; 'aria-hidden'?: boolean | "false" | "true" | undefined; 'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined; 'aria-keyshortcuts'?: string | undefined; 'aria-label'?: string | undefined; 'aria-labelledby'?: string | undefined; 'aria-level'?: number | undefined; 'aria-live'?: "off" | "assertive" | "polite" | undefined; 'aria-modal'?: boolean | "false" | "true" | undefined; 'aria-multiline'?: boolean | "false" | "true" | undefined; 'aria-multiselectable'?: boolean | "false" | "true" | undefined; 'aria-orientation'?: "horizontal" | "vertical" | undefined; 'aria-owns'?: string | undefined; 'aria-placeholder'?: string | undefined; 'aria-posinset'?: number | undefined; 'aria-pressed'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-readonly'?: boolean | "false" | "true" | undefined; 'aria-relevant'?: "additions" | "additions text" | "all" | "removals" | "text" | undefined; 'aria-required'?: boolean | "false" | "true" | undefined; 'aria-roledescription'?: string | undefined; 'aria-rowcount'?: number | undefined; 'aria-rowindex'?: number | undefined; 'aria-rowspan'?: number | undefined; 'aria-selected'?: boolean | "false" | "true" | undefined; 'aria-setsize'?: number | undefined; 'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined; 'aria-valuemax'?: number | undefined; 'aria-valuemin'?: number | undefined; 'aria-valuenow'?: number | undefined; 'aria-valuetext'?: string | undefined; dangerouslySetInnerHTML?: { __html: string; } | undefined; onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined; onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onChange?: React.FormEventHandler<HTMLDivElement> | undefined; onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInput?: React.FormEventHandler<HTMLDivElement> | undefined; onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onReset?: React.FormEventHandler<HTMLDivElement> | undefined; onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onError?: React.ReactEventHandler<HTMLDivElement> | undefined; onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined; onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined; onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPause?: React.ReactEventHandler<HTMLDivElement> | undefined; onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDrag?: React.DragEventHandler<HTMLDivElement> | undefined; onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDrop?: React.DragEventHandler<HTMLDivElement> | undefined; onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined; onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onScroll?: React.UIEventHandler<HTMLDivElement> | undefined; onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined; onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined; onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined; onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined; key?: React.Key | undefined; ref?: ((instance: HTMLDivElement | null) => any) | React.RefObject<HTMLDivElement> | undefined; } | { children?: React.ReactNode; style?: React.CSSProperties | undefined; title?: string | undefined; defaultChecked?: boolean | undefined; defaultValue?: string | string[] | undefined; suppressContentEditableWarning?: boolean | undefined; suppressHydrationWarning?: boolean | undefined; accessKey?: string | undefined; className?: string | undefined; contentEditable?: boolean | undefined; contextMenu?: string | undefined; dir?: string | undefined; draggable?: boolean | undefined; hidden?: boolean | undefined; id?: string | undefined; lang?: string | undefined; placeholder?: string | undefined; slot?: string | undefined; spellCheck?: boolean | undefined; tabIndex?: number | undefined; inputMode?: string | undefined; is?: string | undefined; radioGroup?: string | undefined; role?: string | undefined; about?: string | undefined; datatype?: string | undefined; inlist?: any; prefix?: string | undefined; property?: string | undefined; resource?: string | undefined; typeof?: string | undefined; vocab?: string | undefined; autoCapitalize?: string | undefined; autoCorrect?: string | undefined; autoSave?: string | undefined; color?: string | undefined; itemProp?: string | undefined; itemScope?: boolean | undefined; itemType?: string | undefined; itemID?: string | undefined; itemRef?: string | undefined; results?: number | undefined; security?: string | undefined; unselectable?: "on" | "off" | undefined; 'aria-activedescendant'?: string | undefined; 'aria-atomic'?: boolean | "false" | "true" | undefined; 'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined; 'aria-busy'?: boolean | "false" | "true" | undefined; 'aria-checked'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-colcount'?: number | undefined; 'aria-colindex'?: number | undefined; 'aria-colspan'?: number | undefined; 'aria-controls'?: string | undefined; 'aria-current'?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined; 'aria-describedby'?: string | undefined; 'aria-details'?: string | undefined; 'aria-disabled'?: boolean | "false" | "true" | undefined; 'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined; 'aria-errormessage'?: string | undefined; 'aria-expanded'?: boolean | "false" | "true" | undefined; 'aria-flowto'?: string | undefined; 'aria-grabbed'?: boolean | "false" | "true" | undefined; 'aria-haspopup'?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined; 'aria-hidden'?: boolean | "false" | "true" | undefined; 'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined; 'aria-keyshortcuts'?: string | undefined; 'aria-label'?: string | undefined; 'aria-labelledby'?: string | undefined; 'aria-level'?: number | undefined; 'aria-live'?: "off" | "assertive" | "polite" | undefined; 'aria-modal'?: boolean | "false" | "true" | undefined; 'aria-multiline'?: boolean | "false" | "true" | undefined; 'aria-multiselectable'?: boolean | "false" | "true" | undefined; 'aria-orientation'?: "horizontal" | "vertical" | undefined; 'aria-owns'?: string | undefined; 'aria-placeholder'?: string | undefined; 'aria-posinset'?: number | undefined; 'aria-pressed'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-readonly'?: boolean | "false" | "true" | undefined; 'aria-relevant'?: "additions" | "additions text" | "all" | "removals" | "text" | undefined; 'aria-required'?: boolean | "false" | "true" | undefined; 'aria-roledescription'?: string | undefined; 'aria-rowcount'?: number | undefined; 'aria-rowindex'?: number | undefined; 'aria-rowspan'?: number | undefined; 'aria-selected'?: boolean | "false" | "true" | undefined; 'aria-setsize'?: number | undefined; 'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined; 'aria-valuemax'?: number | undefined; 'aria-valuemin'?: number | undefined; 'aria-valuenow'?: number | undefined; 'aria-valuetext'?: string | undefined; dangerouslySetInnerHTML?: { __html: string; } | undefined; onCopy?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCut?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCutCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onPaste?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionStart?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onFocus?: React.FocusEventHandler<HTMLSpanElement> | undefined; onFocusCapture?: React.FocusEventHandler<HTMLSpanElement> | undefined; onBlur?: React.FocusEventHandler<HTMLSpanElement> | undefined; onBlurCapture?: React.FocusEventHandler<HTMLSpanElement> | undefined; onChange?: React.FormEventHandler<HTMLSpanElement> | undefined; onChangeCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onInput?: React.FormEventHandler<HTMLSpanElement> | undefined; onInputCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onReset?: React.FormEventHandler<HTMLSpanElement> | undefined; onResetCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onSubmit?: React.FormEventHandler<HTMLSpanElement> | undefined; onSubmitCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onInvalid?: React.FormEventHandler<HTMLSpanElement> | undefined; onInvalidCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onLoad?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onError?: React.ReactEventHandler<HTMLSpanElement> | undefined; onErrorCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onKeyDown?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyPress?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyUp?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onAbort?: React.ReactEventHandler<HTMLSpanElement> | undefined; onAbortCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlay?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onDurationChange?: React.ReactEventHandler<HTMLSpanElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEmptied?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEncrypted?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEnded?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEndedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedData?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadStart?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPause?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPauseCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlay?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlayCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlaying?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlayingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onProgress?: React.ReactEventHandler<HTMLSpanElement> | undefined; onProgressCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onRateChange?: React.ReactEventHandler<HTMLSpanElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeeked?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeekedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeeking?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeekingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onStalled?: React.ReactEventHandler<HTMLSpanElement> | undefined; onStalledCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSuspend?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSuspendCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onTimeUpdate?: React.ReactEventHandler<HTMLSpanElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onVolumeChange?: React.ReactEventHandler<HTMLSpanElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onWaiting?: React.ReactEventHandler<HTMLSpanElement> | undefined; onWaitingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onClick?: React.MouseEventHandler<HTMLSpanElement> | undefined; onClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onContextMenu?: React.MouseEventHandler<HTMLSpanElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onDoubleClick?: React.MouseEventHandler<HTMLSpanElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onDrag?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEnd?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEndCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEnter?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEnterCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragExit?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragExitCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragLeave?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragOver?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragOverCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragStart?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragStartCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDrop?: React.DragEventHandler<HTMLSpanElement> | undefined; onDropCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onMouseDown?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseEnter?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseLeave?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseMove?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOut?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOver?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseUp?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onSelect?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSelectCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onTouchCancel?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchEnd?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchMove?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchStart?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onPointerDown?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerMove?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerUp?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerCancel?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerEnter?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerEnterCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerLeave?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerLeaveCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOver?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOut?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onScroll?: React.UIEventHandler<HTMLSpanElement> | undefined; onScrollCapture?: React.UIEventHandler<HTMLSpanElement> | undefined; onWheel?: React.WheelEventHandler<HTMLSpanElement> | undefined; onWheelCapture?: React.WheelEventHandler<HTMLSpanElement> | undefined; onAnimationStart?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<HTMLSpanElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<HTMLSpanElement> | undefined; key?: React.Key | undefined; ref?: ((instance: HTMLSpanElement | null) => any) | React.RefObject<HTMLSpanElement> | undefined; }


  if (as === "div") {
>as === "div" : boolean
>             : ^^^^^^^
>as : "div" | "span"
>   : ^^^^^^^^^^^^^^
>"div" : "div"
>      : ^^^^^

    return <div {...rest} />;
><div {...rest} /> : JSX.Element
>                  : ^^^^^^^^^^^
>div : any
>    : ^^^
>rest : { children?: React.ReactNode; style?: React.CSSProperties | undefined; title?: string | undefined; defaultChecked?: boolean | undefined; defaultValue?: string | string[] | undefined; suppressContentEditableWarning?: boolean | undefined; suppressHydrationWarning?: boolean | undefined; accessKey?: string | undefined; className?: string | undefined; contentEditable?: boolean | undefined; contextMenu?: string | undefined; dir?: string | undefined; draggable?: boolean | undefined; hidden?: boolean | undefined; id?: string | undefined; lang?: string | undefined; placeholder?: string | undefined; slot?: string | undefined; spellCheck?: boolean | undefined; tabIndex?: number | undefined; inputMode?: string | undefined; is?: string | undefined; radioGroup?: string | undefined; role?: string | undefined; about?: string | undefined; datatype?: string | undefined; inlist?: any; prefix?: string | undefined; property?: string | undefined; resource?: string | undefined; typeof?: string | undefined; vocab?: string | undefined; autoCapitalize?: string | undefined; autoCorrect?: string | undefined; autoSave?: string | undefined; color?: string | undefined; itemProp?: string | undefined; itemScope?: boolean | undefined; itemType?: string | undefined; itemID?: string | undefined; itemRef?: string | undefined; results?: number | undefined; security?: string | undefined; unselectable?: "on" | "off" | undefined; 'aria-activedescendant'?: string | undefined; 'aria-atomic'?: boolean | "false" | "true" | undefined; 'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined; 'aria-busy'?: boolean | "false" | "true" | undefined; 'aria-checked'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-colcount'?: number | undefined; 'aria-colindex'?: number | undefined; 'aria-colspan'?: number | undefined; 'aria-controls'?: string | undefined; 'aria-current'?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined; 'aria-describedby'?: string | undefined; 'aria-details'?: string | undefined; 'aria-disabled'?: boolean | "false" | "true" | undefined; 'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined; 'aria-errormessage'?: string | undefined; 'aria-expanded'?: boolean | "false" | "true" | undefined; 'aria-flowto'?: string | undefined; 'aria-grabbed'?: boolean | "false" | "true" | undefined; 'aria-haspopup'?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined; 'aria-hidden'?: boolean | "false" | "true" | undefined; 'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined; 'aria-keyshortcuts'?: string | undefined; 'aria-label'?: string | undefined; 'aria-labelledby'?: string | undefined; 'aria-level'?: number | undefined; 'aria-live'?: "off" | "assertive" | "polite" | undefined; 'aria-modal'?: boolean | "false" | "true" | undefined; 'aria-multiline'?: boolean | "false" | "true" | undefined; 'aria-multiselectable'?: boolean | "false" | "true" | undefined; 'aria-orientation'?: "horizontal" | "vertical" | undefined; 'aria-owns'?: string | undefined; 'aria-placeholder'?: string | undefined; 'aria-posinset'?: number | undefined; 'aria-pressed'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-readonly'?: boolean | "false" | "true" | undefined; 'aria-relevant'?: "additions" | "additions text" | "all" | "removals" | "text" | undefined; 'aria-required'?: boolean | "false" | "true" | undefined; 'aria-roledescription'?: string | undefined; 'aria-rowcount'?: number | undefined; 'aria-rowindex'?: number | undefined; 'aria-rowspan'?: number | undefined; 'aria-selected'?: boolean | "false" | "true" | undefined; 'aria-setsize'?: number | undefined; 'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined; 'aria-valuemax'?: number | undefined; 'aria-valuemin'?: number | undefined; 'aria-valuenow'?: number | undefined; 'aria-valuetext'?: string | undefined; dangerouslySetInnerHTML?: { __html: string; } | undefined; onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined; onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onChange?: React.FormEventHandler<HTMLDivElement> | undefined; onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInput?: React.FormEventHandler<HTMLDivElement> | undefined; onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onReset?: React.FormEventHandler<HTMLDivElement> | undefined; onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onError?: React.ReactEventHandler<HTMLDivElement> | undefined; onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined; onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined; onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPause?: React.ReactEventHandler<HTMLDivElement> | undefined; onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDrag?: React.DragEventHandler<HTMLDivElement> | undefined; onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDrop?: React.DragEventHandler<HTMLDivElement> | undefined; onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined; onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onScroll?: React.UIEventHandler<HTMLDivElement> | undefined; onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined; onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined; onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined; onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined; key?: React.Key | undefined; ref?: ((instance: HTMLDivElement | null) => any) | React.RefObject<HTMLDivElement> | undefined; }

  }
  if (as === "span") {
>as === "span" : boolean
>              : ^^^^^^^
>as : "span"
>   : ^^^^^^
>"span" : "span"
>       : ^^^^^^

    return <span {...rest} />;
><span {...rest} /> : JSX.Element
>                   : ^^^^^^^^^^^
>span : any
>     : ^^^
>rest : { children?: React.ReactNode; style?: React.CSSProperties | undefined; title?: string | undefined; defaultChecked?: boolean | undefined; defaultValue?: string | string[] | undefined; suppressContentEditableWarning?: boolean | undefined; suppressHydrationWarning?: boolean | undefined; accessKey?: string | undefined; className?: string | undefined; contentEditable?: boolean | undefined; contextMenu?: string | undefined; dir?: string | undefined; draggable?: boolean | undefined; hidden?: boolean | undefined; id?: string | undefined; lang?: string | undefined; placeholder?: string | undefined; slot?: string | undefined; spellCheck?: boolean | undefined; tabIndex?: number | undefined; inputMode?: string | undefined; is?: string | undefined; radioGroup?: string | undefined; role?: string | undefined; about?: string | undefined; datatype?: string | undefined; inlist?: any; prefix?: string | undefined; property?: string | undefined; resource?: string | undefined; typeof?: string | undefined; vocab?: string | undefined; autoCapitalize?: string | undefined; autoCorrect?: string | undefined; autoSave?: string | undefined; color?: string | undefined; itemProp?: string | undefined; itemScope?: boolean | undefined; itemType?: string | undefined; itemID?: string | undefined; itemRef?: string | undefined; results?: number | undefined; security?: string | undefined; unselectable?: "on" | "off" | undefined; 'aria-activedescendant'?: string | undefined; 'aria-atomic'?: boolean | "false" | "true" | undefined; 'aria-autocomplete'?: "none" | "inline" | "list" | "both" | undefined; 'aria-busy'?: boolean | "false" | "true" | undefined; 'aria-checked'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-colcount'?: number | undefined; 'aria-colindex'?: number | undefined; 'aria-colspan'?: number | undefined; 'aria-controls'?: string | undefined; 'aria-current'?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined; 'aria-describedby'?: string | undefined; 'aria-details'?: string | undefined; 'aria-disabled'?: boolean | "false" | "true" | undefined; 'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined; 'aria-errormessage'?: string | undefined; 'aria-expanded'?: boolean | "false" | "true" | undefined; 'aria-flowto'?: string | undefined; 'aria-grabbed'?: boolean | "false" | "true" | undefined; 'aria-haspopup'?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined; 'aria-hidden'?: boolean | "false" | "true" | undefined; 'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined; 'aria-keyshortcuts'?: string | undefined; 'aria-label'?: string | undefined; 'aria-labelledby'?: string | undefined; 'aria-level'?: number | undefined; 'aria-live'?: "off" | "assertive" | "polite" | undefined; 'aria-modal'?: boolean | "false" | "true" | undefined; 'aria-multiline'?: boolean | "false" | "true" | undefined; 'aria-multiselectable'?: boolean | "false" | "true" | undefined; 'aria-orientation'?: "horizontal" | "vertical" | undefined; 'aria-owns'?: string | undefined; 'aria-placeholder'?: string | undefined; 'aria-posinset'?: number | undefined; 'aria-pressed'?: boolean | "false" | "mixed" | "true" | undefined; 'aria-readonly'?: boolean | "false" | "true" | undefined; 'aria-relevant'?: "additions" | "additions text" | "all" | "removals" | "text" | undefined; 'aria-required'?: boolean | "false" | "true" | undefined; 'aria-roledescription'?: string | undefined; 'aria-rowcount'?: number | undefined; 'aria-rowindex'?: number | undefined; 'aria-rowspan'?: number | undefined; 'aria-selected'?: boolean | "false" | "true" | undefined; 'aria-setsize'?: number | undefined; 'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined; 'aria-valuemax'?: number | undefined; 'aria-valuemin'?: number | undefined; 'aria-valuenow'?: number | undefined; 'aria-valuetext'?: string | undefined; dangerouslySetInnerHTML?: { __html: string; } | undefined; onCopy?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCut?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCutCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onPaste?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionStart?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined; onFocus?: React.FocusEventHandler<HTMLSpanElement> | undefined; onFocusCapture?: React.FocusEventHandler<HTMLSpanElement> | undefined; onBlur?: React.FocusEventHandler<HTMLSpanElement> | undefined; onBlurCapture?: React.FocusEventHandler<HTMLSpanElement> | undefined; onChange?: React.FormEventHandler<HTMLSpanElement> | undefined; onChangeCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onInput?: React.FormEventHandler<HTMLSpanElement> | undefined; onInputCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onReset?: React.FormEventHandler<HTMLSpanElement> | undefined; onResetCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onSubmit?: React.FormEventHandler<HTMLSpanElement> | undefined; onSubmitCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onInvalid?: React.FormEventHandler<HTMLSpanElement> | undefined; onInvalidCapture?: React.FormEventHandler<HTMLSpanElement> | undefined; onLoad?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onError?: React.ReactEventHandler<HTMLSpanElement> | undefined; onErrorCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onKeyDown?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyPress?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyUp?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined; onAbort?: React.ReactEventHandler<HTMLSpanElement> | undefined; onAbortCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlay?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<HTMLSpanElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onDurationChange?: React.ReactEventHandler<HTMLSpanElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEmptied?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEncrypted?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEnded?: React.ReactEventHandler<HTMLSpanElement> | undefined; onEndedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedData?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadStart?: React.ReactEventHandler<HTMLSpanElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPause?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPauseCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlay?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlayCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlaying?: React.ReactEventHandler<HTMLSpanElement> | undefined; onPlayingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onProgress?: React.ReactEventHandler<HTMLSpanElement> | undefined; onProgressCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onRateChange?: React.ReactEventHandler<HTMLSpanElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeeked?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeekedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeeking?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSeekingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onStalled?: React.ReactEventHandler<HTMLSpanElement> | undefined; onStalledCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSuspend?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSuspendCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onTimeUpdate?: React.ReactEventHandler<HTMLSpanElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onVolumeChange?: React.ReactEventHandler<HTMLSpanElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onWaiting?: React.ReactEventHandler<HTMLSpanElement> | undefined; onWaitingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onClick?: React.MouseEventHandler<HTMLSpanElement> | undefined; onClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onContextMenu?: React.MouseEventHandler<HTMLSpanElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onDoubleClick?: React.MouseEventHandler<HTMLSpanElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onDrag?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEnd?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEndCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEnter?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragEnterCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragExit?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragExitCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragLeave?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragOver?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragOverCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragStart?: React.DragEventHandler<HTMLSpanElement> | undefined; onDragStartCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onDrop?: React.DragEventHandler<HTMLSpanElement> | undefined; onDropCapture?: React.DragEventHandler<HTMLSpanElement> | undefined; onMouseDown?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseEnter?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseLeave?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseMove?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOut?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOver?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseUp?: React.MouseEventHandler<HTMLSpanElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined; onSelect?: React.ReactEventHandler<HTMLSpanElement> | undefined; onSelectCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined; onTouchCancel?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchEnd?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchMove?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchStart?: React.TouchEventHandler<HTMLSpanElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined; onPointerDown?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerMove?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerUp?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerCancel?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerEnter?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerEnterCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerLeave?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerLeaveCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOver?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOut?: React.PointerEventHandler<HTMLSpanElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined; onScroll?: React.UIEventHandler<HTMLSpanElement> | undefined; onScrollCapture?: React.UIEventHandler<HTMLSpanElement> | undefined; onWheel?: React.WheelEventHandler<HTMLSpanElement> | undefined; onWheelCapture?: React.WheelEventHandler<HTMLSpanElement> | undefined; onAnimationStart?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<HTMLSpanElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<HTMLSpanElement> | undefined; key?: React.Key | undefined; ref?: ((instance: HTMLSpanElement | null) => any) | React.RefObject<HTMLSpanElement> | undefined; }

  }
}

type Params1 = {
>Params1 : Params1
>        : ^^^^^^^

  foo: string;
>foo : string
>    : ^^^^^^

} & ({ tag: "a"; type: number } | { tag: "b"; type: string });
>tag : "a"
>    : ^^^
>type : number
>     : ^^^^^^
>tag : "b"
>    : ^^^
>type : string
>     : ^^^^^^

const fn1 = <P extends Params1>(params: P) => {
>fn1 : <P extends Params1>(params: P) => Omit<P, "foo"> | undefined
>    : ^ ^^^^^^^^^       ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><P extends Params1>(params: P) => {  const { foo, ...rest } = params;  if (rest.tag === "a") {    rest.type.toFixed(); // ok    return rest; // Omit<P, "foo">  }  return undefined;} : <P extends Params1>(params: P) => Omit<P, "foo"> | undefined
>                                                                                                                                                                                      : ^ ^^^^^^^^^       ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>params : P
>       : ^

  const { foo, ...rest } = params;
>foo : string
>    : ^^^^^^
>rest : Omit<P, "foo">
>     : ^^^^^^^^^^^^^^
>params : Params1
>       : ^^^^^^^

  if (rest.tag === "a") {
>rest.tag === "a" : boolean
>                 : ^^^^^^^
>rest.tag : "a" | "b"
>         : ^^^^^^^^^
>rest : { tag: "a"; type: number; } | { tag: "b"; type: string; }
>     : ^^^^^^^   ^^^^^^^^      ^^^^^^^^^^^^^   ^^^^^^^^      ^^^
>tag : "a" | "b"
>    : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    rest.type.toFixed(); // ok
>rest.type.toFixed() : string
>                    : ^^^^^^
>rest.type.toFixed : (fractionDigits?: number) => string
>                  : ^              ^^^      ^^^^^      
>rest.type : number
>          : ^^^^^^
>rest : { tag: "a"; type: number; }
>     : ^^^^^^^   ^^^^^^^^      ^^^
>type : number
>     : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      

    return rest; // Omit<P, "foo">
>rest : Omit<P, "foo">
>     : ^^^^^^^^^^^^^^
  }

  return undefined;
>undefined : undefined
>          : ^^^^^^^^^

};

const fn2 = <P extends Params1>({ foo, ...rest }: P) => {
>fn2 : <P extends Params1>({ foo, ...rest }: P) => Omit<P, "foo"> | undefined
>    : ^ ^^^^^^^^^       ^^                ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><P extends Params1>({ foo, ...rest }: P) => {  if (rest.tag === "a") {    rest.type.toFixed(); // ok    return rest; // Omit<P, "foo">  }  return undefined;} : <P extends Params1>({ foo, ...rest }: P) => Omit<P, "foo"> | undefined
>                                                                                                                                                              : ^ ^^^^^^^^^       ^^                ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>rest : Omit<P, "foo">
>     : ^^^^^^^^^^^^^^

  if (rest.tag === "a") {
>rest.tag === "a" : boolean
>                 : ^^^^^^^
>rest.tag : "a" | "b"
>         : ^^^^^^^^^
>rest : { tag: "a"; type: number; } | { tag: "b"; type: string; }
>     : ^^^^^^^   ^^^^^^^^      ^^^^^^^^^^^^^   ^^^^^^^^      ^^^
>tag : "a" | "b"
>    : ^^^^^^^^^
>"a" : "a"
>    : ^^^

    rest.type.toFixed(); // ok
>rest.type.toFixed() : string
>                    : ^^^^^^
>rest.type.toFixed : (fractionDigits?: number) => string
>                  : ^              ^^^      ^^^^^      
>rest.type : number
>          : ^^^^^^
>rest : { tag: "a"; type: number; }
>     : ^^^^^^^   ^^^^^^^^      ^^^
>type : number
>     : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      

    return rest; // Omit<P, "foo">
>rest : Omit<P, "foo">
>     : ^^^^^^^^^^^^^^
  }

  return undefined;
>undefined : undefined
>          : ^^^^^^^^^

};

// https://github.com/microsoft/TypeScript/issues/53947

function ImageAvatar(props: { className?: string; src: string }) {
>ImageAvatar : (props: { className?: string; src: string; }) => null
>            : ^     ^^                                    ^^^^^^^^^
>props : { className?: string; src: string; }
>      : ^^^^^^^^^^^^^^      ^^^^^^^      ^^^
>className : string | undefined
>          : ^^^^^^^^^^^^^^^^^^
>src : string
>    : ^^^^^^

  return null;
}

function InitialsAvatar(props: { className?: string; name: string }) {
>InitialsAvatar : (props: { className?: string; name: string; }) => null
>               : ^     ^^                                     ^^^^^^^^^
>props : { className?: string; name: string; }
>      : ^^^^^^^^^^^^^^      ^^^^^^^^      ^^^
>className : string | undefined
>          : ^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

  return null;
}

type AvatarProps =
>AvatarProps : AvatarProps
>            : ^^^^^^^^^^^

  | { type: "image"; src: string; className: string }
>type : "image"
>     : ^^^^^^^
>src : string
>    : ^^^^^^
>className : string
>          : ^^^^^^

  | { type: "initials"; name: string; className: string };
>type : "initials"
>     : ^^^^^^^^^^
>name : string
>     : ^^^^^^
>className : string
>          : ^^^^^^

const Avatar = ({ type, className, ...rest }: AvatarProps) => {
>Avatar : ({ type, className, ...rest }: AvatarProps) => JSX.Element
>       : ^                            ^^           ^^^^^^^^^^^^^^^^
>({ type, className, ...rest }: AvatarProps) => {  if (type === "image") {    return <ImageAvatar className={className} {...rest} />;  }  if (type === "initials") {    return <InitialsAvatar className={className} {...rest} />;  }  throw new Error("");} : ({ type, className, ...rest }: AvatarProps) => JSX.Element
>                                                                                                                                                                                                                                                            : ^                            ^^           ^^^^^^^^^^^^^^^^
>type : "image" | "initials"
>     : ^^^^^^^^^^^^^^^^^^^^
>className : string
>          : ^^^^^^
>rest : { src: string; } | { name: string; }
>     : ^^^^^^^      ^^^^^^^^^^^^^^      ^^^

  if (type === "image") {
>type === "image" : boolean
>                 : ^^^^^^^
>type : "image" | "initials"
>     : ^^^^^^^^^^^^^^^^^^^^
>"image" : "image"
>        : ^^^^^^^

    return <ImageAvatar className={className} {...rest} />;
><ImageAvatar className={className} {...rest} /> : JSX.Element
>                                                : ^^^^^^^^^^^
>ImageAvatar : (props: { className?: string; src: string; }) => null
>            : ^     ^^                                    ^^^^^^^^^
>className : string
>          : ^^^^^^
>className : string
>          : ^^^^^^
>rest : { src: string; }
>     : ^^^^^^^      ^^^
  }

  if (type === "initials") {
>type === "initials" : boolean
>                    : ^^^^^^^
>type : "initials"
>     : ^^^^^^^^^^
>"initials" : "initials"
>           : ^^^^^^^^^^

    return <InitialsAvatar className={className} {...rest} />;
><InitialsAvatar className={className} {...rest} /> : JSX.Element
>                                                   : ^^^^^^^^^^^
>InitialsAvatar : (props: { className?: string; name: string; }) => null
>               : ^     ^^                                     ^^^^^^^^^
>className : string
>          : ^^^^^^
>className : string
>          : ^^^^^^
>rest : { name: string; }
>     : ^^^^^^^^      ^^^
  }

  throw new Error("");
>new Error("") : Error
>              : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>"" : ""
>   : ^^

};

