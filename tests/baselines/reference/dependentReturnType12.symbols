//// [tests/cases/compiler/dependentReturnType12.ts] ////

=== dependentReturnType12.ts ===
// Tests for optionality of parameters and properties.

type RetU<T> =
>RetU : Symbol(RetU, Decl(dependentReturnType12.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType12.ts, 2, 10))

    T extends string ? 2 :
>T : Symbol(T, Decl(dependentReturnType12.ts, 2, 10))

    T extends number ? 1 :
>T : Symbol(T, Decl(dependentReturnType12.ts, 2, 10))

    never;

function fn1<T extends string | number>(param?: T): RetU<T> {
>fn1 : Symbol(fn1, Decl(dependentReturnType12.ts, 5, 10))
>T : Symbol(T, Decl(dependentReturnType12.ts, 7, 13))
>param : Symbol(param, Decl(dependentReturnType12.ts, 7, 40))
>T : Symbol(T, Decl(dependentReturnType12.ts, 7, 13))
>RetU : Symbol(RetU, Decl(dependentReturnType12.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType12.ts, 7, 13))

    if (typeof param === "number") {
>param : Symbol(param, Decl(dependentReturnType12.ts, 7, 40))

        return 1;
    }
    return 2;
}

function fn3<T extends string | number>(param: { prop?: T }): RetU<T> {
>fn3 : Symbol(fn3, Decl(dependentReturnType12.ts, 12, 1))
>T : Symbol(T, Decl(dependentReturnType12.ts, 14, 13))
>param : Symbol(param, Decl(dependentReturnType12.ts, 14, 40))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 14, 48))
>T : Symbol(T, Decl(dependentReturnType12.ts, 14, 13))
>RetU : Symbol(RetU, Decl(dependentReturnType12.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType12.ts, 14, 13))

    if (typeof param.prop === "number") {
>param.prop : Symbol(prop, Decl(dependentReturnType12.ts, 14, 48))
>param : Symbol(param, Decl(dependentReturnType12.ts, 14, 40))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 14, 48))

        return 1;
    }
    return 2;
}

function fn4<T extends string | number>({ prop }: { prop?: T }): RetU<T> {
>fn4 : Symbol(fn4, Decl(dependentReturnType12.ts, 19, 1))
>T : Symbol(T, Decl(dependentReturnType12.ts, 21, 13))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 21, 41))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 21, 51))
>T : Symbol(T, Decl(dependentReturnType12.ts, 21, 13))
>RetU : Symbol(RetU, Decl(dependentReturnType12.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType12.ts, 21, 13))

    if (typeof prop === "number") {
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 21, 41))

        return 1;
    }
    return 2;
}

function fn5<T extends string | number>(param?: { prop: T }): RetU<T> { // Bad.
>fn5 : Symbol(fn5, Decl(dependentReturnType12.ts, 26, 1))
>T : Symbol(T, Decl(dependentReturnType12.ts, 28, 13))
>param : Symbol(param, Decl(dependentReturnType12.ts, 28, 40))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 28, 49))
>T : Symbol(T, Decl(dependentReturnType12.ts, 28, 13))
>RetU : Symbol(RetU, Decl(dependentReturnType12.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType12.ts, 28, 13))

    if (typeof param.prop === "number") {
>param.prop : Symbol(prop, Decl(dependentReturnType12.ts, 28, 49))
>param : Symbol(param, Decl(dependentReturnType12.ts, 28, 40))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 28, 49))

        return 1;
    }
    return 2;
}

function fn6<T extends string | number>(param: { prop1?: { prop?: T } }): RetU<T> { // Bad.
>fn6 : Symbol(fn6, Decl(dependentReturnType12.ts, 33, 1))
>T : Symbol(T, Decl(dependentReturnType12.ts, 35, 13))
>param : Symbol(param, Decl(dependentReturnType12.ts, 35, 40))
>prop1 : Symbol(prop1, Decl(dependentReturnType12.ts, 35, 48))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 35, 58))
>T : Symbol(T, Decl(dependentReturnType12.ts, 35, 13))
>RetU : Symbol(RetU, Decl(dependentReturnType12.ts, 0, 0))
>T : Symbol(T, Decl(dependentReturnType12.ts, 35, 13))

    if (typeof param.prop1.prop === "number") {
>param.prop1.prop : Symbol(prop, Decl(dependentReturnType12.ts, 35, 58))
>param.prop1 : Symbol(prop1, Decl(dependentReturnType12.ts, 35, 48))
>param : Symbol(param, Decl(dependentReturnType12.ts, 35, 40))
>prop1 : Symbol(prop1, Decl(dependentReturnType12.ts, 35, 48))
>prop : Symbol(prop, Decl(dependentReturnType12.ts, 35, 58))

        return 1;
    }
    return 2;
}
