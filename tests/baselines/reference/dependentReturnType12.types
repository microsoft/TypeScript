//// [tests/cases/compiler/dependentReturnType12.ts] ////

=== dependentReturnType12.ts ===
// Tests for optionality of parameters and properties.

type RetU<T> =
>RetU : RetU<T>
>     : ^^^^^^^

    T extends string ? 2 :
    T extends number ? 1 :
    never;

function fn1<T extends string | number>(param?: T): RetU<T> {
>fn1 : <T extends string | number>(param?: T) => RetU<T>
>    : ^ ^^^^^^^^^               ^^     ^^^ ^^^^^       
>param : T
>      : ^

    if (typeof param === "number") {
>typeof param === "number" : boolean
>                          : ^^^^^^^
>typeof param : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>param : T
>      : ^
>"number" : "number"
>         : ^^^^^^^^

        return 1;
>1 : 1
>  : ^
    }
    return 2;
>2 : 2
>  : ^
}

function fn3<T extends string | number>(param: { prop?: T }): RetU<T> {
>fn3 : <T extends string | number>(param: { prop?: T; }) => RetU<T>
>    : ^ ^^^^^^^^^               ^^     ^^             ^^^^^       
>param : { prop?: T; }
>      : ^^^^^^^^^ ^^^
>prop : T
>     : ^

    if (typeof param.prop === "number") {
>typeof param.prop === "number" : boolean
>                               : ^^^^^^^
>typeof param.prop : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>param.prop : T
>           : ^
>param : { prop?: T; }
>      : ^^^^^^^^^ ^^^
>prop : T
>     : ^
>"number" : "number"
>         : ^^^^^^^^

        return 1;
>1 : 1
>  : ^
    }
    return 2;
>2 : 2
>  : ^
}

function fn4<T extends string | number>({ prop }: { prop?: T }): RetU<T> {
>fn4 : <T extends string | number>({ prop }: { prop?: T; }) => RetU<T>
>    : ^ ^^^^^^^^^               ^^        ^^             ^^^^^       
>prop : T
>     : ^
>prop : T
>     : ^

    if (typeof prop === "number") {
>typeof prop === "number" : boolean
>                         : ^^^^^^^
>typeof prop : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>prop : T
>     : ^
>"number" : "number"
>         : ^^^^^^^^

        return 1;
>1 : 1
>  : ^
    }
    return 2;
>2 : 2
>  : ^
}

function fn5<T extends string | number>(param?: { prop: T }): RetU<T> { // Bad.
>fn5 : <T extends string | number>(param?: { prop: T; }) => RetU<T>
>    : ^ ^^^^^^^^^               ^^     ^^^            ^^^^^       
>param : { prop: T; }
>      : ^^^^^^^^ ^^^
>prop : T
>     : ^

    if (typeof param.prop === "number") {
>typeof param.prop === "number" : boolean
>                               : ^^^^^^^
>typeof param.prop : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>param.prop : T
>           : ^
>param : { prop: T; }
>      : ^^^^^^^^ ^^^
>prop : T
>     : ^
>"number" : "number"
>         : ^^^^^^^^

        return 1;
>1 : 1
>  : ^
    }
    return 2;
>2 : 2
>  : ^
}

function fn6<T extends string | number>(param: { prop1?: { prop?: T } }): RetU<T> { // Bad.
>fn6 : <T extends string | number>(param: { prop1?: { prop?: T; }; }) => RetU<T>
>    : ^ ^^^^^^^^^               ^^     ^^                          ^^^^^       
>param : { prop1?: { prop?: T; }; }
>      : ^^^^^^^^^^             ^^^
>prop1 : { prop?: T; }
>      : ^^^^^^^^^ ^^^
>prop : T
>     : ^

    if (typeof param.prop1.prop === "number") {
>typeof param.prop1.prop === "number" : boolean
>                                     : ^^^^^^^
>typeof param.prop1.prop : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>param.prop1.prop : T
>                 : ^
>param.prop1 : { prop?: T; }
>            : ^^^^^^^^^ ^^^
>param : { prop1?: { prop?: T; }; }
>      : ^^^^^^^^^^             ^^^
>prop1 : { prop?: T; }
>      : ^^^^^^^^^ ^^^
>prop : T
>     : ^
>"number" : "number"
>         : ^^^^^^^^

        return 1;
>1 : 1
>  : ^
    }
    return 2;
>2 : 2
>  : ^
}
