//// [tests/cases/compiler/dependentReturnType8.ts] ////

=== dependentReturnType8.ts ===
export {};

declare const record: Record<string, string[]>;
>record : Symbol(record, Decl(dependentReturnType8.ts, 2, 13))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

declare const array: string[];
>array : Symbol(array, Decl(dependentReturnType8.ts, 3, 13))

// Arrow function with expression body
const getObject =
>getObject : Symbol(getObject, Decl(dependentReturnType8.ts, 6, 5))

    <T extends string | undefined>(group: T): T extends string ? string[] : T extends undefined ? Record<string, string[]> : never =>
>T : Symbol(T, Decl(dependentReturnType8.ts, 7, 5))
>group : Symbol(group, Decl(dependentReturnType8.ts, 7, 35))
>T : Symbol(T, Decl(dependentReturnType8.ts, 7, 5))
>T : Symbol(T, Decl(dependentReturnType8.ts, 7, 5))
>T : Symbol(T, Decl(dependentReturnType8.ts, 7, 5))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))

        group === undefined ? record : array;
>group : Symbol(group, Decl(dependentReturnType8.ts, 7, 35))
>undefined : Symbol(undefined)
>record : Symbol(record, Decl(dependentReturnType8.ts, 2, 13))
>array : Symbol(array, Decl(dependentReturnType8.ts, 3, 13))

