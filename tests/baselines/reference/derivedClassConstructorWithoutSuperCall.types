//// [tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassConstructorWithoutSuperCall.ts] ////

=== derivedClassConstructorWithoutSuperCall.ts ===
// derived class constructors must contain a super call

class Base {
>Base : Base
>     : ^^^^

    x: string;
>x : string
>  : ^^^^^^
}

class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    constructor() { // error
    }
}

class Base2<T> {
>Base2 : Base2<T>
>      : ^^^^^^^^

    x: T;
>x : T
>  : ^
}

class Derived2<T> extends Base2<T> {
>Derived2 : Derived2<T>
>         : ^^^^^^^^^^^
>Base2 : Base2<T>
>      : ^^^^^^^^

    constructor() { // error for no super call (nested scopes don't count)
        var r2 = () => super(); // error for misplaced super call (nested function)
>r2 : () => void
>   : ^^^^^^^^^^
>() => super() : () => void
>              : ^^^^^^^^^^
>super() : void
>        : ^^^^
>super : any
>      : ^^^
    }
}

class Derived3<T> extends Base2<T> {
>Derived3 : Derived3<T>
>         : ^^^^^^^^^^^
>Base2 : Base2<T>
>      : ^^^^^^^^

    constructor() { // error
        var r = function () { super() } // error
>r : () => void
>  : ^^^^^^^^^^
>function () { super() } : () => void
>                        : ^^^^^^^^^^
>super() : void
>        : ^^^^
>super : any
>      : ^^^
    }
}

class Derived4<T> extends Base2<T> {
>Derived4 : Derived4<T>
>         : ^^^^^^^^^^^
>Base2 : Base2<T>
>      : ^^^^^^^^

    constructor() {
        var r = super(); // ok
>r : void
>  : ^^^^
>super() : void
>        : ^^^^
>super : typeof Base2
>      : ^^^^^^^^^^^^
    }
}
