//// [tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateStaticShadowingPublicStatic.ts] ////

=== derivedClassWithPrivateStaticShadowingPublicStatic.ts ===
class Base {
>Base : Base
>     : ^^^^

    public static x: string;
>x : string
>  : ^^^^^^

    public static fn(): string {
>fn : () => string
>   : ^^^^^^      

        return '';
>'' : ""
>   : ^^
    }

    public static get a() { return 1; }
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

    public static set a(v) { }
>a : number
>  : ^^^^^^
>v : number
>  : ^^^^^^
}

// BUG 847404
// should be error
class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    private static x: string; 
>x : string
>  : ^^^^^^

    private static fn(): string {
>fn : () => string
>   : ^^^^^^      

        return '';
>'' : ""
>   : ^^
    }

    private static get a() { return 1; }
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

    private static set a(v) { }
>a : number
>  : ^^^^^^
>v : number
>  : ^^^^^^
}

var r = Base.x; // ok
>r : string
>  : ^^^^^^
>Base.x : string
>       : ^^^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^
>x : string
>  : ^^^^^^

var r2 = Derived.x; // error
>r2 : string
>   : ^^^^^^
>Derived.x : string
>          : ^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

var r3 = Base.fn(); // ok
>r3 : string
>   : ^^^^^^
>Base.fn() : string
>          : ^^^^^^
>Base.fn : () => string
>        : ^^^^^^      
>Base : typeof Base
>     : ^^^^^^^^^^^
>fn : () => string
>   : ^^^^^^      

var r4 = Derived.fn(); // error
>r4 : string
>   : ^^^^^^
>Derived.fn() : string
>             : ^^^^^^
>Derived.fn : () => string
>           : ^^^^^^      
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>fn : () => string
>   : ^^^^^^      

var r5 = Base.a; // ok
>r5 : number
>   : ^^^^^^
>Base.a : number
>       : ^^^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^
>a : number
>  : ^^^^^^

Base.a = 2; // ok
>Base.a = 2 : 2
>           : ^
>Base.a : number
>       : ^^^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^
>a : number
>  : ^^^^^^
>2 : 2
>  : ^

var r6 = Derived.a; // error
>r6 : number
>   : ^^^^^^
>Derived.a : number
>          : ^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^

Derived.a = 2; // error
>Derived.a = 2 : 2
>              : ^
>Derived.a : number
>          : ^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>2 : 2
>  : ^

