//// [tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor.ts] ////

=== derivedClassWithoutExplicitConstructor.ts ===
class Base {
>Base : Base
>     : ^^^^

    a = 1;
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

    constructor(x: number) { this.a = x; }
>x : number
>  : ^^^^^^
>this.a = x : number
>           : ^^^^^^
>this.a : number
>       : ^^^^^^
>this : this
>     : ^^^^
>a : number
>  : ^^^^^^
>x : number
>  : ^^^^^^
}

class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    x = 1
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    y = 'hello';
>y : string
>  : ^^^^^^
>'hello' : "hello"
>        : ^^^^^^^
}

var r = new Derived(); // error
>r : Derived
>  : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

var r2 = new Derived(1); 
>r2 : Derived
>   : ^^^^^^^
>new Derived(1) : Derived
>               : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>1 : 1
>  : ^

class Base2<T> {
>Base2 : Base2<T>
>      : ^^^^^^^^

    a: T;
>a : T
>  : ^

    constructor(x: T) { this.a = x; }
>x : T
>  : ^
>this.a = x : T
>           : ^
>this.a : T
>       : ^
>this : this
>     : ^^^^
>a : T
>  : ^
>x : T
>  : ^
}

class D<T extends Date> extends Base2<T> {
>D : D<T>
>  : ^^^^
>Base2 : Base2<T>
>      : ^^^^^^^^

    x = 2
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

    y: T = null;
>y : T
>  : ^
}

var d = new D(); // error
>d : D<Date>
>  : ^^^^^^^
>new D() : D<Date>
>        : ^^^^^^^
>D : typeof D
>  : ^^^^^^^^

var d2 = new D(new Date()); // ok
>d2 : D<Date>
>   : ^^^^^^^
>new D(new Date()) : D<Date>
>                  : ^^^^^^^
>D : typeof D
>  : ^^^^^^^^
>new Date() : Date
>           : ^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^

