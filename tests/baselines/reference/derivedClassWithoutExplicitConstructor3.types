//// [tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor3.ts] ////

=== derivedClassWithoutExplicitConstructor3.ts ===
// automatic constructors with a class hieararchy of depth > 2

class Base {
>Base : Base
>     : ^^^^

    a = 1;
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

    constructor(x: number) { this.a = x; }
>x : number
>  : ^^^^^^
>this.a = x : number
>           : ^^^^^^
>this.a : number
>       : ^^^^^^
>this : this
>     : ^^^^
>a : number
>  : ^^^^^^
>x : number
>  : ^^^^^^
}

class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    b = '';
>b : string
>  : ^^^^^^
>'' : ""
>   : ^^

    constructor(y: string, z: string) {
>y : string
>  : ^^^^^^
>z : string
>  : ^^^^^^

        super(2);
>super(2) : void
>         : ^^^^
>super : typeof Base
>      : ^^^^^^^^^^^
>2 : 2
>  : ^

        this.b = y;
>this.b = y : string
>           : ^^^^^^
>this.b : string
>       : ^^^^^^
>this : this
>     : ^^^^
>b : string
>  : ^^^^^^
>y : string
>  : ^^^^^^
    }
}

class Derived2 extends Derived {
>Derived2 : Derived2
>         : ^^^^^^^^
>Derived : Derived
>        : ^^^^^^^

    x = 1
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    y = 'hello';
>y : string
>  : ^^^^^^
>'hello' : "hello"
>        : ^^^^^^^
}

var r = new Derived(); // error
>r : Derived
>  : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

var r2 = new Derived2(1); // error
>r2 : Derived2
>   : ^^^^^^^^
>new Derived2(1) : Derived2
>                : ^^^^^^^^
>Derived2 : typeof Derived2
>         : ^^^^^^^^^^^^^^^
>1 : 1
>  : ^

var r3 = new Derived('', '');
>r3 : Derived
>   : ^^^^^^^
>new Derived('', '') : Derived
>                    : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>'' : ""
>   : ^^
>'' : ""
>   : ^^

class Base2<T> {
>Base2 : Base2<T>
>      : ^^^^^^^^

    a: T;
>a : T
>  : ^

    constructor(x: T) { this.a = x; }
>x : T
>  : ^
>this.a = x : T
>           : ^
>this.a : T
>       : ^
>this : this
>     : ^^^^
>a : T
>  : ^
>x : T
>  : ^
}

class D<T> extends Base {
>D : D<T>
>  : ^^^^
>Base : Base
>     : ^^^^

    b: T = null;
>b : T
>  : ^

    constructor(y: T, z: T) {
>y : T
>  : ^
>z : T
>  : ^

        super(2);
>super(2) : void
>         : ^^^^
>super : typeof Base
>      : ^^^^^^^^^^^
>2 : 2
>  : ^

        this.b = y;
>this.b = y : T
>           : ^
>this.b : T
>       : ^
>this : this
>     : ^^^^
>b : T
>  : ^
>y : T
>  : ^
    }
}


class D2<T extends Date> extends D<T> {
>D2 : D2<T>
>   : ^^^^^
>D : D<T>
>  : ^^^^

    x = 2
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

    y: T = null;
>y : T
>  : ^
}

var d = new D2(); // error
>d : D2<Date>
>  : ^^^^^^^^
>new D2() : D2<Date>
>         : ^^^^^^^^
>D2 : typeof D2
>   : ^^^^^^^^^

var d2 = new D2(new Date()); // error
>d2 : D2<Date>
>   : ^^^^^^^^
>new D2(new Date()) : D2<Date>
>                   : ^^^^^^^^
>D2 : typeof D2
>   : ^^^^^^^^^
>new Date() : Date
>           : ^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^

var d3 = new D2(new Date(), new Date()); // ok
>d3 : D2<Date>
>   : ^^^^^^^^
>new D2(new Date(), new Date()) : D2<Date>
>                               : ^^^^^^^^
>D2 : typeof D2
>   : ^^^^^^^^^
>new Date() : Date
>           : ^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^
>new Date() : Date
>           : ^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^

