derivedGenericClassWithAny.ts(10,5): error TS2612: Property 'x' will overwrite the base property in 'C<number>'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.
derivedGenericClassWithAny.ts(29,5): error TS2612: Property 'x' will overwrite the base property in 'D'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.
derivedGenericClassWithAny.ts(30,18): error TS2322: Type 'string' is not assignable to type 'T'.
  'string' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'string'.
derivedGenericClassWithAny.ts(32,9): error TS2322: Type 'string' is not assignable to type 'T'.
  'string' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'string'.
derivedGenericClassWithAny.ts(41,1): error TS2322: Type 'E<string>' is not assignable to type 'C<number>'.
  Types of property 'x' are incompatible.
    Type 'string' is not assignable to type 'number'.


==== derivedGenericClassWithAny.ts (5 errors) ====
    class C<T extends number> {
        x: T;
        get X(): T { return null; }
        foo(): T {
            return null;
        }
    }
    
    class D extends C<number> {
        x: any;
        ~
!!! error TS2612: Property 'x' will overwrite the base property in 'C<number>'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.
        get X(): any {
            return null;
        }
        foo(): any {
            return 1;
        }
    
        static y: any;
        static get Y(): any {
            return null;
        }
        static bar(): any {
            return null;
        }
    }
    
    // if D is a valid class definition than E is now not safe tranisitively through C
    class E<T extends string> extends D {
        x: T;
        ~
!!! error TS2612: Property 'x' will overwrite the base property in 'D'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration.
        get X(): T { return ''; } // error
                     ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'T'.
!!! error TS2322:   'string' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'string'.
        foo(): T {
            return ''; // error
            ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'T'.
!!! error TS2322:   'string' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'string'.
        }
    }
    
    var c: C<number>;
    var d: D;
    var e: E<string>;
    
    c = d;
    c = e;
    ~
!!! error TS2322: Type 'E<string>' is not assignable to type 'C<number>'.
!!! error TS2322:   Types of property 'x' are incompatible.
!!! error TS2322:     Type 'string' is not assignable to type 'number'.
    var r = c.foo(); // e.foo would return string