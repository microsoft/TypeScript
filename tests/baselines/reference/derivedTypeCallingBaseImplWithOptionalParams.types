//// [tests/cases/compiler/derivedTypeCallingBaseImplWithOptionalParams.ts] ////

=== derivedTypeCallingBaseImplWithOptionalParams.ts ===
interface MyInterface {
    myMethod(...myList: any[]);
>myMethod : (...myList: any[]) => any
>         : ^^^^      ^^     ^^^^^^^^
>myList : any[]
>       : ^^^^^
}
class MyClass implements MyInterface {
>MyClass : MyClass
>        : ^^^^^^^

    myMethod(myList: any[]) { // valid
>myMethod : (myList: any[]) => void
>         : ^      ^^     ^^^^^^^^^
>myList : any[]
>       : ^^^^^
    }
}

var x: MyInterface = new MyClass();
>x : MyInterface
>  : ^^^^^^^^^^^
>new MyClass() : MyClass
>              : ^^^^^^^
>MyClass : typeof MyClass
>        : ^^^^^^^^^^^^^^

x.myMethod(); // should be valid, but MyClass has no implementation to handle it.
>x.myMethod() : any
>             : ^^^
>x.myMethod : (...myList: any[]) => any
>           : ^^^^      ^^     ^^^^^^^^
>x : MyInterface
>  : ^^^^^^^^^^^
>myMethod : (...myList: any[]) => any
>         : ^^^^      ^^     ^^^^^^^^

var y: MyClass = new MyClass();
>y : MyClass
>  : ^^^^^^^
>new MyClass() : MyClass
>              : ^^^^^^^
>MyClass : typeof MyClass
>        : ^^^^^^^^^^^^^^

y.myMethod(); // error
>y.myMethod() : void
>             : ^^^^
>y.myMethod : (myList: any[]) => void
>           : ^      ^^     ^^^^^^^^^
>y : MyClass
>  : ^^^^^^^
>myMethod : (myList: any[]) => void
>         : ^      ^^     ^^^^^^^^^

