//// [tests/cases/compiler/destructureOfVariableSameAsShorthand.ts] ////

=== destructureOfVariableSameAsShorthand.ts ===
// https://github.com/microsoft/TypeScript/issues/38969
interface AxiosResponse<T = never> {
>AxiosResponse : Symbol(AxiosResponse, Decl(destructureOfVariableSameAsShorthand.ts, 0, 0))
>T : Symbol(T, Decl(destructureOfVariableSameAsShorthand.ts, 1, 24))

    data: T;
>data : Symbol(AxiosResponse.data, Decl(destructureOfVariableSameAsShorthand.ts, 1, 36))
>T : Symbol(T, Decl(destructureOfVariableSameAsShorthand.ts, 1, 24))
}

declare function get<T = never, R = AxiosResponse<T>>(): Promise<R>;
>get : Symbol(get, Decl(destructureOfVariableSameAsShorthand.ts, 3, 1))
>T : Symbol(T, Decl(destructureOfVariableSameAsShorthand.ts, 5, 21))
>R : Symbol(R, Decl(destructureOfVariableSameAsShorthand.ts, 5, 31))
>AxiosResponse : Symbol(AxiosResponse, Decl(destructureOfVariableSameAsShorthand.ts, 0, 0))
>T : Symbol(T, Decl(destructureOfVariableSameAsShorthand.ts, 5, 21))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>R : Symbol(R, Decl(destructureOfVariableSameAsShorthand.ts, 5, 31))

async function main() {
>main : Symbol(main, Decl(destructureOfVariableSameAsShorthand.ts, 5, 68))

    // These work examples as expected
    get().then((response) => {
>get().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
>get : Symbol(get, Decl(destructureOfVariableSameAsShorthand.ts, 3, 1))
>then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
>response : Symbol(response, Decl(destructureOfVariableSameAsShorthand.ts, 9, 16))

        // body is never
        const body = response.data;
>body : Symbol(body, Decl(destructureOfVariableSameAsShorthand.ts, 11, 13))
>response.data : Symbol(AxiosResponse.data, Decl(destructureOfVariableSameAsShorthand.ts, 1, 36))
>response : Symbol(response, Decl(destructureOfVariableSameAsShorthand.ts, 9, 16))
>data : Symbol(AxiosResponse.data, Decl(destructureOfVariableSameAsShorthand.ts, 1, 36))

    })
    get().then(({ data }) => {
>get().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
>get : Symbol(get, Decl(destructureOfVariableSameAsShorthand.ts, 3, 1))
>then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
>data : Symbol(data, Decl(destructureOfVariableSameAsShorthand.ts, 13, 17))

        // data is never
    })
    const response = await get()
>response : Symbol(response, Decl(destructureOfVariableSameAsShorthand.ts, 16, 9))
>get : Symbol(get, Decl(destructureOfVariableSameAsShorthand.ts, 3, 1))

    // body is never
    const body = response.data;
>body : Symbol(body, Decl(destructureOfVariableSameAsShorthand.ts, 18, 9))
>response.data : Symbol(AxiosResponse.data, Decl(destructureOfVariableSameAsShorthand.ts, 1, 36))
>response : Symbol(response, Decl(destructureOfVariableSameAsShorthand.ts, 16, 9))
>data : Symbol(AxiosResponse.data, Decl(destructureOfVariableSameAsShorthand.ts, 1, 36))

    // data is never
    const { data } = await get<never>();
>data : Symbol(data, Decl(destructureOfVariableSameAsShorthand.ts, 20, 11))
>get : Symbol(get, Decl(destructureOfVariableSameAsShorthand.ts, 3, 1))

    // The following did not work as expected.
    // shouldBeNever should be never, but was any
    const { data: shouldBeNever } = await get();
>data : Symbol(AxiosResponse.data, Decl(destructureOfVariableSameAsShorthand.ts, 1, 36))
>shouldBeNever : Symbol(shouldBeNever, Decl(destructureOfVariableSameAsShorthand.ts, 24, 11))
>get : Symbol(get, Decl(destructureOfVariableSameAsShorthand.ts, 3, 1))
}
