//// [tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts] ////

=== destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts ===
// To be inferred as `number`
function f1() {
>f1 : () => void
>   : ^^^^^^^^^^

    const [a1, b1 = a1] = [1];
>a1 : number
>   : ^^^^^^
>b1 : number
>   : ^^^^^^
>a1 : number
>   : ^^^^^^
>[1] : [number]
>    : ^^^^^^^^
>1 : 1
>  : ^

    const [a2, b2 = 1 + a2] = [1];
>a2 : number
>   : ^^^^^^
>b2 : number
>   : ^^^^^^
>1 + a2 : number
>       : ^^^^^^
>1 : 1
>  : ^
>a2 : number
>   : ^^^^^^
>[1] : [number]
>    : ^^^^^^^^
>1 : 1
>  : ^
}

// To be inferred as `string`
function f2() {
>f2 : () => void
>   : ^^^^^^^^^^

    const [a1, b1 = a1] = ['hi'];
>a1 : string
>   : ^^^^^^
>b1 : string
>   : ^^^^^^
>a1 : string
>   : ^^^^^^
>['hi'] : [string]
>       : ^^^^^^^^
>'hi' : "hi"
>     : ^^^^

    const [a2, b2 = a2 + '!'] = ['hi'];
>a2 : string
>   : ^^^^^^
>b2 : string
>   : ^^^^^^
>a2 + '!' : string
>         : ^^^^^^
>a2 : string
>   : ^^^^^^
>'!' : "!"
>    : ^^^
>['hi'] : [string]
>       : ^^^^^^^^
>'hi' : "hi"
>     : ^^^^
}

// To be inferred as `string | number`
function f3() {
>f3 : () => void
>   : ^^^^^^^^^^

    const [a1, b1 = a1] = ['hi', 1];
>a1 : string
>   : ^^^^^^
>b1 : string | number
>   : ^^^^^^^^^^^^^^^
>a1 : string
>   : ^^^^^^
>['hi', 1] : [string, number]
>          : ^^^^^^^^^^^^^^^^
>'hi' : "hi"
>     : ^^^^
>1 : 1
>  : ^

    const [a2, b2 = a2 + '!'] = ['hi', 1];
>a2 : string
>   : ^^^^^^
>b2 : string | number
>   : ^^^^^^^^^^^^^^^
>a2 + '!' : string
>         : ^^^^^^
>a2 : string
>   : ^^^^^^
>'!' : "!"
>    : ^^^
>['hi', 1] : [string, number]
>          : ^^^^^^^^^^^^^^^^
>'hi' : "hi"
>     : ^^^^
>1 : 1
>  : ^
}

// Based on comment:
//   - https://github.com/microsoft/TypeScript/issues/49989#issuecomment-1852694486
declare const yadda: [number, number] | undefined
>yadda : [number, number]
>      : ^^^^^^^^^^^^^^^^

function f4() {
>f4 : () => void
>   : ^^^^^^^^^^

    const [ a, b = a ] = yadda ?? [];
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^
>a : number
>  : ^^^^^^
>yadda ?? [] : [number, number] | []
>            : ^^^^^^^^^^^^^^^^^^^^^
>yadda : [number, number]
>      : ^^^^^^^^^^^^^^^^
>[] : []
>   : ^^
}

