//// [tests/cases/conformance/es6/destructuring/destructuringInFunctionType.ts] ////

=== destructuringInFunctionType.ts ===
interface a { a }
>a : any
>  : ^^^

interface b { b }
>b : any
>  : ^^^

interface c { c }
>c : any
>  : ^^^

type T1 = ([a, b, c]);
>T1 : T1
>   : ^^

type F1 = ([a, b, c]) => void;
>F1 : F1
>   : ^^
>a : any
>  : ^^^
>b : any
>  : ^^^
>c : any
>  : ^^^

type T2 = ({ a });
>T2 : T2
>   : ^^
>a : any
>  : ^^^

type F2 = ({ a }) => void;
>F2 : F2
>   : ^^
>a : any
>  : ^^^

type T3 = ([{ a: b }, { b: a }]);
>T3 : T3
>   : ^^
>a : b
>  : ^
>b : a
>  : ^

type F3 = ([{ a: b }, { b: a }]) => void;
>F3 : F3
>   : ^^
>a : any
>  : ^^^
>b : any
>  : ^^^
>b : any
>  : ^^^
>a : any
>  : ^^^

type T4 = ([{ a: [b, c] }]);
>T4 : T4
>   : ^^
>a : [b, c]
>  : ^^^^^^

type F4 = ([{ a: [b, c] }]) => void;
>F4 : F4
>   : ^^
>a : any
>  : ^^^
>b : any
>  : ^^^
>c : any
>  : ^^^

type C1 = new ([{ a: [b, c] }]) => void;
>C1 : C1
>   : ^^
>a : any
>  : ^^^
>b : any
>  : ^^^
>c : any
>  : ^^^

var v1 = ([a, b, c]) => "hello";
>v1 : ([a, b, c]: [any, any, any]) => string
>   : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>([a, b, c]) => "hello" : ([a, b, c]: [any, any, any]) => string
>                       : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : any
>  : ^^^
>b : any
>  : ^^^
>c : any
>  : ^^^
>"hello" : "hello"
>        : ^^^^^^^

var v2: ([a, b, c]) => string;
>v2 : ([a, b, c]: [any, any, any]) => string
>   : ^         ^^^^^^^^^^^^^^^^^^^^^^      
>a : any
>  : ^^^
>b : any
>  : ^^^
>c : any
>  : ^^^

