//// [tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment9SiblingInitializer.ts] ////

=== destructuringObjectBindingPatternAndAssignment9SiblingInitializer.ts ===
// To be inferred as `number`
function f1() {
>f1 : () => void
>   : ^^^^^^^^^^

    const { a1, b1 = a1 } = { a1: 1 };
>a1 : number
>   : ^^^^^^
>b1 : number
>   : ^^^^^^
>a1 : number
>   : ^^^^^^
>{ a1: 1 } : { a1: number; }
>          : ^^^^^^^^^^^^^^^
>a1 : number
>   : ^^^^^^
>1 : 1
>  : ^

    const { a2, b2 = 1 + a2 } = { a2: 1 };
>a2 : number
>   : ^^^^^^
>b2 : number
>   : ^^^^^^
>1 + a2 : number
>       : ^^^^^^
>1 : 1
>  : ^
>a2 : number
>   : ^^^^^^
>{ a2: 1 } : { a2: number; }
>          : ^^^^^^^^^^^^^^^
>a2 : number
>   : ^^^^^^
>1 : 1
>  : ^
}

// To be inferred as `string`
function f2() {
>f2 : () => void
>   : ^^^^^^^^^^

    const { a1, b1 = a1 } = { a1: 'hi' };
>a1 : string
>   : ^^^^^^
>b1 : string
>   : ^^^^^^
>a1 : string
>   : ^^^^^^
>{ a1: 'hi' } : { a1: string; }
>             : ^^^^^^^^^^^^^^^
>a1 : string
>   : ^^^^^^
>'hi' : "hi"
>     : ^^^^

    const { a2, b2 = a2 + '!' } = { a2: 'hi' };
>a2 : string
>   : ^^^^^^
>b2 : string
>   : ^^^^^^
>a2 + '!' : string
>         : ^^^^^^
>a2 : string
>   : ^^^^^^
>'!' : "!"
>    : ^^^
>{ a2: 'hi' } : { a2: string; }
>             : ^^^^^^^^^^^^^^^
>a2 : string
>   : ^^^^^^
>'hi' : "hi"
>     : ^^^^
}

// To be inferred as `string | number`
function f3() {
>f3 : () => void
>   : ^^^^^^^^^^

    const { a1, b1 = a1 } = { a1: 'hi', b1: 1 };
>a1 : string
>   : ^^^^^^
>b1 : string | number
>   : ^^^^^^^^^^^^^^^
>a1 : string
>   : ^^^^^^
>{ a1: 'hi', b1: 1 } : { a1: string; b1?: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a1 : string
>   : ^^^^^^
>'hi' : "hi"
>     : ^^^^
>b1 : number
>   : ^^^^^^
>1 : 1
>  : ^

    const { a2, b2 = a2 + '!' } = { a2: 'hi', b2: 1 };
>a2 : string
>   : ^^^^^^
>b2 : string | number
>   : ^^^^^^^^^^^^^^^
>a2 + '!' : string
>         : ^^^^^^
>a2 : string
>   : ^^^^^^
>'!' : "!"
>    : ^^^
>{ a2: 'hi', b2: 1 } : { a2: string; b2?: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a2 : string
>   : ^^^^^^
>'hi' : "hi"
>     : ^^^^
>b2 : number
>   : ^^^^^^
>1 : 1
>  : ^
}

// Based on comment:
//   - https://github.com/microsoft/TypeScript/issues/49989#issuecomment-1852694486
declare const yadda: { a?: number, b?: number } | undefined
>yadda : { a?: number; b?: number; }
>      : ^^^^^^      ^^^^^^      ^^^
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^

function f4() {
>f4 : () => void
>   : ^^^^^^^^^^

    const { a, b = a } = yadda ?? {};
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^
>a : number
>  : ^^^^^^
>yadda ?? {} : { a?: number; b?: number; }
>            : ^^^^^^      ^^^^^^      ^^^
>yadda : { a?: number; b?: number; }
>      : ^^^^^^      ^^^^^^      ^^^
>{} : {}
>   : ^^
}

