//// [tests/cases/conformance/types/typeAliases/directDependenceBetweenTypeAliases.ts] ////

=== directDependenceBetweenTypeAliases.ts ===
// It is an error for the type specified in a type alias to depend on that type alias

// A type alias directly depends on the type it aliases.
type T0 = T0
>T0 : any
>   : ^^^

type T0_1 = T0_2
>T0_1 : any
>     : ^^^

type T0_2 = T0_3
>T0_2 : any
>     : ^^^

type T0_3 = T0_1
>T0_3 : any
>     : ^^^

// A type reference directly depends on the referenced type and each of the type arguments, if any.
interface I<T> {}
type T1 = I<T1>
>T1 : T1
>   : ^^

// A union type directly depends on each of the constituent types.
type T2 = T2 | string
>T2 : any
>   : ^^^

class C<T> {}
>C : C<T>
>  : ^^^^

type T2_1 = T2_1[] | number
>T2_1 : T2_1
>     : ^^^^

// An array type directly depends on its element type.
type T3 = T3[]
>T3 : T3
>   : ^^

// A tuple type directly depends on each of its element types.
type T4 = [number, T4]
>T4 : T4
>   : ^^

// A type query directly depends on the type of the referenced entity.
var x: T5[] = []
>x : any
>  : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

type T5 = typeof x
>T5 : any
>   : ^^^
>x : any
>  : ^^^

class C1<T> {}
>C1 : C1<T>
>   : ^^^^^

type T6 = T7 | number
>T6 : T6
>   : ^^

type T7 = typeof yy
>T7 : [string, T8[]]
>   : ^^^^^^^^^^^^^^
>yy : [string, T8[]]
>   : ^^^^^^^^^^^^^^

var yy: [string, T8[]];
>yy : [string, T8[]]
>   : ^^^^^^^^^^^^^^

type T8 = C<T6>
>T8 : T8
>   : ^^

// legal cases
type T9 = () => T9
>T9 : T9
>   : ^^

type T10 = { x: T10 } | { new(v: T10): string }
>T10 : T10
>    : ^^^
>x : T10
>  : ^^^
>v : T10
>  : ^^^

type T11 = T12[]
>T11 : T11
>    : ^^^

type T12 = [T13, string]
>T12 : T12
>    : ^^^

type T13 = typeof zz
>T13 : { x: T11; }
>    : ^^^^^   ^^^
>zz : { x: T11; }
>   : ^^^^^   ^^^

var zz: { x: T11 }
>zz : { x: T11; }
>   : ^^^^^   ^^^
>x : T11
>  : ^^^


