//// [tests/cases/compiler/discriminantUsingEvaluatableTemplateExpression.ts] ////

=== discriminantUsingEvaluatableTemplateExpression.ts ===
// repro from https://github.com/microsoft/TypeScript/issues/53888

type S = { d: "s"; cb: (x: string) => void };
>S : S
>  : ^
>d : "s"
>  : ^^^
>cb : (x: string) => void
>   : ^ ^^      ^^^^^    
>x : string
>  : ^^^^^^

type N = { d: "n"; cb: (x: number) => void };
>N : N
>  : ^
>d : "n"
>  : ^^^
>cb : (x: number) => void
>   : ^ ^^      ^^^^^    
>x : number
>  : ^^^^^^

declare function foo(foo: S | N): void;
>foo : (foo: S | N) => void
>    : ^   ^^     ^^^^^    
>foo : S | N
>    : ^^^^^

foo({
>foo({  d: `${"s"}`,  cb: (x) => {    x; // string  },}) : void
>                                                        : ^^^^
>foo : (foo: S | N) => void
>    : ^   ^^     ^^^^^    
>{  d: `${"s"}`,  cb: (x) => {    x; // string  },} : { d: "s"; cb: (x: string) => void; }
>                                                   : ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^

  d: `${"s"}`,
>d : "s"
>  : ^^^
>`${"s"}` : "s"
>         : ^^^
>"s" : "s"
>    : ^^^

  cb: (x) => {
>cb : (x: string) => void
>   : ^ ^^^^^^^^^^^^^^^^^
>(x) => {    x; // string  } : (x: string) => void
>                            : ^ ^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    x; // string
>x : string
>  : ^^^^^^

  },
});

type E1 = { d: "main1-sub1"; cb: (x: string) => void };
>E1 : E1
>   : ^^
>d : "main1-sub1"
>  : ^^^^^^^^^^^^
>cb : (x: string) => void
>   : ^ ^^      ^^^^^    
>x : string
>  : ^^^^^^

type E2 = { d: "main2-sub2"; cb: (x: number) => void };
>E2 : E2
>   : ^^
>d : "main2-sub2"
>  : ^^^^^^^^^^^^
>cb : (x: number) => void
>   : ^ ^^      ^^^^^    
>x : number
>  : ^^^^^^

declare function bar(_: E1 | E2): void;
>bar : (_: E1 | E2) => void
>    : ^ ^^       ^^^^^    
>_ : E1 | E2
>  : ^^^^^^^

const someCategory = "main1";
>someCategory : "main1"
>             : ^^^^^^^
>"main1" : "main1"
>        : ^^^^^^^

const someSubcategory = "sub1";
>someSubcategory : "sub1"
>                : ^^^^^^
>"sub1" : "sub1"
>       : ^^^^^^

bar({ d: `${someCategory}-${someSubcategory}`, cb: (x) => {} });
>bar({ d: `${someCategory}-${someSubcategory}`, cb: (x) => {} }) : void
>                                                                : ^^^^
>bar : (_: E1 | E2) => void
>    : ^ ^^       ^^^^^    
>{ d: `${someCategory}-${someSubcategory}`, cb: (x) => {} } : { d: "main1-sub1"; cb: (x: string) => void; }
>                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^
>d : "main1-sub1"
>  : ^^^^^^^^^^^^
>`${someCategory}-${someSubcategory}` : "main1-sub1"
>                                     : ^^^^^^^^^^^^
>someCategory : "main1"
>             : ^^^^^^^
>someSubcategory : "sub1"
>                : ^^^^^^
>cb : (x: string) => void
>   : ^ ^^^^^^^^^^^^^^^^^
>(x) => {} : (x: string) => void
>          : ^ ^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

