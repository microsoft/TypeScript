//// [tests/cases/compiler/discriminantsAndPrimitives.ts] ////

=== discriminantsAndPrimitives.ts ===
// Repro from #10257 plus other tests

interface Foo {
    kind: "foo";
>kind : "foo"
>     : ^^^^^

    name: string;
>name : string
>     : ^^^^^^
}

interface Bar {
    kind: "bar";
>kind : "bar"
>     : ^^^^^

    length: string;
>length : string
>       : ^^^^^^
}

function f1(x: Foo | Bar | string) {
>f1 : (x: Foo | Bar | string) => void
>   : ^ ^^                  ^^^^^^^^^
>x : string | Bar | Foo
>  : ^^^^^^^^^^^^^^^^^^

    if (typeof x !== 'string') {
>typeof x !== 'string' : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | Bar | Foo
>  : ^^^^^^^^^^^^^^^^^^
>'string' : "string"
>         : ^^^^^^^^

        switch(x.kind) {
>x.kind : "bar" | "foo"
>       : ^^^^^^^^^^^^^
>x : Bar | Foo
>  : ^^^^^^^^^
>kind : "bar" | "foo"
>     : ^^^^^^^^^^^^^

            case 'foo':
>'foo' : "foo"
>      : ^^^^^

                x.name;
>x.name : string
>       : ^^^^^^
>x : Foo
>  : ^^^
>name : string
>     : ^^^^^^
        }
    }
}

function f2(x: Foo | Bar | string | undefined) {
>f2 : (x: Foo | Bar | string | undefined) => void
>   : ^ ^^                              ^^^^^^^^^
>x : string | Bar | Foo | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    if (typeof x === "object") {
>typeof x === "object" : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | Bar | Foo | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"object" : "object"
>         : ^^^^^^^^

        switch(x.kind) {
>x.kind : "bar" | "foo"
>       : ^^^^^^^^^^^^^
>x : Bar | Foo
>  : ^^^^^^^^^
>kind : "bar" | "foo"
>     : ^^^^^^^^^^^^^

            case 'foo':
>'foo' : "foo"
>      : ^^^^^

                x.name;
>x.name : string
>       : ^^^^^^
>x : Foo
>  : ^^^
>name : string
>     : ^^^^^^
        }
    }
}

function f3(x: Foo | Bar | string | null) {
>f3 : (x: Foo | Bar | string | null) => void
>   : ^ ^^                         ^^^^^^^^^
>x : string | Bar | Foo | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

    if (x && typeof x !== "string") {
>x && typeof x !== "string" : "" | boolean | null
>                           : ^^^^^^^^^^^^^^^^^^^
>x : string | Bar | Foo | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof x !== "string" : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | Bar | Foo
>  : ^^^^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

        switch(x.kind) {
>x.kind : "bar" | "foo"
>       : ^^^^^^^^^^^^^
>x : Bar | Foo
>  : ^^^^^^^^^
>kind : "bar" | "foo"
>     : ^^^^^^^^^^^^^

            case 'foo':
>'foo' : "foo"
>      : ^^^^^

                x.name;
>x.name : string
>       : ^^^^^^
>x : Foo
>  : ^^^
>name : string
>     : ^^^^^^
        }
    }
}

function f4(x: Foo | Bar | string | number | null) {
>f4 : (x: Foo | Bar | string | number | null) => void
>   : ^ ^^                                  ^^^^^^^^^
>x : string | number | Bar | Foo | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    if (x && typeof x === "object") {
>x && typeof x === "object" : "" | 0 | boolean | null
>                           : ^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number | Bar | Foo | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof x === "object" : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number | Bar | Foo
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"object" : "object"
>         : ^^^^^^^^

        switch(x.kind) {
>x.kind : "bar" | "foo"
>       : ^^^^^^^^^^^^^
>x : Bar | Foo
>  : ^^^^^^^^^
>kind : "bar" | "foo"
>     : ^^^^^^^^^^^^^

            case 'foo':
>'foo' : "foo"
>      : ^^^^^

                x.name;
>x.name : string
>       : ^^^^^^
>x : Foo
>  : ^^^
>name : string
>     : ^^^^^^
        }
    }
}

// Repro from #31319

const enum EnumTypeNode {
>EnumTypeNode : EnumTypeNode
>             : ^^^^^^^^^^^^

    Pattern = "Pattern",
>Pattern : EnumTypeNode.Pattern
>        : ^^^^^^^^^^^^^^^^^^^^
>"Pattern" : "Pattern"
>          : ^^^^^^^^^

    Disjunction = "Disjunction",
>Disjunction : EnumTypeNode.Disjunction
>            : ^^^^^^^^^^^^^^^^^^^^^^^^
>"Disjunction" : "Disjunction"
>              : ^^^^^^^^^^^^^
}

type NodeA = Disjunction | Pattern;
>NodeA : NodeA
>      : ^^^^^

interface NodeBase {
    type: NodeA["type"]
>type : EnumTypeNode
>     : ^^^^^^^^^^^^
}

interface Disjunction extends NodeBase {
    type: EnumTypeNode.Disjunction
>type : EnumTypeNode.Disjunction
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>EnumTypeNode : any
>             : ^^^

    alternatives: string[]
>alternatives : string[]
>             : ^^^^^^^^
}

interface Pattern extends NodeBase {
    type: EnumTypeNode.Pattern
>type : EnumTypeNode.Pattern
>     : ^^^^^^^^^^^^^^^^^^^^
>EnumTypeNode : any
>             : ^^^

    elements: string[]
>elements : string[]
>         : ^^^^^^^^
}

let n!: NodeA
>n : NodeA
>  : ^^^^^

if (n.type === "Disjunction") {
>n.type === "Disjunction" : boolean
>                         : ^^^^^^^
>n.type : EnumTypeNode
>       : ^^^^^^^^^^^^
>n : NodeA
>  : ^^^^^
>type : EnumTypeNode
>     : ^^^^^^^^^^^^
>"Disjunction" : "Disjunction"
>              : ^^^^^^^^^^^^^

    n.alternatives.slice()
>n.alternatives.slice() : string[]
>                       : ^^^^^^^^
>n.alternatives.slice : (start?: number, end?: number) => string[]
>                     : ^     ^^^      ^^   ^^^      ^^^^^^^^^^^^^
>n.alternatives : string[]
>               : ^^^^^^^^
>n : Disjunction
>  : ^^^^^^^^^^^
>alternatives : string[]
>             : ^^^^^^^^
>slice : (start?: number, end?: number) => string[]
>      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^^^^
}
else {
    n.elements.slice() // n should be narrowed to Pattern
>n.elements.slice() : string[]
>                   : ^^^^^^^^
>n.elements.slice : (start?: number, end?: number) => string[]
>                 : ^     ^^^      ^^   ^^^      ^^^^^^^^^^^^^
>n.elements : string[]
>           : ^^^^^^^^
>n : Pattern
>  : ^^^^^^^
>elements : string[]
>         : ^^^^^^^^
>slice : (start?: number, end?: number) => string[]
>      : ^     ^^^      ^^   ^^^      ^^^^^^^^^^^^^
}

