//// [tests/cases/compiler/discriminateObjectTypesOnly.ts] ////

=== discriminateObjectTypesOnly.ts ===
type Thing = number | object;
>Thing : Thing
>      : ^^^^^

const k: Thing = { toFixed: null }; // OK, satisfies object
>k : Thing
>  : ^^^^^
>{ toFixed: null } : { toFixed: null; }
>                  : ^^^^^^^^^^^^^^^^^^
>toFixed : null
>        : ^^^^

type Thing2 = number | { toFixed: null } | object;
>Thing2 : Thing2
>       : ^^^^^^
>toFixed : null
>        : ^^^^

const q: Thing2 = { toFixed: null };
>q : Thing2
>  : ^^^^^^
>{ toFixed: null } : { toFixed: null; }
>                  : ^^^^^^^^^^^^^^^^^^
>toFixed : null
>        : ^^^^

const h: Thing2 = { toString: null }; // OK, satisfies object
>h : Thing2
>  : ^^^^^^
>{ toString: null } : { toString: null; }
>                   : ^^^^^^^^^^^^^^^^^^^
>toString : null
>         : ^^^^

type Thing3 = number | { toFixed: null, toString: undefined } | object;
>Thing3 : Thing3
>       : ^^^^^^
>toFixed : null
>        : ^^^^
>toString : undefined
>         : ^^^^^^^^^

const l: Thing3 = { toString: undefined }; // error, toFixed isn't null
>l : Thing3
>  : ^^^^^^
>{ toString: undefined } : { toString: undefined; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>toString : undefined
>         : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

