//// [tests/cases/compiler/doYouNeedToChangeYourTargetLibraryES2015.ts] ////

=== doYouNeedToChangeYourTargetLibraryES2015.ts ===
// es2015
const noOp = () => {};
>noOp : () => void
>     : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

const testReflectApply = Reflect.apply(noOp, this, []);
>testReflectApply : void
>                 : ^^^^
>Reflect.apply(noOp, this, []) : void
>                              : ^^^^
>Reflect.apply : { <T, A extends readonly any[], R>(target: (this: T, ...args: A) => R, thisArgument: T, argumentsList: Readonly<A>): R; (target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any; }
>              : ^^^ ^^ ^^^^^^^^^              ^^ ^^      ^^                          ^^            ^^ ^^             ^^           ^^^ ^^^      ^^        ^^            ^^   ^^             ^^              ^^^   ^^^
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>apply : { <T, A extends readonly any[], R>(target: (this: T, ...args: A) => R, thisArgument: T, argumentsList: Readonly<A>): R; (target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any; }
>      : ^^^ ^^ ^^^^^^^^^              ^^ ^^      ^^                          ^^            ^^ ^^             ^^           ^^^ ^^^      ^^        ^^            ^^   ^^             ^^              ^^^   ^^^
>noOp : () => void
>     : ^^^^^^^^^^
>this : typeof globalThis
>     : ^^^^^^^^^^^^^^^^^
>[] : []
>   : ^^

const testReflectConstruct = Reflect.construct(noOp, []);
>testReflectConstruct : any
>Reflect.construct(noOp, []) : any
>Reflect.construct : { <A extends readonly any[], R>(target: new (...args: A) => R, argumentsList: Readonly<A>, newTarget?: new (...args: any) => any): R; (target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any; }
>                  : ^^^ ^^^^^^^^^              ^^ ^^      ^^                     ^^             ^^           ^^         ^^^                         ^^^ ^^^      ^^        ^^             ^^              ^^         ^^^        ^^^   ^^^
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>construct : { <A extends readonly any[], R>(target: new (...args: A) => R, argumentsList: Readonly<A>, newTarget?: new (...args: any) => any): R; (target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any; }
>          : ^^^ ^^^^^^^^^              ^^ ^^      ^^                     ^^             ^^           ^^         ^^^                         ^^^ ^^^      ^^        ^^             ^^              ^^         ^^^        ^^^   ^^^
>noOp : () => void
>     : ^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

const testReflectDefineProperty = Reflect.defineProperty({}, "", {});
>testReflectDefineProperty : boolean
>                          : ^^^^^^^
>Reflect.defineProperty({}, "", {}) : boolean
>                                   : ^^^^^^^
>Reflect.defineProperty : (target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => boolean
>                       : ^      ^^      ^^           ^^           ^^          ^^                                  ^^^^^       
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>defineProperty : (target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => boolean
>               : ^      ^^      ^^           ^^           ^^          ^^                                  ^^^^^       
>{} : {}
>   : ^^
>"" : ""
>   : ^^
>{} : {}
>   : ^^

const testReflectDeleteProperty = Reflect.deleteProperty({}, "");
>testReflectDeleteProperty : boolean
>                          : ^^^^^^^
>Reflect.deleteProperty({}, "") : boolean
>                               : ^^^^^^^
>Reflect.deleteProperty : (target: object, propertyKey: PropertyKey) => boolean
>                       : ^      ^^      ^^           ^^           ^^^^^       
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>deleteProperty : (target: object, propertyKey: PropertyKey) => boolean
>               : ^      ^^      ^^           ^^           ^^^^^       
>{} : {}
>   : ^^
>"" : ""
>   : ^^

const testReflectGet = Reflect.get({}, "");
>testReflectGet : any
>Reflect.get({}, "") : any
>Reflect.get : <T extends object, P extends PropertyKey>(target: T, propertyKey: P, receiver?: unknown) => P extends keyof T ? T[P] : any
>            : ^ ^^^^^^^^^      ^^ ^^^^^^^^^           ^^      ^^ ^^           ^^ ^^        ^^^       ^^^^^                              
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>get : <T extends object, P extends PropertyKey>(target: T, propertyKey: P, receiver?: unknown) => P extends keyof T ? T[P] : any
>    : ^ ^^^^^^^^^      ^^ ^^^^^^^^^           ^^      ^^ ^^           ^^ ^^        ^^^       ^^^^^                              
>{} : {}
>   : ^^
>"" : ""
>   : ^^

const testReflectGetOwnPropertyDescriptor = Reflect.getOwnPropertyDescriptor({}, "");
>testReflectGetOwnPropertyDescriptor : TypedPropertyDescriptor<any>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reflect.getOwnPropertyDescriptor({}, "") : TypedPropertyDescriptor<any>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reflect.getOwnPropertyDescriptor : <T extends object, P extends PropertyKey>(target: T, propertyKey: P) => TypedPropertyDescriptor<P extends keyof T ? T[P] : any> | undefined
>                                 : ^ ^^^^^^^^^      ^^ ^^^^^^^^^           ^^      ^^ ^^           ^^ ^^^^^                                                                   
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>getOwnPropertyDescriptor : <T extends object, P extends PropertyKey>(target: T, propertyKey: P) => TypedPropertyDescriptor<P extends keyof T ? T[P] : any> | undefined
>                         : ^ ^^^^^^^^^      ^^ ^^^^^^^^^           ^^      ^^ ^^           ^^ ^^^^^                                                                   
>{} : {}
>   : ^^
>"" : ""
>   : ^^

const testReflectGetPrototypeOf = Reflect.getPrototypeOf({});
>testReflectGetPrototypeOf : object
>                          : ^^^^^^
>Reflect.getPrototypeOf({}) : object
>                           : ^^^^^^
>Reflect.getPrototypeOf : (target: object) => object | null
>                       : ^      ^^      ^^^^^             
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>getPrototypeOf : (target: object) => object | null
>               : ^      ^^      ^^^^^             
>{} : {}
>   : ^^

const testReflectIsExtensible = Reflect.isExtensible({});
>testReflectIsExtensible : boolean
>                        : ^^^^^^^
>Reflect.isExtensible({}) : boolean
>                         : ^^^^^^^
>Reflect.isExtensible : (target: object) => boolean
>                     : ^      ^^      ^^^^^       
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>isExtensible : (target: object) => boolean
>             : ^      ^^      ^^^^^       
>{} : {}
>   : ^^

const testReflectOwnKeys = Reflect.ownKeys({});
>testReflectOwnKeys : (string | symbol)[]
>                   : ^^^^^^^^^^^^^^^^^^^
>Reflect.ownKeys({}) : (string | symbol)[]
>                    : ^^^^^^^^^^^^^^^^^^^
>Reflect.ownKeys : (target: object) => (string | symbol)[]
>                : ^      ^^      ^^^^^                   
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>ownKeys : (target: object) => (string | symbol)[]
>        : ^      ^^      ^^^^^                   
>{} : {}
>   : ^^

const testReflectPreventExtensions = Reflect.preventExtensions({});
>testReflectPreventExtensions : boolean
>                             : ^^^^^^^
>Reflect.preventExtensions({}) : boolean
>                              : ^^^^^^^
>Reflect.preventExtensions : (target: object) => boolean
>                          : ^      ^^      ^^^^^       
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>preventExtensions : (target: object) => boolean
>                  : ^      ^^      ^^^^^       
>{} : {}
>   : ^^

const testReflectSet = Reflect.set({}, "", 0);
>testReflectSet : boolean
>               : ^^^^^^^
>Reflect.set({}, "", 0) : boolean
>                       : ^^^^^^^
>Reflect.set : { <T extends object, P extends PropertyKey>(target: T, propertyKey: P, value: P extends keyof T ? T[P] : any, receiver?: any): boolean; (target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean; }
>            : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^           ^^      ^^ ^^           ^^ ^^     ^^                              ^^        ^^^   ^^^       ^^^      ^^      ^^           ^^           ^^     ^^   ^^        ^^^   ^^^       ^^^
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>set : { <T extends object, P extends PropertyKey>(target: T, propertyKey: P, value: P extends keyof T ? T[P] : any, receiver?: any): boolean; (target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^           ^^      ^^ ^^           ^^ ^^     ^^                              ^^        ^^^   ^^^       ^^^      ^^      ^^           ^^           ^^     ^^   ^^        ^^^   ^^^       ^^^
>{} : {}
>   : ^^
>"" : ""
>   : ^^
>0 : 0
>  : ^

const testReflectSetPrototypeOf = Reflect.setPrototypeOf({}, {}); 
>testReflectSetPrototypeOf : boolean
>                          : ^^^^^^^
>Reflect.setPrototypeOf({}, {}) : boolean
>                               : ^^^^^^^
>Reflect.setPrototypeOf : (target: object, proto: object | null) => boolean
>                       : ^      ^^      ^^     ^^             ^^^^^       
>Reflect : typeof Reflect
>        : ^^^^^^^^^^^^^^
>setPrototypeOf : (target: object, proto: object | null) => boolean
>               : ^      ^^      ^^     ^^             ^^^^^       
>{} : {}
>   : ^^
>{} : {}
>   : ^^

const testArrayFind = [""].find((val, idx, obj) => {
>testArrayFind : string
>              : ^^^^^^
>[""].find((val, idx, obj) => {    return true;}) : string
>                                                 : ^^^^^^
>[""].find : { <S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }
>          : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>find : { <S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }
>     : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>(val, idx, obj) => {    return true;} : (val: string, idx: number, obj: string[]) => true
>                                      : ^   ^^^^^^^^^^   ^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^
>val : string
>    : ^^^^^^
>idx : number
>    : ^^^^^^
>obj : string[]
>    : ^^^^^^^^

    return true;
>true : true
>     : ^^^^

});
const testArrayFindIndex = [""].findIndex((val, idx, obj) => {
>testArrayFindIndex : number
>                   : ^^^^^^
>[""].findIndex((val, idx, obj) => {    return true;}) : number
>                                                      : ^^^^^^
>[""].findIndex : (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number
>               : ^         ^^^     ^^^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>findIndex : (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number
>          : ^         ^^^     ^^^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(val, idx, obj) => {    return true;} : (val: string, idx: number, obj: string[]) => boolean
>                                      : ^   ^^^^^^^^^^   ^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^
>val : string
>    : ^^^^^^
>idx : number
>    : ^^^^^^
>obj : string[]
>    : ^^^^^^^^

    return true;
>true : true
>     : ^^^^

});
const testArrayFill = [""].fill("fill");
>testArrayFill : string[]
>              : ^^^^^^^^
>[""].fill("fill") : string[]
>                  : ^^^^^^^^
>[""].fill : (value: string, start?: number, end?: number) => string[]
>          : ^     ^^^^^^^^^^     ^^^      ^^   ^^^      ^^^^^^^^^^^^^
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>fill : (value: string, start?: number, end?: number) => string[]
>     : ^     ^^^^^^^^^^     ^^^      ^^   ^^^      ^^^^^^^^^^^^^
>"fill" : "fill"
>       : ^^^^^^

const testArrayCopyWithin = [""].copyWithin(0, 0);
>testArrayCopyWithin : string[]
>                    : ^^^^^^^^
>[""].copyWithin(0, 0) : string[]
>                      : ^^^^^^^^
>[""].copyWithin : (target: number, start: number, end?: number) => string[]
>                : ^      ^^      ^^     ^^      ^^   ^^^      ^^^^^^^^^^^^^
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>copyWithin : (target: number, start: number, end?: number) => string[]
>           : ^      ^^      ^^     ^^      ^^   ^^^      ^^^^^^^^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^

const testArrayEntries = [""].entries();
>testArrayEntries : ArrayIterator<[number, string]>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[""].entries() : ArrayIterator<[number, string]>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[""].entries : () => ArrayIterator<[number, string]>
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>entries : () => ArrayIterator<[number, string]>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const testArrayKeys = [""].keys();
>testArrayKeys : ArrayIterator<number>
>              : ^^^^^^^^^^^^^^^^^^^^^
>[""].keys() : ArrayIterator<number>
>            : ^^^^^^^^^^^^^^^^^^^^^
>[""].keys : () => ArrayIterator<number>
>          : ^^^^^^                     
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>keys : () => ArrayIterator<number>
>     : ^^^^^^                     

const testArrayValues = [""].values();
>testArrayValues : ArrayIterator<string>
>                : ^^^^^^^^^^^^^^^^^^^^^
>[""].values() : ArrayIterator<string>
>              : ^^^^^^^^^^^^^^^^^^^^^
>[""].values : () => ArrayIterator<string>
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[""] : string[]
>     : ^^^^^^^^
>"" : ""
>   : ^^
>values : () => ArrayIterator<string>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

const testArrayConstructorFrom = Array.from([]);
>testArrayConstructorFrom : any[]
>                         : ^^^^^
>Array.from([]) : any[]
>               : ^^^^^
>Array.from : { <T>(arrayLike: ArrayLike<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }
>           : ^^^ ^^         ^^            ^^^   ^^^ ^^ ^^         ^^            ^^     ^^                      ^^       ^^^   ^^^   ^^^ ^^        ^^                          ^^^   ^^^ ^^ ^^        ^^                          ^^     ^^                      ^^       ^^^   ^^^   ^^^
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^
>from : { <T>(arrayLike: ArrayLike<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; <T>(iterable: Iterable<T> | ArrayLike<T>): T[]; <T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[]; }
>     : ^^^ ^^         ^^            ^^^   ^^^ ^^ ^^         ^^            ^^     ^^                      ^^       ^^^   ^^^   ^^^ ^^        ^^                          ^^^   ^^^ ^^ ^^        ^^                          ^^     ^^                      ^^       ^^^   ^^^   ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

const testArrayConstructorOf = Array.of([]);
>testArrayConstructorOf : any[][]
>                       : ^^^^^^^
>Array.of([]) : any[][]
>             : ^^^^^^^
>Array.of : <T>(...items: T[]) => T[]
>         : ^ ^^^^^     ^^   ^^^^^   
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^
>of : <T>(...items: T[]) => T[]
>   : ^ ^^^^^     ^^   ^^^^^   
>[] : undefined[]
>   : ^^^^^^^^^^^

const testObjectConstructorAssign = Object.assign({}, {});
>testObjectConstructorAssign : {}
>                            : ^^
>Object.assign({}, {}) : {}
>                      : ^^
>Object.assign : { <T extends {}, U>(target: T, source: U): T & U; <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V; <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W; (target: object, ...sources: any[]): any; }
>              : ^^^ ^^^^^^^^^  ^^ ^^      ^^ ^^      ^^ ^^^     ^^^ ^^^^^^^^^  ^^ ^^ ^^      ^^ ^^       ^^ ^^       ^^ ^^^         ^^^ ^^^^^^^^^  ^^ ^^ ^^ ^^      ^^ ^^       ^^ ^^       ^^ ^^       ^^ ^^^             ^^^      ^^      ^^^^^       ^^     ^^^   ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>assign : { <T extends {}, U>(target: T, source: U): T & U; <T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V; <T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W; (target: object, ...sources: any[]): any; }
>       : ^^^ ^^^^^^^^^  ^^ ^^      ^^ ^^      ^^ ^^^     ^^^ ^^^^^^^^^  ^^ ^^ ^^      ^^ ^^       ^^ ^^       ^^ ^^^         ^^^ ^^^^^^^^^  ^^ ^^ ^^ ^^      ^^ ^^       ^^ ^^       ^^ ^^       ^^ ^^^             ^^^      ^^      ^^^^^       ^^     ^^^   ^^^
>{} : {}
>   : ^^
>{} : {}
>   : ^^

const testObjectConstructorGetOwnPropertySymbols = Object.getOwnPropertySymbols({});
>testObjectConstructorGetOwnPropertySymbols : symbol[]
>                                           : ^^^^^^^^
>Object.getOwnPropertySymbols({}) : symbol[]
>                                 : ^^^^^^^^
>Object.getOwnPropertySymbols : (o: any) => symbol[]
>                             : ^ ^^   ^^^^^        
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>getOwnPropertySymbols : (o: any) => symbol[]
>                      : ^ ^^   ^^^^^        
>{} : {}
>   : ^^

const testObjectConstructorKeys = Object.keys({});
>testObjectConstructorKeys : string[]
>                          : ^^^^^^^^
>Object.keys({}) : string[]
>                : ^^^^^^^^
>Object.keys : { (o: object): string[]; (o: {}): string[]; }
>            : ^^^ ^^      ^^^        ^^^ ^^  ^^^        ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>keys : { (o: object): string[]; (o: {}): string[]; }
>     : ^^^ ^^      ^^^        ^^^ ^^  ^^^        ^^^
>{} : {}
>   : ^^

const testObjectConstructorIs = Object.is({}, {});
>testObjectConstructorIs : boolean
>                        : ^^^^^^^
>Object.is({}, {}) : boolean
>                  : ^^^^^^^
>Object.is : (value1: any, value2: any) => boolean
>          : ^      ^^   ^^      ^^   ^^^^^       
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>is : (value1: any, value2: any) => boolean
>   : ^      ^^   ^^      ^^   ^^^^^       
>{} : {}
>   : ^^
>{} : {}
>   : ^^

const testObjectConstructorSetPrototypeOf = Object.setPrototypeOf({}, {});
>testObjectConstructorSetPrototypeOf : any
>Object.setPrototypeOf({}, {}) : any
>Object.setPrototypeOf : (o: any, proto: object | null) => any
>                      : ^ ^^   ^^     ^^             ^^^^^   
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>setPrototypeOf : (o: any, proto: object | null) => any
>               : ^ ^^   ^^     ^^             ^^^^^   
>{} : {}
>   : ^^
>{} : {}
>   : ^^

const testNumberConstructorIsFinite = Number.isFinite(0);
>testNumberConstructorIsFinite : boolean
>                              : ^^^^^^^
>Number.isFinite(0) : boolean
>                   : ^^^^^^^
>Number.isFinite : (number: unknown) => boolean
>                : ^      ^^       ^^^^^       
>Number : NumberConstructor
>       : ^^^^^^^^^^^^^^^^^
>isFinite : (number: unknown) => boolean
>         : ^      ^^       ^^^^^       
>0 : 0
>  : ^

const testNumberConstructorIsInteger = Number.isInteger(0);
>testNumberConstructorIsInteger : boolean
>                               : ^^^^^^^
>Number.isInteger(0) : boolean
>                    : ^^^^^^^
>Number.isInteger : (number: unknown) => boolean
>                 : ^      ^^       ^^^^^       
>Number : NumberConstructor
>       : ^^^^^^^^^^^^^^^^^
>isInteger : (number: unknown) => boolean
>          : ^      ^^       ^^^^^       
>0 : 0
>  : ^

const testNumberConstructorIsNan = Number.isNaN(0);
>testNumberConstructorIsNan : boolean
>                           : ^^^^^^^
>Number.isNaN(0) : boolean
>                : ^^^^^^^
>Number.isNaN : (number: unknown) => boolean
>             : ^      ^^       ^^^^^       
>Number : NumberConstructor
>       : ^^^^^^^^^^^^^^^^^
>isNaN : (number: unknown) => boolean
>      : ^      ^^       ^^^^^       
>0 : 0
>  : ^

const testNumberConstructorIsSafeInteger = Number.isSafeInteger(0);
>testNumberConstructorIsSafeInteger : boolean
>                                   : ^^^^^^^
>Number.isSafeInteger(0) : boolean
>                        : ^^^^^^^
>Number.isSafeInteger : (number: unknown) => boolean
>                     : ^      ^^       ^^^^^       
>Number : NumberConstructor
>       : ^^^^^^^^^^^^^^^^^
>isSafeInteger : (number: unknown) => boolean
>              : ^      ^^       ^^^^^       
>0 : 0
>  : ^

const testNumberConstructorParseFloat = Number.parseFloat("0");
>testNumberConstructorParseFloat : number
>                                : ^^^^^^
>Number.parseFloat("0") : number
>                       : ^^^^^^
>Number.parseFloat : (string: string) => number
>                  : ^      ^^      ^^^^^      
>Number : NumberConstructor
>       : ^^^^^^^^^^^^^^^^^
>parseFloat : (string: string) => number
>           : ^      ^^      ^^^^^      
>"0" : "0"
>    : ^^^

const testNumberConstructorParseInt = Number.parseInt("0");
>testNumberConstructorParseInt : number
>                              : ^^^^^^
>Number.parseInt("0") : number
>                     : ^^^^^^
>Number.parseInt : (string: string, radix?: number) => number
>                : ^      ^^      ^^     ^^^      ^^^^^      
>Number : NumberConstructor
>       : ^^^^^^^^^^^^^^^^^
>parseInt : (string: string, radix?: number) => number
>         : ^      ^^      ^^     ^^^      ^^^^^      
>"0" : "0"
>    : ^^^

const testMathClz32 = Math.clz32(0);
>testMathClz32 : number
>              : ^^^^^^
>Math.clz32(0) : number
>              : ^^^^^^
>Math.clz32 : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>clz32 : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathImul = Math.imul(0,0);
>testMathImul : number
>             : ^^^^^^
>Math.imul(0,0) : number
>               : ^^^^^^
>Math.imul : (x: number, y: number) => number
>          : ^ ^^      ^^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>imul : (x: number, y: number) => number
>     : ^ ^^      ^^ ^^      ^^^^^      
>0 : 0
>  : ^
>0 : 0
>  : ^

const testMathSign = Math.sign(0);
>testMathSign : number
>             : ^^^^^^
>Math.sign(0) : number
>             : ^^^^^^
>Math.sign : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>sign : (x: number) => number
>     : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathLog10 = Math.log10(0);
>testMathLog10 : number
>              : ^^^^^^
>Math.log10(0) : number
>              : ^^^^^^
>Math.log10 : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>log10 : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathLog2 = Math.log2(0);
>testMathLog2 : number
>             : ^^^^^^
>Math.log2(0) : number
>             : ^^^^^^
>Math.log2 : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>log2 : (x: number) => number
>     : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathLog1p = Math.log1p(0);
>testMathLog1p : number
>              : ^^^^^^
>Math.log1p(0) : number
>              : ^^^^^^
>Math.log1p : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>log1p : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathExpm1 = Math.expm1(0);
>testMathExpm1 : number
>              : ^^^^^^
>Math.expm1(0) : number
>              : ^^^^^^
>Math.expm1 : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>expm1 : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathCosh = Math.cosh(0);
>testMathCosh : number
>             : ^^^^^^
>Math.cosh(0) : number
>             : ^^^^^^
>Math.cosh : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>cosh : (x: number) => number
>     : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathSinh = Math.sinh(0);
>testMathSinh : number
>             : ^^^^^^
>Math.sinh(0) : number
>             : ^^^^^^
>Math.sinh : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>sinh : (x: number) => number
>     : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathTanh = Math.tanh(0);
>testMathTanh : number
>             : ^^^^^^
>Math.tanh(0) : number
>             : ^^^^^^
>Math.tanh : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>tanh : (x: number) => number
>     : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathAcosh = Math.acosh(0);
>testMathAcosh : number
>              : ^^^^^^
>Math.acosh(0) : number
>              : ^^^^^^
>Math.acosh : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>acosh : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathAsinh = Math.asinh(0);
>testMathAsinh : number
>              : ^^^^^^
>Math.asinh(0) : number
>              : ^^^^^^
>Math.asinh : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>asinh : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathAtanh = Math.atanh(0);
>testMathAtanh : number
>              : ^^^^^^
>Math.atanh(0) : number
>              : ^^^^^^
>Math.atanh : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>atanh : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathHypot = Math.hypot(0,0);
>testMathHypot : number
>              : ^^^^^^
>Math.hypot(0,0) : number
>                : ^^^^^^
>Math.hypot : (...values: number[]) => number
>           : ^^^^      ^^        ^^^^^      
>Math : Math
>     : ^^^^
>hypot : (...values: number[]) => number
>      : ^^^^      ^^        ^^^^^      
>0 : 0
>  : ^
>0 : 0
>  : ^

const testMathTrunc = Math.trunc(0);
>testMathTrunc : number
>              : ^^^^^^
>Math.trunc(0) : number
>              : ^^^^^^
>Math.trunc : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>trunc : (x: number) => number
>      : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathFround = Math.fround(0);
>testMathFround : number
>               : ^^^^^^
>Math.fround(0) : number
>               : ^^^^^^
>Math.fround : (x: number) => number
>            : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>fround : (x: number) => number
>       : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMathCbrt = Math.cbrt(0);
>testMathCbrt : number
>             : ^^^^^^
>Math.cbrt(0) : number
>             : ^^^^^^
>Math.cbrt : (x: number) => number
>          : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>cbrt : (x: number) => number
>     : ^ ^^      ^^^^^      
>0 : 0
>  : ^

const testMap: Map<any, any> = null as any;
>testMap : Map<any, any>
>        : ^^^^^^^^^^^^^
>null as any : any

const testSet: Set<any> = null as any;
>testSet : Set<any>
>        : ^^^^^^^^
>null as any : any

const testPromiseAll = Promise.all([]);
>testPromiseAll : Promise<[]>
>               : ^^^^^^^^^^^
>Promise.all([]) : Promise<[]>
>                : ^^^^^^^^^^^
>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
>            : ^^^ ^^      ^^                            ^^^                     ^^^ ^^^^^^^^^                       ^^      ^^ ^^^                                                     ^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
>    : ^^^ ^^      ^^                            ^^^                     ^^^ ^^^^^^^^^                       ^^      ^^ ^^^                                                     ^^^
>[] : []
>   : ^^

const testPromiseRace = Promise.race([]);
>testPromiseRace : Promise<never>
>                : ^^^^^^^^^^^^^^
>Promise.race([]) : Promise<never>
>                 : ^^^^^^^^^^^^^^
>Promise.race : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>; <T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>; }
>             : ^^^ ^^      ^^                            ^^^                   ^^^ ^^^^^^^^^                       ^^      ^^ ^^^                           ^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>race : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>; <T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>; }
>     : ^^^ ^^      ^^                            ^^^                   ^^^ ^^^^^^^^^                       ^^      ^^ ^^^                           ^^^
>[] : []
>   : ^^

const testPromiseResolve = Promise.resolve();
>testPromiseResolve : Promise<void>
>                   : ^^^^^^^^^^^^^
>Promise.resolve() : Promise<void>
>                  : ^^^^^^^^^^^^^
>Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
>                : ^^^^^^             ^^^ ^^     ^^ ^^^                   ^^^ ^^     ^^                  ^^^                   ^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
>        : ^^^^^^             ^^^ ^^     ^^ ^^^                   ^^^ ^^     ^^                  ^^^                   ^^^

const testPromiseReject = Promise.reject();
>testPromiseReject : Promise<never>
>                  : ^^^^^^^^^^^^^^
>Promise.reject() : Promise<never>
>                 : ^^^^^^^^^^^^^^
>Promise.reject : <T = never>(reason?: any) => Promise<T>
>               : ^ ^^^^^^^^^^      ^^^   ^^^^^          
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>reject : <T = never>(reason?: any) => Promise<T>
>       : ^ ^^^^^^^^^^      ^^^   ^^^^^          

const testSymbolFor = Symbol.for('a');
>testSymbolFor : unique symbol
>              : ^^^^^^^^^^^^^
>Symbol.for('a') : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol.for : (key: string) => symbol
>           : ^   ^^      ^^^^^      
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>for : (key: string) => symbol
>    : ^   ^^      ^^^^^      
>'a' : "a"
>    : ^^^

const testSymbolKeyFor = Symbol.keyFor(testSymbolFor);
>testSymbolKeyFor : string
>                 : ^^^^^^
>Symbol.keyFor(testSymbolFor) : string
>                             : ^^^^^^
>Symbol.keyFor : (sym: symbol) => string | undefined
>              : ^   ^^      ^^^^^                  
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>keyFor : (sym: symbol) => string | undefined
>       : ^   ^^      ^^^^^                  
>testSymbolFor : unique symbol
>              : ^^^^^^^^^^^^^

const testWeakMap: WeakMap<any, any> = null as any;
>testWeakMap : WeakMap<any, any>
>            : ^^^^^^^^^^^^^^^^^
>null as any : any

const testWeakSet: WeakMap<any, any> = null as any;
>testWeakSet : WeakMap<any, any>
>            : ^^^^^^^^^^^^^^^^^
>null as any : any

const testIterator: Iterator<any, any, any> = null as any;
>testIterator : Iterator<any, any, any>
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>null as any : any

const testAsyncIterator: AsyncIterator<any, any, any> = null as any;
>testAsyncIterator : AsyncIterator<any, any, any>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>null as any : any

const testStringCodePointAt = "".codePointAt(0);
>testStringCodePointAt : number
>                      : ^^^^^^
>"".codePointAt(0) : number
>                  : ^^^^^^
>"".codePointAt : (pos: number) => number | undefined
>               : ^   ^^      ^^^^^                  
>"" : ""
>   : ^^
>codePointAt : (pos: number) => number | undefined
>            : ^   ^^      ^^^^^                  
>0 : 0
>  : ^

const testStringIncludes = "".includes("");
>testStringIncludes : boolean
>                   : ^^^^^^^
>"".includes("") : boolean
>                : ^^^^^^^
>"".includes : (searchString: string, position?: number) => boolean
>            : ^            ^^      ^^        ^^^      ^^^^^       
>"" : ""
>   : ^^
>includes : (searchString: string, position?: number) => boolean
>         : ^            ^^      ^^        ^^^      ^^^^^       
>"" : ""
>   : ^^

const testStringEndsWith = "".endsWith("");
>testStringEndsWith : boolean
>                   : ^^^^^^^
>"".endsWith("") : boolean
>                : ^^^^^^^
>"".endsWith : (searchString: string, endPosition?: number) => boolean
>            : ^            ^^      ^^           ^^^      ^^^^^       
>"" : ""
>   : ^^
>endsWith : (searchString: string, endPosition?: number) => boolean
>         : ^            ^^      ^^           ^^^      ^^^^^       
>"" : ""
>   : ^^

const testStringNormalize = "".normalize();
>testStringNormalize : string
>                    : ^^^^^^
>"".normalize() : string
>               : ^^^^^^
>"".normalize : { (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string; (form?: string): string; }
>             : ^^^    ^^                               ^^^      ^^^    ^^^      ^^^      ^^^
>"" : ""
>   : ^^
>normalize : { (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string; (form?: string): string; }
>          : ^^^    ^^                               ^^^      ^^^    ^^^      ^^^      ^^^

const testStringRepeat = "".repeat(0);
>testStringRepeat : string
>                 : ^^^^^^
>"".repeat(0) : string
>             : ^^^^^^
>"".repeat : (count: number) => string
>          : ^     ^^      ^^^^^      
>"" : ""
>   : ^^
>repeat : (count: number) => string
>       : ^     ^^      ^^^^^      
>0 : 0
>  : ^

const testStringStartsWith = "".startsWith("");
>testStringStartsWith : boolean
>                     : ^^^^^^^
>"".startsWith("") : boolean
>                  : ^^^^^^^
>"".startsWith : (searchString: string, position?: number) => boolean
>              : ^            ^^      ^^        ^^^      ^^^^^       
>"" : ""
>   : ^^
>startsWith : (searchString: string, position?: number) => boolean
>           : ^            ^^      ^^        ^^^      ^^^^^       
>"" : ""
>   : ^^

const testStringAnchor = "".anchor("");
>testStringAnchor : string
>                 : ^^^^^^
>"".anchor("") : string
>              : ^^^^^^
>"".anchor : (name: string) => string
>          : ^    ^^      ^^^^^      
>"" : ""
>   : ^^
>anchor : (name: string) => string
>       : ^    ^^      ^^^^^      
>"" : ""
>   : ^^

const testStringBig = "".big();
>testStringBig : string
>              : ^^^^^^
>"".big() : string
>         : ^^^^^^
>"".big : () => string
>       : ^^^^^^      
>"" : ""
>   : ^^
>big : () => string
>    : ^^^^^^      

const testStringBlink = "".blink();
>testStringBlink : string
>                : ^^^^^^
>"".blink() : string
>           : ^^^^^^
>"".blink : () => string
>         : ^^^^^^      
>"" : ""
>   : ^^
>blink : () => string
>      : ^^^^^^      

const testStringBold = "".bold();
>testStringBold : string
>               : ^^^^^^
>"".bold() : string
>          : ^^^^^^
>"".bold : () => string
>        : ^^^^^^      
>"" : ""
>   : ^^
>bold : () => string
>     : ^^^^^^      

const testStringFixed = "".fixed();
>testStringFixed : string
>                : ^^^^^^
>"".fixed() : string
>           : ^^^^^^
>"".fixed : () => string
>         : ^^^^^^      
>"" : ""
>   : ^^
>fixed : () => string
>      : ^^^^^^      

const testStringFontColor = "".fontcolor("blue");
>testStringFontColor : string
>                    : ^^^^^^
>"".fontcolor("blue") : string
>                     : ^^^^^^
>"".fontcolor : (color: string) => string
>             : ^     ^^      ^^^^^      
>"" : ""
>   : ^^
>fontcolor : (color: string) => string
>          : ^     ^^      ^^^^^      
>"blue" : "blue"
>       : ^^^^^^

const testStringFontSize = "".fontsize(0);
>testStringFontSize : string
>                   : ^^^^^^
>"".fontsize(0) : string
>               : ^^^^^^
>"".fontsize : { (size: number): string; (size: string): string; }
>            : ^^^    ^^      ^^^      ^^^    ^^      ^^^      ^^^
>"" : ""
>   : ^^
>fontsize : { (size: number): string; (size: string): string; }
>         : ^^^    ^^      ^^^      ^^^    ^^      ^^^      ^^^
>0 : 0
>  : ^

const testStringItalics = "".italics();
>testStringItalics : string
>                  : ^^^^^^
>"".italics() : string
>             : ^^^^^^
>"".italics : () => string
>           : ^^^^^^      
>"" : ""
>   : ^^
>italics : () => string
>        : ^^^^^^      

const testStringLink = "".link("");
>testStringLink : string
>               : ^^^^^^
>"".link("") : string
>            : ^^^^^^
>"".link : (url: string) => string
>        : ^   ^^      ^^^^^      
>"" : ""
>   : ^^
>link : (url: string) => string
>     : ^   ^^      ^^^^^      
>"" : ""
>   : ^^

const testStringSmall = "".small();
>testStringSmall : string
>                : ^^^^^^
>"".small() : string
>           : ^^^^^^
>"".small : () => string
>         : ^^^^^^      
>"" : ""
>   : ^^
>small : () => string
>      : ^^^^^^      

const testStringStrike = "".strike();
>testStringStrike : string
>                 : ^^^^^^
>"".strike() : string
>            : ^^^^^^
>"".strike : () => string
>          : ^^^^^^      
>"" : ""
>   : ^^
>strike : () => string
>       : ^^^^^^      

const testStringSub = "".sub();
>testStringSub : string
>              : ^^^^^^
>"".sub() : string
>         : ^^^^^^
>"".sub : () => string
>       : ^^^^^^      
>"" : ""
>   : ^^
>sub : () => string
>    : ^^^^^^      

const testStringSup = "".sup();
>testStringSup : string
>              : ^^^^^^
>"".sup() : string
>         : ^^^^^^
>"".sup : () => string
>       : ^^^^^^      
>"" : ""
>   : ^^
>sup : () => string
>    : ^^^^^^      

const testStringConstructorFromCodePoint = String.fromCodePoint();
>testStringConstructorFromCodePoint : string
>                                   : ^^^^^^
>String.fromCodePoint() : string
>                       : ^^^^^^
>String.fromCodePoint : (...codePoints: number[]) => string
>                     : ^^^^          ^^        ^^^^^      
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^
>fromCodePoint : (...codePoints: number[]) => string
>              : ^^^^          ^^        ^^^^^      

const testStringConstructorRaw = String.raw``;
>testStringConstructorRaw : string
>                         : ^^^^^^
>String.raw`` : string
>             : ^^^^^^
>String.raw : (template: { raw: readonly string[] | ArrayLike<string>; }, ...substitutions: any[]) => string
>           : ^        ^^                                               ^^^^^             ^^     ^^^^^      
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^
>raw : (template: { raw: readonly string[] | ArrayLike<string>; }, ...substitutions: any[]) => string
>    : ^        ^^                                               ^^^^^             ^^     ^^^^^      
>`` : ""
>   : ^^

const testRegExpFlags = /abc/g.flags;
>testRegExpFlags : string
>                : ^^^^^^
>/abc/g.flags : string
>             : ^^^^^^
>/abc/g : RegExp
>       : ^^^^^^
>flags : string
>      : ^^^^^^

const testRegExpSticky = /abc/g.sticky;
>testRegExpSticky : boolean
>                 : ^^^^^^^
>/abc/g.sticky : boolean
>              : ^^^^^^^
>/abc/g : RegExp
>       : ^^^^^^
>sticky : boolean
>       : ^^^^^^^

const testRegExpUnicode = /abc/g.unicode;
>testRegExpUnicode : boolean
>                  : ^^^^^^^
>/abc/g.unicode : boolean
>               : ^^^^^^^
>/abc/g : RegExp
>       : ^^^^^^
>unicode : boolean
>        : ^^^^^^^

