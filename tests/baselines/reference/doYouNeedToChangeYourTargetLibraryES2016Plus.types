//// [tests/cases/compiler/doYouNeedToChangeYourTargetLibraryES2016Plus.ts] ////

=== doYouNeedToChangeYourTargetLibraryES2016Plus.ts ===
// es2016
const testIncludes = ["hello"].includes("world");
>testIncludes : any
>             : ^^^
>["hello"].includes("world") : any
>                            : ^^^
>["hello"].includes : any
>                   : ^^^
>["hello"] : string[]
>          : ^^^^^^^^
>"hello" : "hello"
>        : ^^^^^^^
>includes : any
>         : ^^^
>"world" : "world"
>        : ^^^^^^^

// es2017
const testStringPadStart = "".padStart(2);
>testStringPadStart : any
>                   : ^^^
>"".padStart(2) : any
>               : ^^^
>"".padStart : any
>            : ^^^
>"" : ""
>   : ^^
>padStart : any
>         : ^^^
>2 : 2
>  : ^

const testStringPadEnd = "".padEnd(2);
>testStringPadEnd : any
>                 : ^^^
>"".padEnd(2) : any
>             : ^^^
>"".padEnd : any
>          : ^^^
>"" : ""
>   : ^^
>padEnd : any
>       : ^^^
>2 : 2
>  : ^

const testObjectConstructorValues = Object.values({});
>testObjectConstructorValues : any
>                            : ^^^
>Object.values({}) : any
>                  : ^^^
>Object.values : any
>              : ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>values : any
>       : ^^^
>{} : {}
>   : ^^

const testObjectConstructorEntries = Object.entries({});
>testObjectConstructorEntries : any
>                             : ^^^
>Object.entries({}) : any
>                   : ^^^
>Object.entries : any
>               : ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>entries : any
>        : ^^^
>{} : {}
>   : ^^

const testObjectConstructorGetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors({});
>testObjectConstructorGetOwnPropertyDescriptors : any
>                                               : ^^^
>Object.getOwnPropertyDescriptors({}) : any
>                                     : ^^^
>Object.getOwnPropertyDescriptors : any
>                                 : ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>getOwnPropertyDescriptors : any
>                          : ^^^
>{} : {}
>   : ^^

const testIntlFormatToParts = new Intl.DateTimeFormat("en-US").formatToParts();
>testIntlFormatToParts : any
>                      : ^^^
>new Intl.DateTimeFormat("en-US").formatToParts() : any
>                                                 : ^^^
>new Intl.DateTimeFormat("en-US").formatToParts : any
>                                               : ^^^
>new Intl.DateTimeFormat("en-US") : Intl.DateTimeFormat
>                                 : ^^^^^^^^^^^^^^^^^^^
>Intl.DateTimeFormat : Intl.DateTimeFormatConstructor
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>DateTimeFormat : Intl.DateTimeFormatConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"en-US" : "en-US"
>        : ^^^^^^^
>formatToParts : any
>              : ^^^

const testAtomics = Atomics.add(new Uint8Array(0), 0, 0);
>testAtomics : any
>            : ^^^
>Atomics.add(new Uint8Array(0), 0, 0) : any
>                                     : ^^^
>Atomics.add : any
>            : ^^^
>Atomics : any
>        : ^^^
>add : any
>    : ^^^
>new Uint8Array(0) : Uint8Array<ArrayBuffer>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>0 : 0
>  : ^
>0 : 0
>  : ^

const testSharedArrayBuffer = new SharedArrayBuffer(5);
>testSharedArrayBuffer : any
>                      : ^^^
>new SharedArrayBuffer(5) : any
>                         : ^^^
>SharedArrayBuffer : any
>                  : ^^^
>5 : 5
>  : ^

// es2018
const testPromiseFinally = new Promise(() => {}).finally();
>testPromiseFinally : any
>                   : ^^^
>new Promise(() => {}).finally() : any
>                                : ^^^
>new Promise(() => {}).finally : any
>                              : ^^^
>new Promise(() => {}) : Promise<unknown>
>                      : ^^^^^^^^^^^^^^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^
>finally : any
>        : ^^^

const testRegExpMatchArrayGroups = "2019-04-30".match(/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g).groups;
>testRegExpMatchArrayGroups : any
>                           : ^^^
>"2019-04-30".match(/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g).groups : any
>                                                                                    : ^^^
>"2019-04-30".match(/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g) : RegExpMatchArray
>                                                                             : ^^^^^^^^^^^^^^^^
>"2019-04-30".match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
>                   : ^^^      ^^               ^^^                       ^^^       ^^                                                            ^^^                       ^^^
>"2019-04-30" : "2019-04-30"
>             : ^^^^^^^^^^^^
>match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
>      : ^^^      ^^               ^^^                       ^^^       ^^                                                            ^^^                       ^^^
>/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g : RegExp
>                                                         : ^^^^^^
>groups : any
>       : ^^^

const testRegExpExecArrayGroups = /(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec("2019-04-30").groups;
>testRegExpExecArrayGroups : any
>                          : ^^^
>/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec("2019-04-30").groups : any
>                                                                                   : ^^^
>/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec("2019-04-30") : RegExpExecArray
>                                                                            : ^^^^^^^^^^^^^^^
>/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec : (string: string) => RegExpExecArray | null
>                                                              : ^      ^^      ^^^^^                      
>/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g : RegExp
>                                                         : ^^^^^^
>exec : (string: string) => RegExpExecArray | null
>     : ^      ^^      ^^^^^                      
>"2019-04-30" : "2019-04-30"
>             : ^^^^^^^^^^^^
>groups : any
>       : ^^^

const testRegExpDotAll = /foo/g.dotAll;
>testRegExpDotAll : any
>                 : ^^^
>/foo/g.dotAll : any
>              : ^^^
>/foo/g : RegExp
>       : ^^^^^^
>dotAll : any
>       : ^^^

const testIntlPluralRules = new Intl.PluralRules("ar-EG").select(0);
>testIntlPluralRules : any
>                    : ^^^
>new Intl.PluralRules("ar-EG").select(0) : any
>                                        : ^^^
>new Intl.PluralRules("ar-EG").select : any
>                                     : ^^^
>new Intl.PluralRules("ar-EG") : any
>                              : ^^^
>Intl.PluralRules : any
>                 : ^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>PluralRules : any
>            : ^^^
>"ar-EG" : "ar-EG"
>        : ^^^^^^^
>select : any
>       : ^^^
>0 : 0
>  : ^

const testAsyncGenerator: AsyncGenerator<any> = null as any;
>testAsyncGenerator : AsyncGenerator<any>
>                   : ^^^^^^^^^^^^^^^^^^^
>null as any : any
>            : ^^^

const testAsyncGeneratorFunction: AsyncGeneratorFunction = null as any;
>testAsyncGeneratorFunction : AsyncGeneratorFunction
>                           : ^^^^^^^^^^^^^^^^^^^^^^
>null as any : any
>            : ^^^

const testAsyncIterable: AsyncIterable<any> = null as any;
>testAsyncIterable : AsyncIterable<any>
>                  : ^^^^^^^^^^^^^^^^^^
>null as any : any
>            : ^^^

const testAsyncIterableIterator: AsyncIterableIterator<any> = null as any;
>testAsyncIterableIterator : AsyncIterableIterator<any>
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>null as any : any
>            : ^^^

const testNumberFormatFormatToParts = new Intl.NumberFormat("en-US").formatToParts();
>testNumberFormatFormatToParts : any
>                              : ^^^
>new Intl.NumberFormat("en-US").formatToParts() : any
>                                               : ^^^
>new Intl.NumberFormat("en-US").formatToParts : any
>                                             : ^^^
>new Intl.NumberFormat("en-US") : Intl.NumberFormat
>                               : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"en-US" : "en-US"
>        : ^^^^^^^
>formatToParts : any
>              : ^^^

// es2019
const testArrayFlat = [].flat();
>testArrayFlat : any
>              : ^^^
>[].flat() : any
>          : ^^^
>[].flat : any
>        : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>flat : any
>     : ^^^

const testArrayFlatMap = [].flatMap();
>testArrayFlatMap : any
>                 : ^^^
>[].flatMap() : any
>             : ^^^
>[].flatMap : any
>           : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>flatMap : any
>        : ^^^

const testObjectConstructorFromEntries = Object.fromEntries({});
>testObjectConstructorFromEntries : any
>                                 : ^^^
>Object.fromEntries({}) : any
>                       : ^^^
>Object.fromEntries : any
>                   : ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>fromEntries : any
>            : ^^^
>{} : {}
>   : ^^

const testStringTrimStart = "".trimStart();
>testStringTrimStart : any
>                    : ^^^
>"".trimStart() : any
>               : ^^^
>"".trimStart : any
>             : ^^^
>"" : ""
>   : ^^
>trimStart : any
>          : ^^^

const testStringTrimEnd = "".trimEnd();
>testStringTrimEnd : any
>                  : ^^^
>"".trimEnd() : any
>             : ^^^
>"".trimEnd : any
>           : ^^^
>"" : ""
>   : ^^
>trimEnd : any
>        : ^^^

const testStringTrimLeft = "".trimLeft();
>testStringTrimLeft : any
>                   : ^^^
>"".trimLeft() : any
>              : ^^^
>"".trimLeft : any
>            : ^^^
>"" : ""
>   : ^^
>trimLeft : any
>         : ^^^

const testStringTrimRight = "".trimRight();
>testStringTrimRight : any
>                    : ^^^
>"".trimRight() : any
>               : ^^^
>"".trimRight : any
>             : ^^^
>"" : ""
>   : ^^
>trimRight : any
>          : ^^^

const testSymbolDescription = Symbol("foo").description;
>testSymbolDescription : any
>                      : ^^^
>Symbol("foo").description : any
>                          : ^^^
>Symbol("foo") : symbol
>              : ^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>"foo" : "foo"
>      : ^^^^^
>description : any
>            : ^^^

// es2020
const testPromiseAllSettled = Promise.allSettled([]);
>testPromiseAllSettled : any
>                      : ^^^
>Promise.allSettled([]) : any
>                       : ^^^
>Promise.allSettled : any
>                   : ^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>allSettled : any
>           : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

const testStringMatchAll = "".matchAll();
>testStringMatchAll : any
>                   : ^^^
>"".matchAll() : any
>              : ^^^
>"".matchAll : any
>            : ^^^
>"" : ""
>   : ^^
>matchAll : any
>         : ^^^

const testRegExpMatchAll = /matchAll/g[Symbol.matchAll]("matchAll");
>testRegExpMatchAll : any
>                   : ^^^
>/matchAll/g[Symbol.matchAll]("matchAll") : any
>                                         : ^^^
>/matchAll/g[Symbol.matchAll] : any
>                             : ^^^
>/matchAll/g : RegExp
>            : ^^^^^^
>Symbol.matchAll : any
>                : ^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>matchAll : any
>         : ^^^
>"matchAll" : "matchAll"
>           : ^^^^^^^^^^

const testBigInt = BigInt(123);
>testBigInt : any
>           : ^^^
>BigInt(123) : any
>            : ^^^
>BigInt : any
>       : ^^^
>123 : 123
>    : ^^^

// es2021
const testPromiseAny = Promise.any([]);
>testPromiseAny : any
>               : ^^^
>Promise.any([]) : any
>                : ^^^
>Promise.any : any
>            : ^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>any : any
>    : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

const testStringReplaceAll = "".replaceAll();
>testStringReplaceAll : any
>                     : ^^^
>"".replaceAll() : any
>                : ^^^
>"".replaceAll : any
>              : ^^^
>"" : ""
>   : ^^
>replaceAll : any
>           : ^^^

// esnext

