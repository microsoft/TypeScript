//// [tests/cases/compiler/doYouNeedToChangeYourTargetLibraryES2023.ts] ////

=== doYouNeedToChangeYourTargetLibraryES2023.ts ===
export let array = [0, 2, 3, 4];
>array : number[]
>      : ^^^^^^^^
>[0, 2, 3, 4] : number[]
>             : ^^^^^^^^
>0 : 0
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

function somePredicate(x: any): boolean {
>somePredicate : (x: any) => boolean
>              : ^ ^^   ^^^^^       
>x : any
>  : ^^^

    return x === 4;
>x === 4 : boolean
>        : ^^^^^^^
>x : any
>  : ^^^
>4 : 4
>  : ^
}

export let lastIndex1 = array.findLastIndex(v => v === 4);
>lastIndex1 : number
>           : ^^^^^^
>array.findLastIndex(v => v === 4) : number
>                                  : ^^^^^^
>array.findLastIndex : (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => number
>                    : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>array : number[]
>      : ^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>v => v === 4 : (v: number) => v is 4
>             : ^ ^^^^^^^^^^^^^^^^^^^
>v : number
>  : ^^^^^^
>v === 4 : boolean
>        : ^^^^^^^
>v : number
>  : ^^^^^^
>4 : 4
>  : ^

export let lastIndex2 = array.findLastIndex(somePredicate);
>lastIndex2 : number
>           : ^^^^^^
>array.findLastIndex(somePredicate) : number
>                                   : ^^^^^^
>array.findLastIndex : (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => number
>                    : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>array : number[]
>      : ^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>somePredicate : (x: any) => boolean
>              : ^ ^^   ^^^^^       

export let last1 = array.findLast(somePredicate);
>last1 : number | undefined
>      : ^^^^^^^^^^^^^^^^^^
>array.findLast(somePredicate) : number | undefined
>                              : ^^^^^^^^^^^^^^^^^^
>array.findLast : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number | undefined; }
>               : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^
>somePredicate : (x: any) => boolean
>              : ^ ^^   ^^^^^       

export let last2 = array.findLast(somePredicate);
>last2 : number | undefined
>      : ^^^^^^^^^^^^^^^^^^
>array.findLast(somePredicate) : number | undefined
>                              : ^^^^^^^^^^^^^^^^^^
>array.findLast : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number | undefined; }
>               : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^
>somePredicate : (x: any) => boolean
>              : ^ ^^   ^^^^^       

export let sorted = array.toSorted();
>sorted : number[]
>       : ^^^^^^^^
>array.toSorted() : number[]
>                 : ^^^^^^^^
>array.toSorted : (compareFn?: ((a: number, b: number) => number) | undefined) => number[]
>               : ^         ^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>toSorted : (compareFn?: ((a: number, b: number) => number) | undefined) => number[]
>         : ^         ^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^

export let spliced1 = array.toSpliced(2);
>spliced1 : number[]
>         : ^^^^^^^^
>array.toSpliced(2) : number[]
>                   : ^^^^^^^^
>array.toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>                : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>          : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>2 : 2
>  : ^

export let spliced2 = array.toSpliced(2, 1);
>spliced2 : number[]
>         : ^^^^^^^^
>array.toSpliced(2, 1) : number[]
>                      : ^^^^^^^^
>array.toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>                : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>          : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>2 : 2
>  : ^
>1 : 1
>  : ^

export let spliced3 = array.toSpliced(2, 1, 4, 5, 6, 7);
>spliced3 : number[]
>         : ^^^^^^^^
>array.toSpliced(2, 1, 4, 5, 6, 7) : number[]
>                                  : ^^^^^^^^
>array.toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>                : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>          : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>2 : 2
>  : ^
>1 : 1
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>7 : 7
>  : ^

export let spliced4 = array.toSpliced(2, undefined);
>spliced4 : number[]
>         : ^^^^^^^^
>array.toSpliced(2, undefined) : number[]
>                              : ^^^^^^^^
>array.toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>                : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>          : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>2 : 2
>  : ^
>undefined : undefined
>          : ^^^^^^^^^

export let spliced5 = array.toSpliced(2, undefined, 4, 5, 6, 7);
>spliced5 : number[]
>         : ^^^^^^^^
>array.toSpliced(2, undefined, 4, 5, 6, 7) : number[]
>                                          : ^^^^^^^^
>array.toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>                : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>toSpliced : { (start: number, deleteCount: number, ...items: number[]): number[]; (start: number, deleteCount?: number): number[]; }
>          : ^^^     ^^      ^^           ^^      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^           ^^^      ^^^^^^^^^^^^^^
>2 : 2
>  : ^
>undefined : undefined
>          : ^^^^^^^^^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>7 : 7
>  : ^

export let startsWithOne = array.with(0, 1);
>startsWithOne : number[]
>              : ^^^^^^^^
>array.with(0, 1) : number[]
>                 : ^^^^^^^^
>array.with : (index: number, value: number) => number[]
>           : ^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>with : (index: number, value: number) => number[]
>     : ^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^

export let inTheEnd = array.with(-1, 1);
>inTheEnd : number[]
>         : ^^^^^^^^
>array.with(-1, 1) : number[]
>                  : ^^^^^^^^
>array.with : (index: number, value: number) => number[]
>           : ^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^
>array : number[]
>      : ^^^^^^^^
>with : (index: number, value: number) => number[]
>     : ^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>1 : 1
>  : ^

