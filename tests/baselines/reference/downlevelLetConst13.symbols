//// [tests/cases/compiler/downlevelLetConst13.ts] ////

=== downlevelLetConst13.ts ===
'use strict'
// exported let\const bindings should not be renamed

export let foo = 10;
>foo : Symbol(foo, Decl(downlevelLetConst13.ts, 3, 10))

export const bar = "123"
>bar : Symbol(bar, Decl(downlevelLetConst13.ts, 4, 12))

export let [bar1] = [1];
>bar1 : Symbol(bar1, Decl(downlevelLetConst13.ts, 5, 12))

export const [bar2] = [2];
>bar2 : Symbol(bar2, Decl(downlevelLetConst13.ts, 6, 14))

export let {a: bar3} = { a: 1 };
>a : Symbol(a, Decl(downlevelLetConst13.ts, 7, 24))
>bar3 : Symbol(bar3, Decl(downlevelLetConst13.ts, 7, 12))
>a : Symbol(a, Decl(downlevelLetConst13.ts, 7, 24))

export const {a: bar4} = { a: 1 };
>a : Symbol(a, Decl(downlevelLetConst13.ts, 8, 26))
>bar4 : Symbol(bar4, Decl(downlevelLetConst13.ts, 8, 14))
>a : Symbol(a, Decl(downlevelLetConst13.ts, 8, 26))

export namespace M {
>M : Symbol(M, Decl(downlevelLetConst13.ts, 8, 34))

    export let baz = 100;
>baz : Symbol(baz, Decl(downlevelLetConst13.ts, 11, 14))

    export const baz2 = true;
>baz2 : Symbol(baz2, Decl(downlevelLetConst13.ts, 12, 16))

    export let [bar5] = [1];
>bar5 : Symbol(bar5, Decl(downlevelLetConst13.ts, 13, 16))

    export const [bar6] = [2];
>bar6 : Symbol(bar6, Decl(downlevelLetConst13.ts, 14, 18))

    export let {a: bar7} = { a: 1 };
>a : Symbol(a, Decl(downlevelLetConst13.ts, 15, 28))
>bar7 : Symbol(bar7, Decl(downlevelLetConst13.ts, 15, 16))
>a : Symbol(a, Decl(downlevelLetConst13.ts, 15, 28))

    export const {a: bar8} = { a: 1 };
>a : Symbol(a, Decl(downlevelLetConst13.ts, 16, 30))
>bar8 : Symbol(bar8, Decl(downlevelLetConst13.ts, 16, 18))
>a : Symbol(a, Decl(downlevelLetConst13.ts, 16, 30))
}
