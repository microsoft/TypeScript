//// [tests/cases/compiler/downlevelLetConst13.ts] ////

=== downlevelLetConst13.ts ===
'use strict'
>'use strict' : "use strict"
>             : ^^^^^^^^^^^^

// exported let\const bindings should not be renamed

export let foo = 10;
>foo : number
>    : ^^^^^^
>10 : 10
>   : ^^

export const bar = "123"
>bar : "123"
>    : ^^^^^
>"123" : "123"
>      : ^^^^^

export let [bar1] = [1];
>bar1 : number
>     : ^^^^^^
>[1] : [number]
>    : ^^^^^^^^
>1 : 1
>  : ^

export const [bar2] = [2];
>bar2 : number
>     : ^^^^^^
>[2] : [number]
>    : ^^^^^^^^
>2 : 2
>  : ^

export let {a: bar3} = { a: 1 };
>a : any
>  : ^^^
>bar3 : number
>     : ^^^^^^
>{ a: 1 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

export const {a: bar4} = { a: 1 };
>a : any
>  : ^^^
>bar4 : number
>     : ^^^^^^
>{ a: 1 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

export module M {
>M : typeof M
>  : ^^^^^^^^

    export let baz = 100;
>baz : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    export const baz2 = true;
>baz2 : true
>     : ^^^^
>true : true
>     : ^^^^

    export let [bar5] = [1];
>bar5 : number
>     : ^^^^^^
>[1] : [number]
>    : ^^^^^^^^
>1 : 1
>  : ^

    export const [bar6] = [2];
>bar6 : number
>     : ^^^^^^
>[2] : [number]
>    : ^^^^^^^^
>2 : 2
>  : ^

    export let {a: bar7} = { a: 1 };
>a : any
>  : ^^^
>bar7 : number
>     : ^^^^^^
>{ a: 1 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

    export const {a: bar8} = { a: 1 };
>a : any
>  : ^^^
>bar8 : number
>     : ^^^^^^
>{ a: 1 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
}
