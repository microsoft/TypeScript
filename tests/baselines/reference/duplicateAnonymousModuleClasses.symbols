//// [tests/cases/compiler/duplicateAnonymousModuleClasses.ts] ////

=== duplicateAnonymousModuleClasses.ts ===
namespace F {
>F : Symbol(F, Decl(duplicateAnonymousModuleClasses.ts, 0, 0), Decl(duplicateAnonymousModuleClasses.ts, 6, 1))

    class Helper {
>Helper : Symbol(Helper, Decl(duplicateAnonymousModuleClasses.ts, 0, 13))

    }

}


namespace F {
>F : Symbol(F, Decl(duplicateAnonymousModuleClasses.ts, 0, 0), Decl(duplicateAnonymousModuleClasses.ts, 6, 1))
    
    // Should not be an error
    class Helper {
>Helper : Symbol(Helper, Decl(duplicateAnonymousModuleClasses.ts, 9, 13))

    }

}

namespace Foo {
>Foo : Symbol(Foo, Decl(duplicateAnonymousModuleClasses.ts, 16, 1), Decl(duplicateAnonymousModuleClasses.ts, 24, 1))

    class Helper {
>Helper : Symbol(Helper, Decl(duplicateAnonymousModuleClasses.ts, 18, 15))

    }

}


namespace Foo {
>Foo : Symbol(Foo, Decl(duplicateAnonymousModuleClasses.ts, 16, 1), Decl(duplicateAnonymousModuleClasses.ts, 24, 1))
    
    // Should not be an error
    class Helper {
>Helper : Symbol(Helper, Decl(duplicateAnonymousModuleClasses.ts, 27, 15))

    }

}

namespace Gar {
>Gar : Symbol(Gar, Decl(duplicateAnonymousModuleClasses.ts, 34, 1))

    namespace Foo {
>Foo : Symbol(Foo, Decl(duplicateAnonymousModuleClasses.ts, 36, 15), Decl(duplicateAnonymousModuleClasses.ts, 43, 5))

        class Helper {
>Helper : Symbol(Helper, Decl(duplicateAnonymousModuleClasses.ts, 37, 19))

        }

    }


    namespace Foo {
>Foo : Symbol(Foo, Decl(duplicateAnonymousModuleClasses.ts, 36, 15), Decl(duplicateAnonymousModuleClasses.ts, 43, 5))
    
        // Should not be an error
        class Helper {
>Helper : Symbol(Helper, Decl(duplicateAnonymousModuleClasses.ts, 46, 19))

        }

    }
}

