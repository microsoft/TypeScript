//// [tests/cases/compiler/duplicateErrorClassExpression.ts] ////

=== duplicateErrorClassExpression.ts ===
interface ComplicatedTypeBase {
>ComplicatedTypeBase : Symbol(ComplicatedTypeBase, Decl(duplicateErrorClassExpression.ts, 0, 0))

    [s: string]: ABase;
>s : Symbol(s, Decl(duplicateErrorClassExpression.ts, 1, 5))
>ABase : Symbol(ABase, Decl(duplicateErrorClassExpression.ts, 5, 1))
}
interface ComplicatedTypeDerived {
>ComplicatedTypeDerived : Symbol(ComplicatedTypeDerived, Decl(duplicateErrorClassExpression.ts, 2, 1))

    [s: string]: ADerived;
>s : Symbol(s, Decl(duplicateErrorClassExpression.ts, 4, 5))
>ADerived : Symbol(ADerived, Decl(duplicateErrorClassExpression.ts, 8, 1))
}
interface ABase {
>ABase : Symbol(ABase, Decl(duplicateErrorClassExpression.ts, 5, 1))

    a: string;
>a : Symbol(ABase.a, Decl(duplicateErrorClassExpression.ts, 6, 17))
}
interface ADerived {
>ADerived : Symbol(ADerived, Decl(duplicateErrorClassExpression.ts, 8, 1))

    b: string;
>b : Symbol(ADerived.b, Decl(duplicateErrorClassExpression.ts, 9, 20))
}
class Base {
>Base : Symbol(Base, Decl(duplicateErrorClassExpression.ts, 11, 1))

    foo!: ComplicatedTypeBase;
>foo : Symbol(Base.foo, Decl(duplicateErrorClassExpression.ts, 12, 12))
>ComplicatedTypeBase : Symbol(ComplicatedTypeBase, Decl(duplicateErrorClassExpression.ts, 0, 0))
}
const x = class Derived extends Base {
>x : Symbol(x, Decl(duplicateErrorClassExpression.ts, 15, 5))
>Derived : Symbol(Derived, Decl(duplicateErrorClassExpression.ts, 15, 9))
>Base : Symbol(Base, Decl(duplicateErrorClassExpression.ts, 11, 1))

    foo!: ComplicatedTypeDerived;
>foo : Symbol(Derived.foo, Decl(duplicateErrorClassExpression.ts, 15, 38))
>ComplicatedTypeDerived : Symbol(ComplicatedTypeDerived, Decl(duplicateErrorClassExpression.ts, 2, 1))
}
let obj: { 3: string } = { 3: "three" };
>obj : Symbol(obj, Decl(duplicateErrorClassExpression.ts, 18, 3))
>3 : Symbol(3, Decl(duplicateErrorClassExpression.ts, 18, 10))
>3 : Symbol(3, Decl(duplicateErrorClassExpression.ts, 18, 26))

obj[x];
>obj : Symbol(obj, Decl(duplicateErrorClassExpression.ts, 18, 3))
>x : Symbol(x, Decl(duplicateErrorClassExpression.ts, 15, 5))

