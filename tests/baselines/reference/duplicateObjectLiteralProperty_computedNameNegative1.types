//// [tests/cases/compiler/duplicateObjectLiteralProperty_computedNameNegative1.ts] ////

=== duplicateObjectLiteralProperty_computedNameNegative1.ts ===
// repro from https://github.com/microsoft/TypeScript/issues/56341

function bar(props: { x?: string; y?: string }) {
>bar : (props: { x?: string; y?: string; }) => { [x: string]: number; }
>    : ^     ^^                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>props : { x?: string; y?: string; }
>      : ^^^^^^      ^^^^^^      ^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>y : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

  const { x = "", y = "" } = props;
>x : string
>  : ^^^^^^
>"" : ""
>   : ^^
>y : string
>  : ^^^^^^
>"" : ""
>   : ^^
>props : { x?: string; y?: string; }
>      : ^^^^^^      ^^^^^^      ^^^

  return {
>{    [x]: 1,    [y]: 2,  } : { [x: string]: number; }
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^

    [x]: 1,
>[x] : number
>    : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^

    [y]: 2,
>[y] : number
>    : ^^^^^^
>y : string
>  : ^^^^^^
>2 : 2
>  : ^

  };
}

function foo({ x = "", y = "" }: { x?: string; y?: string }) {
>foo : ({ x, y }: { x?: string; y?: string; }) => { [x]: number; [y]: number; }
>    : ^        ^^                           ^^^^^^^     ^^^^^^ ^     ^^^^^^ ^^
>x : string
>  : ^^^^^^
>"" : ""
>   : ^^
>y : string
>  : ^^^^^^
>"" : ""
>   : ^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>y : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

  return {
>{    [x]: 1,    [y]: 2,  } : { [x]: number; [y]: number; }
>                           : ^^     ^^^^^^ ^     ^^^^^^ ^^

    [x]: 1,
>[x] : number
>    : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^

    [y]: 2,
>[y] : number
>    : ^^^^^^
>y : string
>  : ^^^^^^
>2 : 2
>  : ^

  };
}

