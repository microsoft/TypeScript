//// [tests/cases/compiler/duplicateSymbolsExportMatching.ts] ////

=== duplicateSymbolsExportMatching.ts ===
namespace M {
    export interface E { }
    interface I { }
}
namespace M {
    export interface E { } // ok
    interface I { } // ok
}

// Doesn't match export visibility, but it's in a different parent, so it's ok
namespace M {
    interface E { } // ok
    export interface I { } // ok
}

namespace N {
    interface I { }
    interface I { } // ok
    export interface E { }
    export interface E { } // ok
}

namespace N2 {
    interface I { }
    export interface I { } // error
    export interface E { }
    interface E { } // error
}

// Should report error only once for instantiated module
namespace M {
>M : typeof M
>  : ^^^^^^^^

    namespace inst {
>inst : typeof inst
>     : ^^^^^^^^^^^

        var t;
>t : any
>  : ^^^
    }
    export namespace inst { // one error
>inst : typeof M.inst
>     : ^^^^^^^^^^^^^

        var t;
>t : any
>  : ^^^
    }
}

// Variables of the same / different type
namespace M2 {
>M2 : typeof M2
>   : ^^^^^^^^^

    var v: string;
>v : string
>  : ^^^^^^

    export var v: string; // one error (visibility)
>v : string
>  : ^^^^^^

    var w: number;
>w : number
>  : ^^^^^^

    export var w: string; // two errors (visibility and type mismatch)
>w : string
>  : ^^^^^^
}

namespace M {
>M : typeof M
>  : ^^^^^^^^

    namespace F {
>F : typeof F
>  : ^^^^^^^^

        var t;
>t : any
>  : ^^^
    }
    export function F() { } // Only one error for duplicate identifier (don't consider visibility)
>F : () => void
>  : ^^^^^^^^^^
}

namespace M {
>M : typeof M
>  : ^^^^^^^^

    class C { }
>C : C
>  : ^

    namespace C { }
    export namespace C { // Two visibility errors (one for the clodule symbol, and one for the merged container symbol)
>C : typeof M.C
>  : ^^^^^^^^^^

        var t;
>t : any
>  : ^^^
    }
}

// Top level
interface D { }
export interface D { }
