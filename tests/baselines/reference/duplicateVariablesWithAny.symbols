//// [tests/cases/compiler/duplicateVariablesWithAny.ts] ////

=== duplicateVariablesWithAny.ts ===
// They should have to be the same even when one of the types is 'any'
var x: any;
>x : Symbol(x, Decl(duplicateVariablesWithAny.ts, 1, 3), Decl(duplicateVariablesWithAny.ts, 2, 3))

var x = 2; //error
>x : Symbol(x, Decl(duplicateVariablesWithAny.ts, 1, 3), Decl(duplicateVariablesWithAny.ts, 2, 3))

var y = "";
>y : Symbol(y, Decl(duplicateVariablesWithAny.ts, 4, 3), Decl(duplicateVariablesWithAny.ts, 5, 3))

var y; //error
>y : Symbol(y, Decl(duplicateVariablesWithAny.ts, 4, 3), Decl(duplicateVariablesWithAny.ts, 5, 3))

namespace N {
>N : Symbol(N, Decl(duplicateVariablesWithAny.ts, 5, 6))

    var x: any;
>x : Symbol(x, Decl(duplicateVariablesWithAny.ts, 8, 7), Decl(duplicateVariablesWithAny.ts, 9, 7))

    var x = 2; //error
>x : Symbol(x, Decl(duplicateVariablesWithAny.ts, 8, 7), Decl(duplicateVariablesWithAny.ts, 9, 7))

    var y = "";
>y : Symbol(y, Decl(duplicateVariablesWithAny.ts, 11, 7), Decl(duplicateVariablesWithAny.ts, 12, 7))

    var y; //error
>y : Symbol(y, Decl(duplicateVariablesWithAny.ts, 11, 7), Decl(duplicateVariablesWithAny.ts, 12, 7))
}

var z: any;
>z : Symbol(z, Decl(duplicateVariablesWithAny.ts, 15, 3), Decl(duplicateVariablesWithAny.ts, 16, 3))

var z; // ok
>z : Symbol(z, Decl(duplicateVariablesWithAny.ts, 15, 3), Decl(duplicateVariablesWithAny.ts, 16, 3))

