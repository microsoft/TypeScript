//// [tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments19.ts] ////

=== emitArrowFunctionWhenUsingArguments19.ts ===
function f() {
>f : () => void
>  : ^^^^^^^^^^

    function g() {
>g : () => void
>  : ^^^^^^^^^^

        var _arguments = 10;                // No capture in 'g', so no conflict.
>_arguments : number
>           : ^^^^^^
>10 : 10
>   : ^^

        function h() {
>h : () => void
>  : ^^^^^^^^^^

            var capture = () => arguments;  // Should trigger an '_arguments' capture into function 'h'
>capture : () => IArguments
>        : ^^^^^^^^^^^^^^^^
>() => arguments : () => IArguments
>                : ^^^^^^^^^^^^^^^^
>arguments : IArguments
>          : ^^^^^^^^^^

            foo(_arguments);                // Error as this does not resolve to the user defined '_arguments'
>foo(_arguments) : number
>                : ^^^^^^
>foo : (x: any) => number
>    : ^ ^^   ^^^^^^^^^^^
>_arguments : number
>           : ^^^^^^
        }
    }

    function foo(x: any) {
>foo : (x: any) => number
>    : ^ ^^   ^^^^^^^^^^^
>x : any
>  : ^^^

        return 100;
>100 : 100
>    : ^^^
    }
}
