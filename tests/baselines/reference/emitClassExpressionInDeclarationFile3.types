//// [tests/cases/compiler/emitClassExpressionInDeclarationFile3.ts] ////

=== emitClassExpressionInDeclarationFile3.ts ===
export var noPrivates = class {
>noPrivates : typeof noPrivates
>           : ^^^^^^^^^^^^^^^^^
>class {    static getTags() { }    tags() { }    static #ps = -1    #p = 12} : typeof noPrivates
>                                                                             : ^^^^^^^^^^^^^^^^^

    static getTags() { }
>getTags : () => void
>        : ^^^^^^^^^^

    tags() { }
>tags : () => void
>     : ^^^^^^^^^^

    static #ps = -1
>#ps : number
>    : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^

    #p = 12
>#p : number
>   : ^^^^^^
>12 : 12
>   : ^^
}

export class FooItem {
>FooItem : FooItem
>        : ^^^^^^^

    foo(): void { }
>foo : () => void
>    : ^^^^^^    

    name?: string;
>name : string
>     : ^^^^^^

    #property = "capitalism"
>#property : string
>          : ^^^^^^
>"capitalism" : "capitalism"
>             : ^^^^^^^^^^^^
}

export type Constructor<T> = new(...args: any[]) => T;
>Constructor : Constructor<T>
>            : ^^^^^^^^^^^^^^
>args : any[]
>     : ^^^^^

export function WithTags<T extends Constructor<FooItem>>(Base: T) {
>WithTags : <T extends Constructor<FooItem>>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: WithTags<any>.(Anonymous class); getTags(): void; } & T
>         : ^ ^^^^^^^^^                    ^^    ^^ ^^^^^^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^
>Base : T
>     : ^

    return class extends Base {
>class extends Base {        static getTags(): void { }        tags(): void { }    } : { new (...args: any[]): (Anonymous class); prototype: WithTags<any>.(Anonymous class); getTags(): void; } & T
>                                                                                    : ^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^
>Base : FooItem
>     : ^^^^^^^

        static getTags(): void { }
>getTags : () => void
>        : ^^^^^^    

        tags(): void { }
>tags : () => void
>     : ^^^^^^    
    }
}

export class Test extends WithTags(FooItem) {}
>Test : Test
>     : ^^^^
>WithTags(FooItem) : WithTags<typeof FooItem>.(Anonymous class) & FooItem
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>WithTags : <T extends Constructor<FooItem>>(Base: T) => { new (...args: any[]): (Anonymous class); prototype: WithTags<any>.(Anonymous class); getTags(): void; } & T
>         : ^ ^^^^^^^^^                    ^^    ^^ ^^^^^^^^^^^^^^^    ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^
>FooItem : typeof FooItem
>        : ^^^^^^^^^^^^^^

export class Test2 {
>Test2 : Test2
>      : ^^^^^

  nested = class {
>nested : typeof (Anonymous class)
>       : ^^^^^^^^^^^^^^^^^^^^^^^^
>class {    #prop = 42;  } : typeof (Anonymous class)
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^

    #prop = 42;
>#prop : number
>      : ^^^^^^
>42 : 42
>   : ^^
  }
}

