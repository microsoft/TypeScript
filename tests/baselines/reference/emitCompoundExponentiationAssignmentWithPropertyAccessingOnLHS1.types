//// [tests/cases/conformance/es7/exponentiationOperator/emitCompoundExponentiationAssignmentWithPropertyAccessingOnLHS1.ts] ////

=== emitCompoundExponentiationAssignmentWithPropertyAccessingOnLHS1.ts ===
var globalCounter = 0;
>globalCounter : number
>              : ^^^^^^
>0 : 0
>  : ^

function foo() {
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^

    globalCounter += 1;
>globalCounter += 1 : number
>                   : ^^^^^^
>globalCounter : number
>              : ^^^^^^
>1 : 1
>  : ^

    return { prop: 2 };
>{ prop: 2 } : { prop: number; }
>            : ^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^
}
foo().prop **= 2;
>foo().prop **= 2 : number
>                 : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^

var result0 = foo().prop **= 2;
>result0 : number
>        : ^^^^^^
>foo().prop **= 2 : number
>                 : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^

foo().prop **= foo().prop **= 2;
>foo().prop **= foo().prop **= 2 : number
>                                : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>foo().prop **= 2 : number
>                 : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^

var result1 = foo().prop **= foo().prop **= 2;
>result1 : number
>        : ^^^^^^
>foo().prop **= foo().prop **= 2 : number
>                                : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>foo().prop **= 2 : number
>                 : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^

foo().prop **= foo().prop ** 2;
>foo().prop **= foo().prop ** 2 : number
>                               : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>foo().prop ** 2 : number
>                : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^

var result2 = foo().prop **= foo().prop ** 2;
>result2 : number
>        : ^^^^^^
>foo().prop **= foo().prop ** 2 : number
>                               : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>foo().prop ** 2 : number
>                : ^^^^^^
>foo().prop : number
>           : ^^^^^^
>foo() : { prop: number; }
>      : ^^^^^^^^^^^^^^^^^
>foo : () => { prop: number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>2 : 2
>  : ^

