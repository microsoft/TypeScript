//// [tests/cases/conformance/emitter/es2018/asyncGenerators/emitter.asyncGenerators.functionDeclarations.es2018.ts] ////

=== F1.ts ===
async function * f1() {
>f1 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
=== F2.ts ===
async function * f2() {
>f2 : () => AsyncGenerator<any, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const x = yield;
>x : any
>yield : any
}
=== F3.ts ===
async function * f3() {
>f3 : () => AsyncGenerator<number, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const x = yield 1;
>x : any
>yield 1 : any
>1 : 1
>  : ^
}
=== F4.ts ===
async function * f4() {
>f4 : () => AsyncGenerator<number, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const x = yield* [1];
>x : any
>yield* [1] : any
>[1] : number[]
>    : ^^^^^^^^
>1 : 1
>  : ^
}
=== F5.ts ===
async function * f5() {
>f5 : () => AsyncGenerator<number, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const x = yield* (async function*() { yield 1; })();
>x : void
>  : ^^^^
>yield* (async function*() { yield 1; })() : void
>                                          : ^^^^
>(async function*() { yield 1; })() : AsyncGenerator<number, void, unknown>
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(async function*() { yield 1; }) : () => AsyncGenerator<number, void, unknown>
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>async function*() { yield 1; } : () => AsyncGenerator<number, void, unknown>
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>yield 1 : any
>1 : 1
>  : ^
}
=== F6.ts ===
async function * f6() {
>f6 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const x = await 1;
>x : 1
>  : ^
>await 1 : 1
>        : ^
>1 : 1
>  : ^
}
=== F7.ts ===
async function * f7() {
>f7 : () => AsyncGenerator<never, number, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return 1;
>1 : 1
>  : ^
}

