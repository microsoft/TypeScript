//// [tests/cases/conformance/statements/for-await-ofStatements/emitter.forAwait.ts] ////

=== file1.ts ===
async function f1() {
>f1 : () => Promise<void>
>   : ^^^^^^^^^^^^^^^^^^^

    let y: any;
>y : any

    for await (const x of y) {
>x : any
>y : any
    }
}
=== file2.ts ===
async function f2() {
>f2 : () => Promise<void>
>   : ^^^^^^^^^^^^^^^^^^^

    let x: any, y: any;
>x : any
>y : any

    for await (x of y) {
>x : any
>y : any
    }
}
=== file3.ts ===
async function* f3() {
>f3 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let y: any;
>y : any

    for await (const x of y) {
>x : any
>y : any
    }
}
=== file4.ts ===
async function* f4() {
>f4 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let x: any, y: any;
>x : any
>y : any

    for await (x of y) {
>x : any
>y : any
    }
}
=== file5.ts ===
// https://github.com/Microsoft/TypeScript/issues/21363
async function f5() {
>f5 : () => Promise<void>
>   : ^^^^^^^^^^^^^^^^^^^

    let y: any;
>y : any

    outer: for await (const x of y) {
>outer : any
>      : ^^^
>x : any
>y : any

        continue outer;
>outer : any
>      : ^^^
    }
}
=== file6.ts ===
// https://github.com/Microsoft/TypeScript/issues/21363
async function* f6() {
>f6 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let y: any;
>y : any

    outer: for await (const x of y) {
>outer : any
>      : ^^^
>x : any
>y : any

        continue outer;
>outer : any
>      : ^^^
    }
}
=== file7.ts ===
// https://github.com/microsoft/TypeScript/issues/36166
async function* f7() {
>f7 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let y: any;
>y : any

    for (;;) {
        for await (const x of y) {
>x : any
>y : any
        }
    }
}
