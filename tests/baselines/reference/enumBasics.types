//// [tests/cases/conformance/enums/enumBasics.ts] ////

=== enumBasics.ts ===
// Enum without initializers have first member = 0 and successive members = N + 1
enum E1 {
>E1 : E1
>   : ^^

    A,
>A : E1.A
>  : ^^^^

    B,
>B : E1.B
>  : ^^^^

    C
>C : E1.C
>  : ^^^^
}

// Enum type is a subtype of Number
var x: number = E1.A;
>x : number
>  : ^^^^^^
>E1.A : E1.A
>     : ^^^^
>E1 : typeof E1
>   : ^^^^^^^^^
>A : E1.A
>  : ^^^^

// Enum object type is anonymous with properties of the enum type and numeric indexer
var e = E1;
>e : typeof E1
>  : ^^^^^^^^^
>E1 : typeof E1
>   : ^^^^^^^^^

var e: {
>e : typeof E1
>  : ^^^^^^^^^

    readonly A: E1.A;
>A : E1.A
>  : ^^^^
>E1 : any
>   : ^^^

    readonly B: E1.B;
>B : E1.B
>  : ^^^^
>E1 : any
>   : ^^^

    readonly C: E1.C;
>C : E1.C
>  : ^^^^
>E1 : any
>   : ^^^

    readonly [n: number]: string;
>n : number
>  : ^^^^^^

};
var e: typeof E1;
>e : typeof E1
>  : ^^^^^^^^^
>E1 : typeof E1
>   : ^^^^^^^^^

// Reverse mapping of enum returns string name of property 
var s = E1[e.A];
>s : string
>  : ^^^^^^
>E1[e.A] : string
>        : ^^^^^^
>E1 : typeof E1
>   : ^^^^^^^^^
>e.A : E1.A
>    : ^^^^
>e : typeof E1
>  : ^^^^^^^^^
>A : E1.A
>  : ^^^^

var s: string;
>s : string
>  : ^^^^^^


// Enum with only constant members
enum E2 {
>E2 : E2
>   : ^^

    A = 1, B = 2, C = 3
>A : E2.A
>  : ^^^^
>1 : 1
>  : ^
>B : E2.B
>  : ^^^^
>2 : 2
>  : ^
>C : E2.C
>  : ^^^^
>3 : 3
>  : ^
}

// Enum with only computed members
enum E3 {
>E3 : E3
>   : ^^

    X = 'foo'.length, Y = 4 + 3, Z = +'foo'
>X : E3.X
>  : ^^^^
>'foo'.length : number
>             : ^^^^^^
>'foo' : "foo"
>      : ^^^^^
>length : number
>       : ^^^^^^
>Y : E3.Y
>  : ^^^^
>4 + 3 : number
>      : ^^^^^^
>4 : 4
>  : ^
>3 : 3
>  : ^
>Z : E3.Z
>  : ^^^^
>+'foo' : number
>       : ^^^^^^
>'foo' : "foo"
>      : ^^^^^
}

// Enum with constant members followed by computed members
enum E4 {
>E4 : E4
>   : ^^

    X = 0, Y, Z = 'foo'.length
>X : E4.X
>  : ^^^^
>0 : 0
>  : ^
>Y : E4.Y
>  : ^^^^
>Z : E4.Z
>  : ^^^^
>'foo'.length : number
>             : ^^^^^^
>'foo' : "foo"
>      : ^^^^^
>length : number
>       : ^^^^^^
}

// Enum with > 2 constant members with no initializer for first member, non zero initializer for second element
enum E5 {
>E5 : E5
>   : ^^

    A,
>A : E5.A
>  : ^^^^

    B = 3,
>B : E5.B
>  : ^^^^
>3 : 3
>  : ^

    C // 4
>C : E5.C
>  : ^^^^
}

enum E6 {
>E6 : E6
>   : ^^

    A,
>A : E6.A
>  : ^^^^

    B = 0,
>B : E6.A
>  : ^^^^
>0 : 0
>  : ^

    C // 1
>C : E6.C
>  : ^^^^
}

// Enum with computed member initializer of type 'any'
enum E7 {
>E7 : E7
>   : ^^

    A = 'foo'['foo']
>A : E7.A
>  : ^^^^
>'foo'['foo'] : error
>'foo' : "foo"
>      : ^^^^^
>'foo' : "foo"
>      : ^^^^^
}

// Enum with computed member initializer of type number
enum E8 {
>E8 : E8
>   : ^^

    B = 'foo'['foo']
>B : E8.B
>  : ^^^^
>'foo'['foo'] : error
>'foo' : "foo"
>      : ^^^^^
>'foo' : "foo"
>      : ^^^^^
}

//Enum with computed member intializer of same enum type
enum E9 {
>E9 : E9
>   : ^^

    A,
>A : E9.A
>  : ^^^^

    B = A
>B : E9.A
>  : ^^^^
>A : E9
>  : ^^
}

// (refer to .js to validate)
// Enum constant members are propagated
var doNotPropagate = [
>doNotPropagate : (E8 | E7 | E4 | E3)[]
>               : ^^^^^^^^^^^^^^^^^^^^^
>[    E8.B, E7.A, E4.Z, E3.X, E3.Y, E3.Z] : (E8 | E7 | E4 | E3)[]
>                                         : ^^^^^^^^^^^^^^^^^^^^^

    E8.B, E7.A, E4.Z, E3.X, E3.Y, E3.Z
>E8.B : E8
>     : ^^
>E8 : typeof E8
>   : ^^^^^^^^^
>B : E8
>  : ^^
>E7.A : E7
>     : ^^
>E7 : typeof E7
>   : ^^^^^^^^^
>A : E7
>  : ^^
>E4.Z : E4.Z
>     : ^^^^
>E4 : typeof E4
>   : ^^^^^^^^^
>Z : E4.Z
>  : ^^^^
>E3.X : E3.X
>     : ^^^^
>E3 : typeof E3
>   : ^^^^^^^^^
>X : E3.X
>  : ^^^^
>E3.Y : E3.Y
>     : ^^^^
>E3 : typeof E3
>   : ^^^^^^^^^
>Y : E3.Y
>  : ^^^^
>E3.Z : E3.Z
>     : ^^^^
>E3 : typeof E3
>   : ^^^^^^^^^
>Z : E3.Z
>  : ^^^^

];
// Enum computed members are not propagated
var doPropagate = [
>doPropagate : (E9 | E6 | E5)[]
>            : ^^^^^^^^^^^^^^^^
>[    E9.A, E9.B, E6.B, E6.C, E6.A, E5.A, E5.B, E5.C] : (E9 | E6 | E5)[]
>                                                     : ^^^^^^^^^^^^^^^^

    E9.A, E9.B, E6.B, E6.C, E6.A, E5.A, E5.B, E5.C
>E9.A : E9
>     : ^^
>E9 : typeof E9
>   : ^^^^^^^^^
>A : E9
>  : ^^
>E9.B : E9
>     : ^^
>E9 : typeof E9
>   : ^^^^^^^^^
>B : E9
>  : ^^
>E6.B : E6.A
>     : ^^^^
>E6 : typeof E6
>   : ^^^^^^^^^
>B : E6.A
>  : ^^^^
>E6.C : E6.C
>     : ^^^^
>E6 : typeof E6
>   : ^^^^^^^^^
>C : E6.C
>  : ^^^^
>E6.A : E6.A
>     : ^^^^
>E6 : typeof E6
>   : ^^^^^^^^^
>A : E6.A
>  : ^^^^
>E5.A : E5.A
>     : ^^^^
>E5 : typeof E5
>   : ^^^^^^^^^
>A : E5.A
>  : ^^^^
>E5.B : E5.B
>     : ^^^^
>E5 : typeof E5
>   : ^^^^^^^^^
>B : E5.B
>  : ^^^^
>E5.C : E5.C
>     : ^^^^
>E5 : typeof E5
>   : ^^^^^^^^^
>C : E5.C
>  : ^^^^

];


