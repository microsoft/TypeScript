//// [tests/cases/compiler/enumBasics3.ts] ////

=== enumBasics3.ts ===
namespace M {
>M : Symbol(M, Decl(enumBasics3.ts, 0, 0), Decl(enumBasics3.ts, 7, 1))

  export namespace N {
>N : Symbol(N, Decl(enumBasics3.ts, 0, 13), Decl(enumBasics3.ts, 9, 13))

    export enum E1 {
>E1 : Symbol(E1, Decl(enumBasics3.ts, 1, 22))

      a = 1,
>a : Symbol(E1.a, Decl(enumBasics3.ts, 2, 20))

      b = a.a, // should error
>b : Symbol(E1.b, Decl(enumBasics3.ts, 3, 12))
>a : Symbol(E1.a, Decl(enumBasics3.ts, 2, 20))
    }
  }
}

namespace M {
>M : Symbol(M, Decl(enumBasics3.ts, 0, 0), Decl(enumBasics3.ts, 7, 1))

  export namespace N {
>N : Symbol(N, Decl(enumBasics3.ts, 0, 13), Decl(enumBasics3.ts, 9, 13))

    export enum E2 {
>E2 : Symbol(E2, Decl(enumBasics3.ts, 10, 22))

      b = M.N.E1.a,
>b : Symbol(E2.b, Decl(enumBasics3.ts, 11, 20))
>M.N.E1.a : Symbol(E1.a, Decl(enumBasics3.ts, 2, 20))
>M.N.E1 : Symbol(E1, Decl(enumBasics3.ts, 1, 22))
>M.N : Symbol(N, Decl(enumBasics3.ts, 0, 13), Decl(enumBasics3.ts, 9, 13))
>M : Symbol(M, Decl(enumBasics3.ts, 0, 0), Decl(enumBasics3.ts, 7, 1))
>N : Symbol(N, Decl(enumBasics3.ts, 0, 13), Decl(enumBasics3.ts, 9, 13))
>E1 : Symbol(E1, Decl(enumBasics3.ts, 1, 22))
>a : Symbol(E1.a, Decl(enumBasics3.ts, 2, 20))

      c = M.N.E1.a.a, // should error
>c : Symbol(E2.c, Decl(enumBasics3.ts, 12, 19))
>M.N.E1.a : Symbol(E1.a, Decl(enumBasics3.ts, 2, 20))
>M.N.E1 : Symbol(E1, Decl(enumBasics3.ts, 1, 22))
>M.N : Symbol(N, Decl(enumBasics3.ts, 0, 13), Decl(enumBasics3.ts, 9, 13))
>M : Symbol(M, Decl(enumBasics3.ts, 0, 0), Decl(enumBasics3.ts, 7, 1))
>N : Symbol(N, Decl(enumBasics3.ts, 0, 13), Decl(enumBasics3.ts, 9, 13))
>E1 : Symbol(E1, Decl(enumBasics3.ts, 1, 22))
>a : Symbol(E1.a, Decl(enumBasics3.ts, 2, 20))
    }
  }
}

