//// [tests/cases/compiler/es5-asyncFunctionCallExpressions.ts] ////

=== es5-asyncFunctionCallExpressions.ts ===
declare var x, y, z, a, b, c;
>x : any
>y : any
>z : any
>a : any
>b : any
>c : any

async function callExpression0() {
>callExpression0 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    await x(y, z);
>await x(y, z) : any
>x(y, z) : any
>x : any
>y : any
>z : any
}

async function callExpression1() {
>callExpression1 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    (await x)(y, z);
>(await x)(y, z) : any
>(await x) : any
>await x : any
>x : any
>y : any
>z : any
}

async function callExpression2() {
>callExpression2 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    x(await y, z);
>x(await y, z) : any
>x : any
>await y : any
>y : any
>z : any
}

async function callExpression3() {
>callExpression3 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    x(y, await z);
>x(y, await z) : any
>x : any
>y : any
>await z : any
>z : any
}

async function callExpression4() {
>callExpression4 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    await x(...y, z);
>await x(...y, z) : any
>x(...y, z) : any
>x : any
>...y : any
>y : any
>z : any
}

async function callExpression5() {
>callExpression5 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    (await x)(...y, z);
>(await x)(...y, z) : any
>(await x) : any
>await x : any
>x : any
>...y : any
>y : any
>z : any
}

async function callExpression6() {
>callExpression6 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    x(...(await y), z);
>x(...(await y), z) : any
>x : any
>...(await y) : any
>(await y) : any
>await y : any
>y : any
>z : any
}

async function callExpression7() {
>callExpression7 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    x(...y, await z);
>x(...y, await z) : any
>x : any
>...y : any
>y : any
>await z : any
>z : any
}

async function callExpression8() {
>callExpression8 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    x(await y, ...z);
>x(await y, ...z) : any
>x : any
>await y : any
>y : any
>...z : any
>z : any
}

async function callExpression9() {
>callExpression9 : () => Promise<void>
>                : ^^^^^^^^^^^^^^^^^^^

    x(y, ...(await z));
>x(y, ...(await z)) : any
>x : any
>y : any
>...(await z) : any
>(await z) : any
>await z : any
>z : any
}

async function callExpression10() {
>callExpression10 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    await x.a(y, z);
>await x.a(y, z) : any
>x.a(y, z) : any
>x.a : any
>x : any
>  : ^^^
>a : any
>  : ^^^
>y : any
>z : any
}

async function callExpression11() {
>callExpression11 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    (await x.a)(y, z);
>(await x.a)(y, z) : any
>(await x.a) : any
>await x.a : any
>x.a : any
>x : any
>  : ^^^
>a : any
>  : ^^^
>y : any
>z : any
}

async function callExpression12() {
>callExpression12 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    (await x).a(y, z);
>(await x).a(y, z) : any
>(await x).a : any
>(await x) : any
>          : ^^^
>await x : any
>x : any
>a : any
>  : ^^^
>y : any
>z : any
}

async function callExpression13() {
>callExpression13 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    x.a(await y, z);
>x.a(await y, z) : any
>x.a : any
>x : any
>  : ^^^
>a : any
>  : ^^^
>await y : any
>y : any
>z : any
}

async function callExpression14() {
>callExpression14 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    x.a(y, await z);
>x.a(y, await z) : any
>x.a : any
>x : any
>  : ^^^
>a : any
>  : ^^^
>y : any
>await z : any
>z : any
}

async function callExpression15() {
>callExpression15 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    await x[a](y, z);
>await x[a](y, z) : any
>x[a](y, z) : any
>x[a] : any
>x : any
>a : any
>y : any
>z : any
}

async function callExpression16() {
>callExpression16 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    (await x[a])(y, z);
>(await x[a])(y, z) : any
>(await x[a]) : any
>await x[a] : any
>x[a] : any
>x : any
>a : any
>y : any
>z : any
}

async function callExpression17() {
>callExpression17 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    (await x)[a](y, z);
>(await x)[a](y, z) : any
>(await x)[a] : any
>(await x) : any
>await x : any
>x : any
>a : any
>y : any
>z : any
}

async function callExpression18() {
>callExpression18 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    x[await a](y, z);
>x[await a](y, z) : any
>x[await a] : any
>x : any
>await a : any
>a : any
>y : any
>z : any
}

async function callExpression19() {
>callExpression19 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    x[a](await y, z);
>x[a](await y, z) : any
>x[a] : any
>x : any
>a : any
>await y : any
>y : any
>z : any
}

async function callExpression20() {
>callExpression20 : () => Promise<void>
>                 : ^^^^^^^^^^^^^^^^^^^

    x[a](y, await z);
>x[a](y, await z) : any
>x[a] : any
>x : any
>a : any
>y : any
>await z : any
>z : any
}

