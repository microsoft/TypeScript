//// [tests/cases/compiler/excessPropertyCheckIntersectionWithIndexSignature.ts] ////

=== excessPropertyCheckIntersectionWithIndexSignature.ts ===
// Repro from #51875

let x: { [x: string]: { a: 0 } } & { [x: string]: { b: 0 } };
>x : { [x: string]: { a: 0; }; } & { [x: string]: { b: 0; }; }
>  : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^
>x : string
>  : ^^^^^^
>a : 0
>  : ^
>x : string
>  : ^^^^^^
>b : 0
>  : ^

x = { y: { a: 0 } };  // Error
>x = { y: { a: 0 } } : { y: { a: 0; }; }
>                    : ^^^^^^^^^^^^^^^^^
>x : { [x: string]: { a: 0; }; } & { [x: string]: { b: 0; }; }
>  : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^
>{ y: { a: 0 } } : { y: { a: 0; }; }
>                : ^^^^^^^^^^^^^^^^^
>y : { a: 0; }
>  : ^^^^^^^^^
>{ a: 0 } : { a: 0; }
>         : ^^^^^^^^^
>a : 0
>  : ^
>0 : 0
>  : ^

x = { y: { a: 0, b: 0 } };
>x = { y: { a: 0, b: 0 } } : { y: { a: 0; b: 0; }; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^
>x : { [x: string]: { a: 0; }; } & { [x: string]: { b: 0; }; }
>  : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^
>{ y: { a: 0, b: 0 } } : { y: { a: 0; b: 0; }; }
>                      : ^^^^^^^^^^^^^^^^^^^^^^^
>y : { a: 0; b: 0; }
>  : ^^^^^^^^^^^^^^^
>{ a: 0, b: 0 } : { a: 0; b: 0; }
>               : ^^^^^^^^^^^^^^^
>a : 0
>  : ^
>0 : 0
>  : ^
>b : 0
>  : ^
>0 : 0
>  : ^

x = { y: { a: 0, b: 0, c: 0 } };  // Error
>x = { y: { a: 0, b: 0, c: 0 } } : { y: { a: 0; b: 0; c: number; }; }
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : { [x: string]: { a: 0; }; } & { [x: string]: { b: 0; }; }
>  : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^
>{ y: { a: 0, b: 0, c: 0 } } : { y: { a: 0; b: 0; c: number; }; }
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>y : { a: 0; b: 0; c: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ a: 0, b: 0, c: 0 } : { a: 0; b: 0; c: number; }
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : 0
>  : ^
>0 : 0
>  : ^
>b : 0
>  : ^
>0 : 0
>  : ^
>c : number
>  : ^^^^^^
>0 : 0
>  : ^

type A = { a: string };
>A : A
>  : ^
>a : string
>  : ^^^^^^

type B = { b: string };
>B : B
>  : ^
>b : string
>  : ^^^^^^

const yy: Record<string, A> & Record<string, B> = {
>yy : Record<string, A> & Record<string, B>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    foo: { a: '', b: '' },} : { foo: { a: string; b: string; }; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    foo: { a: '', b: '' },
>foo : { a: string; b: string; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>{ a: '', b: '' } : { a: string; b: string; }
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>'' : ""
>   : ^^
>b : string
>  : ^^^^^^
>'' : ""
>   : ^^

};

