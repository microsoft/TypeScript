//// [tests/cases/compiler/excessPropertyCheckSpreadInlineObject.ts] ////

=== excessPropertyCheckSpreadInlineObject.ts ===
type MyObject = { foo: number; bar?: number };
>MyObject : Symbol(MyObject, Decl(excessPropertyCheckSpreadInlineObject.ts, 0, 0))
>foo : Symbol(foo, Decl(excessPropertyCheckSpreadInlineObject.ts, 0, 17))
>bar : Symbol(bar, Decl(excessPropertyCheckSpreadInlineObject.ts, 0, 30))

const b: MyObject = {
>b : Symbol(b, Decl(excessPropertyCheckSpreadInlineObject.ts, 2, 5))
>MyObject : Symbol(MyObject, Decl(excessPropertyCheckSpreadInlineObject.ts, 0, 0))

    foo: 1,
>foo : Symbol(foo, Decl(excessPropertyCheckSpreadInlineObject.ts, 2, 21))

    ...{
        bar: 2,
>bar : Symbol(bar, Decl(excessPropertyCheckSpreadInlineObject.ts, 4, 8))

        excessProperty: 3,
>excessProperty : Symbol(excessProperty, Decl(excessPropertyCheckSpreadInlineObject.ts, 5, 15))

    },
};

const b2 = {
>b2 : Symbol(b2, Decl(excessPropertyCheckSpreadInlineObject.ts, 10, 5))

    foo: 1,
>foo : Symbol(foo, Decl(excessPropertyCheckSpreadInlineObject.ts, 10, 12))

    ...{
        bar: 2,
>bar : Symbol(bar, Decl(excessPropertyCheckSpreadInlineObject.ts, 12, 8))

        excessProperty: 3,
>excessProperty : Symbol(excessProperty, Decl(excessPropertyCheckSpreadInlineObject.ts, 13, 15))

    },
} satisfies MyObject;
>MyObject : Symbol(MyObject, Decl(excessPropertyCheckSpreadInlineObject.ts, 0, 0))

