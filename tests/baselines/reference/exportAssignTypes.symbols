//// [tests/cases/conformance/externalModules/exportAssignTypes.ts] ////

=== consumer.ts ===
import iString = require('./expString');
>iString : Symbol(iString, Decl(consumer.ts, 0, 0))

var v1: string = iString;
>v1 : Symbol(v1, Decl(consumer.ts, 1, 3))
>iString : Symbol(iString, Decl(consumer.ts, 0, 0))

import iNumber = require('./expNumber');
>iNumber : Symbol(iNumber, Decl(consumer.ts, 1, 25))

var v2: number = iNumber;
>v2 : Symbol(v2, Decl(consumer.ts, 4, 3))
>iNumber : Symbol(iNumber, Decl(consumer.ts, 1, 25))

import iBoolean = require('./expBoolean');
>iBoolean : Symbol(iBoolean, Decl(consumer.ts, 4, 25))

var v3: boolean = iBoolean;
>v3 : Symbol(v3, Decl(consumer.ts, 7, 3))
>iBoolean : Symbol(iBoolean, Decl(consumer.ts, 4, 25))

import iArray = require('./expArray');
>iArray : Symbol(iArray, Decl(consumer.ts, 7, 27))

var v4: Array<number> = iArray;
>v4 : Symbol(v4, Decl(consumer.ts, 10, 3))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
>iArray : Symbol(iArray, Decl(consumer.ts, 7, 27))

import iObject = require('./expObject');
>iObject : Symbol(iObject, Decl(consumer.ts, 10, 31))

var v5: Object = iObject;
>v5 : Symbol(v5, Decl(consumer.ts, 13, 3))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>iObject : Symbol(iObject, Decl(consumer.ts, 10, 31))

import iAny = require('./expAny');
>iAny : Symbol(iAny, Decl(consumer.ts, 13, 25))

var v6 = iAny;
>v6 : Symbol(v6, Decl(consumer.ts, 16, 3))
>iAny : Symbol(iAny, Decl(consumer.ts, 13, 25))

import iGeneric = require('./expGeneric');
>iGeneric : Symbol(iGeneric, Decl(consumer.ts, 16, 14))

var v7: {<x>(p1: x): x} = iGeneric;
>v7 : Symbol(v7, Decl(consumer.ts, 19, 3))
>x : Symbol(x, Decl(consumer.ts, 19, 10))
>p1 : Symbol(p1, Decl(consumer.ts, 19, 13))
>x : Symbol(x, Decl(consumer.ts, 19, 10))
>x : Symbol(x, Decl(consumer.ts, 19, 10))
>iGeneric : Symbol(iGeneric, Decl(consumer.ts, 16, 14))

=== expString.ts ===
var x = "test";
>x : Symbol(x, Decl(expString.ts, 0, 3))

export = x;
>x : Symbol(x, Decl(expString.ts, 0, 3))

=== expNumber.ts ===
var x = 42;
>x : Symbol(x, Decl(expNumber.ts, 0, 3))

export = x;
>x : Symbol(x, Decl(expNumber.ts, 0, 3))

=== expBoolean.ts ===
var x = true;
>x : Symbol(x, Decl(expBoolean.ts, 0, 3))

export = x;
>x : Symbol(x, Decl(expBoolean.ts, 0, 3))

=== expArray.ts ===
var x = [1,2];
>x : Symbol(x, Decl(expArray.ts, 0, 3))

export = x;
>x : Symbol(x, Decl(expArray.ts, 0, 3))

=== expObject.ts ===
var x = { answer: 42, when: 1776};
>x : Symbol(x, Decl(expObject.ts, 0, 3))
>answer : Symbol(answer, Decl(expObject.ts, 0, 9))
>when : Symbol(when, Decl(expObject.ts, 0, 21))

export = x;
>x : Symbol(x, Decl(expObject.ts, 0, 3))

=== expAny.ts ===
var x;
>x : Symbol(x, Decl(expAny.ts, 0, 3))

export = x;
>x : Symbol(x, Decl(expAny.ts, 0, 3))

=== expGeneric.ts ===
function x<T>(a: T){
>x : Symbol(x, Decl(expGeneric.ts, 0, 0))
>T : Symbol(T, Decl(expGeneric.ts, 0, 11))
>a : Symbol(a, Decl(expGeneric.ts, 0, 14))
>T : Symbol(T, Decl(expGeneric.ts, 0, 11))

	return a;
>a : Symbol(a, Decl(expGeneric.ts, 0, 14))
}
export = x;
>x : Symbol(x, Decl(expGeneric.ts, 0, 0))

