//// [tests/cases/compiler/exportSpecifierAndExportedMemberDeclaration.ts] ////

=== exportSpecifierAndExportedMemberDeclaration.ts ===
declare module "m2" {
>"m2" : Symbol("m2", Decl(exportSpecifierAndExportedMemberDeclaration.ts, 0, 0), Decl(exportSpecifierAndExportedMemberDeclaration.ts, 7, 1))

    export namespace X {
>X : Symbol(X, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 0, 21), Decl(exportSpecifierAndExportedMemberDeclaration.ts, 5, 12))

        interface I { }
>I : Symbol(I, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 1, 24))
    }
    function Y();
>Y : Symbol(Y, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 3, 5))

    export { Y as X };
>Y : Symbol(Y, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 3, 5))
>X : Symbol(X, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 0, 21), Decl(exportSpecifierAndExportedMemberDeclaration.ts, 5, 12))

    function Z(): X.I;
>Z : Symbol(Z, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 5, 22))
>X : Symbol(X, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 0, 21), Decl(exportSpecifierAndExportedMemberDeclaration.ts, 5, 12))
>I : Symbol(X.I, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 1, 24))
}

declare module "m2" {
>"m2" : Symbol("m2", Decl(exportSpecifierAndExportedMemberDeclaration.ts, 0, 0), Decl(exportSpecifierAndExportedMemberDeclaration.ts, 7, 1))

    function Z2(): X.I;
>Z2 : Symbol(Z2, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 9, 21))
>X : Symbol(X, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 0, 21), Decl(exportSpecifierAndExportedMemberDeclaration.ts, 5, 12))
>I : Symbol(X.I, Decl(exportSpecifierAndExportedMemberDeclaration.ts, 1, 24))
}
