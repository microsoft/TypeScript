//// [tests/cases/compiler/exportedInterfaceInaccessibleInCallbackInModule.ts] ////

=== exportedInterfaceInaccessibleInCallbackInModule.ts ===
export interface ProgressCallback {
	(progress:any):any;
>progress : any
}	

// --- Generic promise
export declare class TPromise<V> {
>TPromise : TPromise<V>
>         : ^^^^^^^^^^^
	
	constructor(init:(complete: (value:V)=>void, error:(err:any)=>void, progress:ProgressCallback)=>void, oncancel?: any);
>init : (complete: (value: V) => void, error: (err: any) => void, progress: ProgressCallback) => void
>     : ^        ^^                  ^^     ^^                  ^^        ^^                ^^^^^    
>complete : (value: V) => void
>         : ^     ^^ ^^^^^    
>value : V
>      : ^
>error : (err: any) => void
>      : ^   ^^   ^^^^^    
>err : any
>progress : ProgressCallback
>         : ^^^^^^^^^^^^^^^^
>oncancel : any
	
    // removing this method fixes the error squiggle.....
	public then<U>(success?: (value:V)=>TPromise<U>, error?: (err:any)=>TPromise<U>, progress?:ProgressCallback): TPromise<U>;
>then : <U>(success?: (value: V) => TPromise<U>, error?: (err: any) => TPromise<U>, progress?: ProgressCallback) => TPromise<U>
>     : ^ ^^       ^^^                         ^^     ^^^                         ^^        ^^^                ^^^^^           
>success : (value: V) => TPromise<U>
>        : ^     ^^ ^^^^^           
>value : V
>      : ^
>error : (err: any) => TPromise<U>
>      : ^   ^^   ^^^^^           
>err : any
>progress : ProgressCallback
>         : ^^^^^^^^^^^^^^^^
}
