//// [tests/cases/compiler/expressionTypeNodeShouldError.ts] ////

=== base.d.ts ===
declare const x: "foo".charCodeAt(0);
>x : Symbol(x, Decl(base.d.ts, 0, 13))
>charCodeAt : Symbol(charCodeAt, Decl(base.d.ts, 0, 23))

=== string.ts ===
interface String {
>String : Symbol(String, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(string.ts, 0, 0))

    typeof<T>(x: T): T;
>typeof : Symbol(String.typeof, Decl(string.ts, 0, 18))
>T : Symbol(T, Decl(string.ts, 1, 11))
>x : Symbol(x, Decl(string.ts, 1, 14))
>T : Symbol(T, Decl(string.ts, 1, 11))
>T : Symbol(T, Decl(string.ts, 1, 11))
}

class C {
>C : Symbol(C, Decl(string.ts, 2, 1))

    foo() {
>foo : Symbol(C.foo, Decl(string.ts, 4, 9))

        const x: "".typeof(this.foo);
>x : Symbol(x, Decl(string.ts, 6, 13))
>this.foo : Symbol(C.foo, Decl(string.ts, 4, 9))
>this : Symbol(C, Decl(string.ts, 2, 1))
>foo : Symbol(C.foo, Decl(string.ts, 4, 9))
    }
}

const nodes = document.getElementsByTagName("li");
>nodes : Symbol(nodes, Decl(string.ts, 10, 5))
>document.getElementsByTagName : Symbol(Document.getElementsByTagName, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
>document : Symbol(document, Decl(lib.dom.d.ts, --, --))
>getElementsByTagName : Symbol(Document.getElementsByTagName, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))

type ItemType = "".typeof(nodes.item(0));
>ItemType : Symbol(ItemType, Decl(string.ts, 10, 50))
>nodes.item : Symbol(HTMLCollectionOf.item, Decl(lib.dom.d.ts, --, --))
>nodes : Symbol(nodes, Decl(string.ts, 10, 5))
>item : Symbol(HTMLCollectionOf.item, Decl(lib.dom.d.ts, --, --))

=== number.ts ===
interface Number {
>Number : Symbol(Number, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(number.ts, 0, 0))

    typeof<T>(x: T): T;
>typeof : Symbol(Number.typeof, Decl(number.ts, 0, 18))
>T : Symbol(T, Decl(number.ts, 1, 11))
>x : Symbol(x, Decl(number.ts, 1, 14))
>T : Symbol(T, Decl(number.ts, 1, 11))
>T : Symbol(T, Decl(number.ts, 1, 11))
}

class C2 {
>C2 : Symbol(C2, Decl(number.ts, 2, 1))

    foo() {
>foo : Symbol(C2.foo, Decl(number.ts, 4, 10))

        const x: 3.141592.typeof(this.foo);
>x : Symbol(x, Decl(number.ts, 6, 13))
>this.foo : Symbol(C2.foo, Decl(number.ts, 4, 10))
>this : Symbol(C2, Decl(number.ts, 2, 1))
>foo : Symbol(C2.foo, Decl(number.ts, 4, 10))
    }
}

const nodes2 = document.getElementsByTagName("li");
>nodes2 : Symbol(nodes2, Decl(number.ts, 10, 5))
>document.getElementsByTagName : Symbol(Document.getElementsByTagName, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
>document : Symbol(document, Decl(lib.dom.d.ts, --, --))
>getElementsByTagName : Symbol(Document.getElementsByTagName, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))

type ItemType2 = 4..typeof(nodes.item(0));
>ItemType2 : Symbol(ItemType2, Decl(number.ts, 10, 51))
>nodes.item : Symbol(HTMLCollectionOf.item, Decl(lib.dom.d.ts, --, --))
>nodes : Symbol(nodes, Decl(string.ts, 10, 5))
>item : Symbol(HTMLCollectionOf.item, Decl(lib.dom.d.ts, --, --))

=== boolean.ts ===
interface Boolean {
>Boolean : Symbol(Boolean, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(boolean.ts, 0, 0))

    typeof<T>(x: T): T;
>typeof : Symbol(Boolean.typeof, Decl(boolean.ts, 0, 19))
>T : Symbol(T, Decl(boolean.ts, 1, 11))
>x : Symbol(x, Decl(boolean.ts, 1, 14))
>T : Symbol(T, Decl(boolean.ts, 1, 11))
>T : Symbol(T, Decl(boolean.ts, 1, 11))
}

class C3 {
>C3 : Symbol(C3, Decl(boolean.ts, 2, 1))

    foo() {
>foo : Symbol(C3.foo, Decl(boolean.ts, 4, 10))

        const x: false.typeof(this.foo);
>x : Symbol(x, Decl(boolean.ts, 6, 13))
>this.foo : Symbol(C3.foo, Decl(boolean.ts, 4, 10))
>this : Symbol(C3, Decl(boolean.ts, 2, 1))
>foo : Symbol(C3.foo, Decl(boolean.ts, 4, 10))
    }
}

const nodes3 = document.getElementsByTagName("li");
>nodes3 : Symbol(nodes3, Decl(boolean.ts, 10, 5))
>document.getElementsByTagName : Symbol(Document.getElementsByTagName, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
>document : Symbol(document, Decl(lib.dom.d.ts, --, --))
>getElementsByTagName : Symbol(Document.getElementsByTagName, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))

type ItemType3 = true.typeof(nodes.item(0));
>ItemType3 : Symbol(ItemType3, Decl(boolean.ts, 10, 51))
>nodes.item : Symbol(HTMLCollectionOf.item, Decl(lib.dom.d.ts, --, --))
>nodes : Symbol(nodes, Decl(string.ts, 10, 5))
>item : Symbol(HTMLCollectionOf.item, Decl(lib.dom.d.ts, --, --))


