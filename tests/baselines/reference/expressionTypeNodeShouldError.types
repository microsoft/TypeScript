//// [tests/cases/compiler/expressionTypeNodeShouldError.ts] ////

=== base.d.ts ===
declare const x: "foo".charCodeAt(0);
>x : "foo"
>  : ^^^^^
>charCodeAt : any
>           : ^^^
>(0) : 0
>    : ^
>0 : 0
>  : ^

=== string.ts ===
interface String {
    typeof<T>(x: T): T;
>typeof : <T>(x: T) => T
>       : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
}

class C {
>C : C
>  : ^

    foo() {
>foo : () => void
>    : ^^^^^^^^^^

        const x: "".typeof(this.foo);
>x : ""
>  : ^^
>typeof(this.foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(this.foo) : () => void
>           : ^^^^^^^^^^
>this.foo : () => void
>         : ^^^^^^^^^^
>this : this
>     : ^^^^
>foo : () => void
>    : ^^^^^^^^^^
    }
}

const nodes = document.getElementsByTagName("li");
>nodes : HTMLCollectionOf<HTMLLIElement>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>document.getElementsByTagName("li") : HTMLCollectionOf<HTMLLIElement>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>document.getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }

>document : Document
>         : ^^^^^^^^
>getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }

>"li" : "li"
>     : ^^^^

type ItemType = "".typeof(nodes.item(0));
>ItemType : ""
>         : ^^
>typeof(nodes.item(0)) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(nodes.item(0)) : HTMLLIElement
>                : ^^^^^^^^^^^^^
>nodes.item(0) : HTMLLIElement
>              : ^^^^^^^^^^^^^
>nodes.item : (index: number) => HTMLLIElement
>           : ^     ^^      ^^^^^^^^^^^^^^^^^^
>nodes : HTMLCollectionOf<HTMLLIElement>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : (index: number) => HTMLLIElement
>     : ^     ^^      ^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

=== number.ts ===
interface Number {
    typeof<T>(x: T): T;
>typeof : <T>(x: T) => T
>       : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
}

class C2 {
>C2 : C2
>   : ^^

    foo() {
>foo : () => void
>    : ^^^^^^^^^^

        const x: 3.141592.typeof(this.foo);
>x : 3.141592
>  : ^^^^^^^^
>typeof(this.foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(this.foo) : () => void
>           : ^^^^^^^^^^
>this.foo : () => void
>         : ^^^^^^^^^^
>this : this
>     : ^^^^
>foo : () => void
>    : ^^^^^^^^^^
    }
}

const nodes2 = document.getElementsByTagName("li");
>nodes2 : HTMLCollectionOf<HTMLLIElement>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>document.getElementsByTagName("li") : HTMLCollectionOf<HTMLLIElement>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>document.getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }

>document : Document
>         : ^^^^^^^^
>getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }

>"li" : "li"
>     : ^^^^

type ItemType2 = 4..typeof(nodes.item(0));
>ItemType2 : 4
>          : ^
>typeof(nodes.item(0)) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(nodes.item(0)) : HTMLLIElement
>                : ^^^^^^^^^^^^^
>nodes.item(0) : HTMLLIElement
>              : ^^^^^^^^^^^^^
>nodes.item : (index: number) => HTMLLIElement
>           : ^     ^^      ^^^^^^^^^^^^^^^^^^
>nodes : HTMLCollectionOf<HTMLLIElement>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : (index: number) => HTMLLIElement
>     : ^     ^^      ^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

=== boolean.ts ===
interface Boolean {
    typeof<T>(x: T): T;
>typeof : <T>(x: T) => T
>       : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
}

class C3 {
>C3 : C3
>   : ^^

    foo() {
>foo : () => void
>    : ^^^^^^^^^^

        const x: false.typeof(this.foo);
>x : false
>  : ^^^^^
>false : false
>      : ^^^^^
>typeof(this.foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(this.foo) : () => void
>           : ^^^^^^^^^^
>this.foo : () => void
>         : ^^^^^^^^^^
>this : this
>     : ^^^^
>foo : () => void
>    : ^^^^^^^^^^
    }
}

const nodes3 = document.getElementsByTagName("li");
>nodes3 : HTMLCollectionOf<HTMLLIElement>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>document.getElementsByTagName("li") : HTMLCollectionOf<HTMLLIElement>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>document.getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }
>                              : ^^^ ^^^^^^^^^                           ^^             ^^ ^^^                                          ^^^ ^^^^^^^^^                          ^^             ^^ ^^^                                         ^^^ ^^^^^^^^^                             ^^             ^^ ^^^                                            ^^^ ^^^^^^^^^                                     ^^             ^^ ^^^                                                    ^^^             ^^      ^^^                         ^^^
>document : Document
>         : ^^^^^^^^
>getElementsByTagName : { <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }

>"li" : "li"
>     : ^^^^

type ItemType3 = true.typeof(nodes.item(0));
>ItemType3 : true
>          : ^^^^
>true : true
>     : ^^^^
>typeof(nodes.item(0)) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(nodes.item(0)) : HTMLLIElement
>                : ^^^^^^^^^^^^^
>nodes.item(0) : HTMLLIElement
>              : ^^^^^^^^^^^^^
>nodes.item : (index: number) => HTMLLIElement
>           : ^     ^^      ^^^^^^^^^^^^^^^^^^
>nodes : HTMLCollectionOf<HTMLLIElement>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : (index: number) => HTMLLIElement
>     : ^     ^^      ^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^


