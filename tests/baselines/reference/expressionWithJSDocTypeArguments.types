//// [tests/cases/compiler/expressionWithJSDocTypeArguments.ts] ////

=== expressionWithJSDocTypeArguments.ts ===
// Repro from #51802

function foo<T>(x: T): T { return x }
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>x : T
>  : ^

class Bar<T> { constructor(public x: T) { } }
>Bar : Bar<T>
>    : ^^^^^^
>x : T
>  : ^

// Errors expected on all of the following

const WhatFoo = foo<?>;
>WhatFoo : (x: any) => any
>        : ^ ^^^^^^^^^^^^^
>foo<?> : (x: any) => any
>       : ^ ^^^^^^^^^^^^^
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

const HuhFoo = foo<string?>;
>HuhFoo : (x: string | null) => string | null
>       : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo<string?> : (x: string | null) => string | null
>             : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

const NopeFoo = foo<?string>;
>NopeFoo : (x: string | null) => string | null
>        : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo<?string> : (x: string | null) => string | null
>             : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

const ComeOnFoo = foo<?string?>;
>ComeOnFoo : (x: string | null) => string | null
>          : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo<?string?> : (x: string | null) => string | null
>              : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

type TWhatFoo = typeof foo<?>;
>TWhatFoo : typeof foo<unknown>
>         :                    
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

type THuhFoo = typeof foo<string?>;
>THuhFoo : typeof foo<string | null>
>        :                     ^^^^ 
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

type TNopeFoo = typeof foo<?string>;
>TNopeFoo : typeof foo<string | null>
>         :                     ^^^^ 
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

type TComeOnFoo = typeof foo<?string?>;
>TComeOnFoo : typeof foo<(string | null) | null>
>           :            ^         ^^^^^   ^^^^ 
>foo : <T>(x: T) => T
>    : ^ ^^ ^^ ^^^^^ 

const WhatBar = Bar<?>;
>WhatBar : { new (x: any): Bar<any>; prototype: Bar<any>; }
>        : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar<?> : { new (x: any): Bar<any>; prototype: Bar<any>; }
>       : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar : typeof Bar
>    : ^^^^^^^^^^

const HuhBar = Bar<string?>;
>HuhBar : { new (x: string | null): Bar<string | null>; prototype: Bar<any>; }
>       : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar<string?> : { new (x: string | null): Bar<string | null>; prototype: Bar<any>; }
>             : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar : typeof Bar
>    : ^^^^^^^^^^

const NopeBar = Bar<?string>;
>NopeBar : { new (x: string | null): Bar<string | null>; prototype: Bar<any>; }
>        : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar<?string> : { new (x: string | null): Bar<string | null>; prototype: Bar<any>; }
>             : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar : typeof Bar
>    : ^^^^^^^^^^

const ComeOnBar = Bar<?string?>;
>ComeOnBar : { new (x: string | null): Bar<string | null>; prototype: Bar<any>; }
>          : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar<?string?> : { new (x: string | null): Bar<string | null>; prototype: Bar<any>; }
>              : ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Bar : typeof Bar
>    : ^^^^^^^^^^

type TWhatBar = typeof Bar<?>;
>TWhatBar : typeof Bar<unknown>
>         :                    
>Bar : typeof Bar
>    : ^^^^^^^^^^

type THuhBar = typeof Bar<string?>;
>THuhBar : typeof Bar<string | null>
>        :                     ^^^^ 
>Bar : typeof Bar
>    : ^^^^^^^^^^

type TNopeBar = typeof Bar<?string>;
>TNopeBar : typeof Bar<string | null>
>         :                     ^^^^ 
>Bar : typeof Bar
>    : ^^^^^^^^^^

type TComeOnBar = typeof Bar<?string?>;
>TComeOnBar : typeof Bar<(string | null) | null>
>           :            ^         ^^^^^   ^^^^ 
>Bar : typeof Bar
>    : ^^^^^^^^^^

