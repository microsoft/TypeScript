//// [tests/cases/compiler/extendGenericArray.ts] ////

=== extendGenericArray.ts ===
interface Array<T> {
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 1 more)
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(extendGenericArray.ts, 0, 16))

    foo(): T;
>foo : Symbol(Array.foo, Decl(extendGenericArray.ts, 0, 20))
>T : Symbol(T, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(extendGenericArray.ts, 0, 16))
}

var arr: string[] = [];
>arr : Symbol(arr, Decl(extendGenericArray.ts, 4, 3))

var x: number = arr.foo();
>x : Symbol(x, Decl(extendGenericArray.ts, 5, 3))
>arr.foo : Symbol(Array.foo, Decl(extendGenericArray.ts, 0, 20))
>arr : Symbol(arr, Decl(extendGenericArray.ts, 4, 3))
>foo : Symbol(Array.foo, Decl(extendGenericArray.ts, 0, 20))

