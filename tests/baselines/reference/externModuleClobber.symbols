//// [tests/cases/compiler/externModuleClobber.ts] ////

=== externModuleClobber.ts ===
declare namespace EM {
>EM : Symbol(EM, Decl(externModuleClobber.ts, 0, 0))

	export class Position { }
>Position : Symbol(Position, Decl(externModuleClobber.ts, 0, 22))

	export class EC {
>EC : Symbol(EC, Decl(externModuleClobber.ts, 1, 26))

		public getPosition() : EM.Position;
>getPosition : Symbol(EC.getPosition, Decl(externModuleClobber.ts, 3, 18))
>EM : Symbol(EM, Decl(externModuleClobber.ts, 0, 0))
>Position : Symbol(Position, Decl(externModuleClobber.ts, 0, 22))
	}
}

var x:EM.Position;
>x : Symbol(x, Decl(externModuleClobber.ts, 8, 3))
>EM : Symbol(EM, Decl(externModuleClobber.ts, 0, 0))
>Position : Symbol(EM.Position, Decl(externModuleClobber.ts, 0, 22))

var ec:EM.EC = new EM.EC();
>ec : Symbol(ec, Decl(externModuleClobber.ts, 9, 3))
>EM : Symbol(EM, Decl(externModuleClobber.ts, 0, 0))
>EC : Symbol(EM.EC, Decl(externModuleClobber.ts, 1, 26))
>EM.EC : Symbol(EM.EC, Decl(externModuleClobber.ts, 1, 26))
>EM : Symbol(EM, Decl(externModuleClobber.ts, 0, 0))
>EC : Symbol(EM.EC, Decl(externModuleClobber.ts, 1, 26))

x = ec.getPosition();
>x : Symbol(x, Decl(externModuleClobber.ts, 8, 3))
>ec.getPosition : Symbol(EM.EC.getPosition, Decl(externModuleClobber.ts, 3, 18))
>ec : Symbol(ec, Decl(externModuleClobber.ts, 9, 3))
>getPosition : Symbol(EM.EC.getPosition, Decl(externModuleClobber.ts, 3, 18))

