falsinessPromiseCoercion.ts(4,10): error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
falsinessPromiseCoercion.ts(28,10): error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
falsinessPromiseCoercion.ts(44,10): error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
falsinessPromiseCoercion.ts(69,14): error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.


==== falsinessPromiseCoercion.ts (4 errors) ====
    function test1() {
        async function canAccess() { return false; }
    
        if (!canAccess()) { // error
             ~~~~~~~~~~~
!!! error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
!!! related TS2773 falsinessPromiseCoercion.ts:4:10: Did you forget to use 'await'?
        }
    }
    
    async function test2() {
        async function canAccess() { return false; }
    
        const res = canAccess()
    
        if (!res) { // ok
            return
        }
    
       await res
    }
    
    function test3() {
        async function canAccess() { return false; }
    
        if (!!!canAccess()) { // ok
        }
    }
    
    function test4(canAccess: () => Promise<boolean>) {
        if (!canAccess()) { // error
             ~~~~~~~~~~~
!!! error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
!!! related TS2773 falsinessPromiseCoercion.ts:28:10: Did you forget to use 'await'?
        }
    }
    
    function test5(canAccess: () => Promise<boolean> | undefined) {
        if (!canAccess()) { // ok
        }
    }
    
    function test6() {
        const x = {
            foo: {
                async bar() { return true; }
            }
        };
    
        if (!x.foo.bar()) { // error
             ~~~~~~~~~~~
!!! error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
!!! related TS2773 falsinessPromiseCoercion.ts:44:10: Did you forget to use 'await'?
        }
    }
    
    async function test7() {
        const x = {
            foo: {
                async bar() { return true; }
            }
        };
    
        const res = x.foo.bar();
    
        if (!res) { // ok
        }
    
        await res;
    }
    
    class Test8 {
        async isUser() {
            return true;
        }
    
        test() {
            if (!this.isUser()) { // error
                 ~~~~~~~~~~~~~
!!! error TS2801: This condition will always return true since this 'Promise<boolean>' is always defined.
!!! related TS2773 falsinessPromiseCoercion.ts:69:14: Did you forget to use 'await'?
            }
        }
    }
    
    class Test9 {
        async isUser() {
            return true;
        }
    
        async test() {
            const res = this.isUser();
            if (!res) { // ok
            }
    
            await res;
        }
    }
    