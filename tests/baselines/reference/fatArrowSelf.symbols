//// [tests/cases/compiler/fatArrowSelf.ts] ////

=== fatArrowSelf.ts ===
namespace Events {
>Events : Symbol(Events, Decl(fatArrowSelf.ts, 0, 0))

    export interface ListenerCallback {
>ListenerCallback : Symbol(ListenerCallback, Decl(fatArrowSelf.ts, 0, 18))

        (value:any):void;
>value : Symbol(value, Decl(fatArrowSelf.ts, 2, 9))
    }
    export class EventEmitter {
>EventEmitter : Symbol(EventEmitter, Decl(fatArrowSelf.ts, 3, 5))

         public addListener(type:string, listener:ListenerCallback) {
>addListener : Symbol(EventEmitter.addListener, Decl(fatArrowSelf.ts, 4, 31))
>type : Symbol(type, Decl(fatArrowSelf.ts, 5, 28))
>listener : Symbol(listener, Decl(fatArrowSelf.ts, 5, 40))
>ListenerCallback : Symbol(ListenerCallback, Decl(fatArrowSelf.ts, 0, 18))
         }
    }
}

namespace Consumer {
>Consumer : Symbol(Consumer, Decl(fatArrowSelf.ts, 8, 1))

    class EventEmitterConsummer {
>EventEmitterConsummer : Symbol(EventEmitterConsummer, Decl(fatArrowSelf.ts, 10, 20))

        constructor (private emitter: Events.EventEmitter) { }
>emitter : Symbol(EventEmitterConsummer.emitter, Decl(fatArrowSelf.ts, 12, 21))
>Events : Symbol(Events, Decl(fatArrowSelf.ts, 0, 0))
>EventEmitter : Symbol(Events.EventEmitter, Decl(fatArrowSelf.ts, 3, 5))

        private register() {
>register : Symbol(EventEmitterConsummer.register, Decl(fatArrowSelf.ts, 12, 62))

            this.emitter.addListener('change', (e) => {
>this.emitter.addListener : Symbol(Events.EventEmitter.addListener, Decl(fatArrowSelf.ts, 4, 31))
>this.emitter : Symbol(EventEmitterConsummer.emitter, Decl(fatArrowSelf.ts, 12, 21))
>this : Symbol(EventEmitterConsummer, Decl(fatArrowSelf.ts, 10, 20))
>emitter : Symbol(EventEmitterConsummer.emitter, Decl(fatArrowSelf.ts, 12, 21))
>addListener : Symbol(Events.EventEmitter.addListener, Decl(fatArrowSelf.ts, 4, 31))
>e : Symbol(e, Decl(fatArrowSelf.ts, 15, 48))

                this.changed();
>this.changed : Symbol(EventEmitterConsummer.changed, Decl(fatArrowSelf.ts, 18, 9))
>this : Symbol(EventEmitterConsummer, Decl(fatArrowSelf.ts, 10, 20))
>changed : Symbol(EventEmitterConsummer.changed, Decl(fatArrowSelf.ts, 18, 9))

            });
        }      

        private changed() {
>changed : Symbol(EventEmitterConsummer.changed, Decl(fatArrowSelf.ts, 18, 9))
        }
    }
}
