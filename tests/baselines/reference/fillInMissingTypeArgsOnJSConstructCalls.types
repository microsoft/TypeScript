//// [tests/cases/compiler/fillInMissingTypeArgsOnJSConstructCalls.ts] ////

=== BaseA.js ===
export default class BaseA {
>BaseA : BaseA
>      : ^^^^^
}
=== SubA.js ===
import BaseA from './BaseA';
>BaseA : typeof BaseA
>      : ^^^^^^^^^^^^

export default class SubA extends BaseA {
>SubA : SubA
>     : ^^^^
>BaseA : BaseA
>      : ^^^^^
}
=== BaseB.js ===
import BaseA from './BaseA';
>BaseA : typeof BaseA
>      : ^^^^^^^^^^^^

export default class B<T: BaseA> {
>B : B<T, BaseA>
>  : ^^^^^^^^^^^

    _AClass: Class<T>;
>_AClass : Class<T>
>        : ^^^^^^^^

    constructor(AClass: Class<T>) {
>AClass : Class<T>
>       : ^^^^^^^^

        this._AClass = AClass;
>this._AClass = AClass : Class<T>
>                      : ^^^^^^^^
>this._AClass : Class<T>
>             : ^^^^^^^^
>this : this
>     : ^^^^
>_AClass : Class<T>
>        : ^^^^^^^^
>AClass : Class<T>
>       : ^^^^^^^^
    }
}
=== SubB.js ===
import SubA from './SubA';
>SubA : typeof SubA
>     : ^^^^^^^^^^^

import BaseB from './BaseB';
>BaseB : typeof BaseB
>      : ^^^^^^^^^^^^

export default class SubB extends BaseB<SubA> {
>SubB : SubB
>     : ^^^^
>BaseB : BaseB<SubA, any>
>      : ^^^^^^^^^^^^^^^^

    constructor() {
        super(SubA);
>super(SubA) : void
>            : ^^^^
>super : typeof BaseB
>      : ^^^^^^^^^^^^
>SubA : typeof SubA
>     : ^^^^^^^^^^^
    }
}

