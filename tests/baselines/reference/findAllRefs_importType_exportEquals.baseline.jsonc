// === findAllReferences ===
// === /a.ts ===
// <|type /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// <|export = [|T|];|>

// === /b.ts ===
// <|const x: import("[|./a|]") = 0;|>
// const y: import("./a").U = "";

  // === Definitions ===
  // === /a.ts ===
  // <|type /*FIND ALL REFS*/[|T|] = number;|>
  // namespace T {
  //     export type U = string;
  // }
  // export = T;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type T = number\nnamespace T",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /a.ts ===
// type T = number;
// <|namespace /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}T|] {
//     export type U = string;
// }|>
// <|export = [|T|];|>

  // === Definitions ===
  // === /a.ts ===
  // <|type [|T|] = number;|>
  // namespace /*FIND ALL REFS*/T {
  //     export type U = string;
  // }
  // export = T;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "namespace T",
    "displayParts": [
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /a.ts ===
// <|type [|{| isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// <|export = /*FIND ALL REFS*/[|T|];|>

// === /b.ts ===
// <|const x: import("[|./a|]") = 0;|>
// const y: import("./a").U = "";

  // === Definitions ===
  // === /a.ts ===
  // <|type [|T|] = number;|>
  // namespace T {
  //     export type U = string;
  // }
  // export = /*FIND ALL REFS*/T;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type T = number\nnamespace T",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /b.ts ===
// <|const x: import("/*FIND ALL REFS*/[|{| defId: 1 |}./a|]") = 0;|>
// <|const y: import("[|{| defId: 0 |}./a|]").U = "";|>

// === /a.ts ===
// <|type [|{| defId: 1, isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| defId: 1, isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// <|[|{| defId: 0 |}<|export|] = [|{| contextId: 5, defId: 1 |}T|];|>|>

  // === Definitions ===
  // === /a.ts ===
  // [|{| defId: 0 |}<|type [|{| defId: 1 |}T|] = number;|>
  // namespace T {
  //     export type U = string;
  // }
  // export = T;|]

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "module",
    "name": "module \"/a\"",
    "displayParts": [
     {
      "text": "module",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"/a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type T = number\nnamespace T",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /b.ts ===
// <|const x: import("[|{| defId: 1 |}./a|]") = 0;|>
// <|const y: import("/*FIND ALL REFS*/[|{| defId: 0 |}./a|]").U = "";|>

// === /a.ts ===
// <|type [|{| defId: 1, isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| defId: 1, isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// <|[|{| defId: 0 |}<|export|] = [|{| contextId: 5, defId: 1 |}T|];|>|>

  // === Definitions ===
  // === /a.ts ===
  // [|{| defId: 0 |}<|type [|{| defId: 1 |}T|] = number;|>
  // namespace T {
  //     export type U = string;
  // }
  // export = T;|]

  // === Details ===
  [
   {
    "defId": 0,
    "containerKind": "",
    "containerName": "",
    "kind": "module",
    "name": "module \"/a\"",
    "displayParts": [
     {
      "text": "module",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "\"/a\"",
      "kind": "stringLiteral"
     }
    ]
   },
   {
    "defId": 1,
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type T = number\nnamespace T",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /a.ts ===
// <|type [|{| isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// /*FIND ALL REFS*/<|export = [|T|];|>

// === /b.ts ===
// <|const x: import("[|./a|]") = 0;|>
// const y: import("./a").U = "";

  // === Definitions ===
  // === /a.ts ===
  // <|type [|T|] = number;|>
  // namespace T {
  //     export type U = string;
  // }
  // /*FIND ALL REFS*/export = T;

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type T = number\nnamespace T",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     },
     {
      "text": "\n",
      "kind": "lineBreak"
     },
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findRenameLocations ===
// === /a.ts ===
// <|type /*RENAME*/[|TRENAME|] = number;|>
// <|namespace [|TRENAME|] {
//     export type U = string;
// }|>
// <|export = [|TRENAME|];|>



// === findRenameLocations ===
// === /a.ts ===
// <|type [|TRENAME|] = number;|>
// <|namespace /*RENAME*/[|TRENAME|] {
//     export type U = string;
// }|>
// <|export = [|TRENAME|];|>



// === findRenameLocations ===
// === /a.ts ===
// <|type [|TRENAME|] = number;|>
// <|namespace [|TRENAME|] {
//     export type U = string;
// }|>
// <|export = /*RENAME*/[|TRENAME|];|>