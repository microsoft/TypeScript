//// [tests/cases/compiler/findLast.ts] ////

=== findLast.ts ===
const itemNumber: number | undefined = [0].findLast((item) => item === 0);
>itemNumber : number
>           : ^^^^^^
>[0].findLast((item) => item === 0) : 0
>                                   : ^
>[0].findLast : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number; }
>             : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>[0] : number[]
>    : ^^^^^^^^
>0 : 0
>  : ^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number; }
>         : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

const itemString: string | undefined = ["string"].findLast((item) => item === "string");
>itemString : string
>           : ^^^^^^
>["string"].findLast((item) => item === "string") : "string"
>                                                 : ^^^^^^^^
>["string"].findLast : { <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string; }
>                    : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>["string"] : string[]
>           : ^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^
>findLast : { <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string; }
>         : ^^^ ^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>(item) => item === "string" : (item: string) => item is "string"
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : string
>     : ^^^^^^
>item === "string" : boolean
>                  : ^^^^^^^
>item : string
>     : ^^^^^^
>"string" : "string"
>         : ^^^^^^^^

new Int8Array().findLast((item) => item === 0);
>new Int8Array().findLast((item) => item === 0) : 0
>                                               : ^
>new Int8Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Int8Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Int8Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Int8Array() : Int8Array<ArrayBuffer>
>                : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Int8Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Int8Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint8Array().findLast((item) => item === 0);
>new Uint8Array().findLast((item) => item === 0) : 0
>                                                : ^
>new Uint8Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint8Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint8Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                          : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Uint8Array() : Uint8Array<ArrayBuffer>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint8Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint8Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint8ClampedArray().findLast((item) => item === 0);
>new Uint8ClampedArray().findLast((item) => item === 0) : 0
>                                                       : ^
>new Uint8ClampedArray().findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint8ClampedArray<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint8ClampedArray<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                                 : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Uint8ClampedArray() : Uint8ClampedArray<ArrayBuffer>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint8ClampedArray<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint8ClampedArray<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Int16Array().findLast((item) => item === 0);
>new Int16Array().findLast((item) => item === 0) : 0
>                                                : ^
>new Int16Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Int16Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Int16Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                          : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Int16Array() : Int16Array<ArrayBuffer>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Int16Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Int16Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint16Array().findLast((item) => item === 0);
>new Uint16Array().findLast((item) => item === 0) : 0
>                                                 : ^
>new Uint16Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint16Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint16Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                           : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Uint16Array() : Uint16Array<ArrayBuffer>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint16Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint16Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Int32Array().findLast((item) => item === 0);
>new Int32Array().findLast((item) => item === 0) : 0
>                                                : ^
>new Int32Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Int32Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Int32Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                          : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Int32Array() : Int32Array<ArrayBuffer>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Int32Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Int32Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint32Array().findLast((item) => item === 0);
>new Uint32Array().findLast((item) => item === 0) : 0
>                                                 : ^
>new Uint32Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint32Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint32Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                           : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Uint32Array() : Uint32Array<ArrayBuffer>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Uint32Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Uint32Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Float32Array().findLast((item) => item === 0);
>new Float32Array().findLast((item) => item === 0) : 0
>                                                  : ^
>new Float32Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Float32Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Float32Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                            : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Float32Array() : Float32Array<ArrayBuffer>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Float32Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Float32Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Float64Array().findLast((item) => item === 0);
>new Float64Array().findLast((item) => item === 0) : 0
>                                                  : ^
>new Float64Array().findLast : { <S extends number>(predicate: (value: number, index: number, array: Float64Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Float64Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>                            : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new Float64Array() : Float64Array<ArrayBuffer>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends number>(predicate: (value: number, index: number, array: Float64Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, array: Float64Array<ArrayBuffer>) => unknown, thisArg?: any): number | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new BigInt64Array().findLast((item) => item === BigInt(0));
>new BigInt64Array().findLast((item) => item === BigInt(0)) : bigint
>                                                           : ^^^^^^
>new BigInt64Array().findLast : { <S extends bigint>(predicate: (value: bigint, index: number, array: BigInt64Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, array: BigInt64Array<ArrayBuffer>) => unknown, thisArg?: any): bigint | undefined; }
>                             : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new BigInt64Array() : BigInt64Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>BigInt64Array : BigInt64ArrayConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends bigint>(predicate: (value: bigint, index: number, array: BigInt64Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, array: BigInt64Array<ArrayBuffer>) => unknown, thisArg?: any): bigint | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === BigInt(0) : (item: bigint) => boolean
>                             : ^    ^^^^^^^^^^^^^^^^^^^^
>item : bigint
>     : ^^^^^^
>item === BigInt(0) : boolean
>                   : ^^^^^^^
>item : bigint
>     : ^^^^^^
>BigInt(0) : bigint
>          : ^^^^^^
>BigInt : BigIntConstructor
>       : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

new BigUint64Array().findLast((item) => item === BigInt(0));
>new BigUint64Array().findLast((item) => item === BigInt(0)) : bigint
>                                                            : ^^^^^^
>new BigUint64Array().findLast : { <S extends bigint>(predicate: (value: bigint, index: number, array: BigUint64Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, array: BigUint64Array<ArrayBuffer>) => unknown, thisArg?: any): bigint | undefined; }
>                              : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>new BigUint64Array() : BigUint64Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>BigUint64Array : BigUint64ArrayConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>findLast : { <S extends bigint>(predicate: (value: bigint, index: number, array: BigUint64Array<ArrayBuffer>) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, array: BigUint64Array<ArrayBuffer>) => unknown, thisArg?: any): bigint | undefined; }
>         : ^^^ ^^^^^^^^^      ^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^                  ^^^
>(item) => item === BigInt(0) : (item: bigint) => boolean
>                             : ^    ^^^^^^^^^^^^^^^^^^^^
>item : bigint
>     : ^^^^^^
>item === BigInt(0) : boolean
>                   : ^^^^^^^
>item : bigint
>     : ^^^^^^
>BigInt(0) : bigint
>          : ^^^^^^
>BigInt : BigIntConstructor
>       : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

const indexNumber: number = [0].findLastIndex((item) => item === 0);
>indexNumber : number
>            : ^^^^^^
>[0].findLastIndex((item) => item === 0) : number
>                                        : ^^^^^^
>[0].findLastIndex : (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => number
>                  : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>[0] : number[]
>    : ^^^^^^^^
>0 : 0
>  : ^
>findLastIndex : (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

const indexString: number = ["string"].findLastIndex((item) => item === "string");
>indexString : number
>            : ^^^^^^
>["string"].findLastIndex((item) => item === "string") : number
>                                                      : ^^^^^^
>["string"].findLastIndex : (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => number
>                         : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>["string"] : string[]
>           : ^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^
>findLastIndex : (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === "string" : (item: string) => item is "string"
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : string
>     : ^^^^^^
>item === "string" : boolean
>                  : ^^^^^^^
>item : string
>     : ^^^^^^
>"string" : "string"
>         : ^^^^^^^^

new Int8Array().findLastIndex((item) => item === 0);
>new Int8Array().findLastIndex((item) => item === 0) : number
>                                                    : ^^^^^^
>new Int8Array().findLastIndex : (predicate: (value: number, index: number, array: Int8Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Int8Array() : Int8Array<ArrayBuffer>
>                : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Int8Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint8Array().findLastIndex((item) => item === 0);
>new Uint8Array().findLastIndex((item) => item === 0) : number
>                                                     : ^^^^^^
>new Uint8Array().findLastIndex : (predicate: (value: number, index: number, array: Uint8Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                               : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Uint8Array() : Uint8Array<ArrayBuffer>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Uint8Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint8ClampedArray().findLastIndex((item) => item === 0);
>new Uint8ClampedArray().findLastIndex((item) => item === 0) : number
>                                                            : ^^^^^^
>new Uint8ClampedArray().findLastIndex : (predicate: (value: number, index: number, array: Uint8ClampedArray<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                      : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Uint8ClampedArray() : Uint8ClampedArray<ArrayBuffer>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Uint8ClampedArray<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Int16Array().findLastIndex((item) => item === 0);
>new Int16Array().findLastIndex((item) => item === 0) : number
>                                                     : ^^^^^^
>new Int16Array().findLastIndex : (predicate: (value: number, index: number, array: Int16Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                               : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Int16Array() : Int16Array<ArrayBuffer>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Int16Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint16Array().findLastIndex((item) => item === 0);
>new Uint16Array().findLastIndex((item) => item === 0) : number
>                                                      : ^^^^^^
>new Uint16Array().findLastIndex : (predicate: (value: number, index: number, array: Uint16Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Uint16Array() : Uint16Array<ArrayBuffer>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Uint16Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Int32Array().findLastIndex((item) => item === 0);
>new Int32Array().findLastIndex((item) => item === 0) : number
>                                                     : ^^^^^^
>new Int32Array().findLastIndex : (predicate: (value: number, index: number, array: Int32Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                               : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Int32Array() : Int32Array<ArrayBuffer>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Int32Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Uint32Array().findLastIndex((item) => item === 0);
>new Uint32Array().findLastIndex((item) => item === 0) : number
>                                                      : ^^^^^^
>new Uint32Array().findLastIndex : (predicate: (value: number, index: number, array: Uint32Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Uint32Array() : Uint32Array<ArrayBuffer>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Uint32Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Float32Array().findLastIndex((item) => item === 0);
>new Float32Array().findLastIndex((item) => item === 0) : number
>                                                       : ^^^^^^
>new Float32Array().findLastIndex : (predicate: (value: number, index: number, array: Float32Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                 : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Float32Array() : Float32Array<ArrayBuffer>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Float32Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new Float64Array().findLastIndex((item) => item === 0);
>new Float64Array().findLastIndex((item) => item === 0) : number
>                                                       : ^^^^^^
>new Float64Array().findLastIndex : (predicate: (value: number, index: number, array: Float64Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                 : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new Float64Array() : Float64Array<ArrayBuffer>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: number, index: number, array: Float64Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === 0 : (item: number) => item is 0
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^
>item : number
>     : ^^^^^^
>item === 0 : boolean
>           : ^^^^^^^
>item : number
>     : ^^^^^^
>0 : 0
>  : ^

new BigInt64Array().findLastIndex((item) => item === BigInt(0));
>new BigInt64Array().findLastIndex((item) => item === BigInt(0)) : number
>                                                                : ^^^^^^
>new BigInt64Array().findLastIndex : (predicate: (value: bigint, index: number, array: BigInt64Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                  : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new BigInt64Array() : BigInt64Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>BigInt64Array : BigInt64ArrayConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: bigint, index: number, array: BigInt64Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === BigInt(0) : (item: bigint) => boolean
>                             : ^    ^^^^^^^^^^^^^^^^^^^^
>item : bigint
>     : ^^^^^^
>item === BigInt(0) : boolean
>                   : ^^^^^^^
>item : bigint
>     : ^^^^^^
>BigInt(0) : bigint
>          : ^^^^^^
>BigInt : BigIntConstructor
>       : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

new BigUint64Array().findLastIndex((item) => item === BigInt(0));
>new BigUint64Array().findLastIndex((item) => item === BigInt(0)) : number
>                                                                 : ^^^^^^
>new BigUint64Array().findLastIndex : (predicate: (value: bigint, index: number, array: BigUint64Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>                                   : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>new BigUint64Array() : BigUint64Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>BigUint64Array : BigUint64ArrayConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>findLastIndex : (predicate: (value: bigint, index: number, array: BigUint64Array<ArrayBuffer>) => unknown, thisArg?: any) => number
>              : ^         ^^^     ^^      ^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^      
>(item) => item === BigInt(0) : (item: bigint) => boolean
>                             : ^    ^^^^^^^^^^^^^^^^^^^^
>item : bigint
>     : ^^^^^^
>item === BigInt(0) : boolean
>                   : ^^^^^^^
>item : bigint
>     : ^^^^^^
>BigInt(0) : bigint
>          : ^^^^^^
>BigInt : BigIntConstructor
>       : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

