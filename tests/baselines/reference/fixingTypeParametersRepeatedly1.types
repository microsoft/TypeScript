//// [tests/cases/compiler/fixingTypeParametersRepeatedly1.ts] ////

=== fixingTypeParametersRepeatedly1.ts ===
declare function f<T>(x: T, y: (p: T) => T, z: (p: T) => T): T;
>f : <T>(x: T, y: (p: T) => T, z: (p: T) => T) => T
>  : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^ 
>x : T
>  : ^
>y : (p: T) => T
>  : ^ ^^ ^^^^^ 
>p : T
>  : ^
>z : (p: T) => T
>  : ^ ^^ ^^^^^ 
>p : T
>  : ^

f("", x => null, x => x.toLowerCase());
>f("", x => null, x => x.toLowerCase()) : string
>                                       : ^^^^^^
>f : <T>(x: T, y: (p: T) => T, z: (p: T) => T) => T
>  : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^ 
>"" : ""
>   : ^^
>x => null : (x: string) => any
>          : ^ ^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>x => x.toLowerCase() : (x: string) => string
>                     : ^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>x.toLowerCase() : string
>                : ^^^^^^
>x.toLowerCase : () => string
>              : ^^^^^^      
>x : string
>  : ^^^^^^
>toLowerCase : () => string
>            : ^^^^^^      

// First overload of g should type check just like f
declare function g<T>(x: T, y: (p: T) => T, z: (p: T) => T): T;
>g : { <T>(x: T, y: (p: T) => T, z: (p: T) => T): T; (): any; }
>  : ^^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^ ^^^^^^^^^^^^
>x : T
>  : ^
>y : (p: T) => T
>  : ^ ^^ ^^^^^ 
>p : T
>  : ^
>z : (p: T) => T
>  : ^ ^^ ^^^^^ 
>p : T
>  : ^

declare function g();
>g : { <T>(x: T, y: (p: T) => T, z: (p: T) => T): T; (): any; }
>  : ^^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^ ^^^^^^^^^^^^

g("", x => null, x => x.toLowerCase());
>g("", x => null, x => x.toLowerCase()) : any
>g : { <T>(x: T, y: (p: T) => T, z: (p: T) => T): T; (): any; }
>  : ^^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^ ^^^^^^^^^^^^
>"" : ""
>   : ^^
>x => null : (x: string) => any
>          : ^ ^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>x => x.toLowerCase() : (x: string) => string
>                     : ^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>x.toLowerCase() : string
>                : ^^^^^^
>x.toLowerCase : () => string
>              : ^^^^^^      
>x : string
>  : ^^^^^^
>toLowerCase : () => string
>            : ^^^^^^      

