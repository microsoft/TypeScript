//// [tests/cases/compiler/forAwaitForIntersection1.ts] ////

=== forAwaitForIntersection1.ts ===
type Stream1<T_Sync, T_Async> = Iterable<T_Sync> & AsyncIterable<T_Async>;
>Stream1 : Stream1<T_Sync, T_Async>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^

class A1 {}
>A1 : A1
>   : ^^

class B1 {}
>B1 : B1
>   : ^^

async function loop1(stream: Stream1<A1, B1>) {
>loop1 : (stream: Stream1<A1, B1>) => Promise<void>
>      : ^      ^^               ^^^^^^^^^^^^^^^^^^
>stream : Stream1<A1, B1>
>       : ^^^^^^^^^^^^^^^

  for await (const b of stream) {}
>b : B1
>  : ^^
>stream : Stream1<A1, B1>
>       : ^^^^^^^^^^^^^^^
}

type Stream2<T_Sync, T_Async> = Iterable<T_Sync> & AsyncIterable<T_Async>;
>Stream2 : Stream2<T_Sync, T_Async>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^

class A2 {}
>A2 : A2
>   : ^^

class B2 {}
>B2 : B2
>   : ^^

async function loop2(stream: Stream2<A2, B2>) {
>loop2 : (stream: Stream2<A2, B2>) => Promise<void>
>      : ^      ^^               ^^^^^^^^^^^^^^^^^^
>stream : Stream2<A2, B2>
>       : ^^^^^^^^^^^^^^^

  for (const a of stream) {}
>a : A2
>  : ^^
>stream : Stream2<A2, B2>
>       : ^^^^^^^^^^^^^^^
}

type Stream3<T_Sync, T_Async> = Iterable<T_Sync> & AsyncIterable<T_Async>;
>Stream3 : Stream3<T_Sync, T_Async>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^

class A3 {}
>A3 : A3
>   : ^^

class B3 {}
>B3 : B3
>   : ^^

async function loop3(stream: Stream3<A3, B3>) {
>loop3 : (stream: Stream3<A3, B3>) => Promise<void>
>      : ^      ^^               ^^^^^^^^^^^^^^^^^^
>stream : Stream3<A3, B3>
>       : ^^^^^^^^^^^^^^^

  for await (const b of stream) {}
>b : B3
>  : ^^
>stream : Stream3<A3, B3>
>       : ^^^^^^^^^^^^^^^

  for (const a of stream) {}
>a : A3
>  : ^^
>stream : Stream3<A3, B3>
>       : ^^^^^^^^^^^^^^^
}

type Stream4<T_Sync, T_Async> = Iterable<T_Sync> & AsyncIterable<T_Async>;
>Stream4 : Stream4<T_Sync, T_Async>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^

class A4 {}
>A4 : A4
>   : ^^

class B4 {}
>B4 : B4
>   : ^^

// verify that resolving sync iteration first doesn't spoil the type for async iteration
async function loop4(stream: Stream4<A4, B4>) {
>loop4 : (stream: Stream4<A4, B4>) => Promise<void>
>      : ^      ^^               ^^^^^^^^^^^^^^^^^^
>stream : Stream4<A4, B4>
>       : ^^^^^^^^^^^^^^^

  for (const a of stream) {}
>a : A4
>  : ^^
>stream : Stream4<A4, B4>
>       : ^^^^^^^^^^^^^^^

  for await (const b of stream) {}
>b : B4
>  : ^^
>stream : Stream4<A4, B4>
>       : ^^^^^^^^^^^^^^^
}
