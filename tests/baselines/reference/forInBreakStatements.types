//// [tests/cases/conformance/statements/breakStatements/forInBreakStatements.ts] ////

=== forInBreakStatements.ts ===
for(var x in {}) {
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

    break;
}

ONE:
>ONE : any
>    : ^^^

for(var x in {}) {
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

    break ONE;
>ONE : any
>    : ^^^
}

TWO:
>TWO : any
>    : ^^^

THREE:
>THREE : any
>      : ^^^

for(var x in {}) {
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

    break THREE;
>THREE : any
>      : ^^^
}

FOUR:
>FOUR : any
>     : ^^^

for(var x in {}) {
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

    FIVE:
>FIVE : any
>     : ^^^

    for(var x in {}) {
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

        break FOUR;
>FOUR : any
>     : ^^^
    }
}

for(var x in {}) {
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

    SIX:
>SIX : any
>    : ^^^

    for(var x in {}) break SIX;
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^
>SIX : any
>    : ^^^
}

SEVEN:
>SEVEN : any
>      : ^^^

for (var x in {}) for (var x in {}) for (var x in {}) break SEVEN;
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^
>SEVEN : any
>      : ^^^

EIGHT:
>EIGHT : any
>      : ^^^

for (var x in {}){
>x : string
>  : ^^^^^^
>{} : {}
>   : ^^

    var fn = function () { }
>fn : () => void
>   : ^^^^^^^^^^
>function () { } : () => void
>                : ^^^^^^^^^^

    break EIGHT;
>EIGHT : any
>      : ^^^
}

