//// [tests/cases/compiler/forwardRefInEnum.ts] ////

=== forwardRefInEnum.ts ===
enum E1 {
>E1 : Symbol(E1, Decl(forwardRefInEnum.ts, 0, 0))

    // illegal case
    // forward reference to the element of the same enum
    X = Y, 
>X : Symbol(E1.X, Decl(forwardRefInEnum.ts, 0, 9))
>Y : Symbol(E1.Y, Decl(forwardRefInEnum.ts, 4, 17))

    X1 = E1["Y"], 
>X1 : Symbol(E1.X1, Decl(forwardRefInEnum.ts, 3, 10))
>E1 : Symbol(E1, Decl(forwardRefInEnum.ts, 0, 0))
>"Y" : Symbol(E1.Y, Decl(forwardRefInEnum.ts, 4, 17))

    // forward reference to the element of the same enum
    Y = E1.Z,
>Y : Symbol(E1.Y, Decl(forwardRefInEnum.ts, 4, 17))
>E1 : Symbol(E1, Decl(forwardRefInEnum.ts, 0, 0))

    Y1 = E1["Z"]
>Y1 : Symbol(E1.Y1, Decl(forwardRefInEnum.ts, 6, 13))
>E1 : Symbol(E1, Decl(forwardRefInEnum.ts, 0, 0))
}

enum E1 {
>E1 : Symbol(E1, Decl(forwardRefInEnum.ts, 8, 1))

    Z = 4    
>Z : Symbol(E1.Z, Decl(forwardRefInEnum.ts, 10, 9))
}

