//// [tests/cases/compiler/functionOverloads44.ts] ////

=== functionOverloads44.ts ===
interface Animal { animal }
>animal : any

interface Dog extends Animal { dog }
>dog : any

interface Cat extends Animal { cat }
>cat : any

function foo1(bar: { a:number }[]): Dog;
>foo1 : { (bar: { a: number; }[]): Dog; (bar: { a: string; }[]): Animal; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^      ^^^
>bar : { a: number; }[]
>    : ^^^^^      ^^^^^
>a : number
>  : ^^^^^^

function foo1(bar: { a:string }[]): Animal;
>foo1 : { (bar: { a: number; }[]): Dog; (bar: { a: string; }[]): Animal; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^      ^^^
>bar : { a: string; }[]
>    : ^^^^^      ^^^^^
>a : string
>  : ^^^^^^

function foo1([x]: { a:number | string }[]): Dog {
>foo1 : { (bar: { a: number; }[]): Dog; (bar: { a: string; }[]): Animal; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^      ^^^
>x : { a: number | string; }
>  : ^^^^^               ^^^
>a : string | number
>  : ^^^^^^^^^^^^^^^

    return undefined;
>undefined : undefined
>          : ^^^^^^^^^
}

function foo2(bar: { a:number }[]): Cat;
>foo2 : { (bar: { a: number; }[]): Cat; (bar: { a: string; }[]): Cat | Dog; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^         ^^^
>bar : { a: number; }[]
>    : ^^^^^      ^^^^^
>a : number
>  : ^^^^^^

function foo2(bar: { a:string }[]): Cat | Dog;
>foo2 : { (bar: { a: number; }[]): Cat; (bar: { a: string; }[]): Cat | Dog; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^         ^^^
>bar : { a: string; }[]
>    : ^^^^^      ^^^^^
>a : string
>  : ^^^^^^

function foo2([x]: { a:number | string }[]): Cat {
>foo2 : { (bar: { a: number; }[]): Cat; (bar: { a: string; }[]): Cat | Dog; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^         ^^^
>x : { a: number | string; }
>  : ^^^^^               ^^^
>a : string | number
>  : ^^^^^^^^^^^^^^^

    return undefined;
>undefined : undefined
>          : ^^^^^^^^^
}


var x1 = foo1([{a: "str"}]);
>x1 : Animal
>   : ^^^^^^
>foo1([{a: "str"}]) : Animal
>                   : ^^^^^^
>foo1 : { (bar: { a: number; }[]): Dog; (bar: { a: string; }[]): Animal; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^      ^^^
>[{a: "str"}] : { a: string; }[]
>             : ^^^^^^^^^^^^^^^^
>{a: "str"} : { a: string; }
>           : ^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>"str" : "str"
>      : ^^^^^

var y1 = foo1([{a: 100}]);
>y1 : Dog
>   : ^^^
>foo1([{a: 100}]) : Dog
>                 : ^^^
>foo1 : { (bar: { a: number; }[]): Dog; (bar: { a: string; }[]): Animal; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^      ^^^
>[{a: 100}] : { a: number; }[]
>           : ^^^^^^^^^^^^^^^^
>{a: 100} : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>100 : 100
>    : ^^^

var x2 = foo2([{a: "str"}]);
>x2 : Dog | Cat
>   : ^^^^^^^^^
>foo2([{a: "str"}]) : Dog | Cat
>                   : ^^^^^^^^^
>foo2 : { (bar: { a: number; }[]): Cat; (bar: { a: string; }[]): Cat | Dog; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^         ^^^
>[{a: "str"}] : { a: string; }[]
>             : ^^^^^^^^^^^^^^^^
>{a: "str"} : { a: string; }
>           : ^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^
>"str" : "str"
>      : ^^^^^

var y2 = foo2([{a: 100}]);
>y2 : Cat
>   : ^^^
>foo2([{a: 100}]) : Cat
>                 : ^^^
>foo2 : { (bar: { a: number; }[]): Cat; (bar: { a: string; }[]): Cat | Dog; }
>     : ^^^   ^^                ^^^   ^^^   ^^                ^^^         ^^^
>[{a: 100}] : { a: number; }[]
>           : ^^^^^^^^^^^^^^^^
>{a: 100} : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>100 : 100
>    : ^^^

