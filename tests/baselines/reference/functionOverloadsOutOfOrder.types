//// [tests/cases/compiler/functionOverloadsOutOfOrder.ts] ////

=== functionOverloadsOutOfOrder.ts ===
class d {
>d : d
>  : ^

    private foo(n: number): string;
>foo : { (n: number): string; (s: string): string; }
>    : ^^^ ^^      ^^^      ^^^ ^^      ^^^      ^^^
>n : number
>  : ^^^^^^

    private foo(ns: any) {
>foo : { (n: number): string; (s: string): string; }
>    : ^^^ ^^      ^^^      ^^^ ^^      ^^^      ^^^
>ns : any
>   : ^^^

        return ns.toString();
>ns.toString() : any
>              : ^^^
>ns.toString : any
>            : ^^^
>ns : any
>   : ^^^
>toString : any
>         : ^^^
    }
    private foo(s: string): string;
>foo : { (n: number): string; (s: string): string; }
>    : ^^^ ^^      ^^^      ^^^ ^^      ^^^      ^^^
>s : string
>  : ^^^^^^
}

class e {
>e : e
>  : ^

    private foo(ns: any) {
>foo : { (ns: any): any; (s: string): string; (n: number): string; }
>    : ^^^  ^^   ^^^^^^^^^ ^^      ^^^      ^^^ ^^      ^^^      ^^^
>ns : any
>   : ^^^

        return ns.toString();
>ns.toString() : any
>              : ^^^
>ns.toString : any
>            : ^^^
>ns : any
>   : ^^^
>toString : any
>         : ^^^
    }
    private foo(s: string): string;
>foo : { (ns: any): any; (s: string): string; (n: number): string; }
>    : ^^^  ^^   ^^^^^^^^^ ^^      ^^^      ^^^ ^^      ^^^      ^^^
>s : string
>  : ^^^^^^

    private foo(n: number): string;
>foo : { (ns: any): any; (s: string): string; (n: number): string; }
>    : ^^^  ^^   ^^^^^^^^^ ^^      ^^^      ^^^ ^^      ^^^      ^^^
>n : number
>  : ^^^^^^
}
