//// [tests/cases/compiler/functionSubtypingOfVarArgs.ts] ////

=== functionSubtypingOfVarArgs.ts ===
class EventBase {
>EventBase : EventBase
>          : ^^^^^^^^^

    private _listeners = [];
>_listeners : any[]
>           : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    add(listener: (...args: any[]) => void): void {
>add : (listener: (...args: any[]) => void) => void
>    : ^        ^^                        ^^^^^    
>listener : (...args: any[]) => void
>         : ^^^^    ^^     ^^^^^    
>args : any[]
>     : ^^^^^

        this._listeners.push(listener);
>this._listeners.push(listener) : number
>                               : ^^^^^^
>this._listeners.push : (...items: any[]) => number
>                     : ^^^^     ^^^^^^^^^^^^      
>this._listeners : any[]
>                : ^^^^^
>this : this
>     : ^^^^
>_listeners : any[]
>           : ^^^^^
>push : (...items: any[]) => number
>     : ^^^^     ^^^^^^^^^^^^      
>listener : (...args: any[]) => void
>         : ^^^^    ^^     ^^^^^    
    }
}

class StringEvent extends EventBase { // should work
>StringEvent : StringEvent
>            : ^^^^^^^^^^^
>EventBase : EventBase
>          : ^^^^^^^^^

    add(listener: (items: string) => void ) { // valid, items is subtype of args
>add : (listener: (items: string) => void) => void
>    : ^        ^^                       ^^^^^^^^^
>listener : (items: string) => void
>         : ^     ^^      ^^^^^    
>items : string
>      : ^^^^^^

        super.add(listener);
>super.add(listener) : void
>                    : ^^^^
>super.add : (listener: (...args: any[]) => void) => void
>          : ^        ^^                        ^^^^^    
>super : EventBase
>      : ^^^^^^^^^
>add : (listener: (...args: any[]) => void) => void
>    : ^        ^^                        ^^^^^    
>listener : (items: string) => void
>         : ^     ^^      ^^^^^    
    }
}

