//// [tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements.ts] ////

=== functionWithMultipleReturnStatements.ts ===
// return type of a function with multiple returns is the BCT of each return statement
// it is an error if there is no single BCT, these are error cases

function f1() {
>f1 : () => 1 | ""
>   : ^^^^^^^^^^^^

    if (true) {
>true : true
>     : ^^^^

        return 1;
>1 : 1
>  : ^

    } else {
        return '';
>'' : ""
>   : ^^
    }
}

function f2() {
>f2 : () => 1 | "" | 2
>   : ^^^^^^^^^^^^^^^^

    if (true) {
>true : true
>     : ^^^^

        return 1;
>1 : 1
>  : ^

    } else if (false) {
>false : false
>      : ^^^^^

        return 2;
>2 : 2
>  : ^

    } else {
        return '';
>'' : ""
>   : ^^
    }
}

function f3() {
>f3 : () => 1 | ""
>   : ^^^^^^^^^^^^

    try {
        return 1;
>1 : 1
>  : ^
    }
    catch (e) {
>e : any

        return '';
>'' : ""
>   : ^^
    }
}

function f4() {
>f4 : () => 1 | ""
>   : ^^^^^^^^^^^^

    try {
        return 1;
>1 : 1
>  : ^
    }
    catch (e) {
>e : any

    }
    finally {
        return '';
>'' : ""
>   : ^^
    }
}

function f5() {
>f5 : () => 1 | ""
>   : ^^^^^^^^^^^^

    return 1;
>1 : 1
>  : ^

    return '';
>'' : ""
>   : ^^
}

function f6<T, U>(x: T, y:U) {
>f6 : <T, U>(x: T, y: U) => T | U
>   : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^^^^
>x : T
>  : ^
>y : U
>  : ^

    if (true) {
>true : true
>     : ^^^^

        return x;
>x : T
>  : ^

    } else {
        return y;
>y : U
>  : ^
    }
}

function f8<T extends U, U extends V, V>(x: T, y: U) {
>f8 : <T extends U, U extends V, V>(x: T, y: U) => U
>   : ^ ^^^^^^^^^ ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^
>x : T
>  : ^
>y : U
>  : ^

    if (true) {
>true : true
>     : ^^^^

        return x;
>x : T
>  : ^

    } else {
        return y;
>y : U
>  : ^
    }
}

