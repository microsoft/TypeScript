//// [tests/cases/compiler/functionsMissingReturnStatementsAndExpressionsStrictNullChecks.ts] ////

=== functionsMissingReturnStatementsAndExpressionsStrictNullChecks.ts ===
function f10(): undefined {
>f10 : () => undefined
>    : ^^^^^^         

    // Ok, return type allows implicit return of undefined
}

function f11(): undefined | number {
>f11 : () => undefined | number
>    : ^^^^^^                  

    // Error, return type isn't just undefined
}

function f12(): number {
>f12 : () => number
>    : ^^^^^^      

    // Error, return type doesn't include undefined
}

const f20: () => undefined = () => {
>f20 : () => undefined
>    : ^^^^^^         
>() => {    // Ok, contextual type for implicit return is undefined} : () => undefined
>                                                                    : ^^^^^^^^^^^^^^^

    // Ok, contextual type for implicit return is undefined
}

const f21: () => undefined | number = () => {
>f21 : () => undefined | number
>    : ^^^^^^                  
>() => {    // Error, regular void function because contextual type for implicit return isn't just undefined} : () => void
>                                                                                                             : ^^^^^^^^^^

    // Error, regular void function because contextual type for implicit return isn't just undefined
}

const f22: () => number = () => {
>f22 : () => number
>    : ^^^^^^      
>() => {    // Error, regular void function because contextual type for implicit return isn't just undefined} : () => void
>                                                                                                             : ^^^^^^^^^^

    // Error, regular void function because contextual type for implicit return isn't just undefined
}

async function f30(): Promise<undefined> {
>f30 : () => Promise<undefined>
>    : ^^^^^^                  

    // Ok, return type allows implicit return of undefined
}

async function f31(): Promise<undefined | number> {
>f31 : () => Promise<undefined | number>
>    : ^^^^^^                           

    // Error, return type isn't just undefined
}

async function f32(): Promise<number> {
>f32 : () => Promise<number>
>    : ^^^^^^               

    // Error, return type doesn't include undefined
}

// Examples from #36288

declare function f(a: () => undefined): void;
>f : (a: () => undefined) => void
>  : ^ ^^               ^^^^^    
>a : () => undefined
>  : ^^^^^^         

f(() => { });
>f(() => { }) : void
>             : ^^^^
>f : (a: () => undefined) => void
>  : ^ ^^               ^^^^^    
>() => { } : () => undefined
>          : ^^^^^^^^^^^^^^^

f((): undefined => { });
>f((): undefined => { }) : void
>                        : ^^^^
>f : (a: () => undefined) => void
>  : ^ ^^               ^^^^^    
>(): undefined => { } : () => undefined
>                     : ^^^^^^         

const g1: () => undefined = () => { };
>g1 : () => undefined
>   : ^^^^^^         
>() => { } : () => undefined
>          : ^^^^^^^^^^^^^^^

const g2 = (): undefined => { };
>g2 : () => undefined
>   : ^^^^^^         
>(): undefined => { } : () => undefined
>                     : ^^^^^^         

function h1() {
>h1 : () => void
>   : ^^^^^^^^^^
}

f(h1);  // Error
>f(h1) : void
>      : ^^^^
>f : (a: () => undefined) => void
>  : ^ ^^               ^^^^^    
>h1 : () => void
>   : ^^^^^^^^^^

function h2(): undefined {
>h2 : () => undefined
>   : ^^^^^^         
}

f(h2);
>f(h2) : void
>      : ^^^^
>f : (a: () => undefined) => void
>  : ^ ^^               ^^^^^    
>h2 : () => undefined
>   : ^^^^^^         

