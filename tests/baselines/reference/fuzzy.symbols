//// [tests/cases/compiler/fuzzy.ts] ////

=== fuzzy.ts ===
namespace M {
>M : Symbol(M, Decl(fuzzy.ts, 0, 0))

    export interface I {
>I : Symbol(I, Decl(fuzzy.ts, 0, 13))

        works:()=>R;
>works : Symbol(I.works, Decl(fuzzy.ts, 1, 24))
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))

        alsoWorks:()=>R;
>alsoWorks : Symbol(I.alsoWorks, Decl(fuzzy.ts, 2, 20))
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))

        doesntWork:()=>R;
>doesntWork : Symbol(I.doesntWork, Decl(fuzzy.ts, 3, 24))
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))
    }

    export interface R {
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))

        anything:number;
>anything : Symbol(R.anything, Decl(fuzzy.ts, 7, 24))

        oneI:I;
>oneI : Symbol(R.oneI, Decl(fuzzy.ts, 8, 24))
>I : Symbol(I, Decl(fuzzy.ts, 0, 13))
    }

    export class C implements I {
>C : Symbol(C, Decl(fuzzy.ts, 10, 5))
>I : Symbol(I, Decl(fuzzy.ts, 0, 13))

        constructor(public x:number) {
>x : Symbol(C.x, Decl(fuzzy.ts, 13, 20))
        }
        works():R {
>works : Symbol(C.works, Decl(fuzzy.ts, 14, 9))
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))

            return <R>({ anything: 1 });
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))
>anything : Symbol(anything, Decl(fuzzy.ts, 16, 24))
        }

        doesntWork():R {
>doesntWork : Symbol(C.doesntWork, Decl(fuzzy.ts, 17, 9))
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))

            return { anything:1, oneI:this };
>anything : Symbol(anything, Decl(fuzzy.ts, 20, 20))
>oneI : Symbol(oneI, Decl(fuzzy.ts, 20, 32))
>this : Symbol(C, Decl(fuzzy.ts, 10, 5))
        }

        worksToo():R {
>worksToo : Symbol(C.worksToo, Decl(fuzzy.ts, 21, 9))
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))

            return <R>({ oneI: this });
>R : Symbol(R, Decl(fuzzy.ts, 5, 5))
>oneI : Symbol(oneI, Decl(fuzzy.ts, 24, 24))
>this : Symbol(C, Decl(fuzzy.ts, 10, 5))
        }
    }
}


