//// [tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck64.ts] ////

=== generatorTypeCheck64.ts ===
function* g3(): Generator<Generator<(x: string) => number>> {
>g3 : Symbol(g3, Decl(generatorTypeCheck64.ts, 0, 0))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))
>x : Symbol(x, Decl(generatorTypeCheck64.ts, 0, 37))

    yield function* () {
        yield x => x.length;
>x : Symbol(x, Decl(generatorTypeCheck64.ts, 2, 13))
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(generatorTypeCheck64.ts, 2, 13))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

    } ()
}

function* g4(): Iterator<Iterable<(x: string) => number>> {
>g4 : Symbol(g4, Decl(generatorTypeCheck64.ts, 4, 1))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
>x : Symbol(x, Decl(generatorTypeCheck64.ts, 6, 35))

  yield (function* () {
    yield (x) => x.length;
>x : Symbol(x, Decl(generatorTypeCheck64.ts, 8, 11))
>x.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(generatorTypeCheck64.ts, 8, 11))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))

  })();
}

