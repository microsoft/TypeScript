//// [tests/cases/compiler/genericCallInferenceInConditionalTypes1.ts] ////

=== genericCallInferenceInConditionalTypes1.ts ===
// https://github.com/microsoft/TypeScript/issues/59937

type Ref<T> = {
>Ref : Ref<T>
>    : ^^^^^^

  current: T;
>current : T
>        : ^

};

type FunctionComponent<P> = (props: P) => unknown;
>FunctionComponent : FunctionComponent<P>
>                  : ^^^^^^^^^^^^^^^^^^^^
>props : P
>      : ^

type ComponentProps<T extends FunctionComponent<any>> =
>ComponentProps : ComponentProps<T>
>               : ^^^^^^^^^^^^^^^^^

  T extends FunctionComponent<infer P> ? P : {};

type PropsWithoutRef<P> = P extends any
>PropsWithoutRef : PropsWithoutRef<P>
>                : ^^^^^^^^^^^^^^^^^^

  ? "ref" extends keyof P
    ? Omit<P, "ref">
    : P
  : P;

type ComponentPropsWithoutRef<T extends FunctionComponent<any>> =
>ComponentPropsWithoutRef : ComponentPropsWithoutRef<T>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

  PropsWithoutRef<ComponentProps<T>>;

declare function forwardRef<T, P>(
>forwardRef : <T, P>(component: (props: P, ref: Ref<T>) => unknown) => (props: P & { ref?: Ref<T>; }) => unknown
>           : ^ ^^ ^^         ^^                                  ^^^^^                                         

  component: (props: P, ref: Ref<T>) => unknown,
>component : (props: P, ref: Ref<T>) => unknown
>          : ^     ^^ ^^   ^^      ^^^^^       
>props : P
>      : ^
>ref : Ref<T>
>    : ^^^^^^

): (props: P & { ref?: Ref<T> }) => unknown;
>props : P & { ref?: Ref<T>; }
>      : ^^^^^^^^^^^^      ^^^
>ref : Ref<T> | undefined
>    : ^^^^^^^^^^^^^^^^^^

const ComponentWithForwardRef = forwardRef(
>ComponentWithForwardRef : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                        : ^ ^^^^^^^^^                      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>forwardRef(  <T extends FunctionComponent<any>>(    props: ComponentPropsWithoutRef<T>,    ref: Ref<HTMLElement>,  ) => {    return null;  },) : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                                                                                                                                               : ^ ^^^^^^^^^                      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>forwardRef : <T, P>(component: (props: P, ref: Ref<T>) => unknown) => (props: P & { ref?: Ref<T>; }) => unknown
>           : ^ ^^ ^^         ^^                                  ^^^^^                                         

  <T extends FunctionComponent<any>>(
><T extends FunctionComponent<any>>(    props: ComponentPropsWithoutRef<T>,    ref: Ref<HTMLElement>,  ) => {    return null;  } : <T extends FunctionComponent<any>>(props: ComponentPropsWithoutRef<T>, ref: Ref<HTMLElement>) => null
>                                                                                                                                : ^ ^^^^^^^^^                      ^^     ^^                           ^^   ^^                ^^^^^^^^^

    props: ComponentPropsWithoutRef<T>,
>props : PropsWithoutRef<ComponentProps<T>>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    ref: Ref<HTMLElement>,
>ref : Ref<HTMLElement>
>    : ^^^^^^^^^^^^^^^^

  ) => {
    return null;
  },
);

type Test<T> = T extends { component?: infer Component }
>Test : Test<T>
>     : ^^^^^^^
>component : Component | undefined
>          : ^^^^^^^^^^^^^^^^^^^^^

  ? Component extends FunctionComponent<any>
    ? ComponentProps<Component>
    : never
  : never;

// the first one here has a chance to pollute the cache
type Result1 = ComponentProps<typeof ComponentWithForwardRef>;
>Result1 : Omit<any, "ref"> & { ref?: Ref<HTMLElement> | undefined; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ComponentWithForwardRef : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                        : ^ ^^^^^^^^^                      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       

// that could be incorrectly reused by this one
type Result2 = Test<{ component: typeof ComponentWithForwardRef }>; // no `T` leak
>Result2 : Omit<any, "ref"> & { ref?: Ref<HTMLElement> | undefined; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>component : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>          : ^ ^^^^^^^^^                      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>ComponentWithForwardRef : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                        : ^ ^^^^^^^^^                      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       

// same as ComponentWithForwardRef above but using a resolved signature instead of a direct inferred result of `forwardRef`
declare const ComponentWithForwardRef2: <T extends FunctionComponent<any>>(
>ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                         : ^ ^^^^^^^^^                      ^^     ^^                                                                                                                          ^^^^^       

  props: PropsWithoutRef<ComponentProps<T>> & {
>props : PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^             ^^^^^^^^^^^^^^                            ^^^

    className?: string;
>className : string | undefined
>          : ^^^^^^^^^^^^^^^^^^

    as?: T | undefined;
>as : T | undefined
>   : ^^^^^^^^^^^^^

  } & {
    ref?: Ref<HTMLElement> | undefined;
>ref : Ref<HTMLElement> | undefined
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  },
) => unknown;

type Result3 = ComponentProps<typeof ComponentWithForwardRef2>;
>Result3 : Omit<any, "ref"> & { className?: string; as?: FunctionComponent<any> | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                            ^^^
>ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                         : ^ ^^^^^^^^^                      ^^     ^^                                                                                                                          ^^^^^       

type Result4 = Test<{ component: typeof ComponentWithForwardRef2 }>;
>Result4 : Omit<any, "ref"> & { className?: string; as?: FunctionComponent<any> | undefined; } & { ref?: Ref<HTMLElement> | undefined; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                            ^^^
>component : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>          : ^ ^^^^^^^^^                      ^^     ^^                                                                                                                          ^^^^^       
>ComponentWithForwardRef2 : <T extends FunctionComponent<any>>(props: PropsWithoutRef<ComponentProps<T>> & { className?: string; as?: T | undefined; } & { ref?: Ref<HTMLElement> | undefined; }) => unknown
>                         : ^ ^^^^^^^^^                      ^^     ^^                                                                                                                          ^^^^^       

