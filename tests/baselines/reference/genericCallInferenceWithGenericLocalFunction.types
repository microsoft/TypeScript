//// [tests/cases/compiler/genericCallInferenceWithGenericLocalFunction.ts] ////

=== genericCallInferenceWithGenericLocalFunction.ts ===
// https://github.com/microsoft/TypeScript/issues/43961

const createTransform = <I, O>(tr: (from: I) => O) => tr;
>createTransform : <I, O>(tr: (from: I) => O) => (from: I) => O
>                : ^ ^^ ^^  ^^              ^^^^^^    ^^ ^^^^^ 
><I, O>(tr: (from: I) => O) => tr : <I, O>(tr: (from: I) => O) => (from: I) => O
>                                 : ^ ^^ ^^  ^^              ^^^^^^    ^^ ^^^^^ 
>tr : (from: I) => O
>   : ^    ^^ ^^^^^ 
>from : I
>     : ^
>tr : (from: I) => O
>   : ^    ^^ ^^^^^ 

function withP2<P>(p: P) {
>withP2 : <P>(p: P) => <I>(from: I) => I & P
>       : ^ ^^ ^^ ^^^^^^ ^^    ^^^^^^^^^^^^^
>p : P
>  : ^

  const m = <I,>(from: I) => ({ ...from, ...p });
>m : <I>(from: I) => I & P
>  : ^ ^^    ^^ ^^^^^^^^^^
><I,>(from: I) => ({ ...from, ...p }) : <I>(from: I) => I & P
>                                     : ^ ^^    ^^ ^^^^^^^^^^
>from : I
>     : ^
>({ ...from, ...p }) : I & P
>                    : ^^^^^
>{ ...from, ...p } : I & P
>                  : ^^^^^
>from : I
>     : ^
>p : P
>  : ^

  return createTransform(m);
>createTransform(m) : <I>(from: I) => I & P
>                   : ^ ^^    ^^^^^^^^^^^^^
>createTransform : <I, O>(tr: (from: I) => O) => (from: I) => O
>                : ^ ^^ ^^  ^^              ^^^^^^    ^^ ^^^^^ 
>m : <I>(from: I) => I & P
>  : ^ ^^    ^^ ^^^^^^^^^^
}

const addP2 = withP2({ foo: 1 });
>addP2 : <I>(from: I) => I & { foo: number; }
>      : ^ ^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP2({ foo: 1 }) : <I>(from: I) => I & { foo: number; }
>                   : ^ ^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP2 : <P>(p: P) => <I>(from: I) => I & P
>       : ^ ^^ ^^ ^^^^^^ ^^    ^^^^^^^^^^^^^
>{ foo: 1 } : { foo: number; }
>           : ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>1 : 1
>  : ^

const added2 = addP2({ bar: 2 });
>added2 : { bar: number; } & { foo: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP2({ bar: 2 }) : { bar: number; } & { foo: number; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP2 : <I>(from: I) => I & { foo: number; }
>      : ^ ^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ bar: 2 } : { bar: number; }
>           : ^^^^^^^^^^^^^^^^
>bar : number
>    : ^^^^^^
>2 : 2
>  : ^

function withP3<P>(p: P) {
>withP3 : <P>(p: P) => <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>       : ^ ^^ ^^ ^^^^^^ ^^    ^^^^^^^^^  ^^     ^^  ^^^^^^^^^^^^^^^
>p : P
>  : ^

  const m =
>m : <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>  : ^ ^^    ^^ ^^^^^^  ^^         ^^^^^^^^^^^^^^^

    <I,>(from: I) =>
><I,>(from: I) =>    <I2,>(from2: I2) => ({ ...from, ...from2, ...p }) : <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>                                                                      : ^ ^^    ^^ ^^^^^^  ^^         ^^^^^^^^^^^^^^^
>from : I
>     : ^

    <I2,>(from2: I2) => ({ ...from, ...from2, ...p });
><I2,>(from2: I2) => ({ ...from, ...from2, ...p }) : <I2>(from2: I2) => I & I2 & P
>                                                  : ^  ^^     ^^  ^^^^^^^^^^^^^^^
>from2 : I2
>      : ^^
>({ ...from, ...from2, ...p }) : I & I2 & P
>                              : ^^^^^^^^^^
>{ ...from, ...from2, ...p } : I & I2 & P
>                            : ^^^^^^^^^^
>from : I
>     : ^
>from2 : I2
>      : ^^
>p : P
>  : ^

  return createTransform(m);
>createTransform(m) : <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>                   : ^ ^^    ^^^^^^^^^  ^^     ^^  ^^^^^^^^^^^^^^^
>createTransform : <I, O>(tr: (from: I) => O) => (from: I) => O
>                : ^ ^^ ^^  ^^              ^^^^^^    ^^ ^^^^^ 
>m : <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>  : ^ ^^    ^^ ^^^^^^  ^^         ^^^^^^^^^^^^^^^
}

const addP3 = withP3({ a: 1 });
>addP3 : <I>(from: I) => <I2>(from2: I2) => I & I2 & { a: number; }
>      : ^ ^^    ^^^^^^^^^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP3({ a: 1 }) : <I>(from: I) => <I2>(from2: I2) => I & I2 & { a: number; }
>                 : ^ ^^    ^^^^^^^^^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP3 : <P>(p: P) => <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>       : ^ ^^ ^^ ^^^^^^ ^^    ^^^^^^^^^  ^^     ^^  ^^^^^^^^^^^^^^^
>{ a: 1 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^

const addedSome3 = addP3({ b: '' });
>addedSome3 : <I2>(from2: I2) => { b: string; } & I2 & { a: number; }
>           : ^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP3({ b: '' }) : <I2>(from2: I2) => { b: string; } & I2 & { a: number; }
>                 : ^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP3 : <I>(from: I) => <I2>(from2: I2) => I & I2 & { a: number; }
>      : ^ ^^    ^^^^^^^^^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ b: '' } : { b: string; }
>          : ^^^^^^^^^^^^^^
>b : string
>  : ^^^^^^
>'' : ""
>   : ^^

const added3 = addedSome3({ c: true });
>added3 : { b: string; } & { c: boolean; } & { a: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addedSome3({ c: true }) : { b: string; } & { c: boolean; } & { a: number; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addedSome3 : <I2>(from2: I2) => { b: string; } & I2 & { a: number; }
>           : ^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ c: true } : { c: true; }
>            : ^^^^^^^^^^^^
>c : true
>  : ^^^^
>true : true
>     : ^^^^

const addP3_other = withP3({ foo: 'bar' });
>addP3_other : <I>(from: I) => <I2>(from2: I2) => I & I2 & { foo: string; }
>            : ^ ^^    ^^^^^^^^^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP3({ foo: 'bar' }) : <I>(from: I) => <I2>(from2: I2) => I & I2 & { foo: string; }
>                       : ^ ^^    ^^^^^^^^^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>withP3 : <P>(p: P) => <I>(from: I) => <I2>(from2: I2) => I & I2 & P
>       : ^ ^^ ^^ ^^^^^^ ^^    ^^^^^^^^^  ^^     ^^  ^^^^^^^^^^^^^^^
>{ foo: 'bar' } : { foo: string; }
>               : ^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>'bar' : "bar"
>      : ^^^^^

const addedSome3_other = addP3_other({ qwerty: 123 });
>addedSome3_other : <I2>(from2: I2) => { qwerty: number; } & I2 & { foo: string; }
>                 : ^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP3_other({ qwerty: 123 }) : <I2>(from2: I2) => { qwerty: number; } & I2 & { foo: string; }
>                             : ^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addP3_other : <I>(from: I) => <I2>(from2: I2) => I & I2 & { foo: string; }
>            : ^ ^^    ^^^^^^^^^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ qwerty: 123 } : { qwerty: number; }
>                : ^^^^^^^^^^^^^^^^^^^
>qwerty : number
>       : ^^^^^^
>123 : 123
>    : ^^^

const added3_other = addedSome3_other({ bazinga: true });
>added3_other : { qwerty: number; } & { bazinga: boolean; } & { foo: string; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addedSome3_other({ bazinga: true }) : { qwerty: number; } & { bazinga: boolean; } & { foo: string; }
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>addedSome3_other : <I2>(from2: I2) => { qwerty: number; } & I2 & { foo: string; }
>                 : ^  ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ bazinga: true } : { bazinga: true; }
>                  : ^^^^^^^^^^^^^^^^^^
>bazinga : true
>        : ^^^^
>true : true
>     : ^^^^

