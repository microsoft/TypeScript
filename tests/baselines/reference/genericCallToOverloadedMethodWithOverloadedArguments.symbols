//// [tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts] ////

=== genericCallToOverloadedMethodWithOverloadedArguments.ts ===
namespace m1 {
>m1 : Symbol(m1, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 0, 0))

    interface Promise<T> {
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 0, 14))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 1, 22))

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 1, 26))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 2, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 2, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 2, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 1, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 0, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 2, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 0, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 2, 13))
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 3, 5))
>n : Symbol(n, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 5, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 0, 14))

    var numPromise: Promise<number>;
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 7, 7))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 0, 14))

    var newPromise = numPromise.then(testFunction);
>newPromise : Symbol(newPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 8, 7))
>numPromise.then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 1, 26))
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 7, 7))
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 1, 26))
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 3, 5))
}

//////////////////////////////////////

namespace m2 {
>m2 : Symbol(m2, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 9, 1))

    interface Promise<T> {
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 13, 14))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 14, 22))

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 14, 26))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 15, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 15, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 15, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 14, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 13, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 15, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 13, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 15, 13))
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 16, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 18, 62))
>n : Symbol(n, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 18, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 13, 14))

    declare function testFunction(s: string): Promise<string>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 16, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 18, 62))
>s : Symbol(s, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 19, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 13, 14))

    var numPromise: Promise<number>;
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 21, 7))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 13, 14))

    var newPromise = numPromise.then(testFunction);
>newPromise : Symbol(newPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 22, 7))
>numPromise.then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 14, 26))
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 21, 7))
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 14, 26))
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 16, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 18, 62))
}

//////////////////////////////////////

namespace m3 {
>m3 : Symbol(m3, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 23, 1))

    interface Promise<T> {
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 22))

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 54))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 13))

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 54))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 13))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 41))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 51))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 30, 13))
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 31, 5))
>n : Symbol(n, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 33, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))

    var numPromise: Promise<number>;
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 35, 7))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 27, 14))

    var newPromise = numPromise.then(testFunction);
>newPromise : Symbol(newPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 36, 7))
>numPromise.then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 54))
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 35, 7))
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 28, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 29, 54))
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 31, 5))
}

//////////////////////////////////////

namespace m4 {
>m4 : Symbol(m4, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 37, 1))

    interface Promise<T> {
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 22))

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 54))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 13))

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 54))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 13))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 41))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 51))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 44, 13))
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 45, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 47, 62))
>n : Symbol(n, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 47, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))

    declare function testFunction(s: string): Promise<string>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 45, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 47, 62))
>s : Symbol(s, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 48, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))

    var numPromise: Promise<number>;
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 50, 7))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 41, 14))

    var newPromise = numPromise.then(testFunction);
>newPromise : Symbol(newPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 51, 7))
>numPromise.then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 54))
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 50, 7))
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 42, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 43, 54))
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 45, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 47, 62))
}

//////////////////////////////////////

namespace m5 {
>m5 : Symbol(m5, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 52, 1))

    interface Promise<T> {
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 22))

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 54), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 90))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 13))

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 54), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 90))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 13))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 41))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 51))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 13))

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => U, progress?: (preservation: any) => void): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 54), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 90))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 13))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 41))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 51))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 13))
>progress : Symbol(progress, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 68))
>preservation : Symbol(preservation, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 81))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 60, 13))
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 61, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 63, 62))
>n : Symbol(n, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 63, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))

    declare function testFunction(s: string): Promise<string>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 61, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 63, 62))
>s : Symbol(s, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 64, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))

    var numPromise: Promise<number>;
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 66, 7))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 56, 14))

    var newPromise = numPromise.then(testFunction);
>newPromise : Symbol(newPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 67, 7))
>numPromise.then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 54), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 90))
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 66, 7))
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 57, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 58, 54), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 59, 90))
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 61, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 63, 62))
}

//////////////////////////////////////

namespace m6 {
>m6 : Symbol(m6, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 68, 1))

    interface Promise<T> {
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 22))

        then<U>(cb: (x: T) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 54))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 13))

        then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 54))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 13))
>cb : Symbol(cb, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 16))
>x : Symbol(x, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 21))
>T : Symbol(T, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 22))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 13))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 41))
>error : Symbol(error, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 51))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 13))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))
>U : Symbol(U, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 75, 13))
    }

    declare function testFunction(n: number): Promise<number>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 76, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 78, 62), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 79, 62))
>n : Symbol(n, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 78, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))

    declare function testFunction(s: string): Promise<string>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 76, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 78, 62), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 79, 62))
>s : Symbol(s, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 79, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))

    declare function testFunction(b: boolean): Promise<boolean>;
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 76, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 78, 62), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 79, 62))
>b : Symbol(b, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 80, 34))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))

    var numPromise: Promise<number>;
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 82, 7))
>Promise : Symbol(Promise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 72, 14))

    var newPromise = numPromise.then(testFunction);
>newPromise : Symbol(newPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 83, 7))
>numPromise.then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 54))
>numPromise : Symbol(numPromise, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 82, 7))
>then : Symbol(Promise.then, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 73, 26), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 74, 54))
>testFunction : Symbol(testFunction, Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 76, 5), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 78, 62), Decl(genericCallToOverloadedMethodWithOverloadedArguments.ts, 79, 62))
}

