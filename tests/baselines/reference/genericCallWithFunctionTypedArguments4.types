//// [tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments4.ts] ////

=== genericCallWithFunctionTypedArguments4.ts ===
// No inference is made from function typed arguments which have multiple call signatures

class C { foo: string }
>C : C
>  : ^
>foo : string
>    : ^^^^^^

class D { bar: string }
>D : D
>  : ^
>bar : string
>    : ^^^^^^

var a: {
>a : { new (x: boolean): C; new (x: string): D; }
>  : ^^^^^^^ ^^       ^^^ ^^^^^^^ ^^      ^^^ ^^^

    new(x: boolean): C;
>x : boolean
>  : ^^^^^^^

    new(x: string): D;
>x : string
>  : ^^^^^^
}

function foo4<T, U>(cb: new(x: T) => U) {
>foo4 : <T, U>(cb: new (x: T) => U) => U
>     : ^ ^^ ^^  ^^               ^^^^^^
>cb : new (x: T) => U
>   : ^^^^^ ^^ ^^^^^ 
>x : T
>  : ^

    var u: U;
>u : U
>  : ^

    return u;
>u : U
>  : ^
}

var r = foo4(a); // T is {} (candidates boolean and string), U is {} (candidates C and D)
>r : D
>  : ^
>foo4(a) : D
>        : ^
>foo4 : <T, U>(cb: new (x: T) => U) => U
>     : ^ ^^ ^^  ^^               ^^^^^^
>a : { new (x: boolean): C; new (x: string): D; }
>  : ^^^^^^^ ^^       ^^^ ^^^^^^^ ^^      ^^^ ^^^

var b: {
>b : { new <T>(x: boolean): T; new <T>(x: T): any; }
>  : ^^^^^^^ ^^ ^^       ^^^ ^^^^^^^ ^^ ^^ ^^^   ^^^

    new<T>(x: boolean): T;
>x : boolean
>  : ^^^^^^^

    new<T>(x: T): any;
>x : T
>  : ^
}

var r2 = foo4(b); // T is {} (candidates boolean and {}), U is any (candidates any and {})
>r2 : any
>foo4(b) : any
>foo4 : <T, U>(cb: new (x: T) => U) => U
>     : ^ ^^ ^^  ^^               ^^^^^^
>b : { new <T>(x: boolean): T; new <T>(x: T): any; }
>  : ^^^^^^^ ^^ ^^       ^^^ ^^^^^^^ ^^ ^^ ^^^   ^^^

