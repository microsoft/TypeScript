//// [tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments3.ts] ////

=== genericCallWithGenericSignatureArguments3.ts ===
// When a function expression is inferentially typed (section 4.9.3) and a type assigned to a parameter in that expression references type parameters for which inferences are being made, 
// the corresponding inferred type arguments to become fixed and no further candidate inferences are made for them.

function foo<T>(x: T, a: (x: T) => T, b: (x: T) => T) {
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>x : T
>  : ^
>a : (x: T) => T
>  : ^ ^^ ^^^^^ 
>x : T
>  : ^
>b : (x: T) => T
>  : ^ ^^ ^^^^^ 
>x : T
>  : ^

    var r: (x: T) => T;
>r : (x: T) => T
>  : ^ ^^ ^^^^^ 
>x : T
>  : ^

    return r;
>r : (x: T) => T
>  : ^ ^^ ^^^^^ 
}

var r1 = foo('', (x: string) => '', (x: Object) => null); // any => any
>r1 : (x: any) => any
>   : ^ ^^^^^^^^^^^^^
>foo('', (x: string) => '', (x: Object) => null) : (x: any) => any
>                                                : ^ ^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>'' : ""
>   : ^^
>(x: string) => '' : (x: string) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^
>(x: Object) => null : (x: Object) => any
>                    : ^ ^^      ^^^^^^^^
>x : Object
>  : ^^^^^^

var r1ii = foo('', (x) => '', (x) => null); // string => string
>r1ii : (x: string) => string
>     : ^ ^^^^^^^^^^^^^^^^^^^
>foo('', (x) => '', (x) => null) : (x: string) => string
>                                : ^ ^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>'' : ""
>   : ^^
>(x) => '' : (x: string) => string
>          : ^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^
>(x) => null : (x: string) => any
>            : ^ ^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

var r2 = foo('', (x: string) => '', (x: Object) => ''); // string => string
>r2 : (x: Object) => Object
>   : ^ ^^^^^^^^^^^^^^^^^^^
>foo('', (x: string) => '', (x: Object) => '') : (x: Object) => Object
>                                              : ^ ^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>'' : ""
>   : ^^
>(x: string) => '' : (x: string) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^
>(x: Object) => '' : (x: Object) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : Object
>  : ^^^^^^
>'' : ""
>   : ^^

var r3 = foo(null, (x: Object) => '', (x: string) => ''); // Object => Object
>r3 : (x: Object) => Object
>   : ^ ^^^^^^^^^^^^^^^^^^^
>foo(null, (x: Object) => '', (x: string) => '') : (x: Object) => Object
>                                                : ^ ^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>(x: Object) => '' : (x: Object) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : Object
>  : ^^^^^^
>'' : ""
>   : ^^
>(x: string) => '' : (x: string) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^

var r4 = foo(null, (x) => '', (x) => ''); // any => any
>r4 : (x: any) => any
>   : ^ ^^^^^^^^^^^^^
>foo(null, (x) => '', (x) => '') : (x: any) => any
>                                : ^ ^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>(x) => '' : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>'' : ""
>   : ^^
>(x) => '' : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>'' : ""
>   : ^^

var r5 = foo(new Object(), (x) => '', (x) => ''); // Object => Object
>r5 : (x: Object) => Object
>   : ^ ^^^^^^^^^^^^^^^^^^^
>foo(new Object(), (x) => '', (x) => '') : (x: Object) => Object
>                                        : ^ ^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>new Object() : Object
>             : ^^^^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>(x) => '' : (x: Object) => string
>          : ^ ^^^^^^^^^^^^^^^^^^^
>x : Object
>  : ^^^^^^
>'' : ""
>   : ^^
>(x) => '' : (x: Object) => string
>          : ^ ^^^^^^^^^^^^^^^^^^^
>x : Object
>  : ^^^^^^
>'' : ""
>   : ^^

enum E { A }
>E : E
>  : ^
>A : E.A
>  : ^^^

enum F { A }
>F : F
>  : ^
>A : F.A
>  : ^^^

var r6 = foo(E.A, (x: number) => E.A, (x: F) => F.A); // number => number 
>r6 : (x: number) => number
>   : ^ ^^^^^^^^^^^^^^^^^^^
>foo(E.A, (x: number) => E.A, (x: F) => F.A) : (x: number) => number
>                                            : ^ ^^^^^^^^^^^^^^^^^^^
>foo : <T>(x: T, a: (x: T) => T, b: (x: T) => T) => (x: T) => T
>    : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>E.A : E
>    : ^
>E : typeof E
>  : ^^^^^^^^
>A : E
>  : ^
>(x: number) => E.A : (x: number) => E
>                   : ^ ^^      ^^^^^^
>x : number
>  : ^^^^^^
>E.A : E
>    : ^
>E : typeof E
>  : ^^^^^^^^
>A : E
>  : ^
>(x: F) => F.A : (x: F) => F
>              : ^ ^^ ^^^^^^
>x : F
>  : ^
>F.A : F
>    : ^
>F : typeof F
>  : ^^^^^^^^
>A : F
>  : ^


function foo2<T, U>(x: T, a: (x: T) => U, b: (x: T) => U) {
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>     : ^ ^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>x : T
>  : ^
>a : (x: T) => U
>  : ^ ^^ ^^^^^ 
>x : T
>  : ^
>b : (x: T) => U
>  : ^ ^^ ^^^^^ 
>x : T
>  : ^

    var r: (x: T) => U;
>r : (x: T) => U
>  : ^ ^^ ^^^^^ 
>x : T
>  : ^

    return r;
>r : (x: T) => U
>  : ^ ^^ ^^^^^ 
}

var r8 = foo2('', (x) => '', (x) => null); // string => string
>r8 : (x: string) => any
>   : ^ ^^^^^^^^^^^^^^^^
>foo2('', (x) => '', (x) => null) : (x: string) => any
>                                 : ^ ^^^^^^^^^^^^^^^^
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>     : ^ ^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>'' : ""
>   : ^^
>(x) => '' : (x: string) => string
>          : ^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^
>(x) => null : (x: string) => any
>            : ^ ^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

var r9 = foo2(null, (x) => '', (x) => ''); // any => any
>r9 : (x: any) => string
>   : ^ ^^^^^^^^^^^^^^^^
>foo2(null, (x) => '', (x) => '') : (x: any) => string
>                                 : ^ ^^^^^^^^^^^^^^^^
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>     : ^ ^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>(x) => '' : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>'' : ""
>   : ^^
>(x) => '' : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>'' : ""
>   : ^^

var r10 = foo2(null, (x: Object) => '', (x: string) => ''); // Object => Object
>r10 : (x: Object) => string
>    : ^ ^^^^^^^^^^^^^^^^^^^
>foo2(null, (x: Object) => '', (x: string) => '') : (x: Object) => string
>                                                 : ^ ^^^^^^^^^^^^^^^^^^^
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>     : ^ ^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>(x: Object) => '' : (x: Object) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : Object
>  : ^^^^^^
>'' : ""
>   : ^^
>(x: string) => '' : (x: string) => string
>                  : ^ ^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^

var x: (a: string) => boolean;
>x : (a: string) => boolean
>  : ^ ^^      ^^^^^       
>a : string
>  : ^^^^^^

var r11 = foo2(x, (a1: (y: string) => string) => (n: Object) => 1, (a2: (z: string) => string) => 2); // error
>r11 : (x: (a: string) => boolean) => (n: Object) => 1
>    : ^ ^^^ ^^      ^^^^^       ^^^^^^ ^^      ^^^^^^
>foo2(x, (a1: (y: string) => string) => (n: Object) => 1, (a2: (z: string) => string) => 2) : (x: (a: string) => boolean) => (n: Object) => 1
>                                                                                           : ^ ^^^ ^^      ^^^^^       ^^^^^^ ^^      ^^^^^^
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>     : ^ ^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>x : (a: string) => boolean
>  : ^ ^^      ^^^^^       
>(a1: (y: string) => string) => (n: Object) => 1 : (a1: (y: string) => string) => (n: Object) => 1
>                                                : ^  ^^                     ^^^^^^ ^^      ^^^^^^
>a1 : (y: string) => string
>   : ^ ^^      ^^^^^      
>y : string
>  : ^^^^^^
>(n: Object) => 1 : (n: Object) => 1
>                 : ^ ^^      ^^^^^^
>n : Object
>  : ^^^^^^
>1 : 1
>  : ^
>(a2: (z: string) => string) => 2 : (a2: (z: string) => string) => number
>                                 : ^  ^^                     ^^^^^^^^^^^
>a2 : (z: string) => string
>   : ^ ^^      ^^^^^      
>z : string
>  : ^^^^^^
>2 : 2
>  : ^

var r12 = foo2(x, (a1: (y: string) => boolean) => (n: Object) => 1, (a2: (z: string) => boolean) => 2); // error
>r12 : (x: (z: string) => boolean) => (n: Object) => 1
>    : ^ ^^^ ^^      ^^^^^       ^^^^^^ ^^      ^^^^^^
>foo2(x, (a1: (y: string) => boolean) => (n: Object) => 1, (a2: (z: string) => boolean) => 2) : (x: (z: string) => boolean) => (n: Object) => 1
>                                                                                             : ^ ^^^ ^^      ^^^^^       ^^^^^^ ^^      ^^^^^^
>foo2 : <T, U>(x: T, a: (x: T) => U, b: (x: T) => U) => (x: T) => U
>     : ^ ^^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^^ ^^ ^^^^^ 
>x : (a: string) => boolean
>  : ^ ^^      ^^^^^       
>(a1: (y: string) => boolean) => (n: Object) => 1 : (a1: (y: string) => boolean) => (n: Object) => 1
>                                                 : ^  ^^                      ^^^^^^ ^^      ^^^^^^
>a1 : (y: string) => boolean
>   : ^ ^^      ^^^^^       
>y : string
>  : ^^^^^^
>(n: Object) => 1 : (n: Object) => 1
>                 : ^ ^^      ^^^^^^
>n : Object
>  : ^^^^^^
>1 : 1
>  : ^
>(a2: (z: string) => boolean) => 2 : (a2: (z: string) => boolean) => number
>                                  : ^  ^^                      ^^^^^^^^^^^
>a2 : (z: string) => boolean
>   : ^ ^^      ^^^^^       
>z : string
>  : ^^^^^^
>2 : 2
>  : ^

