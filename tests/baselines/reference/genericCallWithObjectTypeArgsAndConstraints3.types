//// [tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints3.ts] ////

=== genericCallWithObjectTypeArgsAndConstraints3.ts ===
// Generic call with constraints infering type parameter from object member properties

class Base {
>Base : Base
>     : ^^^^

    x: string;
>x : string
>  : ^^^^^^
}
class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    y: string;
>y : string
>  : ^^^^^^
}
class Derived2 extends Base {
>Derived2 : Derived2
>         : ^^^^^^^^
>Base : Base
>     : ^^^^

    z: string;
>z : string
>  : ^^^^^^
}

function f<T extends Base>(a: { x: T; y: T }) {
>f : <T extends Base>(a: { x: T; y: T; }) => T
>  : ^ ^^^^^^^^^    ^^ ^^               ^^^^^^
>a : { x: T; y: T; }
>  : ^^^^^ ^^^^^ ^^^
>x : T
>  : ^
>y : T
>  : ^

    var r: T;
>r : T
>  : ^

    return r;
>r : T
>  : ^
}

var r1 = f({ x: new Derived(), y: new Derived2() }); // error because neither is supertype of the other
>r1 : Derived
>   : ^^^^^^^
>f({ x: new Derived(), y: new Derived2() }) : Derived
>                                           : ^^^^^^^
>f : <T extends Base>(a: { x: T; y: T; }) => T
>  : ^ ^^^^^^^^^    ^^ ^^               ^^^^^^
>{ x: new Derived(), y: new Derived2() } : { x: Derived; y: Derived2; }
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : Derived
>  : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>y : Derived2
>  : ^^^^^^^^
>new Derived2() : Derived2
>               : ^^^^^^^^
>Derived2 : typeof Derived2
>         : ^^^^^^^^^^^^^^^

function f2<T extends Base, U extends { x: T; y: T }>(a: U) {
>f2 : <T extends Base, U extends { x: T; y: T; }>(a: U) => T
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^               ^^ ^^ ^^^^^^
>x : T
>  : ^
>y : T
>  : ^
>a : U
>  : ^

    var r: T;
>r : T
>  : ^

    return r;
>r : T
>  : ^
}

var r2 = f2({ x: new Derived(), y: new Derived2() }); // ok
>r2 : Base
>   : ^^^^
>f2({ x: new Derived(), y: new Derived2() }) : Base
>                                            : ^^^^
>f2 : <T extends Base, U extends { x: T; y: T; }>(a: U) => T
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^               ^^ ^^ ^^^^^^
>{ x: new Derived(), y: new Derived2() } : { x: Derived; y: Derived2; }
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : Derived
>  : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>y : Derived2
>  : ^^^^^^^^
>new Derived2() : Derived2
>               : ^^^^^^^^
>Derived2 : typeof Derived2
>         : ^^^^^^^^^^^^^^^

var r3 = f2({ x: new Derived(), y: new Derived2() }); // ok
>r3 : Base
>   : ^^^^
>f2({ x: new Derived(), y: new Derived2() }) : Base
>                                            : ^^^^
>f2 : <T extends Base, U extends { x: T; y: T; }>(a: U) => T
>   : ^ ^^^^^^^^^    ^^ ^^^^^^^^^               ^^ ^^ ^^^^^^
>{ x: new Derived(), y: new Derived2() } : { x: Derived; y: Derived2; }
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : Derived
>  : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^
>y : Derived2
>  : ^^^^^^^^
>new Derived2() : Derived2
>               : ^^^^^^^^
>Derived2 : typeof Derived2
>         : ^^^^^^^^^^^^^^^


function f3<T extends Base>(y: (a: T) => T, x: T) {
>f3 : <T extends Base>(y: (a: T) => T, x: T) => T
>   : ^ ^^^^^^^^^    ^^ ^^           ^^ ^^ ^^^^^^
>y : (a: T) => T
>  : ^ ^^ ^^^^^ 
>a : T
>  : ^
>x : T
>  : ^

    return y(null);
>y(null) : T
>        : ^
>y : (a: T) => T
>  : ^ ^^ ^^^^^ 
}

// all ok - second argument is processed before x is fixed
var r4 = f3(x => x, new Base());
>r4 : Base
>   : ^^^^
>f3(x => x, new Base()) : Base
>                       : ^^^^
>f3 : <T extends Base>(y: (a: T) => T, x: T) => T
>   : ^ ^^^^^^^^^    ^^ ^^           ^^ ^^ ^^^^^^
>x => x : (x: Base) => Base
>       : ^ ^^^^^^^^^^^^^^^
>x : Base
>  : ^^^^
>x : Base
>  : ^^^^
>new Base() : Base
>           : ^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^

var r5 = f3(x => x, new Derived());
>r5 : Derived
>   : ^^^^^^^
>f3(x => x, new Derived()) : Derived
>                          : ^^^^^^^
>f3 : <T extends Base>(y: (a: T) => T, x: T) => T
>   : ^ ^^^^^^^^^    ^^ ^^           ^^ ^^ ^^^^^^
>x => x : (x: Derived) => Derived
>       : ^ ^^^^^^^^^^^^^^^^^^^^^
>x : Derived
>  : ^^^^^^^
>x : Derived
>  : ^^^^^^^
>new Derived() : Derived
>              : ^^^^^^^
>Derived : typeof Derived
>        : ^^^^^^^^^^^^^^

var r6 = f3(x => x, null);
>r6 : any
>   : ^^^
>f3(x => x, null) : any
>                 : ^^^
>f3 : <T extends Base>(y: (a: T) => T, x: T) => T
>   : ^ ^^^^^^^^^    ^^ ^^           ^^ ^^ ^^^^^^
>x => x : (x: any) => any
>       : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x : any
>  : ^^^

