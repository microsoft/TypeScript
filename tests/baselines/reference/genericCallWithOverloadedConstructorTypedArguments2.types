//// [tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedConstructorTypedArguments2.ts] ////

=== genericCallWithOverloadedConstructorTypedArguments2.ts ===
// Function typed arguments with multiple signatures must be passed an implementation that matches all of them
// Inferences are made quadratic-pairwise to and from these overload sets

module NonGenericParameter {
>NonGenericParameter : typeof NonGenericParameter
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    var a: {
>a : { new (x: boolean): boolean; new (x: string): string; }
>  : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^

        new(x: boolean): boolean;
>x : boolean
>  : ^^^^^^^

        new(x: string): string;
>x : string
>  : ^^^^^^
    }

    function foo4(cb: typeof a) {
>foo4 : (cb: typeof a) => { new (x: boolean): boolean; new (x: string): string; }
>     : ^  ^^        ^^^^^^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^
>cb : { new (x: boolean): boolean; new (x: string): string; }
>   : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^
>a : { new (x: boolean): boolean; new (x: string): string; }
>  : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^

        return cb;
>cb : { new (x: boolean): boolean; new (x: string): string; }
>   : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^
    }

    var b: { new <T, U>(x: T): U }
>b : new <T, U>(x: T) => U
>  : ^^^^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^

    var r3 = foo4(b); // ok
>r3 : { new (x: boolean): boolean; new (x: string): string; }
>   : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^
>foo4(b) : { new (x: boolean): boolean; new (x: string): string; }
>        : ^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^
>foo4 : (cb: typeof a) => { new (x: boolean): boolean; new (x: string): string; }
>     : ^  ^^        ^^^^^^^^^^^^ ^^       ^^^       ^^^^^^^ ^^      ^^^      ^^^
>b : new <T, U>(x: T) => U
>  : ^^^^^ ^^ ^^ ^^ ^^^^^ 
}

module GenericParameter {
>GenericParameter : typeof GenericParameter
>                 : ^^^^^^^^^^^^^^^^^^^^^^^

    function foo5<T>(cb: { new(x: T): string; new(x: number): T }) {
>foo5 : <T>(cb: { new (x: T): string; new (x: number): T; }) => { new (x: T): string; new (x: number): T; }
>     : ^ ^^  ^^                                           ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^      ^^^ ^^^
>cb : { new (x: T): string; new (x: number): T; }
>   : ^^^^^^^ ^^ ^^^      ^^^^^^^ ^^      ^^^ ^^^
>x : T
>  : ^
>x : number
>  : ^^^^^^

        return cb;
>cb : { new (x: T): string; new (x: number): T; }
>   : ^^^^^^^ ^^ ^^^      ^^^^^^^ ^^      ^^^ ^^^
    }

    var a: { new <T>(x: T): T };
>a : new <T>(x: T) => T
>  : ^^^^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^

    var r6 = foo5(a); // ok
>r6 : { new (x: unknown): string; new (x: number): unknown; }
>   : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^      ^^^^^^^^^^^^^
>foo5(a) : { new (x: unknown): string; new (x: number): unknown; }
>        : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^      ^^^^^^^^^^^^^
>foo5 : <T>(cb: { new (x: T): string; new (x: number): T; }) => { new (x: T): string; new (x: number): T; }
>     : ^ ^^  ^^                                           ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^      ^^^ ^^^
>a : new <T>(x: T) => T
>  : ^^^^^ ^^ ^^ ^^^^^ 

    function foo6<T>(cb: { new(x: T): string; new(x: T, y?: T): string }) {
>foo6 : <T>(cb: { new (x: T): string; new (x: T, y?: T): string; }) => { new (x: T): string; new (x: T, y?: T): string; }
>     : ^ ^^  ^^                                                  ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>cb : { new (x: T): string; new (x: T, y?: T): string; }
>   : ^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>x : T
>  : ^
>x : T
>  : ^
>y : T
>  : ^

        return cb;
>cb : { new (x: T): string; new (x: T, y?: T): string; }
>   : ^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
    }

    var b: { new <T>(x: T, y: T): string };
>b : new <T>(x: T, y: T) => string
>  : ^^^^^ ^^ ^^ ^^ ^^ ^^^^^      
>x : T
>  : ^
>y : T
>  : ^

    var r10 = foo6(b); // error
>r10 : { new (x: unknown): string; new (x: unknown, y?: unknown): string; }
>    : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^
>foo6(b) : { new (x: unknown): string; new (x: unknown, y?: unknown): string; }
>        : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^
>foo6 : <T>(cb: { new (x: T): string; new (x: T, y?: T): string; }) => { new (x: T): string; new (x: T, y?: T): string; }
>     : ^ ^^  ^^                                                  ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>b : new <T>(x: T, y: T) => string
>  : ^^^^^ ^^ ^^ ^^ ^^ ^^^^^      

    function foo7<T>(x:T, cb: { new(x: T): string; new(x: T, y?: T): string }) {
>foo7 : <T>(x: T, cb: { new (x: T): string; new (x: T, y?: T): string; }) => { new (x: T): string; new (x: T, y?: T): string; }
>     : ^ ^^ ^^ ^^  ^^                                                  ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>x : T
>  : ^
>cb : { new (x: T): string; new (x: T, y?: T): string; }
>   : ^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>x : T
>  : ^
>x : T
>  : ^
>y : T
>  : ^

        return cb;
>cb : { new (x: T): string; new (x: T, y?: T): string; }
>   : ^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
    }

    var r13 = foo7(1, a); // ok
>r13 : { new (x: unknown): string; new (x: unknown, y?: unknown): string; }
>    : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^
>foo7(1, a) : { new (x: unknown): string; new (x: unknown, y?: unknown): string; }
>           : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^
>foo7 : <T>(x: T, cb: { new (x: T): string; new (x: T, y?: T): string; }) => { new (x: T): string; new (x: T, y?: T): string; }
>     : ^ ^^ ^^ ^^  ^^                                                  ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>1 : 1
>  : ^
>a : new <T>(x: T) => T
>  : ^^^^^ ^^ ^^ ^^^^^ 

    var c: { new<T>(x: T): number; new<T>(x: number): T; }
>c : { new <T>(x: T): number; new <T>(x: number): T; }
>  : ^^^^^^^ ^^ ^^ ^^^      ^^^^^^^ ^^ ^^      ^^^ ^^^
>x : T
>  : ^
>x : number
>  : ^^^^^^

    var r14 = foo7(1, c); // ok
>r14 : { new (x: unknown): string; new (x: unknown, y?: unknown): string; }
>    : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^
>foo7(1, c) : { new (x: unknown): string; new (x: unknown, y?: unknown): string; }
>           : ^^^^^^^ ^^^^^^^^^^^^      ^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^^      ^^^
>foo7 : <T>(x: T, cb: { new (x: T): string; new (x: T, y?: T): string; }) => { new (x: T): string; new (x: T, y?: T): string; }
>     : ^ ^^ ^^ ^^  ^^                                                  ^^^^^^^^^^^^ ^^ ^^^      ^^^^^^^ ^^ ^^ ^^^ ^^^      ^^^
>1 : 1
>  : ^
>c : { new <T>(x: T): number; new <T>(x: number): T; }
>  : ^^^^^^^ ^^ ^^ ^^^      ^^^^^^^ ^^ ^^      ^^^ ^^^
}
