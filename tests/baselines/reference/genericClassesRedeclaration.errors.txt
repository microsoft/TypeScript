genericClassesRedeclaration.ts(1,16): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
genericClassesRedeclaration.ts(3,9): error TS2374: Duplicate index signature for type 'string'.
genericClassesRedeclaration.ts(16,11): error TS2300: Duplicate identifier 'StringHashTable'.
genericClassesRedeclaration.ts(29,11): error TS2300: Duplicate identifier 'IdentifierNameHashTable'.
genericClassesRedeclaration.ts(40,16): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
genericClassesRedeclaration.ts(42,9): error TS2374: Duplicate index signature for type 'string'.
genericClassesRedeclaration.ts(55,11): error TS2300: Duplicate identifier 'StringHashTable'.
genericClassesRedeclaration.ts(68,11): error TS2300: Duplicate identifier 'IdentifierNameHashTable'.


==== genericClassesRedeclaration.ts (8 errors) ====
    declare module TypeScript {
                   ~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        interface IIndexable<T> {
            [s: string]: T;
            ~~~~~~~~~~~~~~~
!!! error TS2374: Duplicate index signature for type 'string'.
        }
        function createIntrinsicsObject<T>(): IIndexable<T>;
        interface IHashTable<T> {
            getAllKeys(): string[];
            add(key: string, data: T): boolean;
            addOrUpdate(key: string, data: T): boolean;
            map(fn: (k: string, value: T, context: any) => void, context: any): void;
            every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            count(): number;
            lookup(key: string): T;
        }
        class StringHashTable<T> implements IHashTable<T> {
              ~~~~~~~~~~~~~~~
!!! error TS2300: Duplicate identifier 'StringHashTable'.
            private itemCount;
            private table;
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public count(): number;
            public lookup(key: string): T;
            public remove(key: string): void;
        }
        class IdentifierNameHashTable<T> extends StringHashTable<T> {
              ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2300: Duplicate identifier 'IdentifierNameHashTable'.
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: any, context: any) => void, context: any): boolean;
            public lookup(key: string): T;
        }
    }
    
    declare module TypeScript {
                   ~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        interface IIndexable<T> {
            [s: string]: T;
            ~~~~~~~~~~~~~~~
!!! error TS2374: Duplicate index signature for type 'string'.
        }
        function createIntrinsicsObject<T>(): IIndexable<T>;
        interface IHashTable<T> {
            getAllKeys(): string[];
            add(key: string, data: T): boolean;
            addOrUpdate(key: string, data: T): boolean;
            map(fn: (k: string, value: T, context: any) => void, context: any): void;
            every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            count(): number;
            lookup(key: string): T;
        }
        class StringHashTable<T> implements IHashTable<T> {
              ~~~~~~~~~~~~~~~
!!! error TS2300: Duplicate identifier 'StringHashTable'.
            private itemCount;
            private table;
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public count(): number;
            public lookup(key: string): T;
            public remove(key: string): void;
        }
        class IdentifierNameHashTable<T> extends StringHashTable<T> {
              ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2300: Duplicate identifier 'IdentifierNameHashTable'.
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: any, context: any) => void, context: any): boolean;
            public lookup(key: string): T;
        }
    }