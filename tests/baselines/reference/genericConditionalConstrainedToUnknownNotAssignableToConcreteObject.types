//// [tests/cases/compiler/genericConditionalConstrainedToUnknownNotAssignableToConcreteObject.ts] ////

=== genericConditionalConstrainedToUnknownNotAssignableToConcreteObject.ts ===
interface A { x: number }
>x : number
>  : ^^^^^^

declare function isA(a: unknown): a is A;
>isA : (a: unknown) => a is A
>    : ^ ^^       ^^^^^      
>a : unknown
>  : ^^^^^^^

type FunctionsObj<T> = {
>FunctionsObj : FunctionsObj<T>
>             : ^^^^^^^^^^^^^^^

    [K in keyof T]: () => unknown
}

function g<
>g : <T extends FunctionsObj<T>, M extends keyof T>(a2: ReturnType<T[M]>, x: A) => void
>  : ^ ^^^^^^^^^               ^^ ^^^^^^^^^       ^^  ^^                ^^ ^^ ^^^^^^^^^

    T extends FunctionsObj<T>,
    M extends keyof T
>(a2: ReturnType<T[M]>, x: A) {
>a2 : ReturnType<T[M]>
>   : ^^^^^^^^^^^^^^^^
>x : A
>  : ^

    x = a2;
>x = a2 : ReturnType<T[M]>
>       : ^^^^^^^^^^^^^^^^
>x : A
>  : ^
>a2 : ReturnType<T[M]>
>   : ^^^^^^^^^^^^^^^^
}

// Original CFA report of the above issue

function g2<
>g2 : <T extends FunctionsObj<T>, M extends keyof T>(a2: ReturnType<T[M]>) => void
>   : ^ ^^^^^^^^^               ^^ ^^^^^^^^^       ^^  ^^                ^^^^^^^^^

    T extends FunctionsObj<T>,
    M extends keyof T
>(a2: ReturnType<T[M]>) {
>a2 : ReturnType<T[M]>
>   : ^^^^^^^^^^^^^^^^

    if (isA(a2)) {
>isA(a2) : boolean
>        : ^^^^^^^
>isA : (a: unknown) => a is A
>    : ^ ^^       ^^^^^      
>a2 : ReturnType<T[M]>
>   : ^^^^^^^^^^^^^^^^

        // a2 is not narrowed
        a2.x // error, but should be ok
>a2.x : number
>     : ^^^^^^
>a2 : ReturnType<T[M]> & A
>   : ^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
    }
}

