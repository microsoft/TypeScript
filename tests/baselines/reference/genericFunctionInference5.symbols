//// [tests/cases/compiler/genericFunctionInference5.ts] ////

=== genericFunctionInference5.ts ===
declare function inner<T>(kind: T): T;
>inner : Symbol(inner, Decl(genericFunctionInference5.ts, 0, 0))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 0, 23))
>kind : Symbol(kind, Decl(genericFunctionInference5.ts, 0, 26))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 0, 23))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 0, 23))

declare function outer<A extends string | number, T>(
>outer : Symbol(outer, Decl(genericFunctionInference5.ts, 0, 38))
>A : Symbol(A, Decl(genericFunctionInference5.ts, 2, 23))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 2, 49))

  callback: (num: number) => (arg: A) => T,
>callback : Symbol(callback, Decl(genericFunctionInference5.ts, 2, 53))
>num : Symbol(num, Decl(genericFunctionInference5.ts, 3, 13))
>arg : Symbol(arg, Decl(genericFunctionInference5.ts, 3, 30))
>A : Symbol(A, Decl(genericFunctionInference5.ts, 2, 23))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 2, 49))

): (arg: A) => T;
>arg : Symbol(arg, Decl(genericFunctionInference5.ts, 4, 4))
>A : Symbol(A, Decl(genericFunctionInference5.ts, 2, 23))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 2, 49))

export const result = outer(
>result : Symbol(result, Decl(genericFunctionInference5.ts, 6, 12))
>outer : Symbol(outer, Decl(genericFunctionInference5.ts, 0, 38))

  (num) =>
>num : Symbol(num, Decl(genericFunctionInference5.ts, 7, 3))

    <T extends number>(arg: T) =>
>T : Symbol(T, Decl(genericFunctionInference5.ts, 8, 5))
>arg : Symbol(arg, Decl(genericFunctionInference5.ts, 8, 23))
>T : Symbol(T, Decl(genericFunctionInference5.ts, 8, 5))

      inner(arg),
>inner : Symbol(inner, Decl(genericFunctionInference5.ts, 0, 0))
>arg : Symbol(arg, Decl(genericFunctionInference5.ts, 8, 23))

);
