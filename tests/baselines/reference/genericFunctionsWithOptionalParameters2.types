//// [tests/cases/compiler/genericFunctionsWithOptionalParameters2.ts] ////

=== genericFunctionsWithOptionalParameters2.ts ===
interface Utils {
   fold<T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S): T;
>fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>     : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 
>c : T[]
>  : ^^^
>folder : (s: S, t: T) => T
>       : ^ ^^ ^^ ^^ ^^^^^ 
>s : S
>  : ^
>t : T
>  : ^
>init : S
>     : ^
}

var utils: Utils;
>utils : Utils
>      : ^^^^^

utils.fold(); // error
>utils.fold() : unknown
>             : ^^^^^^^
>utils.fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>           : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 
>utils : Utils
>      : ^^^^^
>fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>     : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 

utils.fold(null); // no error
>utils.fold(null) : unknown
>                 : ^^^^^^^
>utils.fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>           : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 
>utils : Utils
>      : ^^^^^
>fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>     : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 

utils.fold(null, null); // no error
>utils.fold(null, null) : unknown
>                       : ^^^^^^^
>utils.fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>           : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 
>utils : Utils
>      : ^^^^^
>fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>     : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 

utils.fold(null, null, null); // error: Unable to invoke type with no call signatures
>utils.fold(null, null, null) : unknown
>                             : ^^^^^^^
>utils.fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>           : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 
>utils : Utils
>      : ^^^^^
>fold : <T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
>     : ^ ^^ ^^ ^^        ^^      ^^^                 ^^    ^^^ ^^^^^ 

