//// [tests/cases/compiler/genericMappedTypeOptionalityModifier1.ts] ////

=== genericMappedTypeOptionalityModifier1.ts ===
// https://github.com/microsoft/TypeScript/issues/59902

const example = <T extends string>() => {
>example : <T extends string>() => { [key_1 in keyof { [key in T]?: 1 | undefined; }]-?: 1; }[T]
>        : ^ ^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><T extends string>() => {  type SomeOptional = { [key in T]?: 1 };  type AllRequired = { [key in keyof SomeOptional]-?: 1 };  type RequiredValues = AllRequired[keyof AllRequired];  const x: RequiredValues = undefined; // error  return x;} : <T extends string>() => { [key_1 in keyof { [key in T]?: 1 | undefined; }]-?: 1; }[T]
>                                                                                                                                                                                                                                               : ^ ^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  type SomeOptional = { [key in T]?: 1 };
>SomeOptional : { [key in T]?: 1 | undefined; }
>             : ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^

  type AllRequired = { [key in keyof SomeOptional]-?: 1 };
>AllRequired : { [key_1 in keyof { [key in T]?: 1 | undefined; }]-?: 1; }
>            : ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  type RequiredValues = AllRequired[keyof AllRequired];
>RequiredValues : { [key_1 in keyof { [key in T]?: 1 | undefined; }]-?: 1; }[T]
>               : ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  const x: RequiredValues = undefined; // error
>x : { [key_1 in keyof { [key in T]?: 1 | undefined; }]-?: 1; }[T]
>  : ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

  return x;
>x : { [key_1 in keyof { [key in T]?: 1 | undefined; }]-?: 1; }[T]
>  : ^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

};

