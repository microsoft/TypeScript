//// [tests/cases/compiler/genericObjectSpreadResultInSwitch2.ts] ////

=== genericObjectSpreadResultInSwitch2.ts ===
type Params = {
>Params : Symbol(Params, Decl(genericObjectSpreadResultInSwitch2.ts, 0, 0))

  foo: string;
>foo : Symbol(foo, Decl(genericObjectSpreadResultInSwitch2.ts, 0, 15))

} & ({ tag: "a"; type: number } | { tag: "b"; type: string });
>tag : Symbol(tag, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 6))
>type : Symbol(type, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 16))
>tag : Symbol(tag, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 35))
>type : Symbol(type, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 45))

const getType = <P extends Params>({ foo, ...rest }: P) => {
>getType : Symbol(getType, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 5))
>P : Symbol(P, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 17))
>Params : Symbol(Params, Decl(genericObjectSpreadResultInSwitch2.ts, 0, 0))
>foo : Symbol(foo, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 36))
>rest : Symbol(rest, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 41))
>P : Symbol(P, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 17))

  return rest;
>rest : Symbol(rest, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 41))

};

declare const params: Params;
>params : Symbol(params, Decl(genericObjectSpreadResultInSwitch2.ts, 8, 13))
>Params : Symbol(Params, Decl(genericObjectSpreadResultInSwitch2.ts, 0, 0))

switch (params.tag) {
>params.tag : Symbol(tag, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 6), Decl(genericObjectSpreadResultInSwitch2.ts, 2, 35))
>params : Symbol(params, Decl(genericObjectSpreadResultInSwitch2.ts, 8, 13))
>tag : Symbol(tag, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 6), Decl(genericObjectSpreadResultInSwitch2.ts, 2, 35))

    case 'a': {
        const result = getType(params).type; // number
>result : Symbol(result, Decl(genericObjectSpreadResultInSwitch2.ts, 12, 13))
>getType(params).type : Symbol(type, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 16))
>getType : Symbol(getType, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 5))
>params : Symbol(params, Decl(genericObjectSpreadResultInSwitch2.ts, 8, 13))
>type : Symbol(type, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 16))

        break;
    }
    case 'b': {
        const result = getType(params).type; // string
>result : Symbol(result, Decl(genericObjectSpreadResultInSwitch2.ts, 17, 13))
>getType(params).type : Symbol(type, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 45))
>getType : Symbol(getType, Decl(genericObjectSpreadResultInSwitch2.ts, 4, 5))
>params : Symbol(params, Decl(genericObjectSpreadResultInSwitch2.ts, 8, 13))
>type : Symbol(type, Decl(genericObjectSpreadResultInSwitch2.ts, 2, 45))

        break;
    }
}
