//// [tests/cases/compiler/genericOfACloduleType1.ts] ////

=== genericOfACloduleType1.ts ===
class G<T>{ bar(x: T) { return x; } }
>G : Symbol(G, Decl(genericOfACloduleType1.ts, 0, 0))
>T : Symbol(T, Decl(genericOfACloduleType1.ts, 0, 8))
>bar : Symbol(G.bar, Decl(genericOfACloduleType1.ts, 0, 11))
>x : Symbol(x, Decl(genericOfACloduleType1.ts, 0, 16))
>T : Symbol(T, Decl(genericOfACloduleType1.ts, 0, 8))
>x : Symbol(x, Decl(genericOfACloduleType1.ts, 0, 16))

namespace M {
>M : Symbol(M, Decl(genericOfACloduleType1.ts, 0, 37))

    export class C { foo() { } }
>C : Symbol(C, Decl(genericOfACloduleType1.ts, 1, 13), Decl(genericOfACloduleType1.ts, 2, 32))
>foo : Symbol(C.foo, Decl(genericOfACloduleType1.ts, 2, 20))

    export namespace C {
>C : Symbol(C, Decl(genericOfACloduleType1.ts, 1, 13), Decl(genericOfACloduleType1.ts, 2, 32))

        export class X {
>X : Symbol(X, Decl(genericOfACloduleType1.ts, 3, 24))
        }
    }
 
    var g1 = new G<C>();
>g1 : Symbol(g1, Decl(genericOfACloduleType1.ts, 8, 7))
>G : Symbol(G, Decl(genericOfACloduleType1.ts, 0, 0))
>C : Symbol(C, Decl(genericOfACloduleType1.ts, 1, 13), Decl(genericOfACloduleType1.ts, 2, 32))

    g1.bar(null).foo();
>g1.bar(null).foo : Symbol(C.foo, Decl(genericOfACloduleType1.ts, 2, 20))
>g1.bar : Symbol(G.bar, Decl(genericOfACloduleType1.ts, 0, 11))
>g1 : Symbol(g1, Decl(genericOfACloduleType1.ts, 8, 7))
>bar : Symbol(G.bar, Decl(genericOfACloduleType1.ts, 0, 11))
>foo : Symbol(C.foo, Decl(genericOfACloduleType1.ts, 2, 20))
}
var g2 = new G<M.C>() // was: error Type reference cannot refer to container 'M.C'.
>g2 : Symbol(g2, Decl(genericOfACloduleType1.ts, 11, 3))
>G : Symbol(G, Decl(genericOfACloduleType1.ts, 0, 0))
>M : Symbol(M, Decl(genericOfACloduleType1.ts, 0, 37))
>C : Symbol(M.C, Decl(genericOfACloduleType1.ts, 1, 13), Decl(genericOfACloduleType1.ts, 2, 32))

