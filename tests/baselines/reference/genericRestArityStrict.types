//// [tests/cases/conformance/types/rest/genericRestArityStrict.ts] ////

=== genericRestArityStrict.ts ===
// Repro from #25559

declare function call<TS extends unknown[]>(
>call : <TS extends unknown[]>(handler: (...args: TS) => void, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                     ^^^^^    ^^  ^^^^^    

    handler: (...args: TS) => void,
>handler : (...args: TS) => void
>        : ^^^^    ^^  ^^^^^    
>args : TS
>     : ^^

    ...args: TS): void;
>args : TS
>     : ^^
  
call((x: number, y: number) => x + y);
>call((x: number, y: number) => x + y) : void
>                                      : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => void, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                     ^^^^^    ^^  ^^^^^    
>(x: number, y: number) => x + y : (x: number, y: number) => number
>                                : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

call((x: number, y: number) => x + y, 1, 2, 3, 4, 5, 6, 7);
>call((x: number, y: number) => x + y, 1, 2, 3, 4, 5, 6, 7) : void
>                                                           : ^^^^
>call : <TS extends unknown[]>(handler: (...args: TS) => void, ...args: TS) => void
>     : ^  ^^^^^^^^^         ^^       ^^                     ^^^^^    ^^  ^^^^^    
>(x: number, y: number) => x + y : (x: number, y: number) => number
>                                : ^ ^^      ^^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>x + y : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>7 : 7
>  : ^

