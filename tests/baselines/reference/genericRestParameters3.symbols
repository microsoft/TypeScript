//// [tests/cases/conformance/types/rest/genericRestParameters3.ts] ////

=== genericRestParameters3.ts ===
declare let f1: (x: string, ...args: [string] | [number, boolean]) => void;
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>x : Symbol(x, Decl(genericRestParameters3.ts, 0, 17))
>args : Symbol(args, Decl(genericRestParameters3.ts, 0, 27))

declare let f2: (x: string, y: string) => void;
>f2 : Symbol(f2, Decl(genericRestParameters3.ts, 1, 11))
>x : Symbol(x, Decl(genericRestParameters3.ts, 1, 17))
>y : Symbol(y, Decl(genericRestParameters3.ts, 1, 27))

declare let f3: (x: string, y: number, z: boolean) => void;
>f3 : Symbol(f3, Decl(genericRestParameters3.ts, 2, 11))
>x : Symbol(x, Decl(genericRestParameters3.ts, 2, 17))
>y : Symbol(y, Decl(genericRestParameters3.ts, 2, 27))
>z : Symbol(z, Decl(genericRestParameters3.ts, 2, 38))

declare let f4: (...args: [string, string] | [string, number, boolean]) => void;
>f4 : Symbol(f4, Decl(genericRestParameters3.ts, 3, 11))
>args : Symbol(args, Decl(genericRestParameters3.ts, 3, 17))

declare const t1: [string] | [number, boolean];
>t1 : Symbol(t1, Decl(genericRestParameters3.ts, 5, 13))

declare const t2: readonly [string] | [number, boolean];
>t2 : Symbol(t2, Decl(genericRestParameters3.ts, 6, 13))

declare const t3: [string] | readonly [number, boolean];
>t3 : Symbol(t3, Decl(genericRestParameters3.ts, 7, 13))

declare const t4: readonly [string] | readonly [number, boolean];
>t4 : Symbol(t4, Decl(genericRestParameters3.ts, 8, 13))

f1("foo", "abc");
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f1("foo", 10, true);
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f1("foo", ...t1);
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>t1 : Symbol(t1, Decl(genericRestParameters3.ts, 5, 13))

f1("foo", ...t2);
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>t2 : Symbol(t2, Decl(genericRestParameters3.ts, 6, 13))

f1("foo", ...t3);
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>t3 : Symbol(t3, Decl(genericRestParameters3.ts, 7, 13))

f1("foo", ...t4);
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>t4 : Symbol(t4, Decl(genericRestParameters3.ts, 8, 13))

f1("foo", 10);  // Error
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f1("foo");  // Error
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f2 = f1;
>f2 : Symbol(f2, Decl(genericRestParameters3.ts, 1, 11))
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f3 = f1;
>f3 : Symbol(f3, Decl(genericRestParameters3.ts, 2, 11))
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f4 = f1;
>f4 : Symbol(f4, Decl(genericRestParameters3.ts, 3, 11))
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))

f1 = f2;  // Error
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>f2 : Symbol(f2, Decl(genericRestParameters3.ts, 1, 11))

f1 = f3;  // Error
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>f3 : Symbol(f3, Decl(genericRestParameters3.ts, 2, 11))

f1 = f4;
>f1 : Symbol(f1, Decl(genericRestParameters3.ts, 0, 11))
>f4 : Symbol(f4, Decl(genericRestParameters3.ts, 3, 11))

// Repro from #26110

interface CoolArray<E> extends Array<E> { 
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))
>E : Symbol(E, Decl(genericRestParameters3.ts, 28, 20))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>E : Symbol(E, Decl(genericRestParameters3.ts, 28, 20))

    hello: number;
>hello : Symbol(CoolArray.hello, Decl(genericRestParameters3.ts, 28, 41))
}

declare function foo<T extends any[]>(cb: (...args: T) => void): void;
>foo : Symbol(foo, Decl(genericRestParameters3.ts, 30, 1))
>T : Symbol(T, Decl(genericRestParameters3.ts, 32, 21))
>cb : Symbol(cb, Decl(genericRestParameters3.ts, 32, 38))
>args : Symbol(args, Decl(genericRestParameters3.ts, 32, 43))
>T : Symbol(T, Decl(genericRestParameters3.ts, 32, 21))

foo<CoolArray<any>>();     // Error
>foo : Symbol(foo, Decl(genericRestParameters3.ts, 30, 1))
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))

foo<CoolArray<any>>(100);  // Error
>foo : Symbol(foo, Decl(genericRestParameters3.ts, 30, 1))
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))

foo<CoolArray<any>>(foo);  // Error
>foo : Symbol(foo, Decl(genericRestParameters3.ts, 30, 1))
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))
>foo : Symbol(foo, Decl(genericRestParameters3.ts, 30, 1))

function bar<T extends any[]>(...args: T): T {
>bar : Symbol(bar, Decl(genericRestParameters3.ts, 36, 25))
>T : Symbol(T, Decl(genericRestParameters3.ts, 38, 13))
>args : Symbol(args, Decl(genericRestParameters3.ts, 38, 30))
>T : Symbol(T, Decl(genericRestParameters3.ts, 38, 13))
>T : Symbol(T, Decl(genericRestParameters3.ts, 38, 13))

    return args;
>args : Symbol(args, Decl(genericRestParameters3.ts, 38, 30))
}

let a = bar(10, 20);
>a : Symbol(a, Decl(genericRestParameters3.ts, 42, 3))
>bar : Symbol(bar, Decl(genericRestParameters3.ts, 36, 25))

let b = bar<CoolArray<number>>(10, 20);  // Error
>b : Symbol(b, Decl(genericRestParameters3.ts, 43, 3))
>bar : Symbol(bar, Decl(genericRestParameters3.ts, 36, 25))
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))

declare function baz<T>(...args: CoolArray<T>): void;
>baz : Symbol(baz, Decl(genericRestParameters3.ts, 43, 39))
>T : Symbol(T, Decl(genericRestParameters3.ts, 45, 21))
>args : Symbol(args, Decl(genericRestParameters3.ts, 45, 24))
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))
>T : Symbol(T, Decl(genericRestParameters3.ts, 45, 21))

declare const ca: CoolArray<number>;
>ca : Symbol(ca, Decl(genericRestParameters3.ts, 46, 13))
>CoolArray : Symbol(CoolArray, Decl(genericRestParameters3.ts, 24, 8))

baz();       // Error
>baz : Symbol(baz, Decl(genericRestParameters3.ts, 43, 39))

baz(1);      // Error
>baz : Symbol(baz, Decl(genericRestParameters3.ts, 43, 39))

baz(1, 2);   // Error
>baz : Symbol(baz, Decl(genericRestParameters3.ts, 43, 39))

baz(...ca);  // Error
>baz : Symbol(baz, Decl(genericRestParameters3.ts, 43, 39))
>ca : Symbol(ca, Decl(genericRestParameters3.ts, 46, 13))

// Repro from #26491

declare function hmm<A extends [] | [number, string]>(...args: A): void;
>hmm : Symbol(hmm, Decl(genericRestParameters3.ts, 51, 11))
>A : Symbol(A, Decl(genericRestParameters3.ts, 55, 21))
>args : Symbol(args, Decl(genericRestParameters3.ts, 55, 54))
>A : Symbol(A, Decl(genericRestParameters3.ts, 55, 21))

hmm(); // okay, A = []
>hmm : Symbol(hmm, Decl(genericRestParameters3.ts, 51, 11))

hmm(1, "s"); // okay, A = [1, "s"]
>hmm : Symbol(hmm, Decl(genericRestParameters3.ts, 51, 11))

hmm("what"); // no error?  A = [] | [number, string] ?
>hmm : Symbol(hmm, Decl(genericRestParameters3.ts, 51, 11))

// Repro from #35066

declare function foo2(...args: string[] | number[]): void;
>foo2 : Symbol(foo2, Decl(genericRestParameters3.ts, 58, 12))
>args : Symbol(args, Decl(genericRestParameters3.ts, 62, 22))

let x2: ReadonlyArray<string> = ["hello"];
>x2 : Symbol(x2, Decl(genericRestParameters3.ts, 63, 3))
>ReadonlyArray : Symbol(ReadonlyArray, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

foo2(...x2);
>foo2 : Symbol(foo2, Decl(genericRestParameters3.ts, 58, 12))
>x2 : Symbol(x2, Decl(genericRestParameters3.ts, 63, 3))

// Repros from #47754

type RestParams = [y: string] | [y: number];
>RestParams : Symbol(RestParams, Decl(genericRestParameters3.ts, 64, 12))

type Signature = (x: string, ...rest: RestParams) => void;
>Signature : Symbol(Signature, Decl(genericRestParameters3.ts, 68, 44))
>x : Symbol(x, Decl(genericRestParameters3.ts, 70, 18))
>rest : Symbol(rest, Decl(genericRestParameters3.ts, 70, 28))
>RestParams : Symbol(RestParams, Decl(genericRestParameters3.ts, 64, 12))

type MergedParams = Parameters<Signature>;  // [x: string, y: string] | [x: string, y: number]
>MergedParams : Symbol(MergedParams, Decl(genericRestParameters3.ts, 70, 58))
>Parameters : Symbol(Parameters, Decl(lib.es5.d.ts, --, --))
>Signature : Symbol(Signature, Decl(genericRestParameters3.ts, 68, 44))

declare let ff1: (...rest: [string, string] | [string, number]) => void;
>ff1 : Symbol(ff1, Decl(genericRestParameters3.ts, 74, 11))
>rest : Symbol(rest, Decl(genericRestParameters3.ts, 74, 18))

declare let ff2: (x: string, ...rest: [string] | [number]) => void;
>ff2 : Symbol(ff2, Decl(genericRestParameters3.ts, 75, 11))
>x : Symbol(x, Decl(genericRestParameters3.ts, 75, 18))
>rest : Symbol(rest, Decl(genericRestParameters3.ts, 75, 28))

ff1 = ff2;
>ff1 : Symbol(ff1, Decl(genericRestParameters3.ts, 74, 11))
>ff2 : Symbol(ff2, Decl(genericRestParameters3.ts, 75, 11))

ff2 = ff1;
>ff2 : Symbol(ff2, Decl(genericRestParameters3.ts, 75, 11))
>ff1 : Symbol(ff1, Decl(genericRestParameters3.ts, 74, 11))

function ff3<A extends unknown[]>(s1: (...args: [x: string, ...rest: A | [number]]) => void, s2: (x: string, ...rest: A | [number]) => void) {
>ff3 : Symbol(ff3, Decl(genericRestParameters3.ts, 78, 10))
>A : Symbol(A, Decl(genericRestParameters3.ts, 80, 13))
>s1 : Symbol(s1, Decl(genericRestParameters3.ts, 80, 34))
>args : Symbol(args, Decl(genericRestParameters3.ts, 80, 39))
>A : Symbol(A, Decl(genericRestParameters3.ts, 80, 13))
>s2 : Symbol(s2, Decl(genericRestParameters3.ts, 80, 92))
>x : Symbol(x, Decl(genericRestParameters3.ts, 80, 98))
>rest : Symbol(rest, Decl(genericRestParameters3.ts, 80, 108))
>A : Symbol(A, Decl(genericRestParameters3.ts, 80, 13))

    s1 = s2;
>s1 : Symbol(s1, Decl(genericRestParameters3.ts, 80, 34))
>s2 : Symbol(s2, Decl(genericRestParameters3.ts, 80, 92))

    s2 = s1;
>s2 : Symbol(s2, Decl(genericRestParameters3.ts, 80, 92))
>s1 : Symbol(s1, Decl(genericRestParameters3.ts, 80, 34))
}

