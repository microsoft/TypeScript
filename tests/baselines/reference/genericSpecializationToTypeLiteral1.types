//// [tests/cases/compiler/genericSpecializationToTypeLiteral1.ts] ////

=== genericSpecializationToTypeLiteral1.ts ===
interface IEnumerable<T> {

    zip<TResult>(second: IEnumerable<T>, resultSelector: (first: T, second: T, index: number) => TResult): IEnumerable<TResult>;
>zip : { <TResult>(second: IEnumerable<T>, resultSelector: (first: T, second: T, index: number) => TResult): IEnumerable<TResult>; <TResult_1>(second: T[], resultSelector: (first: T, second: T, index: number) => TResult_1): IEnumerable<TResult_1>; <TResult_1>(...params: any[]): IEnumerable<TResult_1>; }
>    : ^^^       ^^      ^^              ^^              ^^                                               ^^^                    ^^^^^^^^^^^^^^      ^^   ^^              ^^                                                 ^^^                      ^^^^^^^^^^^^^^^^^      ^^     ^^^                      ^^^
>second : IEnumerable<T>
>       : ^^^^^^^^^^^^^^
>resultSelector : (first: T, second: T, index: number) => TResult
>               : ^     ^^ ^^      ^^ ^^     ^^      ^^^^^       
>first : T
>      : ^
>second : T
>       : ^
>index : number
>      : ^^^^^^

    zip<TResult>(second: T[], resultSelector: (first: T, second: T, index: number) => TResult): IEnumerable<TResult>;
>zip : { <TResult_1>(second: IEnumerable<T>, resultSelector: (first: T, second: T, index: number) => TResult_1): IEnumerable<TResult_1>; <TResult>(second: T[], resultSelector: (first: T, second: T, index: number) => TResult): IEnumerable<TResult>; <TResult_1>(...params: any[]): IEnumerable<TResult_1>; }
>    : ^^^^^^^^^^^^^^      ^^              ^^              ^^                                                 ^^^                      ^^^       ^^      ^^   ^^              ^^                                               ^^^                    ^^^^^^^^^^^^^^^^^      ^^     ^^^                      ^^^
>second : T[]
>       : ^^^
>resultSelector : (first: T, second: T, index: number) => TResult
>               : ^     ^^ ^^      ^^ ^^     ^^      ^^^^^       
>first : T
>      : ^
>second : T
>       : ^
>index : number
>      : ^^^^^^

    zip<TResult>(...params: any[]): IEnumerable<TResult>; // last one is selector
>zip : { <TResult_1>(second: IEnumerable<T>, resultSelector: (first: T, second: T, index: number) => TResult_1): IEnumerable<TResult_1>; <TResult_1>(second: T[], resultSelector: (first: T, second: T, index: number) => TResult_1): IEnumerable<TResult_1>; <TResult>(...params: any[]): IEnumerable<TResult>; }
>    : ^^^^^^^^^^^^^^      ^^              ^^              ^^                                                 ^^^                      ^^^^^^^^^^^^^^      ^^   ^^              ^^                                                 ^^^                      ^^^       ^^^^^      ^^     ^^^                    ^^^
>params : any[]
>       : ^^^^^

    merge<TResult>(...params: IEnumerable<T>[]): IEnumerable<T>;
>merge : { <TResult>(...params: IEnumerable<T>[]): IEnumerable<T>; <TResult_1>(...params: T[][]): IEnumerable<T>; }
>      : ^^^       ^^^^^      ^^                ^^^              ^^^^^^^^^^^^^^^^^      ^^     ^^^              ^^^
>params : IEnumerable<T>[]
>       : ^^^^^^^^^^^^^^^^

    merge<TResult>(...params: T[][]): IEnumerable<T>;
>merge : { <TResult_1>(...params: IEnumerable<T>[]): IEnumerable<T>; <TResult>(...params: T[][]): IEnumerable<T>; }
>      : ^^^^^^^^^^^^^^^^^      ^^                ^^^              ^^^       ^^^^^      ^^     ^^^              ^^^
>params : T[][]
>       : ^^^^^


    concat(...sequences: IEnumerable<T>[]): IEnumerable<T>;
>concat : { (...sequences: IEnumerable<T>[]): IEnumerable<T>; (...sequences: T[]): IEnumerable<T>; }
>       : ^^^^^^         ^^                ^^^              ^^^^^^         ^^   ^^^              ^^^
>sequences : IEnumerable<T>[]
>          : ^^^^^^^^^^^^^^^^

    concat(...sequences: T[]): IEnumerable<T>;
>concat : { (...sequences: IEnumerable<T>[]): IEnumerable<T>; (...sequences: T[]): IEnumerable<T>; }
>       : ^^^^^^         ^^                ^^^              ^^^^^^         ^^   ^^^              ^^^
>sequences : T[]
>          : ^^^

    insert(index: number, second: IEnumerable<T>): IEnumerable<T>;
>insert : (index: number, second: IEnumerable<T>) => IEnumerable<T>
>       : ^     ^^      ^^      ^^              ^^^^^              
>index : number
>      : ^^^^^^
>second : IEnumerable<T>
>       : ^^^^^^^^^^^^^^

    sequenceEqual(second: IEnumerable<T>): boolean;
>sequenceEqual : { (second: IEnumerable<T>): boolean; <TCompare>(second: IEnumerable<T>, compareSelector: (element: T) => TCompare): boolean; (second: T[]): boolean; <TCompare>(second: T[], compareSelector: (element: T) => TCompare): boolean; }
>              : ^^^      ^^              ^^^       ^^^        ^^      ^^              ^^               ^^                        ^^^       ^^^      ^^   ^^^       ^^^        ^^      ^^   ^^               ^^                        ^^^       ^^^
>second : IEnumerable<T>
>       : ^^^^^^^^^^^^^^

    sequenceEqual<TCompare>(second: IEnumerable<T>, compareSelector: (element: T) => TCompare): boolean;
>sequenceEqual : { (second: IEnumerable<T>): boolean; <TCompare>(second: IEnumerable<T>, compareSelector: (element: T) => TCompare): boolean; (second: T[]): boolean; <TCompare_1>(second: T[], compareSelector: (element: T) => TCompare_1): boolean; }
>              : ^^^      ^^              ^^^       ^^^        ^^      ^^              ^^               ^^                        ^^^       ^^^      ^^   ^^^       ^^^^^^^^^^^^^^^      ^^   ^^               ^^                          ^^^       ^^^
>second : IEnumerable<T>
>       : ^^^^^^^^^^^^^^
>compareSelector : (element: T) => TCompare
>                : ^       ^^ ^^^^^        
>element : T
>        : ^

    sequenceEqual(second: T[]): boolean;
>sequenceEqual : { (second: IEnumerable<T>): boolean; <TCompare>(second: IEnumerable<T>, compareSelector: (element: T) => TCompare): boolean; (second: T[]): boolean; <TCompare>(second: T[], compareSelector: (element: T) => TCompare): boolean; }
>              : ^^^      ^^              ^^^       ^^^        ^^      ^^              ^^               ^^                        ^^^       ^^^      ^^   ^^^       ^^^        ^^      ^^   ^^               ^^                        ^^^       ^^^
>second : T[]
>       : ^^^

    sequenceEqual<TCompare>(second: T[], compareSelector: (element: T) => TCompare): boolean;   
>sequenceEqual : { (second: IEnumerable<T>): boolean; <TCompare_1>(second: IEnumerable<T>, compareSelector: (element: T) => TCompare_1): boolean; (second: T[]): boolean; <TCompare>(second: T[], compareSelector: (element: T) => TCompare): boolean; }
>              : ^^^      ^^              ^^^       ^^^^^^^^^^^^^^^      ^^              ^^               ^^                          ^^^       ^^^      ^^   ^^^       ^^^        ^^      ^^   ^^               ^^                        ^^^       ^^^
>second : T[]
>       : ^^^
>compareSelector : (element: T) => TCompare
>                : ^       ^^ ^^^^^        
>element : T
>        : ^
    
    toDictionary<TKey>(keySelector: (element: T) => TKey): IDictionary<TKey, any>;
>toDictionary : { <TKey>(keySelector: (element: T) => TKey): IDictionary<TKey, any>; <TKey_1, TValue>(keySelector: (element: T) => TKey_1, elementSelector: (element: T) => TValue): IDictionary<TKey_1, TValue>; <TKey_1, TValue, TCompare>(keySelector: (element: T) => TKey_1, elementSelector: (element: T) => TValue, compareSelector: (key: TKey_1) => TCompare): IDictionary<TKey_1, TValue>; }
>             : ^^^    ^^           ^^                    ^^^                      ^^^^^^^^^^^      ^^           ^^                      ^^               ^^                      ^^^                           ^^^^^^^^^^^      ^^        ^^           ^^                      ^^               ^^                      ^^               ^^                         ^^^                           ^^^
>keySelector : (element: T) => TKey
>            : ^       ^^ ^^^^^    
>element : T
>        : ^

    toDictionary<TKey, TValue>(keySelector: (element: T) => TKey, elementSelector: (element: T) => TValue): IDictionary<TKey, TValue>;
>toDictionary : { <TKey_1>(keySelector: (element: T) => TKey_1): IDictionary<TKey_1, any>; <TKey, TValue>(keySelector: (element: T) => TKey, elementSelector: (element: T) => TValue): IDictionary<TKey, TValue>; <TKey_1, TValue_1, TCompare>(keySelector: (element: T) => TKey_1, elementSelector: (element: T) => TValue_1, compareSelector: (key: TKey_1) => TCompare): IDictionary<TKey_1, TValue_1>; }
>             : ^^^^^^^^^^^           ^^                      ^^^                        ^^^    ^^      ^^           ^^                    ^^               ^^                      ^^^                         ^^^^^^^^^^^^^^^^^^^^^        ^^           ^^                      ^^               ^^                        ^^               ^^                         ^^^                             ^^^
>keySelector : (element: T) => TKey
>            : ^       ^^ ^^^^^    
>element : T
>        : ^
>elementSelector : (element: T) => TValue
>                : ^       ^^ ^^^^^      
>element : T
>        : ^

    toDictionary<TKey, TValue, TCompare>(keySelector: (element: T) => TKey, elementSelector: (element: T) => TValue, compareSelector: (key: TKey) => TCompare): IDictionary<TKey, TValue>;
>toDictionary : { <TKey_1>(keySelector: (element: T) => TKey_1): IDictionary<TKey_1, any>; <TKey_1, TValue_1>(keySelector: (element: T) => TKey_1, elementSelector: (element: T) => TValue_1): IDictionary<TKey_1, TValue_1>; <TKey, TValue, TCompare>(keySelector: (element: T) => TKey, elementSelector: (element: T) => TValue, compareSelector: (key: TKey) => TCompare): IDictionary<TKey, TValue>; }
>             : ^^^^^^^^^^^           ^^                      ^^^                        ^^^^^^^^^^^^^^^^^^^^^           ^^                      ^^               ^^                        ^^^                             ^^^    ^^      ^^        ^^           ^^                    ^^               ^^                      ^^               ^^                       ^^^                         ^^^
>keySelector : (element: T) => TKey
>            : ^       ^^ ^^^^^    
>element : T
>        : ^
>elementSelector : (element: T) => TValue
>                : ^       ^^ ^^^^^      
>element : T
>        : ^
>compareSelector : (key: TKey) => TCompare
>                : ^   ^^    ^^^^^        
>key : TKey
>    : ^^^^
}

interface IDictionary<TKey, TValue> {
    toEnumerable(): IEnumerable<{ key: TKey; value: TValue }>;
>toEnumerable : () => IEnumerable<{ key: TKey; value: TValue; }>
>             : ^^^^^^                                          
>key : TKey
>    : ^^^^
>value : TValue
>      : ^^^^^^
}
