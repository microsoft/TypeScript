//// [tests/cases/compiler/genericTemplateOverloadResolution.ts] ////

=== genericTemplateOverloadResolution.ts ===
interface IFooFn {
>IFooFn : Symbol(IFooFn, Decl(genericTemplateOverloadResolution.ts, 0, 0))

    (strings: TemplateStringsArray): Promise<{}>;
>strings : Symbol(strings, Decl(genericTemplateOverloadResolution.ts, 1, 5))
>TemplateStringsArray : Symbol(TemplateStringsArray, Decl(lib.es5.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    <T>(strings: TemplateStringsArray): Promise<T>;
>T : Symbol(T, Decl(genericTemplateOverloadResolution.ts, 2, 5))
>strings : Symbol(strings, Decl(genericTemplateOverloadResolution.ts, 2, 8))
>TemplateStringsArray : Symbol(TemplateStringsArray, Decl(lib.es5.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>T : Symbol(T, Decl(genericTemplateOverloadResolution.ts, 2, 5))
}

declare const fooFn: IFooFn;
>fooFn : Symbol(fooFn, Decl(genericTemplateOverloadResolution.ts, 5, 13))
>IFooFn : Symbol(IFooFn, Decl(genericTemplateOverloadResolution.ts, 0, 0))

declare function expect(x: Promise<number>): void;
>expect : Symbol(expect, Decl(genericTemplateOverloadResolution.ts, 5, 28))
>x : Symbol(x, Decl(genericTemplateOverloadResolution.ts, 7, 24))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

expect(fooFn<number>``);
>expect : Symbol(expect, Decl(genericTemplateOverloadResolution.ts, 5, 28))
>fooFn : Symbol(fooFn, Decl(genericTemplateOverloadResolution.ts, 5, 13))

