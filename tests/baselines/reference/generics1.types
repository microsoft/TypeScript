//// [tests/cases/compiler/generics1.ts] ////

=== generics1.ts ===
interface A { a: string; }
>a : string
>  : ^^^^^^

interface B extends A { b: string; }
>b : string
>  : ^^^^^^

interface C extends B { c: string; }
>c : string
>  : ^^^^^^

interface G<T, U extends B> {
    x: T;
>x : T
>  : ^

    y: U;
>y : U
>  : ^
}
var v1: G<A, C>;               // Ok
>v1 : G<A, C>
>   : ^^^^^^^

var v2: G<{ a: string }, C>;   // Ok, equivalent to G<A, C>
>v2 : G<{ a: string; }, C>
>   : ^^^^^^^      ^^^^^^^
>a : string
>  : ^^^^^^

var v3: G<A, A>;               // Error, A not valid argument for U
>v3 : G<A, A>
>   : ^^^^^^^

var v4: G<G<A, B>, C>;         // Ok
>v4 : G<G<A, B>, C>
>   : ^^^^^^^^^^^^^

var v5: G<any, any>;           // Error, any does not satisfy constraint B
>v5 : G<any, any>
>   : ^^^^^^^^^^^

var v6: G<any>;                // Error, wrong number of arguments
>v6 : any
>   : ^^^

var v7: G;                     // Error, no type arguments
>v7 : any
>   : ^^^

