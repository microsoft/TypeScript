//// [tests/cases/compiler/genericsAndHigherOrderFunctions.ts] ////

=== genericsAndHigherOrderFunctions.ts ===
// no errors expected

var combine: <T, S>(f: (_: T) => S) =>
>combine : <T, S>(f: (_: T) => S) => <U>(g: (_: U) => T) => (x: U) => S
>        : ^ ^^ ^^ ^^           ^^^^^                                  
>f : (_: T) => S
>  : ^ ^^ ^^^^^ 
>_ : T
>  : ^

    <U>(g: (_: U) => T) =>
>g : (_: U) => T
>  : ^ ^^ ^^^^^ 
>_ : U
>  : ^

    (x: U) => S
>x : U
>  : ^

    = <T, S>(f: (_: T) => S) =>
><T, S>(f: (_: T) => S) =>        <U>(g: (_: U) => T) =>            (x: U) => f(g(x)) : <T, S>(f: (_: T) => S) => <U>(g: (_: U) => T) => (x: U) => S
>                                                                                     : ^ ^^ ^^ ^^           ^^^^^^ ^^ ^^           ^^^^^^ ^^ ^^^^^^
>f : (_: T) => S
>  : ^ ^^ ^^^^^ 
>_ : T
>  : ^

        <U>(g: (_: U) => T) =>
><U>(g: (_: U) => T) =>            (x: U) => f(g(x)) : <U>(g: (_: U) => T) => (x: U) => S
>                                                    : ^ ^^ ^^           ^^^^^^ ^^ ^^^^^^
>g : (_: U) => T
>  : ^ ^^ ^^^^^ 
>_ : U
>  : ^

            (x: U) => f(g(x))
>(x: U) => f(g(x)) : (x: U) => S
>                  : ^ ^^ ^^^^^^
>x : U
>  : ^
>f(g(x)) : S
>        : ^
>f : (_: T) => S
>  : ^ ^^ ^^^^^ 
>g(x) : T
>     : ^
>g : (_: U) => T
>  : ^ ^^ ^^^^^ 
>x : U
>  : ^

var foo: <K, N>(g: (x: K) => N) =>
>foo : <K, N>(g: (x: K) => N) => (h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) => <R>(f: (_: N) => (_: R) => R) => (_: R) => R
>    : ^ ^^ ^^ ^^           ^^^^^                                                                                                 
>g : (x: K) => N
>  : ^ ^^ ^^^^^ 
>x : K
>  : ^

    (h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) =>
>h : <M>(_: (_: K) => (_: M) => M) => (_: M) => M
>  : ^ ^^ ^^                     ^^^^^           
>_ : (_: K) => (_: M) => M
>  : ^ ^^ ^^^^^           
>_ : K
>  : ^
>_ : M
>  : ^
>_ : M
>  : ^

    <R>(f: (_: N) => (_: R) => R) => (_: R) => R
>f : (_: N) => (_: R) => R
>  : ^ ^^ ^^^^^           
>_ : N
>  : ^
>_ : R
>  : ^
>_ : R
>  : ^

    = <K, N>(g: (x: K) => N) =>
><K, N>(g: (x: K) => N) =>        (h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) =>            <R>(f: (_: N) => (_: R) => R) => h(combine(f)(g)) : <K, N>(g: (x: K) => N) => (h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) => <R>(f: (_: N) => (_: R) => R) => (_: R) => R
>                                                                                                                                                   : ^ ^^ ^^ ^^           ^^^^^^ ^^                                            ^^^^^^ ^^ ^^                     ^^^^^^ ^^^^^^^^^
>g : (x: K) => N
>  : ^ ^^ ^^^^^ 
>x : K
>  : ^

        (h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) =>
>(h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) =>            <R>(f: (_: N) => (_: R) => R) => h(combine(f)(g)) : (h: <M>(_: (_: K) => (_: M) => M) => (_: M) => M) => <R>(f: (_: N) => (_: R) => R) => (_: R) => R
>                                                                                                                  : ^ ^^                                            ^^^^^^ ^^ ^^                     ^^^^^^ ^^^^^^^^^
>h : <M>(_: (_: K) => (_: M) => M) => (_: M) => M
>  : ^ ^^ ^^                     ^^^^^           
>_ : (_: K) => (_: M) => M
>  : ^ ^^ ^^^^^           
>_ : K
>  : ^
>_ : M
>  : ^
>_ : M
>  : ^

            <R>(f: (_: N) => (_: R) => R) => h(combine(f)(g))
><R>(f: (_: N) => (_: R) => R) => h(combine(f)(g)) : <R>(f: (_: N) => (_: R) => R) => (_: R) => R
>                                                  : ^ ^^ ^^                     ^^^^^^ ^^^^^^^^^
>f : (_: N) => (_: R) => R
>  : ^ ^^ ^^^^^           
>_ : N
>  : ^
>_ : R
>  : ^
>h(combine(f)(g)) : (_: R) => R
>                 : ^ ^^^^^^^^^
>h : <M>(_: (_: K) => (_: M) => M) => (_: M) => M
>  : ^ ^^ ^^                     ^^^^^           
>combine(f)(g) : (x: K) => (_: R) => R
>              : ^ ^^^^^^^^^ ^^ ^^^^^ 
>combine(f) : <U>(g: (_: U) => N) => (x: U) => (_: R) => R
>           : ^ ^^ ^^^ ^^^^^^^^^^^^^^^ ^^^^^^^^^ ^^ ^^^^^ 
>combine : <T, S>(f: (_: T) => S) => <U>(g: (_: U) => T) => (x: U) => S
>        : ^ ^^ ^^ ^^           ^^^^^                                  
>f : (_: N) => (_: R) => R
>  : ^ ^^ ^^^^^           
>g : (x: K) => N
>  : ^ ^^ ^^^^^ 

