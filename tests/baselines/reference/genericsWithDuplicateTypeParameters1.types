//// [tests/cases/compiler/genericsWithDuplicateTypeParameters1.ts] ////

=== genericsWithDuplicateTypeParameters1.ts ===
function f<x, x>() { }
>f : <x>() => void
>  : ^ ^^^^^^^^^^^

function f2<X, X>(a: X, b: X): X { return null; }
>f2 : <X>(a: X, b: X) => X
>   : ^ ^^ ^^ ^^ ^^ ^^^^^ 
>a : X
>  : ^
>b : X
>  : ^

class C<X, X> {
>C : C<X>
>  : ^^^^

    public f<x, x>() {}
>f : <x>() => void
>  : ^ ^^^^^^^^^^^

    public f2<X, X>(a: X, b: X): X { return null; }
>f2 : <X>(a: X, b: X) => X
>   : ^ ^^ ^^ ^^ ^^ ^^^^^ 
>a : X
>  : ^
>b : X
>  : ^
}

interface I<X, X> {
    f<X, X>();
>f : <X>() => any
>  : ^ ^^^^^^^^^^

    f2<X, X>(a: X, b: X): X;
>f2 : <X>(a: X, b: X) => X
>   : ^ ^^ ^^ ^^ ^^ ^^^^^ 
>a : X
>  : ^
>b : X
>  : ^
}

var m = {
>m : { a: <X>() => void; b: <X>(a: X, b: X) => X; }
>  : ^^^^^^ ^^^^^^^^^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ ^^^
>{    a: function f<X, X>() {},    b: function f2<X, X>(a: X, b: X): X { return null; }} : { a: <X>() => void; b: <X>(a: X, b: X) => X; }
>                                                                                        : ^^^^^^ ^^^^^^^^^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ ^^^

    a: function f<X, X>() {},
>a : <X>() => void
>  : ^ ^^^^^^^^^^^
>function f<X, X>() {} : <X>() => void
>                      : ^ ^^^^^^^^^^^
>f : <X>() => void
>  : ^ ^^^^^^^^^^^

    b: function f2<X, X>(a: X, b: X): X { return null; }
>b : <X>(a: X, b: X) => X
>  : ^ ^^ ^^ ^^ ^^ ^^^^^ 
>function f2<X, X>(a: X, b: X): X { return null; } : <X>(a: X, b: X) => X
>                                                  : ^ ^^ ^^ ^^ ^^ ^^^^^ 
>f2 : <X>(a: X, b: X) => X
>   : ^ ^^ ^^ ^^ ^^ ^^^^^ 
>a : X
>  : ^
>b : X
>  : ^
}
