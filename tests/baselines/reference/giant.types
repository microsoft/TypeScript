//// [tests/cases/compiler/giant.ts] ////

=== giant.ts ===
/*
    Prefixes
    p -> public
    r -> private
    i -> import
    e -> export
    a -> ambient
    t -> static
    s -> set
    g -> get

    MAX DEPTH 3 LEVELS
*/
const p = "propName";
>p : "propName"
>  : ^^^^^^^^^^
>"propName" : "propName"
>           : ^^^^^^^^^^

var V;
>V : any
>  : ^^^

function F() { };
>F : () => void
>  : ^^^^^^^^^^

class C {
>C : C
>  : ^

    constructor () { }
    public pV;
>pV : any
>   : ^^^

    private rV;
>rV : any
>   : ^^^

    public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

    private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

    public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

    public get pgF()
>pgF : any
>    : ^^^

    public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

    private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

    private get rgF()
>rgF : any
>    : ^^^

    private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

    static tV;
>tV : any
>   : ^^^

    static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

    static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

    static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

    static get tgF()
>tgF : any
>    : ^^^
}
interface I {
    //Call Signature
    ();
    (): number;
    (p);
>p : any
>  : ^^^

    (p1: string);
>p1 : string
>   : ^^^^^^

    (p2?: string);
>p2 : string
>   : ^^^^^^

    (...p3: any[]);
>p3 : any[]
>   : ^^^^^

    (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

    (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

    //(p8?: string, ...p9: any[]);
    //(p10:string, p8?: string, ...p9: any[]);
    
    //Construct Signature
    new ();
    new (): number;
    new (p: string);
>p : string
>  : ^^^^^^

    new (p2?: string);
>p2 : string
>   : ^^^^^^

    new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

    new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

    new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

    //Index Signature
    [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

    [p1: string];
>p1 : string
>   : ^^^^^^

    [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

    //Property Signature
    p;
>p : any
>  : ^^^

    p1?;
>p1 : any
>   : ^^^

    p2?: string;
>p2 : string
>   : ^^^^^^
    
    //Function Signature
    p3();
>p3 : () => any
>   : ^^^^^^^^^

    p4? ();
>p4 : () => any
>   : ^^^^^^^^^

    p5? (): void;
>p5 : () => void
>   : ^^^^^^    

    p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

    p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

    p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
}
module M {
>M : typeof M
>  : ^^^^^^^^

    var V;
>V : any
>  : ^^^

    function F() { };
>F : () => void
>  : ^^^^^^^^^^

    class C {
>C : C
>  : ^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

        public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

        public get pgF()
>pgF : any
>    : ^^^

        public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

        private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

        private get rgF()
>rgF : any
>    : ^^^

        private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

        static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

        static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

        static get tgF()
>tgF : any
>    : ^^^
    }
    interface I {
        //Call Signature
        ();
        (): number;
        (p);
>p : any
>  : ^^^

        (p1: string);
>p1 : string
>   : ^^^^^^

        (p2?: string);
>p2 : string
>   : ^^^^^^

        (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>  : ^^^^^^

        new (p2?: string);
>p2 : string
>   : ^^^^^^

        new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //Index Signature
        [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

        [p1: string];
>p1 : string
>   : ^^^^^^

        [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

        //Property Signature
        p;
>p : any
>  : ^^^

        p1?;
>p1 : any
>   : ^^^

        p2?: string;
>p2 : string
>   : ^^^^^^
    
        //Function Signature
        p3();
>p3 : () => any
>   : ^^^^^^^^^

        p4? ();
>p4 : () => any
>   : ^^^^^^^^^

        p5? (): void;
>p5 : () => void
>   : ^^^^^^    

        p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
    }
    module M {
>M : typeof M
>  : ^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { };
>C : C
>  : ^

        interface I { };
        module M { };
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { };
>eC : eC
>   : ^^

        export interface eI { };
        export module eM { };
        export declare var eaV;
>eaV : any
>    : ^^^

        export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

        export declare class eaC { };
>eaC : eaC
>    : ^^^

        export declare module eaM { };
    }
    export var eV;
>eV : any
>   : ^^^

    export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

    export class eC {
>eC : eC
>   : ^^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

        public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

        public get pgF()
>pgF : any
>    : ^^^

        public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

        private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

        private get rgF()
>rgF : any
>    : ^^^

        private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

        static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

        static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

        static get tgF()
>tgF : any
>    : ^^^
    }
    export interface eI {
        //Call Signature
        ();
        (): number;
        (p);
>p : any
>  : ^^^

        (p1: string);
>p1 : string
>   : ^^^^^^

        (p2?: string);
>p2 : string
>   : ^^^^^^

        (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>  : ^^^^^^

        new (p2?: string);
>p2 : string
>   : ^^^^^^

        new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //Index Signature
        [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

        [p1: string];
>p1 : string
>   : ^^^^^^

        [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

        //Property Signature
        p;
>p : any
>  : ^^^

        p1?;
>p1 : any
>   : ^^^

        p2?: string;
>p2 : string
>   : ^^^^^^
    
        //Function Signature
        p3();
>p3 : () => any
>   : ^^^^^^^^^

        p4? ();
>p4 : () => any
>   : ^^^^^^^^^

        p5? (): void;
>p5 : () => void
>   : ^^^^^^    

        p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
    }
    export module eM {
>eM : typeof eM
>   : ^^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { };
>C : C
>  : ^

        interface I { };
        module M { };
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { };
>eC : eC
>   : ^^

        export interface eI { };
        export module eM { };
        export declare var eaV;
>eaV : any
>    : ^^^

        export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

        export declare class eaC { };
>eaC : eaC
>    : ^^^

        export declare module eaM { };
    }
    export declare var eaV;
>eaV : any
>    : ^^^

    export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

    export declare class eaC {
>eaC : eaC
>    : ^^^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

        public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

        public get pgF()
>pgF : any
>    : ^^^

        public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

        private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

        private get rgF()
>rgF : any
>    : ^^^

        private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

        static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

        static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

        static get tgF()
>tgF : any
>    : ^^^
    }
    export declare module eaM {
>eaM : typeof eaM
>    : ^^^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { }
>C : C
>  : ^

        interface I { }
        module M { }
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { }
>eC : eC
>   : ^^

        export interface eI { }
        export module eM { }
    }
}
export var eV;
>eV : any
>   : ^^^

export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

export class eC {
>eC : eC
>   : ^^

    constructor () { }
    public pV;
>pV : any
>   : ^^^

    private rV;
>rV : any
>   : ^^^

    public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

    private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

    public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

    public get pgF()
>pgF : any
>    : ^^^

    public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

    private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

    private get rgF()
>rgF : any
>    : ^^^

    private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

    static tV;
>tV : any
>   : ^^^

    static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

    static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

    static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

    static get tgF()
>tgF : any
>    : ^^^
}
export interface eI {
    //Call Signature
    ();
    (): number;
    (p);
>p : any
>  : ^^^

    (p1: string);
>p1 : string
>   : ^^^^^^

    (p2?: string);
>p2 : string
>   : ^^^^^^

    (...p3: any[]);
>p3 : any[]
>   : ^^^^^

    (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

    (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

    //(p8?: string, ...p9: any[]);
    //(p10:string, p8?: string, ...p9: any[]);
    
    //Construct Signature
    new ();
    new (): number;
    new (p: string);
>p : string
>  : ^^^^^^

    new (p2?: string);
>p2 : string
>   : ^^^^^^

    new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

    new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

    new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

    //Index Signature
    [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

    [p1: string];
>p1 : string
>   : ^^^^^^

    [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

    //Property Signature
    p;
>p : any
>  : ^^^

    p1?;
>p1 : any
>   : ^^^

    p2?: string;
>p2 : string
>   : ^^^^^^
    
    //Function Signature
    p3();
>p3 : () => any
>   : ^^^^^^^^^

    p4? ();
>p4 : () => any
>   : ^^^^^^^^^

    p5? (): void;
>p5 : () => void
>   : ^^^^^^    

    p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

    p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

    p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
}
export module eM {
>eM : typeof import("giant").eM
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^

    var V;
>V : any
>  : ^^^

    function F() { };
>F : () => void
>  : ^^^^^^^^^^

    class C {
>C : C
>  : ^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

        public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

        public get pgF()
>pgF : any
>    : ^^^

        public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

        private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

        private get rgF()
>rgF : any
>    : ^^^

        private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

        static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

        static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

        static get tgF()
>tgF : any
>    : ^^^
    }
    interface I {
        //Call Signature
        ();
        (): number;
        (p);
>p : any
>  : ^^^

        (p1: string);
>p1 : string
>   : ^^^^^^

        (p2?: string);
>p2 : string
>   : ^^^^^^

        (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>  : ^^^^^^

        new (p2?: string);
>p2 : string
>   : ^^^^^^

        new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //Index Signature
        [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

        [p1: string];
>p1 : string
>   : ^^^^^^

        [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

        //Property Signature
        p;
>p : any
>  : ^^^

        p1?;
>p1 : any
>   : ^^^

        p2?: string;
>p2 : string
>   : ^^^^^^
    
        //Function Signature
        p3();
>p3 : () => any
>   : ^^^^^^^^^

        p4? ();
>p4 : () => any
>   : ^^^^^^^^^

        p5? (): void;
>p5 : () => void
>   : ^^^^^^    

        p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
    }
    module M {
>M : typeof M
>  : ^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { };
>C : C
>  : ^

        interface I { };
        module M { };
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { };
>eC : eC
>   : ^^

        export interface eI { };
        export module eM { };
        export declare var eaV;
>eaV : any
>    : ^^^

        export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

        export declare class eaC { };
>eaC : eaC
>    : ^^^

        export declare module eaM { };
    }
    export var eV;
>eV : any
>   : ^^^

    export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

    export class eC {
>eC : eC
>   : ^^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

        public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

        public get pgF()
>pgF : any
>    : ^^^

        public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

        private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

        private get rgF()
>rgF : any
>    : ^^^

        private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

        static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

        static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

        static get tgF()
>tgF : any
>    : ^^^
    }
    export interface eI {
        //Call Signature
        ();
        (): number;
        (p);
>p : any
>  : ^^^

        (p1: string);
>p1 : string
>   : ^^^^^^

        (p2?: string);
>p2 : string
>   : ^^^^^^

        (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>  : ^^^^^^

        new (p2?: string);
>p2 : string
>   : ^^^^^^

        new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //Index Signature
        [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

        [p1: string];
>p1 : string
>   : ^^^^^^

        [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

        //Property Signature
        p;
>p : any
>  : ^^^

        p1?;
>p1 : any
>   : ^^^

        p2?: string;
>p2 : string
>   : ^^^^^^
    
        //Function Signature
        p3();
>p3 : () => any
>   : ^^^^^^^^^

        p4? ();
>p4 : () => any
>   : ^^^^^^^^^

        p5? (): void;
>p5 : () => void
>   : ^^^^^^    

        p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
    }
    export module eM {
>eM : typeof eM
>   : ^^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { };
>C : C
>  : ^

        interface I { };
        module M { };
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { };
>eC : eC
>   : ^^

        export interface eI { };
        export module eM { };
        export declare var eaV;
>eaV : any
>    : ^^^

        export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

        export declare class eaC { };
>eaC : eaC
>    : ^^^

        export declare module eaM { };
    }
    export declare var eaV;
>eaV : any
>    : ^^^

    export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

    export declare class eaC {
>eaC : eaC
>    : ^^^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

        public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

        public get pgF()
>pgF : any
>    : ^^^

        public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

        private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

        private get rgF()
>rgF : any
>    : ^^^

        private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

        static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

        static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

        static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

        static get tgF()
>tgF : any
>    : ^^^
    }
    export declare module eaM {
>eaM : typeof eaM
>    : ^^^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { }
>C : C
>  : ^

        interface I { }
        module M { }
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { }
>eC : eC
>   : ^^

        export interface eI { }
        export module eM { }
    }
}
export declare var eaV;
>eaV : any
>    : ^^^

export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

export declare class eaC {
>eaC : eaC
>    : ^^^

    constructor () { }
    public pV;
>pV : any
>   : ^^^

    private rV;
>rV : any
>   : ^^^

    public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

    private rF() { }
>rF : () => void
>   : ^^^^^^^^^^

    public pgF() { }
>pgF : () => void
>    : ^^^^^^^^^^

    public get pgF()
>pgF : any
>    : ^^^

    public psF(param:any) { }
>psF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    public set psF(param:any)
>psF : any
>    : ^^^
>param : any
>      : ^^^

    private rgF() { }
>rgF : () => void
>    : ^^^^^^^^^^

    private get rgF()
>rgF : any
>    : ^^^

    private rsF(param:any) { }
>rsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    private set rsF(param:any)
>rsF : any
>    : ^^^
>param : any
>      : ^^^

    static tV;
>tV : any
>   : ^^^

    static tF() { }
>tF : () => void
>   : ^^^^^^^^^^

    static tsF(param:any) { }
>tsF : (param: any) => void
>    : ^     ^^   ^^^^^^^^^
>param : any
>      : ^^^

    static set tsF(param:any)
>tsF : any
>    : ^^^
>param : any
>      : ^^^

    static tgF() { }
>tgF : () => void
>    : ^^^^^^^^^^

    static get tgF()
>tgF : any
>    : ^^^
}
export declare module eaM {
>eaM : typeof eaM
>    : ^^^^^^^^^^

    var V;
>V : any
>  : ^^^

    function F() { };
>F : () => void
>  : ^^^^^^^^^^

    class C {
>C : C
>  : ^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        static tV;
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^
    }
    interface I {
        //Call Signature
        ();
        (): number;
        (p: string);
>p : string
>  : ^^^^^^

        (p2?: string);
>p2 : string
>   : ^^^^^^

        (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>  : ^^^^^^

        new (p2?: string);
>p2 : string
>   : ^^^^^^

        new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //Index Signature
        [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

        [p1: string];
>p1 : string
>   : ^^^^^^

        [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

        //Property Signature
        p;
>p : any
>  : ^^^

        p1?;
>p1 : any
>   : ^^^

        p2?: string;
>p2 : string
>   : ^^^^^^
    
        //Function Signature
        p3();
>p3 : () => any
>   : ^^^^^^^^^

        p4? ();
>p4 : () => any
>   : ^^^^^^^^^

        p5? (): void;
>p5 : () => void
>   : ^^^^^^    

        p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
    }
    module M {
>M : typeof M
>  : ^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { }
>C : C
>  : ^

        interface I { }
        module M { }
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { }
>eC : eC
>   : ^^

        export interface eI { }
        export module eM { }
        export declare var eaV
>eaV : any
>    : ^^^

        export declare function eaF() { };
>eaF : () => void
>    : ^^^^^^^^^^

        export declare class eaC { }
>eaC : eaC
>    : ^^^

        export declare module eaM { }
    }
    export var eV;
>eV : any
>   : ^^^

    export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

    export class eC {
>eC : eC
>   : ^^

        constructor () { }
        public pV;
>pV : any
>   : ^^^

        private rV;
>rV : any
>   : ^^^

        public pF() { }
>pF : () => void
>   : ^^^^^^^^^^

        static tV
>tV : any
>   : ^^^

        static tF() { }
>tF : () => void
>   : ^^^^^^^^^^
    }
    export interface eI {
        //Call Signature
        ();
        (): number;
        (p);
>p : any
>  : ^^^

        (p1: string);
>p1 : string
>   : ^^^^^^

        (p2?: string);
>p2 : string
>   : ^^^^^^

        (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
    
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
>p : string
>  : ^^^^^^

        new (p2?: string);
>p2 : string
>   : ^^^^^^

        new (...p3: any[]);
>p3 : any[]
>   : ^^^^^

        new (p4: string, p5?: string);
>p4 : string
>   : ^^^^^^
>p5 : string
>   : ^^^^^^

        new (p6: string, ...p7: any[]);
>p6 : string
>   : ^^^^^^
>p7 : any[]
>   : ^^^^^

        //Index Signature
        [p];
>[p] : any
>    : ^^^
>p : "propName"
>  : ^^^^^^^^^^

        [p1: string];
>p1 : string
>   : ^^^^^^

        [p2: string, p3: number];
>p2 : string
>   : ^^^^^^
>p3 : number
>   : ^^^^^^

        //Property Signature
        p;
>p : any
>  : ^^^

        p1?;
>p1 : any
>   : ^^^

        p2?: string;
>p2 : string
>   : ^^^^^^
    
        //Function Signature
        p3();
>p3 : () => any
>   : ^^^^^^^^^

        p4? ();
>p4 : () => any
>   : ^^^^^^^^^

        p5? (): void;
>p5 : () => void
>   : ^^^^^^    

        p6(pa1): void;
>p6 : (pa1: any) => void
>   : ^   ^^^^^^^^^^    
>pa1 : any
>    : ^^^

        p7(pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^

        p7? (pa1, pa2): void;
>p7 : { (pa1: any, pa2: any): void; (pa1: any, pa2: any): void; }
>   : ^^^   ^^^^^^^   ^^^^^^^^    ^^^   ^^^^^^^   ^^^^^^^^    ^^^
>pa1 : any
>    : ^^^
>pa2 : any
>    : ^^^
    }
    export module eM {
>eM : typeof eM
>   : ^^^^^^^^^

        var V;
>V : any
>  : ^^^

        function F() { };
>F : () => void
>  : ^^^^^^^^^^

        class C { }
>C : C
>  : ^

        module M { }
        export var eV;
>eV : any
>   : ^^^

        export function eF() { };
>eF : () => void
>   : ^^^^^^^^^^

        export class eC { }
>eC : eC
>   : ^^

        export interface eI { }
        export module eM { }
    }
}
