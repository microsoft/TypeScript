// === goToDefinition ===
// === /tests/cases/fourslash/definitions.ts ===
// export class Base {
//     [|{| defId: 1 |}constructor(protected readonly cArg: string) {}|]
// }
// 
// <|export class [|{| defId: 0 |}Derived|] extends Base {
//     readonly email = this.cArg.getByLabel('Email')
//     readonly password =  this.cArg.getByLabel('Password')
// }|>

// === /tests/cases/fourslash/main.ts ===
// import { Derived } from './definitions'
// const derived = new /*GOTO DEF*/[|Derived|](cArg)

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "class",
    "name": "Derived",
    "containerName": "\"/tests/cases/fourslash/definitions\"",
    "isLocal": false,
    "isAmbient": false,
    "unverified": false
   },
   {
    "defId": 1,
    "kind": "constructor",
    "name": "__constructor",
    "containerName": "Base",
    "isLocal": false,
    "isAmbient": false,
    "unverified": false
   }
  ]



// === goToDefinition ===
// === /tests/cases/fourslash/defInSameFile.ts ===
// import { Base } from './definitions'
// <|class [|{| defId: 0 |}SameFile|] extends Base {
//     readonly name: string = 'SameFile'
// }|>
// const SameFile = new /*GOTO DEF*/SameFile(cArg)
// const wrapper = new Base(cArg)

// === /tests/cases/fourslash/definitions.ts ===
// export class Base {
//     [|{| defId: 1 |}constructor(protected readonly cArg: string) {}|]
// }
// 
// export class Derived extends Base {
// --- (line: 6) skipped ---

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "class",
    "name": "SameFile",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   },
   {
    "defId": 1,
    "kind": "constructor",
    "name": "__constructor",
    "containerName": "Base",
    "isLocal": false,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   }
  ]



// === goToDefinition ===
// === /tests/cases/fourslash/hasConstructor.ts ===
// import { Base } from './definitions'
// <|class [|{| defId: 0 |}HasConstructor|] extends Base {
//     [|{| defId: 1 |}constructor() {}|]
//     readonly name: string = '';
// }|>
// const hasConstructor = new /*GOTO DEF*/HasConstructor(cArg)

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "class",
    "name": "HasConstructor",
    "containerName": "",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   },
   {
    "defId": 1,
    "kind": "constructor",
    "name": "__constructor",
    "containerName": "HasConstructor",
    "isLocal": true,
    "isAmbient": false,
    "unverified": false,
    "failedAliasResolution": false
   }
  ]



// === goToDefinition ===
// === /tests/cases/fourslash/definitions.ts ===
// <|export class [|{| defId: 0 |}Base|] {
//     [|{| defId: 1 |}constructor(protected readonly cArg: string) {}|]
// }|>
// 
// export class Derived extends Base {
//     readonly email = this.cArg.getByLabel('Email')
//     readonly password =  this.cArg.getByLabel('Password')
// }

// === /tests/cases/fourslash/defInSameFile.ts ===
// import { Base } from './definitions'
// class SameFile extends Base {
//     readonly name: string = 'SameFile'
// }
// const SameFile = new SameFile(cArg)
// const wrapper = new /*GOTO DEF*/[|Base|](cArg)

  // === Details ===
  [
   {
    "defId": 0,
    "kind": "class",
    "name": "Base",
    "containerName": "\"/tests/cases/fourslash/definitions\"",
    "isLocal": false,
    "isAmbient": false,
    "unverified": false
   },
   {
    "defId": 1,
    "kind": "constructor",
    "name": "__constructor",
    "containerName": "Base",
    "isLocal": false,
    "isAmbient": false,
    "unverified": false
   }
  ]