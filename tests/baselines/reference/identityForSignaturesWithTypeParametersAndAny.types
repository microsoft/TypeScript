//// [tests/cases/compiler/identityForSignaturesWithTypeParametersAndAny.ts] ////

=== identityForSignaturesWithTypeParametersAndAny.ts ===
var f: <T, U>(x: T, y: U) => T;
>f : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : U
>  : ^

var f: <T, U>(x: any, y: any) => any;
>f : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : any
>  : ^^^
>y : any
>  : ^^^

var g: <T, U>(x: T, y: U) => T;
>g : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : U
>  : ^

var g: <T>(x: any, y: any) => any;
>g : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : any
>  : ^^^
>y : any
>  : ^^^

var h: <T, U>(x: T, y: U) => T;
>h : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : U
>  : ^

var h: (x: any, y: any) => any;
>h : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : any
>  : ^^^
>y : any
>  : ^^^

var i: <T, U>(x: T, y: U) => T;
>i : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : U
>  : ^

var i: <T, U>(x: any, y: string) => any;
>i : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : any
>  : ^^^
>y : string
>  : ^^^^^^

var j: <T, U>(x: T, y: U) => T;
>j : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : U
>  : ^

var j: <T, U>(x: any, y: any) => string;
>j : <T, U>(x: T, y: U) => T
>  : ^ ^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : any
>  : ^^^
>y : any
>  : ^^^

