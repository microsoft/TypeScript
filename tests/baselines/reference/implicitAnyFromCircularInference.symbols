//// [tests/cases/compiler/implicitAnyFromCircularInference.ts] ////

=== implicitAnyFromCircularInference.ts ===
// Error expected
var a: typeof a;
>a : Symbol(a, Decl(implicitAnyFromCircularInference.ts, 1, 3))
>a : Symbol(a, Decl(implicitAnyFromCircularInference.ts, 1, 3))

// Error expected on b or c
var b: typeof c;
>b : Symbol(b, Decl(implicitAnyFromCircularInference.ts, 4, 3))
>c : Symbol(c, Decl(implicitAnyFromCircularInference.ts, 5, 3))

var c: typeof b;
>c : Symbol(c, Decl(implicitAnyFromCircularInference.ts, 5, 3))
>b : Symbol(b, Decl(implicitAnyFromCircularInference.ts, 4, 3))

// Error expected
var d: Array<typeof d>;
>d : Symbol(d, Decl(implicitAnyFromCircularInference.ts, 8, 3))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>d : Symbol(d, Decl(implicitAnyFromCircularInference.ts, 8, 3))

function f() { return f; }
>f : Symbol(f, Decl(implicitAnyFromCircularInference.ts, 8, 23))
>f : Symbol(f, Decl(implicitAnyFromCircularInference.ts, 8, 23))

// Error expected
function g() { return g(); }
>g : Symbol(g, Decl(implicitAnyFromCircularInference.ts, 10, 26))
>g : Symbol(g, Decl(implicitAnyFromCircularInference.ts, 10, 26))

// Error expected
var f1 = function () {
>f1 : Symbol(f1, Decl(implicitAnyFromCircularInference.ts, 16, 3))

    return f1();
>f1 : Symbol(f1, Decl(implicitAnyFromCircularInference.ts, 16, 3))

};

// Error expected
var f2 = () => f2();
>f2 : Symbol(f2, Decl(implicitAnyFromCircularInference.ts, 21, 3))
>f2 : Symbol(f2, Decl(implicitAnyFromCircularInference.ts, 21, 3))

// Error expected
function h() {
>h : Symbol(h, Decl(implicitAnyFromCircularInference.ts, 21, 20))

    return foo();
>foo : Symbol(foo, Decl(implicitAnyFromCircularInference.ts, 25, 17))

    function foo() {
>foo : Symbol(foo, Decl(implicitAnyFromCircularInference.ts, 25, 17))

        return h() || "hello";
>h : Symbol(h, Decl(implicitAnyFromCircularInference.ts, 21, 20))
    }
}

interface A {
>A : Symbol(A, Decl(implicitAnyFromCircularInference.ts, 29, 1))

    s: string;
>s : Symbol(A.s, Decl(implicitAnyFromCircularInference.ts, 31, 13))
}

function foo(x: A): string { return "abc"; }
>foo : Symbol(foo, Decl(implicitAnyFromCircularInference.ts, 33, 1))
>x : Symbol(x, Decl(implicitAnyFromCircularInference.ts, 35, 13))
>A : Symbol(A, Decl(implicitAnyFromCircularInference.ts, 29, 1))

class C {
>C : Symbol(C, Decl(implicitAnyFromCircularInference.ts, 35, 44))

    s = foo(this);
>s : Symbol(C.s, Decl(implicitAnyFromCircularInference.ts, 37, 9))
>foo : Symbol(foo, Decl(implicitAnyFromCircularInference.ts, 33, 1))
>this : Symbol(C, Decl(implicitAnyFromCircularInference.ts, 35, 44))
}

class D {
>D : Symbol(D, Decl(implicitAnyFromCircularInference.ts, 39, 1))

    // Error expected
    get x() {
>x : Symbol(D.x, Decl(implicitAnyFromCircularInference.ts, 41, 9))

        return this.x;
>this.x : Symbol(D.x, Decl(implicitAnyFromCircularInference.ts, 41, 9))
>this : Symbol(D, Decl(implicitAnyFromCircularInference.ts, 39, 1))
>x : Symbol(D.x, Decl(implicitAnyFromCircularInference.ts, 41, 9))
    }
}

