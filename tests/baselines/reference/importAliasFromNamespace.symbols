//// [tests/cases/compiler/importAliasFromNamespace.ts] ////

=== usage.ts ===
/// <reference path="./internal.ts" preserve="true" />
namespace SomeOther.Thing {
>SomeOther : Symbol(SomeOther, Decl(usage.ts, 0, 0))
>Thing : Symbol(Thing, Decl(usage.ts, 1, 20))

    import Internal = My.Internal;
>Internal : Symbol(Internal, Decl(usage.ts, 1, 27))
>My : Symbol(My, Decl(internal.ts, 0, 0))
>Internal : Symbol(Internal, Decl(internal.ts, 0, 13))

    export class Foo {
>Foo : Symbol(Foo, Decl(usage.ts, 2, 34))

        private _which: Internal.WhichThing;
>_which : Symbol(Foo._which, Decl(usage.ts, 3, 22))
>Internal : Symbol(Internal, Decl(usage.ts, 1, 27))
>WhichThing : Symbol(Internal.WhichThing, Decl(internal.ts, 1, 39))

        constructor() {
            Internal.getThing();
>Internal.getThing : Symbol(Internal.getThing, Decl(internal.ts, 0, 23))
>Internal : Symbol(Internal, Decl(usage.ts, 1, 27))
>getThing : Symbol(Internal.getThing, Decl(internal.ts, 0, 23))

            Internal.WhichThing.A ? "foo" : "bar";
>Internal.WhichThing.A : Symbol(Internal.WhichThing.A, Decl(internal.ts, 2, 34))
>Internal.WhichThing : Symbol(Internal.WhichThing, Decl(internal.ts, 1, 39))
>Internal : Symbol(Internal, Decl(usage.ts, 1, 27))
>WhichThing : Symbol(Internal.WhichThing, Decl(internal.ts, 1, 39))
>A : Symbol(Internal.WhichThing.A, Decl(internal.ts, 2, 34))
        }
    }
}
=== internal.ts ===
namespace My.Internal {
>My : Symbol(My, Decl(internal.ts, 0, 0))
>Internal : Symbol(Internal, Decl(internal.ts, 0, 13))

    export function getThing(): void {}
>getThing : Symbol(getThing, Decl(internal.ts, 0, 23))

    export const enum WhichThing {
>WhichThing : Symbol(WhichThing, Decl(internal.ts, 1, 39))

        A, B, C
>A : Symbol(WhichThing.A, Decl(internal.ts, 2, 34))
>B : Symbol(WhichThing.B, Decl(internal.ts, 3, 10))
>C : Symbol(WhichThing.C, Decl(internal.ts, 3, 13))
    }
}

