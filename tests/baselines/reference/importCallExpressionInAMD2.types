//// [tests/cases/conformance/dynamicImport/importCallExpressionInAMD2.ts] ////

=== 0.ts ===
export class B {
>B : B
>  : ^

    print() { return "I am B"}
>print : () => string
>      : ^^^^^^^^^^^^
>"I am B" : "I am B"
>         : ^^^^^^^^
}

=== 2.ts ===
// We use Promise<any> for now as there is no way to specify shape of module object
function foo(x: Promise<any>) {
>foo : (x: Promise<any>) => void
>    : ^ ^^            ^^^^^^^^^
>x : Promise<any>
>  : ^^^^^^^^^^^^

    x.then(value => {
>x.then(value => {        let b = new value.B();        b.print();    }) : Promise<void>
>                                                                        : ^^^^^^^^^^^^^
>x.then : <TResult1 = any, TResult2 = never>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>       : ^        ^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : Promise<any>
>  : ^^^^^^^^^^^^
>then : <TResult1 = any, TResult2 = never>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>     : ^        ^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value => {        let b = new value.B();        b.print();    } : (value: any) => void
>                                                                : ^     ^^^^^^^^^^^^^^
>value : any

        let b = new value.B();
>b : any
>new value.B() : any
>value.B : any
>value : any
>      : ^^^
>B : any
>  : ^^^

        b.print();
>b.print() : any
>b.print : any
>b : any
>  : ^^^
>print : any
>      : ^^^

    })
}

foo(import("./0"));
>foo(import("./0")) : void
>                   : ^^^^
>foo : (x: Promise<any>) => void
>    : ^ ^^            ^^^^^^^^^
>import("./0") : Promise<typeof import("0")>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"./0" : "./0"
>      : ^^^^^

