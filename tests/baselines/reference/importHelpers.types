//// [tests/cases/compiler/importHelpers.ts] ////

=== external.ts ===
export class A { }
>A : A
>  : ^

export class B extends A { }
>B : B
>  : ^
>A : A
>  : ^

declare var dec: any;
>dec : any

@dec
>dec : any

class C {
>C : C
>  : ^

    method(@dec x: number) {
>method : (x: number) => void
>       : ^ ^^      ^^^^^^^^^
>dec : any
>x : number
>  : ^^^^^^
    }
}

function id<T>(x: T) {
>id : <T>(x: T) => T
>   : ^ ^^ ^^ ^^^^^^
>x : T
>  : ^

    return x;
>x : T
>  : ^
}

export const result = id`hello world`;
>result : TemplateStringsArray
>       : ^^^^^^^^^^^^^^^^^^^^
>id`hello world` : TemplateStringsArray
>                : ^^^^^^^^^^^^^^^^^^^^
>id : <T>(x: T) => T
>   : ^ ^^ ^^ ^^^^^^
>`hello world` : "hello world"
>              : ^^^^^^^^^^^^^

=== script.ts ===
class A { }
>A : A
>  : ^

class B extends A { }
>B : B
>  : ^
>A : A
>  : ^

declare var dec: any;
>dec : any

@dec
>dec : any

class C {
>C : C
>  : ^

    method(@dec x: number) {
>method : (x: number) => void
>       : ^ ^^      ^^^^^^^^^
>dec : any
>x : number
>  : ^^^^^^
    }
}

function id<T>(x: T) {
>id : <T>(x: T) => T
>   : ^ ^^ ^^ ^^^^^^
>x : T
>  : ^

    return x;
>x : T
>  : ^
}

const result = id`hello world`;
>result : TemplateStringsArray
>       : ^^^^^^^^^^^^^^^^^^^^
>id`hello world` : TemplateStringsArray
>                : ^^^^^^^^^^^^^^^^^^^^
>id : <T>(x: T) => T
>   : ^ ^^ ^^ ^^^^^^
>`hello world` : "hello world"
>              : ^^^^^^^^^^^^^

=== tslib.d.ts ===
export declare function __extends(d: Function, b: Function): void;
>__extends : (d: Function, b: Function) => void
>          : ^ ^^        ^^ ^^        ^^^^^    
>d : Function
>  : ^^^^^^^^
>b : Function
>  : ^^^^^^^^

export declare function __assign(t: any, ...sources: any[]): any;
>__assign : (t: any, ...sources: any[]) => any
>         : ^ ^^   ^^^^^       ^^     ^^^^^   
>t : any
>sources : any[]
>        : ^^^^^

export declare function __decorate(decorators: Function[], target: any, key?: string | symbol, desc?: any): any;
>__decorate : (decorators: Function[], target: any, key?: string | symbol, desc?: any) => any
>           : ^          ^^          ^^      ^^   ^^   ^^^               ^^    ^^^   ^^^^^   
>decorators : Function[]
>           : ^^^^^^^^^^
>target : any
>key : string | symbol
>    : ^^^^^^^^^^^^^^^
>desc : any

export declare function __param(paramIndex: number, decorator: Function): Function;
>__param : (paramIndex: number, decorator: Function) => Function
>        : ^          ^^      ^^         ^^        ^^^^^        
>paramIndex : number
>           : ^^^^^^
>decorator : Function
>          : ^^^^^^^^

export declare function __metadata(metadataKey: any, metadataValue: any): Function;
>__metadata : (metadataKey: any, metadataValue: any) => Function
>           : ^           ^^   ^^             ^^   ^^^^^        
>metadataKey : any
>metadataValue : any

export declare function __awaiter(thisArg: any, _arguments: any, P: Function, generator: Function): any;
>__awaiter : (thisArg: any, _arguments: any, P: Function, generator: Function) => any
>          : ^       ^^   ^^          ^^   ^^ ^^        ^^         ^^        ^^^^^   
>thisArg : any
>_arguments : any
>P : Function
>  : ^^^^^^^^
>generator : Function
>          : ^^^^^^^^

export declare function __makeTemplateObject(cooked: string[], raw: string[]): TemplateStringsArray;
>__makeTemplateObject : (cooked: string[], raw: string[]) => TemplateStringsArray
>                     : ^      ^^        ^^   ^^        ^^^^^                    
>cooked : string[]
>       : ^^^^^^^^
>raw : string[]
>    : ^^^^^^^^

