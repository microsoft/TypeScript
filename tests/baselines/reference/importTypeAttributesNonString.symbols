//// [tests/cases/compiler/importTypeAttributesNonString.ts] ////

=== mod.mts ===
declare module "wat";
>"wat" : Symbol("wat", Decl(mod.mts, 0, 0))

// Import type with function expression (should error)
type T1 = typeof import("wat", {
>T1 : Symbol(T1, Decl(mod.mts, 0, 21))

  assert: {
    a: (() => {
      console.log("why can you write js here????");
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))

    })(),
  }
});

// Import type with number literal (should error)
type T2 = typeof import("wat", {
>T2 : Symbol(T2, Decl(mod.mts, 9, 3))

  assert: { field: 0 }
});

// Import type with template literal (should error)
type T3 = typeof import("wat", {
>T3 : Symbol(T3, Decl(mod.mts, 14, 3))

  assert: { field: `a` }
});

// Import type with regex (should error)
type T4 = typeof import("wat", {
>T4 : Symbol(T4, Decl(mod.mts, 19, 3))

  assert: { field: /a/g }
});

// Import type with array (should error)
type T5 = typeof import("wat", {
>T5 : Symbol(T5, Decl(mod.mts, 24, 3))

  assert: { field: ["a"] }
});

// Import type with object (should error)
type T6 = typeof import("wat", {
>T6 : Symbol(T6, Decl(mod.mts, 29, 3))

  assert: { field: { a: 0 } }
});

// Import type with method call (should error)
type T7 = typeof import("wat", {
>T7 : Symbol(T7, Decl(mod.mts, 34, 3))

  assert: { field: 0..toString() }
});

// Import type with valid string literal (should work)
type T8 = typeof import("wat", {
>T8 : Symbol(T8, Decl(mod.mts, 39, 3))

  assert: { type: "json" }
});

// Import type with 'with' keyword and valid string (should work)
type T9 = typeof import("wat", {
>T9 : Symbol(T9, Decl(mod.mts, 44, 3))

  with: { type: "json" }
});

// Import type with 'with' keyword and invalid expression (should error)
type T10 = typeof import("wat", {
>T10 : Symbol(T10, Decl(mod.mts, 49, 3))

  with: { field: 123 }
});

