//// [tests/cases/conformance/types/import/importTypeGeneric.ts] ////

=== a.d.ts ===
export interface Foo {
    a: string;
>a : string
>  : ^^^^^^
}
=== b.d.ts ===
export interface Foo {
    a: number;
>a : number
>  : ^^^^^^
}
=== usage.ts ===
export function getFooFrom<T extends "./a" | "./b">(v: T): import(T).Foo {
>getFooFrom : <T extends "./a" | "./b">(v: T) => import(T).Foo
>           : ^ ^^^^^^^^^             ^^ ^^ ^^^^^             
>v : T
>  : ^

    return undefined as any;
>undefined as any : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^
}

export function getFooValueFrom<T extends "./a" | "./b">(v: T): import(T).Foo["a"] {
>getFooValueFrom : <T extends "./a" | "./b">(v: T) => import(T).Foo["a"]
>                : ^ ^^^^^^^^^             ^^ ^^ ^^^^^                  
>v : T
>  : ^

    return undefined as any;
>undefined as any : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^
}

