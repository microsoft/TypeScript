//// [tests/cases/compiler/importedAliasesInTypePositions.ts] ////

=== file2.ts ===
import RT_ALIAS = require("file1");
>RT_ALIAS : Symbol(RT_ALIAS, Decl(file2.ts, 0, 0))

import ReferredTo = RT_ALIAS.elaborate.nested.mod.name.ReferredTo;
>ReferredTo : Symbol(ReferredTo, Decl(file2.ts, 0, 35))
>RT_ALIAS : Symbol(RT_ALIAS, Decl(file2.ts, 0, 0))
>elaborate : Symbol(RT_ALIAS.elaborate, Decl(file1.ts, 0, 0))
>nested : Symbol(RT_ALIAS.elaborate.nested, Decl(file1.ts, 0, 27))
>mod : Symbol(RT_ALIAS.elaborate.nested.mod, Decl(file1.ts, 0, 34))
>name : Symbol(RT_ALIAS.elaborate.nested.mod.name, Decl(file1.ts, 0, 38))
>ReferredTo : Symbol(ReferredTo, Decl(file1.ts, 0, 44))

export namespace ImportingModule {
>ImportingModule : Symbol(ImportingModule, Decl(file2.ts, 1, 66))

    class UsesReferredType {
>UsesReferredType : Symbol(UsesReferredType, Decl(file2.ts, 3, 34))

        constructor(private referred: ReferredTo) { }
>referred : Symbol(UsesReferredType.referred, Decl(file2.ts, 5, 20))
>ReferredTo : Symbol(ReferredTo, Decl(file2.ts, 0, 35))
    }
}
=== file1.ts ===
export namespace elaborate.nested.mod.name {
>elaborate : Symbol(elaborate, Decl(file1.ts, 0, 0))
>nested : Symbol(nested, Decl(file1.ts, 0, 27))
>mod : Symbol(mod, Decl(file1.ts, 0, 34))
>name : Symbol(name, Decl(file1.ts, 0, 38))

    export class ReferredTo {
>ReferredTo : Symbol(ReferredTo, Decl(file1.ts, 0, 44))

        doSomething(): void {
>doSomething : Symbol(ReferredTo.doSomething, Decl(file1.ts, 1, 29))
        }
    }
}

