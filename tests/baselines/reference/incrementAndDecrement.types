//// [tests/cases/conformance/expressions/operators/incrementAndDecrement.ts] ////

=== incrementAndDecrement.ts ===
enum E { A, B, C };
>E : E
>  : ^
>A : E.A
>  : ^^^
>B : E.B
>  : ^^^
>C : E.C
>  : ^^^

var x = 4;
>x : number
>  : ^^^^^^
>4 : 4
>  : ^

var e = E.B;
>e : E
>  : ^
>E.B : E.B
>    : ^^^
>E : typeof E
>  : ^^^^^^^^
>B : E.B
>  : ^^^

var a: any;
>a : any
>  : ^^^

var w = window;
>w : any
>  : ^^^
>window : any
>       : ^^^

// Assign to expression++
x++ = 4; // Error
>x++ : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>4 : 4
>  : ^

// Assign to expression--
x-- = 5; // Error
>x-- : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>5 : 5
>  : ^

// Assign to++expression
++x = 4; // Error
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>4 : 4
>  : ^

// Assign to--expression
--x = 5; // Error
>--x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>5 : 5
>  : ^

// Pre and postfix++ on number
x++;
>x++ : number
>    : ^^^^^^
>x : number
>  : ^^^^^^

x--;
>x-- : number
>    : ^^^^^^
>x : number
>  : ^^^^^^

++x;
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^

--x;
>--x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^

++x++; // Error
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>++ : number
>   : ^^^^^^
> : any
> : ^^^

--x--; // Error
>--x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

++x--; // Error
>++x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

--x++; // Error
>--x : number
>    : ^^^^^^
>x : number
>  : ^^^^^^
>++ : number
>   : ^^^^^^
> : any
> : ^^^

// Pre and postfix++ on enum
e++;
>e++ : number
>    : ^^^^^^
>e : E
>  : ^

e--;
>e-- : number
>    : ^^^^^^
>e : E
>  : ^

++e;
>++e : number
>    : ^^^^^^
>e : E
>  : ^

--e;
>--e : number
>    : ^^^^^^
>e : E
>  : ^

++e++; // Error
>++e : number
>    : ^^^^^^
>e : E
>  : ^
>++ : number
>   : ^^^^^^
> : any
> : ^^^

--e--; // Error
>--e : number
>    : ^^^^^^
>e : E
>  : ^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

++e--; // Error
>++e : number
>    : ^^^^^^
>e : E
>  : ^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

--e++; // Error
>--e : number
>    : ^^^^^^
>e : E
>  : ^
>++ : number
>   : ^^^^^^
> : any
> : ^^^

// Pre and postfix++ on value of type 'any'
a++;
>a++ : number
>    : ^^^^^^
>a : any
>  : ^^^

a--;
>a-- : number
>    : ^^^^^^
>a : any
>  : ^^^

++a;
>++a : number
>    : ^^^^^^
>a : any
>  : ^^^

--a;
>--a : number
>    : ^^^^^^
>a : any
>  : ^^^

++a++; // Error
>++a : number
>    : ^^^^^^
>a : any
>  : ^^^
>++ : number
>   : ^^^^^^
> : any
> : ^^^

--a--; // Error
>--a : number
>    : ^^^^^^
>a : any
>  : ^^^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

++a--; // Error
>++a : number
>    : ^^^^^^
>a : any
>  : ^^^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

--a++; // Error
>--a : number
>    : ^^^^^^
>a : any
>  : ^^^
>++ : number
>   : ^^^^^^
> : any
> : ^^^


// Pre and postfix++ on other types
w++; // Error
>w++ : number
>    : ^^^^^^
>w : any
>  : ^^^

w--; // Error
>w-- : number
>    : ^^^^^^
>w : any
>  : ^^^

++w; // Error
>++w : number
>    : ^^^^^^
>w : any
>  : ^^^

--w; // Error
>--w : number
>    : ^^^^^^
>w : any
>  : ^^^

++w++; // Error
>++w : number
>    : ^^^^^^
>w : any
>  : ^^^
>++ : number
>   : ^^^^^^
> : any
> : ^^^

--w--; // Error
>--w : number
>    : ^^^^^^
>w : any
>  : ^^^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

++w--; // Error
>++w : number
>    : ^^^^^^
>w : any
>  : ^^^
>-- : number
>   : ^^^^^^
> : any
> : ^^^

--w++; // Error
>--w : number
>    : ^^^^^^
>w : any
>  : ^^^
>++ : number
>   : ^^^^^^
> : any
> : ^^^



