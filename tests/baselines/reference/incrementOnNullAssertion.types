//// [tests/cases/compiler/incrementOnNullAssertion.ts] ////

=== incrementOnNullAssertion.ts ===
interface Dictionary<T> {
    [myFavouriteType: string]: T | undefined
>myFavouriteType : string
>                : ^^^^^^
}
const x = 'bar'
>x : "bar"
>  : ^^^^^
>'bar' : "bar"
>      : ^^^^^

let foo: Dictionary<number> = {}
>foo : Dictionary<number>
>    : ^^^^^^^^^^^^^^^^^^
>{} : {}
>   : ^^

if (foo[x] === undefined) {
>foo[x] === undefined : boolean
>                     : ^^^^^^^
>foo[x] : number | undefined
>       : ^^^^^^^^^^^^^^^^^^
>foo : Dictionary<number>
>    : ^^^^^^^^^^^^^^^^^^
>x : "bar"
>  : ^^^^^
>undefined : undefined
>          : ^^^^^^^^^

    foo[x] = 1
>foo[x] = 1 : 1
>           : ^
>foo[x] : number | undefined
>       : ^^^^^^^^^^^^^^^^^^
>foo : Dictionary<number>
>    : ^^^^^^^^^^^^^^^^^^
>x : "bar"
>  : ^^^^^
>1 : 1
>  : ^
}
else {
    let nu = foo[x]
>nu : number
>   : ^^^^^^
>foo[x] : number
>       : ^^^^^^
>foo : Dictionary<number>
>    : ^^^^^^^^^^^^^^^^^^
>x : "bar"
>  : ^^^^^

    let n = foo[x]
>n : number
>  : ^^^^^^
>foo[x] : number
>       : ^^^^^^
>foo : Dictionary<number>
>    : ^^^^^^^^^^^^^^^^^^
>x : "bar"
>  : ^^^^^

    foo[x]!++
>foo[x]!++ : number
>          : ^^^^^^
>foo[x]! : number
>        : ^^^^^^
>foo[x] : number
>       : ^^^^^^
>foo : Dictionary<number>
>    : ^^^^^^^^^^^^^^^^^^
>x : "bar"
>  : ^^^^^
}

