//// [tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedBooleanType.ts] ////

=== incrementOperatorWithUnsupportedBooleanType.ts ===
// ++ operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : Symbol(BOOLEAN, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 3))

function foo(): boolean { return true; }
>foo : Symbol(foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 21))

class A {
>A : Symbol(A, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 3, 40))

    public a: boolean;
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))

    static foo() { return true; }
>foo : Symbol(A.foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 6, 22))
}
namespace M {
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))

    export var n: boolean;
>n : Symbol(n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
}

var objA = new A();
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>A : Symbol(A, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 3, 40))

// boolean type var
var ResultIsNumber1 = ++BOOLEAN;
>ResultIsNumber1 : Symbol(ResultIsNumber1, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 16, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 3))

var ResultIsNumber2 = BOOLEAN++;
>ResultIsNumber2 : Symbol(ResultIsNumber2, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 18, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 3))

// boolean type literal
var ResultIsNumber3 = ++true;
>ResultIsNumber3 : Symbol(ResultIsNumber3, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 21, 3))

var ResultIsNumber4 = ++{ x: true, y: false };
>ResultIsNumber4 : Symbol(ResultIsNumber4, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 22, 3))
>x : Symbol(x, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 22, 25))
>y : Symbol(y, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 22, 34))

var ResultIsNumber5 = ++{ x: true, y: (n: boolean) => { return n; } };
>ResultIsNumber5 : Symbol(ResultIsNumber5, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 23, 3))
>x : Symbol(x, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 23, 25))
>y : Symbol(y, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 23, 34))
>n : Symbol(n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 23, 39))
>n : Symbol(n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 23, 39))

var ResultIsNumber6 = true++;
>ResultIsNumber6 : Symbol(ResultIsNumber6, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 25, 3))

var ResultIsNumber7 = { x: true, y: false }++;
>ResultIsNumber7 : Symbol(ResultIsNumber7, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 26, 3))
>x : Symbol(x, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 26, 23))
>y : Symbol(y, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 26, 32))

var ResultIsNumber8 = { x: true, y: (n: boolean) => { return n; } }++;
>ResultIsNumber8 : Symbol(ResultIsNumber8, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 27, 3))
>x : Symbol(x, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 27, 23))
>y : Symbol(y, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 27, 32))
>n : Symbol(n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 27, 37))
>n : Symbol(n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 27, 37))

// boolean type expressions
var ResultIsNumber9 = ++objA.a;
>ResultIsNumber9 : Symbol(ResultIsNumber9, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 30, 3))
>objA.a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))

var ResultIsNumber10 = ++M.n;
>ResultIsNumber10 : Symbol(ResultIsNumber10, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 31, 3))
>M.n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))
>n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))

var ResultIsNumber11 = ++foo();
>ResultIsNumber11 : Symbol(ResultIsNumber11, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 32, 3))
>foo : Symbol(foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 21))

var ResultIsNumber12 = ++A.foo();
>ResultIsNumber12 : Symbol(ResultIsNumber12, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 33, 3))
>A.foo : Symbol(A.foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 6, 22))
>A : Symbol(A, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 3, 40))
>foo : Symbol(A.foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 6, 22))

var ResultIsNumber13 = foo()++;
>ResultIsNumber13 : Symbol(ResultIsNumber13, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 35, 3))
>foo : Symbol(foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 21))

var ResultIsNumber14 = A.foo()++;
>ResultIsNumber14 : Symbol(ResultIsNumber14, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 36, 3))
>A.foo : Symbol(A.foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 6, 22))
>A : Symbol(A, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 3, 40))
>foo : Symbol(A.foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 6, 22))

var ResultIsNumber15 = objA.a++;
>ResultIsNumber15 : Symbol(ResultIsNumber15, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 37, 3))
>objA.a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))

var ResultIsNumber16 = M.n++;
>ResultIsNumber16 : Symbol(ResultIsNumber16, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 38, 3))
>M.n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))
>n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))

// miss assignment operators
++true;
++BOOLEAN;
>BOOLEAN : Symbol(BOOLEAN, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 3))

++foo();
>foo : Symbol(foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 21))

++objA.a;
>objA.a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))

++M.n;
>M.n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))
>n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))

++objA.a, M.n;
>objA.a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>M.n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))
>n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))

true++;
BOOLEAN++;
>BOOLEAN : Symbol(BOOLEAN, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 3))

foo()++;
>foo : Symbol(foo, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 1, 21))

objA.a++;
>objA.a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))

M.n++;
>M.n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))
>n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))

objA.a++, M.n++;
>objA.a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>objA : Symbol(objA, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 13, 3))
>a : Symbol(A.a, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 5, 9))
>M.n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))
>M : Symbol(M, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 8, 1))
>n : Symbol(M.n, Decl(incrementOperatorWithUnsupportedBooleanType.ts, 10, 14))

