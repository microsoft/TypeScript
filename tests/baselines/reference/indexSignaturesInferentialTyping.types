//// [tests/cases/compiler/indexSignaturesInferentialTyping.ts] ////

=== indexSignaturesInferentialTyping.ts ===
function foo<T>(items: { [index: number]: T }): T { return undefined; }
>foo : <T>(items: { [index: number]: T; }) => T
>    : ^ ^^     ^^                       ^^^^^ 
>items : { [index: number]: T; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^
>index : number
>      : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

function bar<T>(items: { [index: string]: T }): T { return undefined; }
>bar : <T>(items: { [index: string]: T; }) => T
>    : ^ ^^     ^^                       ^^^^^ 
>items : { [index: string]: T; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^
>index : string
>      : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var x1 = foo({ 0: 0, 1: 1 });       // type should be number
>x1 : number
>   : ^^^^^^
>foo({ 0: 0, 1: 1 }) : number
>                    : ^^^^^^
>foo : <T>(items: { [index: number]: T; }) => T
>    : ^ ^^     ^^                       ^^^^^ 
>{ 0: 0, 1: 1 } : { 0: number; 1: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : number
>  : ^^^^^^
>0 : 0
>  : ^
>1 : number
>  : ^^^^^^
>1 : 1
>  : ^

var x2 = bar({ 0: 0, 1: 1 });
>x2 : number
>   : ^^^^^^
>bar({ 0: 0, 1: 1 }) : number
>                    : ^^^^^^
>bar : <T>(items: { [index: string]: T; }) => T
>    : ^ ^^     ^^                       ^^^^^ 
>{ 0: 0, 1: 1 } : { 0: number; 1: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : number
>  : ^^^^^^
>0 : 0
>  : ^
>1 : number
>  : ^^^^^^
>1 : 1
>  : ^

var x3 = bar({ zero: 0, one: 1 });  // type should be number
>x3 : number
>   : ^^^^^^
>bar({ zero: 0, one: 1 }) : number
>                         : ^^^^^^
>bar : <T>(items: { [index: string]: T; }) => T
>    : ^ ^^     ^^                       ^^^^^ 
>{ zero: 0, one: 1 } : { zero: number; one: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zero : number
>     : ^^^^^^
>0 : 0
>  : ^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^

