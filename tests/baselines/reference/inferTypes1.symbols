//// [tests/cases/conformance/types/conditional/inferTypes1.ts] ////

=== inferTypes1.ts ===
type Unpacked<T> =
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))
>T : Symbol(T, Decl(inferTypes1.ts, 0, 14))

    T extends (infer U)[] ? U :
>T : Symbol(T, Decl(inferTypes1.ts, 0, 14))
>U : Symbol(U, Decl(inferTypes1.ts, 1, 20))
>U : Symbol(U, Decl(inferTypes1.ts, 1, 20))

    T extends (...args: any[]) => infer U ? U :
>T : Symbol(T, Decl(inferTypes1.ts, 0, 14))
>args : Symbol(args, Decl(inferTypes1.ts, 2, 15))
>U : Symbol(U, Decl(inferTypes1.ts, 2, 39))
>U : Symbol(U, Decl(inferTypes1.ts, 2, 39))

    T extends Promise<infer U> ? U :
>T : Symbol(T, Decl(inferTypes1.ts, 0, 14))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>U : Symbol(U, Decl(inferTypes1.ts, 3, 27))
>U : Symbol(U, Decl(inferTypes1.ts, 3, 27))

    T;
>T : Symbol(T, Decl(inferTypes1.ts, 0, 14))

type T00 = Unpacked<string>;  // string
>T00 : Symbol(T00, Decl(inferTypes1.ts, 4, 6))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))

type T01 = Unpacked<string[]>;  // string
>T01 : Symbol(T01, Decl(inferTypes1.ts, 6, 28))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))

type T02 = Unpacked<() => string>;  // string
>T02 : Symbol(T02, Decl(inferTypes1.ts, 7, 30))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))

type T03 = Unpacked<Promise<string>>;  // string
>T03 : Symbol(T03, Decl(inferTypes1.ts, 8, 34))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type T04 = Unpacked<Unpacked<Promise<string>[]>>;  // string
>T04 : Symbol(T04, Decl(inferTypes1.ts, 9, 37))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type T05 = Unpacked<any>;  // any
>T05 : Symbol(T05, Decl(inferTypes1.ts, 10, 49))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))

type T06 = Unpacked<never>;  // never
>T06 : Symbol(T06, Decl(inferTypes1.ts, 11, 25))
>Unpacked : Symbol(Unpacked, Decl(inferTypes1.ts, 0, 0))

function f1(s: string) {
>f1 : Symbol(f1, Decl(inferTypes1.ts, 12, 27))
>s : Symbol(s, Decl(inferTypes1.ts, 14, 12))

    return { a: 1, b: s };
>a : Symbol(a, Decl(inferTypes1.ts, 15, 12))
>b : Symbol(b, Decl(inferTypes1.ts, 15, 18))
>s : Symbol(s, Decl(inferTypes1.ts, 14, 12))
}

class C {
>C : Symbol(C, Decl(inferTypes1.ts, 16, 1))

    x = 0;
>x : Symbol(C.x, Decl(inferTypes1.ts, 18, 9))

    y = 0;
>y : Symbol(C.y, Decl(inferTypes1.ts, 19, 10))
}

abstract class Abstract {
>Abstract : Symbol(Abstract, Decl(inferTypes1.ts, 21, 1))

    x = 0;
>x : Symbol(Abstract.x, Decl(inferTypes1.ts, 23, 25))

    y = 0;
>y : Symbol(Abstract.y, Decl(inferTypes1.ts, 24, 10))
}

type T10 = ReturnType<() => string>;  // string
>T10 : Symbol(T10, Decl(inferTypes1.ts, 26, 1))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))

type T11 = ReturnType<(s: string) => void>;  // void
>T11 : Symbol(T11, Decl(inferTypes1.ts, 28, 36))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>s : Symbol(s, Decl(inferTypes1.ts, 29, 23))

type T12 = ReturnType<(<T>() => T)>;  // {}
>T12 : Symbol(T12, Decl(inferTypes1.ts, 29, 43))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(inferTypes1.ts, 30, 24))
>T : Symbol(T, Decl(inferTypes1.ts, 30, 24))

type T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]
>T13 : Symbol(T13, Decl(inferTypes1.ts, 30, 36))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(inferTypes1.ts, 31, 24))
>U : Symbol(U, Decl(inferTypes1.ts, 31, 36))
>U : Symbol(U, Decl(inferTypes1.ts, 31, 36))
>T : Symbol(T, Decl(inferTypes1.ts, 31, 24))

type T14 = ReturnType<typeof f1>;  // { a: number, b: string }
>T14 : Symbol(T14, Decl(inferTypes1.ts, 31, 66))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>f1 : Symbol(f1, Decl(inferTypes1.ts, 12, 27))

type T15 = ReturnType<any>;  // any
>T15 : Symbol(T15, Decl(inferTypes1.ts, 32, 33))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))

type T16 = ReturnType<never>;  // never
>T16 : Symbol(T16, Decl(inferTypes1.ts, 33, 27))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))

type T17 = ReturnType<string>;  // Error
>T17 : Symbol(T17, Decl(inferTypes1.ts, 34, 29))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))

type T18 = ReturnType<Function>;  // Error
>T18 : Symbol(T18, Decl(inferTypes1.ts, 35, 30))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type T19<T extends any[]> = ReturnType<(x: string, ...args: T) => T[]>;  // T[]
>T19 : Symbol(T19, Decl(inferTypes1.ts, 36, 32))
>T : Symbol(T, Decl(inferTypes1.ts, 37, 9))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypes1.ts, 37, 40))
>args : Symbol(args, Decl(inferTypes1.ts, 37, 50))
>T : Symbol(T, Decl(inferTypes1.ts, 37, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 37, 9))

type U10 = InstanceType<typeof C>;  // C
>U10 : Symbol(U10, Decl(inferTypes1.ts, 37, 71))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))
>C : Symbol(C, Decl(inferTypes1.ts, 16, 1))

type U11 = InstanceType<any>;  // any
>U11 : Symbol(U11, Decl(inferTypes1.ts, 39, 34))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))

type U12 = InstanceType<never>;  // never
>U12 : Symbol(U12, Decl(inferTypes1.ts, 40, 29))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))

type U13 = InstanceType<string>;  // Error
>U13 : Symbol(U13, Decl(inferTypes1.ts, 41, 31))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))

type U14 = InstanceType<Function>;  // Error
>U14 : Symbol(U14, Decl(inferTypes1.ts, 42, 32))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type U15 = InstanceType<typeof Abstract>;  // Abstract
>U15 : Symbol(U15, Decl(inferTypes1.ts, 43, 34))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))
>Abstract : Symbol(Abstract, Decl(inferTypes1.ts, 21, 1))

type U16<T extends any[]> = InstanceType<new (x: string, ...args: T) => T[]>;  // T[]
>U16 : Symbol(U16, Decl(inferTypes1.ts, 44, 41))
>T : Symbol(T, Decl(inferTypes1.ts, 45, 9))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypes1.ts, 45, 46))
>args : Symbol(args, Decl(inferTypes1.ts, 45, 56))
>T : Symbol(T, Decl(inferTypes1.ts, 45, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 45, 9))

type U17<T extends any[]> = InstanceType<abstract new (x: string, ...args: T) => T[]>;  // T[]
>U17 : Symbol(U17, Decl(inferTypes1.ts, 45, 77))
>T : Symbol(T, Decl(inferTypes1.ts, 46, 9))
>InstanceType : Symbol(InstanceType, Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(inferTypes1.ts, 46, 55))
>args : Symbol(args, Decl(inferTypes1.ts, 46, 65))
>T : Symbol(T, Decl(inferTypes1.ts, 46, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 46, 9))

type ArgumentType<T extends (x: any) => any> = T extends (a: infer A) => any ? A : any;
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))
>T : Symbol(T, Decl(inferTypes1.ts, 48, 18))
>x : Symbol(x, Decl(inferTypes1.ts, 48, 29))
>T : Symbol(T, Decl(inferTypes1.ts, 48, 18))
>a : Symbol(a, Decl(inferTypes1.ts, 48, 58))
>A : Symbol(A, Decl(inferTypes1.ts, 48, 66))
>A : Symbol(A, Decl(inferTypes1.ts, 48, 66))

type T20 = ArgumentType<() => void>;  // {}
>T20 : Symbol(T20, Decl(inferTypes1.ts, 48, 87))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))

type T21 = ArgumentType<(x: string) => number>;  // string
>T21 : Symbol(T21, Decl(inferTypes1.ts, 50, 36))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))
>x : Symbol(x, Decl(inferTypes1.ts, 51, 25))

type T22 = ArgumentType<(x?: string) => number>;  // string | undefined
>T22 : Symbol(T22, Decl(inferTypes1.ts, 51, 47))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))
>x : Symbol(x, Decl(inferTypes1.ts, 52, 25))

type T23 = ArgumentType<(...args: string[]) => number>;  // string
>T23 : Symbol(T23, Decl(inferTypes1.ts, 52, 48))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))
>args : Symbol(args, Decl(inferTypes1.ts, 53, 25))

type T24 = ArgumentType<(x: string, y: string) => number>;  // Error
>T24 : Symbol(T24, Decl(inferTypes1.ts, 53, 55))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))
>x : Symbol(x, Decl(inferTypes1.ts, 54, 25))
>y : Symbol(y, Decl(inferTypes1.ts, 54, 35))

type T25 = ArgumentType<Function>;  // Error
>T25 : Symbol(T25, Decl(inferTypes1.ts, 54, 58))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

type T26 = ArgumentType<any>;  // any
>T26 : Symbol(T26, Decl(inferTypes1.ts, 55, 34))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))

type T27 = ArgumentType<never>;  // never
>T27 : Symbol(T27, Decl(inferTypes1.ts, 56, 29))
>ArgumentType : Symbol(ArgumentType, Decl(inferTypes1.ts, 46, 86))

type X1<T extends { x: any, y: any }> = T extends { x: infer X, y: infer Y } ? [X, Y] : any;
>X1 : Symbol(X1, Decl(inferTypes1.ts, 57, 31))
>T : Symbol(T, Decl(inferTypes1.ts, 59, 8))
>x : Symbol(x, Decl(inferTypes1.ts, 59, 19))
>y : Symbol(y, Decl(inferTypes1.ts, 59, 27))
>T : Symbol(T, Decl(inferTypes1.ts, 59, 8))
>x : Symbol(x, Decl(inferTypes1.ts, 59, 51))
>X : Symbol(X, Decl(inferTypes1.ts, 59, 60))
>y : Symbol(y, Decl(inferTypes1.ts, 59, 63))
>Y : Symbol(Y, Decl(inferTypes1.ts, 59, 72))
>X : Symbol(X, Decl(inferTypes1.ts, 59, 60))
>Y : Symbol(Y, Decl(inferTypes1.ts, 59, 72))

type T30 = X1<{ x: any, y: any }>;  // [any, any]
>T30 : Symbol(T30, Decl(inferTypes1.ts, 59, 92))
>X1 : Symbol(X1, Decl(inferTypes1.ts, 57, 31))
>x : Symbol(x, Decl(inferTypes1.ts, 61, 15))
>y : Symbol(y, Decl(inferTypes1.ts, 61, 23))

type T31 = X1<{ x: number, y: string }>;  // [number, string]
>T31 : Symbol(T31, Decl(inferTypes1.ts, 61, 34))
>X1 : Symbol(X1, Decl(inferTypes1.ts, 57, 31))
>x : Symbol(x, Decl(inferTypes1.ts, 62, 15))
>y : Symbol(y, Decl(inferTypes1.ts, 62, 26))

type T32 = X1<{ x: number, y: string, z: boolean }>;  // [number, string]
>T32 : Symbol(T32, Decl(inferTypes1.ts, 62, 40))
>X1 : Symbol(X1, Decl(inferTypes1.ts, 57, 31))
>x : Symbol(x, Decl(inferTypes1.ts, 63, 15))
>y : Symbol(y, Decl(inferTypes1.ts, 63, 26))
>z : Symbol(z, Decl(inferTypes1.ts, 63, 37))

type X2<T> = T extends { a: infer U, b: infer U } ? U : never;
>X2 : Symbol(X2, Decl(inferTypes1.ts, 63, 52))
>T : Symbol(T, Decl(inferTypes1.ts, 65, 8))
>T : Symbol(T, Decl(inferTypes1.ts, 65, 8))
>a : Symbol(a, Decl(inferTypes1.ts, 65, 24))
>U : Symbol(U, Decl(inferTypes1.ts, 65, 33), Decl(inferTypes1.ts, 65, 45))
>b : Symbol(b, Decl(inferTypes1.ts, 65, 36))
>U : Symbol(U, Decl(inferTypes1.ts, 65, 33), Decl(inferTypes1.ts, 65, 45))
>U : Symbol(U, Decl(inferTypes1.ts, 65, 33), Decl(inferTypes1.ts, 65, 45))

type T40 = X2<{}>;  // never
>T40 : Symbol(T40, Decl(inferTypes1.ts, 65, 62))
>X2 : Symbol(X2, Decl(inferTypes1.ts, 63, 52))

type T41 = X2<{ a: string }>;  // never
>T41 : Symbol(T41, Decl(inferTypes1.ts, 67, 18))
>X2 : Symbol(X2, Decl(inferTypes1.ts, 63, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 68, 15))

type T42 = X2<{ a: string, b: string }>;  // string
>T42 : Symbol(T42, Decl(inferTypes1.ts, 68, 29))
>X2 : Symbol(X2, Decl(inferTypes1.ts, 63, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 69, 15))
>b : Symbol(b, Decl(inferTypes1.ts, 69, 26))

type T43 = X2<{ a: number, b: string }>;  // string | number
>T43 : Symbol(T43, Decl(inferTypes1.ts, 69, 40))
>X2 : Symbol(X2, Decl(inferTypes1.ts, 63, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 70, 15))
>b : Symbol(b, Decl(inferTypes1.ts, 70, 26))

type T44 = X2<{ a: number, b: string, c: boolean }>;  // string | number
>T44 : Symbol(T44, Decl(inferTypes1.ts, 70, 40))
>X2 : Symbol(X2, Decl(inferTypes1.ts, 63, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 71, 15))
>b : Symbol(b, Decl(inferTypes1.ts, 71, 26))
>c : Symbol(c, Decl(inferTypes1.ts, 71, 37))

type X3<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U : never;
>X3 : Symbol(X3, Decl(inferTypes1.ts, 71, 52))
>T : Symbol(T, Decl(inferTypes1.ts, 73, 8))
>T : Symbol(T, Decl(inferTypes1.ts, 73, 8))
>a : Symbol(a, Decl(inferTypes1.ts, 73, 24))
>x : Symbol(x, Decl(inferTypes1.ts, 73, 29))
>U : Symbol(U, Decl(inferTypes1.ts, 73, 37), Decl(inferTypes1.ts, 73, 62))
>b : Symbol(b, Decl(inferTypes1.ts, 73, 49))
>x : Symbol(x, Decl(inferTypes1.ts, 73, 54))
>U : Symbol(U, Decl(inferTypes1.ts, 73, 37), Decl(inferTypes1.ts, 73, 62))
>U : Symbol(U, Decl(inferTypes1.ts, 73, 37), Decl(inferTypes1.ts, 73, 62))

type T50 = X3<{}>;  // never
>T50 : Symbol(T50, Decl(inferTypes1.ts, 73, 88))
>X3 : Symbol(X3, Decl(inferTypes1.ts, 71, 52))

type T51 = X3<{ a: (x: string) => void }>;  // never
>T51 : Symbol(T51, Decl(inferTypes1.ts, 75, 18))
>X3 : Symbol(X3, Decl(inferTypes1.ts, 71, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 76, 15))
>x : Symbol(x, Decl(inferTypes1.ts, 76, 20))

type T52 = X3<{ a: (x: string) => void, b: (x: string) => void }>;  // string
>T52 : Symbol(T52, Decl(inferTypes1.ts, 76, 42))
>X3 : Symbol(X3, Decl(inferTypes1.ts, 71, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 77, 15))
>x : Symbol(x, Decl(inferTypes1.ts, 77, 20))
>b : Symbol(b, Decl(inferTypes1.ts, 77, 39))
>x : Symbol(x, Decl(inferTypes1.ts, 77, 44))

type T53 = X3<{ a: (x: number) => void, b: (x: string) => void }>;  // never
>T53 : Symbol(T53, Decl(inferTypes1.ts, 77, 66))
>X3 : Symbol(X3, Decl(inferTypes1.ts, 71, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 78, 15))
>x : Symbol(x, Decl(inferTypes1.ts, 78, 20))
>b : Symbol(b, Decl(inferTypes1.ts, 78, 39))
>x : Symbol(x, Decl(inferTypes1.ts, 78, 44))

type T54 = X3<{ a: (x: number) => void, b: () => void }>;  // number
>T54 : Symbol(T54, Decl(inferTypes1.ts, 78, 66))
>X3 : Symbol(X3, Decl(inferTypes1.ts, 71, 52))
>a : Symbol(a, Decl(inferTypes1.ts, 79, 15))
>x : Symbol(x, Decl(inferTypes1.ts, 79, 20))
>b : Symbol(b, Decl(inferTypes1.ts, 79, 39))

type T60 = infer U;  // Error
>T60 : Symbol(T60, Decl(inferTypes1.ts, 79, 57))
>U : Symbol(U, Decl(inferTypes1.ts, 81, 16))

type T61<T> = (infer A) extends infer B ? infer C : infer D;  // Error
>T61 : Symbol(T61, Decl(inferTypes1.ts, 81, 19))
>T : Symbol(T, Decl(inferTypes1.ts, 82, 9))
>A : Symbol(A, Decl(inferTypes1.ts, 82, 20))
>B : Symbol(B, Decl(inferTypes1.ts, 82, 37))
>C : Symbol(C, Decl(inferTypes1.ts, 82, 47))
>D : Symbol(D, Decl(inferTypes1.ts, 82, 57))

type T62<T> = U extends (infer U)[] ? U : U;  // Error
>T62 : Symbol(T62, Decl(inferTypes1.ts, 82, 60))
>T : Symbol(T, Decl(inferTypes1.ts, 83, 9))
>U : Symbol(U)
>U : Symbol(U, Decl(inferTypes1.ts, 83, 30))
>U : Symbol(U, Decl(inferTypes1.ts, 83, 30))
>U : Symbol(U)

type T63<T> = T extends ((infer A) extends infer B ? infer C : infer D) ? string : number;
>T63 : Symbol(T63, Decl(inferTypes1.ts, 83, 44))
>T : Symbol(T, Decl(inferTypes1.ts, 84, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 84, 9))
>A : Symbol(A, Decl(inferTypes1.ts, 84, 31))
>B : Symbol(B, Decl(inferTypes1.ts, 84, 48))
>C : Symbol(C, Decl(inferTypes1.ts, 84, 58))
>D : Symbol(D, Decl(inferTypes1.ts, 84, 68))

type T70<T extends string> = { x: T };
>T70 : Symbol(T70, Decl(inferTypes1.ts, 84, 90))
>T : Symbol(T, Decl(inferTypes1.ts, 86, 9))
>x : Symbol(x, Decl(inferTypes1.ts, 86, 30))
>T : Symbol(T, Decl(inferTypes1.ts, 86, 9))

type T71<T> = T extends T70<infer U> ? T70<U> : never;
>T71 : Symbol(T71, Decl(inferTypes1.ts, 86, 38))
>T : Symbol(T, Decl(inferTypes1.ts, 87, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 87, 9))
>T70 : Symbol(T70, Decl(inferTypes1.ts, 84, 90))
>U : Symbol(U, Decl(inferTypes1.ts, 87, 33))
>T70 : Symbol(T70, Decl(inferTypes1.ts, 84, 90))
>U : Symbol(U, Decl(inferTypes1.ts, 87, 33))

type T72<T extends number> = { y: T };
>T72 : Symbol(T72, Decl(inferTypes1.ts, 87, 54))
>T : Symbol(T, Decl(inferTypes1.ts, 89, 9))
>y : Symbol(y, Decl(inferTypes1.ts, 89, 30))
>T : Symbol(T, Decl(inferTypes1.ts, 89, 9))

type T73<T> = T extends T72<infer U> ? T70<U> : never;  // Error
>T73 : Symbol(T73, Decl(inferTypes1.ts, 89, 38))
>T : Symbol(T, Decl(inferTypes1.ts, 90, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 90, 9))
>T72 : Symbol(T72, Decl(inferTypes1.ts, 87, 54))
>U : Symbol(U, Decl(inferTypes1.ts, 90, 33))
>T70 : Symbol(T70, Decl(inferTypes1.ts, 84, 90))
>U : Symbol(U, Decl(inferTypes1.ts, 90, 33))

type T74<T extends number, U extends string> = { x: T, y: U };
>T74 : Symbol(T74, Decl(inferTypes1.ts, 90, 54))
>T : Symbol(T, Decl(inferTypes1.ts, 92, 9))
>U : Symbol(U, Decl(inferTypes1.ts, 92, 26))
>x : Symbol(x, Decl(inferTypes1.ts, 92, 48))
>T : Symbol(T, Decl(inferTypes1.ts, 92, 9))
>y : Symbol(y, Decl(inferTypes1.ts, 92, 54))
>U : Symbol(U, Decl(inferTypes1.ts, 92, 26))

type T75<T> = T extends T74<infer U, infer U> ? T70<U> | T72<U> | T74<U, U> : never;
>T75 : Symbol(T75, Decl(inferTypes1.ts, 92, 62))
>T : Symbol(T, Decl(inferTypes1.ts, 93, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 93, 9))
>T74 : Symbol(T74, Decl(inferTypes1.ts, 90, 54))
>U : Symbol(U, Decl(inferTypes1.ts, 93, 33), Decl(inferTypes1.ts, 93, 42))
>U : Symbol(U, Decl(inferTypes1.ts, 93, 33), Decl(inferTypes1.ts, 93, 42))
>T70 : Symbol(T70, Decl(inferTypes1.ts, 84, 90))
>U : Symbol(U, Decl(inferTypes1.ts, 93, 33), Decl(inferTypes1.ts, 93, 42))
>T72 : Symbol(T72, Decl(inferTypes1.ts, 87, 54))
>U : Symbol(U, Decl(inferTypes1.ts, 93, 33), Decl(inferTypes1.ts, 93, 42))
>T74 : Symbol(T74, Decl(inferTypes1.ts, 90, 54))
>U : Symbol(U, Decl(inferTypes1.ts, 93, 33), Decl(inferTypes1.ts, 93, 42))
>U : Symbol(U, Decl(inferTypes1.ts, 93, 33), Decl(inferTypes1.ts, 93, 42))

type T76<T extends T[], U extends T> = { x: T };
>T76 : Symbol(T76, Decl(inferTypes1.ts, 93, 84))
>T : Symbol(T, Decl(inferTypes1.ts, 95, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 95, 9))
>U : Symbol(U, Decl(inferTypes1.ts, 95, 23))
>T : Symbol(T, Decl(inferTypes1.ts, 95, 9))
>x : Symbol(x, Decl(inferTypes1.ts, 95, 40))
>T : Symbol(T, Decl(inferTypes1.ts, 95, 9))

type T77<T> = T extends T76<infer X, infer Y> ? T76<X, Y> : never;
>T77 : Symbol(T77, Decl(inferTypes1.ts, 95, 48))
>T : Symbol(T, Decl(inferTypes1.ts, 96, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 96, 9))
>T76 : Symbol(T76, Decl(inferTypes1.ts, 93, 84))
>X : Symbol(X, Decl(inferTypes1.ts, 96, 33))
>Y : Symbol(Y, Decl(inferTypes1.ts, 96, 42))
>T76 : Symbol(T76, Decl(inferTypes1.ts, 93, 84))
>X : Symbol(X, Decl(inferTypes1.ts, 96, 33))
>Y : Symbol(Y, Decl(inferTypes1.ts, 96, 42))

type T78<T> = T extends T76<infer X, infer X> ? T76<X, X> : never;
>T78 : Symbol(T78, Decl(inferTypes1.ts, 96, 66))
>T : Symbol(T, Decl(inferTypes1.ts, 97, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 97, 9))
>T76 : Symbol(T76, Decl(inferTypes1.ts, 93, 84))
>X : Symbol(X, Decl(inferTypes1.ts, 97, 33), Decl(inferTypes1.ts, 97, 42))
>X : Symbol(X, Decl(inferTypes1.ts, 97, 33), Decl(inferTypes1.ts, 97, 42))
>T76 : Symbol(T76, Decl(inferTypes1.ts, 93, 84))
>X : Symbol(X, Decl(inferTypes1.ts, 97, 33), Decl(inferTypes1.ts, 97, 42))
>X : Symbol(X, Decl(inferTypes1.ts, 97, 33), Decl(inferTypes1.ts, 97, 42))

type Foo<T extends string, U extends T> = [T, U];
>Foo : Symbol(Foo, Decl(inferTypes1.ts, 97, 66))
>T : Symbol(T, Decl(inferTypes1.ts, 99, 9))
>U : Symbol(U, Decl(inferTypes1.ts, 99, 26))
>T : Symbol(T, Decl(inferTypes1.ts, 99, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 99, 9))
>U : Symbol(U, Decl(inferTypes1.ts, 99, 26))

type Bar<T> = T extends Foo<infer X, infer Y> ? Foo<X, Y> : never;
>Bar : Symbol(Bar, Decl(inferTypes1.ts, 99, 49))
>T : Symbol(T, Decl(inferTypes1.ts, 100, 9))
>T : Symbol(T, Decl(inferTypes1.ts, 100, 9))
>Foo : Symbol(Foo, Decl(inferTypes1.ts, 97, 66))
>X : Symbol(X, Decl(inferTypes1.ts, 100, 33))
>Y : Symbol(Y, Decl(inferTypes1.ts, 100, 42))
>Foo : Symbol(Foo, Decl(inferTypes1.ts, 97, 66))
>X : Symbol(X, Decl(inferTypes1.ts, 100, 33))
>Y : Symbol(Y, Decl(inferTypes1.ts, 100, 42))

type T90 = Bar<[string, string]>;  // [string, string]
>T90 : Symbol(T90, Decl(inferTypes1.ts, 100, 66))
>Bar : Symbol(Bar, Decl(inferTypes1.ts, 99, 49))

type T91 = Bar<[string, "a"]>;  // [string, "a"]
>T91 : Symbol(T91, Decl(inferTypes1.ts, 102, 33))
>Bar : Symbol(Bar, Decl(inferTypes1.ts, 99, 49))

type T92 = Bar<[string, "a"] & { x: string }>;  // [string, "a"]
>T92 : Symbol(T92, Decl(inferTypes1.ts, 103, 30))
>Bar : Symbol(Bar, Decl(inferTypes1.ts, 99, 49))
>x : Symbol(x, Decl(inferTypes1.ts, 104, 32))

type T93 = Bar<["a", string]>;  // never
>T93 : Symbol(T93, Decl(inferTypes1.ts, 104, 46))
>Bar : Symbol(Bar, Decl(inferTypes1.ts, 99, 49))

type T94 = Bar<[number, number]>;  // never
>T94 : Symbol(T94, Decl(inferTypes1.ts, 105, 30))
>Bar : Symbol(Bar, Decl(inferTypes1.ts, 99, 49))

// Example from #21496

type JsonifiedObject<T extends object> = { [K in keyof T]: Jsonified<T[K]> };
>JsonifiedObject : Symbol(JsonifiedObject, Decl(inferTypes1.ts, 106, 33))
>T : Symbol(T, Decl(inferTypes1.ts, 110, 21))
>K : Symbol(K, Decl(inferTypes1.ts, 110, 44))
>T : Symbol(T, Decl(inferTypes1.ts, 110, 21))
>Jsonified : Symbol(Jsonified, Decl(inferTypes1.ts, 110, 77))
>T : Symbol(T, Decl(inferTypes1.ts, 110, 21))
>K : Symbol(K, Decl(inferTypes1.ts, 110, 44))

type Jsonified<T> =
>Jsonified : Symbol(Jsonified, Decl(inferTypes1.ts, 110, 77))
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))

    T extends string | number | boolean | null ? T
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))

    : T extends undefined | Function ? never // undefined and functions are removed
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    : T extends { toJSON(): infer R } ? R // toJSON is called if it exists (e.g. Date)
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))
>toJSON : Symbol(toJSON, Decl(inferTypes1.ts, 115, 17))
>R : Symbol(R, Decl(inferTypes1.ts, 115, 33))
>R : Symbol(R, Decl(inferTypes1.ts, 115, 33))

    : T extends object ? JsonifiedObject<T>
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))
>JsonifiedObject : Symbol(JsonifiedObject, Decl(inferTypes1.ts, 106, 33))
>T : Symbol(T, Decl(inferTypes1.ts, 112, 15))

    : "what is this";

type Example = {
>Example : Symbol(Example, Decl(inferTypes1.ts, 117, 21))

    str: "literalstring",
>str : Symbol(str, Decl(inferTypes1.ts, 119, 16))

    fn: () => void,
>fn : Symbol(fn, Decl(inferTypes1.ts, 120, 25))

    date: Date,
>date : Symbol(date, Decl(inferTypes1.ts, 121, 19))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    customClass: MyClass,
>customClass : Symbol(customClass, Decl(inferTypes1.ts, 122, 15))
>MyClass : Symbol(MyClass, Decl(inferTypes1.ts, 129, 1))

    obj: {
>obj : Symbol(obj, Decl(inferTypes1.ts, 123, 25))

        prop: "property",
>prop : Symbol(prop, Decl(inferTypes1.ts, 124, 10))

        clz: MyClass,
>clz : Symbol(clz, Decl(inferTypes1.ts, 125, 25))
>MyClass : Symbol(MyClass, Decl(inferTypes1.ts, 129, 1))

        nested: { attr: Date }
>nested : Symbol(nested, Decl(inferTypes1.ts, 126, 21))
>attr : Symbol(attr, Decl(inferTypes1.ts, 127, 17))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    },
}

declare class MyClass {
>MyClass : Symbol(MyClass, Decl(inferTypes1.ts, 129, 1))

    toJSON(): "correct";
>toJSON : Symbol(MyClass.toJSON, Decl(inferTypes1.ts, 131, 23))
}

type JsonifiedExample = Jsonified<Example>;
>JsonifiedExample : Symbol(JsonifiedExample, Decl(inferTypes1.ts, 133, 1))
>Jsonified : Symbol(Jsonified, Decl(inferTypes1.ts, 110, 77))
>Example : Symbol(Example, Decl(inferTypes1.ts, 117, 21))

declare let ex: JsonifiedExample;
>ex : Symbol(ex, Decl(inferTypes1.ts, 136, 11))
>JsonifiedExample : Symbol(JsonifiedExample, Decl(inferTypes1.ts, 133, 1))

const z1: "correct" = ex.customClass;
>z1 : Symbol(z1, Decl(inferTypes1.ts, 137, 5))
>ex.customClass : Symbol(customClass, Decl(inferTypes1.ts, 122, 15))
>ex : Symbol(ex, Decl(inferTypes1.ts, 136, 11))
>customClass : Symbol(customClass, Decl(inferTypes1.ts, 122, 15))

const z2: string = ex.obj.nested.attr;
>z2 : Symbol(z2, Decl(inferTypes1.ts, 138, 5))
>ex.obj.nested.attr : Symbol(attr, Decl(inferTypes1.ts, 127, 17))
>ex.obj.nested : Symbol(nested, Decl(inferTypes1.ts, 126, 21))
>ex.obj : Symbol(obj, Decl(inferTypes1.ts, 123, 25))
>ex : Symbol(ex, Decl(inferTypes1.ts, 136, 11))
>obj : Symbol(obj, Decl(inferTypes1.ts, 123, 25))
>nested : Symbol(nested, Decl(inferTypes1.ts, 126, 21))
>attr : Symbol(attr, Decl(inferTypes1.ts, 127, 17))

// Repros from #21631

type A1<T, U extends A1<any, any>> = [T, U];
>A1 : Symbol(A1, Decl(inferTypes1.ts, 138, 38))
>T : Symbol(T, Decl(inferTypes1.ts, 142, 8))
>U : Symbol(U, Decl(inferTypes1.ts, 142, 10))
>A1 : Symbol(A1, Decl(inferTypes1.ts, 138, 38))
>T : Symbol(T, Decl(inferTypes1.ts, 142, 8))
>U : Symbol(U, Decl(inferTypes1.ts, 142, 10))

type B1<S> = S extends A1<infer T, infer U> ? [T, U] : never;
>B1 : Symbol(B1, Decl(inferTypes1.ts, 142, 44))
>S : Symbol(S, Decl(inferTypes1.ts, 143, 8))
>S : Symbol(S, Decl(inferTypes1.ts, 143, 8))
>A1 : Symbol(A1, Decl(inferTypes1.ts, 138, 38))
>T : Symbol(T, Decl(inferTypes1.ts, 143, 31))
>U : Symbol(U, Decl(inferTypes1.ts, 143, 40))
>T : Symbol(T, Decl(inferTypes1.ts, 143, 31))
>U : Symbol(U, Decl(inferTypes1.ts, 143, 40))

type A2<T, U extends void> = [T, U];
>A2 : Symbol(A2, Decl(inferTypes1.ts, 143, 61))
>T : Symbol(T, Decl(inferTypes1.ts, 145, 8))
>U : Symbol(U, Decl(inferTypes1.ts, 145, 10))
>T : Symbol(T, Decl(inferTypes1.ts, 145, 8))
>U : Symbol(U, Decl(inferTypes1.ts, 145, 10))

type B2<S> = S extends A2<infer T, infer U> ? [T, U] : never;
>B2 : Symbol(B2, Decl(inferTypes1.ts, 145, 36))
>S : Symbol(S, Decl(inferTypes1.ts, 146, 8))
>S : Symbol(S, Decl(inferTypes1.ts, 146, 8))
>A2 : Symbol(A2, Decl(inferTypes1.ts, 143, 61))
>T : Symbol(T, Decl(inferTypes1.ts, 146, 31))
>U : Symbol(U, Decl(inferTypes1.ts, 146, 40))
>T : Symbol(T, Decl(inferTypes1.ts, 146, 31))
>U : Symbol(U, Decl(inferTypes1.ts, 146, 40))

type C2<S, U extends void> = S extends A2<infer T, U> ? [T, U] : never;
>C2 : Symbol(C2, Decl(inferTypes1.ts, 146, 61))
>S : Symbol(S, Decl(inferTypes1.ts, 147, 8))
>U : Symbol(U, Decl(inferTypes1.ts, 147, 10))
>S : Symbol(S, Decl(inferTypes1.ts, 147, 8))
>A2 : Symbol(A2, Decl(inferTypes1.ts, 143, 61))
>T : Symbol(T, Decl(inferTypes1.ts, 147, 47))
>U : Symbol(U, Decl(inferTypes1.ts, 147, 10))
>T : Symbol(T, Decl(inferTypes1.ts, 147, 47))
>U : Symbol(U, Decl(inferTypes1.ts, 147, 10))

// Repro from #21735

type A<T> = T extends string ? { [P in T]: void; } : T;
>A : Symbol(A, Decl(inferTypes1.ts, 147, 71))
>T : Symbol(T, Decl(inferTypes1.ts, 151, 7))
>T : Symbol(T, Decl(inferTypes1.ts, 151, 7))
>P : Symbol(P, Decl(inferTypes1.ts, 151, 34))
>T : Symbol(T, Decl(inferTypes1.ts, 151, 7))
>T : Symbol(T, Decl(inferTypes1.ts, 151, 7))

type B<T> = string extends T ? { [P in T]: void; } : T;  // Error
>B : Symbol(B, Decl(inferTypes1.ts, 151, 55))
>T : Symbol(T, Decl(inferTypes1.ts, 152, 7))
>T : Symbol(T, Decl(inferTypes1.ts, 152, 7))
>P : Symbol(P, Decl(inferTypes1.ts, 152, 34))
>T : Symbol(T, Decl(inferTypes1.ts, 152, 7))
>T : Symbol(T, Decl(inferTypes1.ts, 152, 7))

// Repro from #22302

type MatchingKeys<T, U, K extends keyof T = keyof T> =
>MatchingKeys : Symbol(MatchingKeys, Decl(inferTypes1.ts, 152, 55))
>T : Symbol(T, Decl(inferTypes1.ts, 156, 18))
>U : Symbol(U, Decl(inferTypes1.ts, 156, 20))
>K : Symbol(K, Decl(inferTypes1.ts, 156, 23))
>T : Symbol(T, Decl(inferTypes1.ts, 156, 18))
>T : Symbol(T, Decl(inferTypes1.ts, 156, 18))

    K extends keyof T ? T[K] extends U ? K : never : never;
>K : Symbol(K, Decl(inferTypes1.ts, 156, 23))
>T : Symbol(T, Decl(inferTypes1.ts, 156, 18))
>T : Symbol(T, Decl(inferTypes1.ts, 156, 18))
>K : Symbol(K, Decl(inferTypes1.ts, 156, 23))
>U : Symbol(U, Decl(inferTypes1.ts, 156, 20))
>K : Symbol(K, Decl(inferTypes1.ts, 156, 23))

type VoidKeys<T> = MatchingKeys<T, void>;
>VoidKeys : Symbol(VoidKeys, Decl(inferTypes1.ts, 157, 59))
>T : Symbol(T, Decl(inferTypes1.ts, 159, 14))
>MatchingKeys : Symbol(MatchingKeys, Decl(inferTypes1.ts, 152, 55))
>T : Symbol(T, Decl(inferTypes1.ts, 159, 14))

interface test {
>test : Symbol(test, Decl(inferTypes1.ts, 159, 41))

    a: 1,
>a : Symbol(test.a, Decl(inferTypes1.ts, 161, 16))

    b: void
>b : Symbol(test.b, Decl(inferTypes1.ts, 162, 9))
}

type T80 = MatchingKeys<test, void>;
>T80 : Symbol(T80, Decl(inferTypes1.ts, 164, 1))
>MatchingKeys : Symbol(MatchingKeys, Decl(inferTypes1.ts, 152, 55))
>test : Symbol(test, Decl(inferTypes1.ts, 159, 41))

type T81 = VoidKeys<test>;
>T81 : Symbol(T81, Decl(inferTypes1.ts, 166, 36))
>VoidKeys : Symbol(VoidKeys, Decl(inferTypes1.ts, 157, 59))
>test : Symbol(test, Decl(inferTypes1.ts, 159, 41))

// Repro from #22221

type MustBeString<T extends string> = T;
>MustBeString : Symbol(MustBeString, Decl(inferTypes1.ts, 167, 26))
>T : Symbol(T, Decl(inferTypes1.ts, 171, 18))
>T : Symbol(T, Decl(inferTypes1.ts, 171, 18))

type EnsureIsString<T> = T extends MustBeString<infer U> ? U : never;
>EnsureIsString : Symbol(EnsureIsString, Decl(inferTypes1.ts, 171, 40))
>T : Symbol(T, Decl(inferTypes1.ts, 172, 20))
>T : Symbol(T, Decl(inferTypes1.ts, 172, 20))
>MustBeString : Symbol(MustBeString, Decl(inferTypes1.ts, 167, 26))
>U : Symbol(U, Decl(inferTypes1.ts, 172, 53))
>U : Symbol(U, Decl(inferTypes1.ts, 172, 53))

type Test1 = EnsureIsString<"hello">;  // "hello"
>Test1 : Symbol(Test1, Decl(inferTypes1.ts, 172, 69))
>EnsureIsString : Symbol(EnsureIsString, Decl(inferTypes1.ts, 171, 40))

type Test2 = EnsureIsString<42>;  // never
>Test2 : Symbol(Test2, Decl(inferTypes1.ts, 174, 37))
>EnsureIsString : Symbol(EnsureIsString, Decl(inferTypes1.ts, 171, 40))

// Repros from #26856

function invoker <K extends string | number | symbol, A extends any[]> (key: K, ...args: A) {
>invoker : Symbol(invoker, Decl(inferTypes1.ts, 175, 32))
>K : Symbol(K, Decl(inferTypes1.ts, 179, 18))
>A : Symbol(A, Decl(inferTypes1.ts, 179, 53))
>key : Symbol(key, Decl(inferTypes1.ts, 179, 72))
>K : Symbol(K, Decl(inferTypes1.ts, 179, 18))
>args : Symbol(args, Decl(inferTypes1.ts, 179, 79))
>A : Symbol(A, Decl(inferTypes1.ts, 179, 53))

    return <T extends Record<K, (...args: A) => any>> (obj: T): ReturnType<T[K]> => obj[key](...args)
>T : Symbol(T, Decl(inferTypes1.ts, 180, 12))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>K : Symbol(K, Decl(inferTypes1.ts, 179, 18))
>args : Symbol(args, Decl(inferTypes1.ts, 180, 33))
>A : Symbol(A, Decl(inferTypes1.ts, 179, 53))
>obj : Symbol(obj, Decl(inferTypes1.ts, 180, 55))
>T : Symbol(T, Decl(inferTypes1.ts, 180, 12))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(inferTypes1.ts, 180, 12))
>K : Symbol(K, Decl(inferTypes1.ts, 179, 18))
>obj : Symbol(obj, Decl(inferTypes1.ts, 180, 55))
>key : Symbol(key, Decl(inferTypes1.ts, 179, 72))
>args : Symbol(args, Decl(inferTypes1.ts, 179, 79))
}

const result = invoker('test', true)({ test: (a: boolean) => 123 })
>result : Symbol(result, Decl(inferTypes1.ts, 183, 5))
>invoker : Symbol(invoker, Decl(inferTypes1.ts, 175, 32))
>test : Symbol(test, Decl(inferTypes1.ts, 183, 38))
>a : Symbol(a, Decl(inferTypes1.ts, 183, 46))

type Foo2<A extends any[]> = ReturnType<(...args: A) => string>;
>Foo2 : Symbol(Foo2, Decl(inferTypes1.ts, 183, 67))
>A : Symbol(A, Decl(inferTypes1.ts, 185, 10))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>args : Symbol(args, Decl(inferTypes1.ts, 185, 41))
>A : Symbol(A, Decl(inferTypes1.ts, 185, 10))

