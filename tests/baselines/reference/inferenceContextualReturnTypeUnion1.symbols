//// [tests/cases/compiler/inferenceContextualReturnTypeUnion1.ts] ////

=== inferenceContextualReturnTypeUnion1.ts ===
// https://github.com/microsoft/TypeScript/issues/50719

declare function useCallback1<T extends Function>(fn: T): T;
>useCallback1 : Symbol(useCallback1, Decl(inferenceContextualReturnTypeUnion1.ts, 0, 0))
>T : Symbol(T, Decl(inferenceContextualReturnTypeUnion1.ts, 2, 30))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>fn : Symbol(fn, Decl(inferenceContextualReturnTypeUnion1.ts, 2, 50))
>T : Symbol(T, Decl(inferenceContextualReturnTypeUnion1.ts, 2, 30))
>T : Symbol(T, Decl(inferenceContextualReturnTypeUnion1.ts, 2, 30))

declare function ex2(callback?: (x: number) => void): void;
>ex2 : Symbol(ex2, Decl(inferenceContextualReturnTypeUnion1.ts, 2, 60))
>callback : Symbol(callback, Decl(inferenceContextualReturnTypeUnion1.ts, 4, 21))
>x : Symbol(x, Decl(inferenceContextualReturnTypeUnion1.ts, 4, 33))

ex2(useCallback1((x) => {}));
>ex2 : Symbol(ex2, Decl(inferenceContextualReturnTypeUnion1.ts, 2, 60))
>useCallback1 : Symbol(useCallback1, Decl(inferenceContextualReturnTypeUnion1.ts, 0, 0))
>x : Symbol(x, Decl(inferenceContextualReturnTypeUnion1.ts, 5, 18))

declare function ex3(callback: ((x: number) => void) | 5): void;
>ex3 : Symbol(ex3, Decl(inferenceContextualReturnTypeUnion1.ts, 5, 29))
>callback : Symbol(callback, Decl(inferenceContextualReturnTypeUnion1.ts, 7, 21))
>x : Symbol(x, Decl(inferenceContextualReturnTypeUnion1.ts, 7, 33))

ex3(useCallback1((x) => {}));
>ex3 : Symbol(ex3, Decl(inferenceContextualReturnTypeUnion1.ts, 5, 29))
>useCallback1 : Symbol(useCallback1, Decl(inferenceContextualReturnTypeUnion1.ts, 0, 0))
>x : Symbol(x, Decl(inferenceContextualReturnTypeUnion1.ts, 8, 18))

// https://github.com/microsoft/TypeScript/issues/41461

declare function useCallback2<T extends (...args: any[]) => any>(
>useCallback2 : Symbol(useCallback2, Decl(inferenceContextualReturnTypeUnion1.ts, 8, 29))
>T : Symbol(T, Decl(inferenceContextualReturnTypeUnion1.ts, 12, 30))
>args : Symbol(args, Decl(inferenceContextualReturnTypeUnion1.ts, 12, 41))

  callback: T,
>callback : Symbol(callback, Decl(inferenceContextualReturnTypeUnion1.ts, 12, 65))
>T : Symbol(T, Decl(inferenceContextualReturnTypeUnion1.ts, 12, 30))

): T;
>T : Symbol(T, Decl(inferenceContextualReturnTypeUnion1.ts, 12, 30))

const test: ((x: string) => void) | undefined = useCallback2((x) => {});
>test : Symbol(test, Decl(inferenceContextualReturnTypeUnion1.ts, 15, 5))
>x : Symbol(x, Decl(inferenceContextualReturnTypeUnion1.ts, 15, 14))
>useCallback2 : Symbol(useCallback2, Decl(inferenceContextualReturnTypeUnion1.ts, 8, 29))
>x : Symbol(x, Decl(inferenceContextualReturnTypeUnion1.ts, 15, 62))

