//// [tests/cases/compiler/inferenceContextualReturnTypeUnion2.ts] ////

=== inferenceContextualReturnTypeUnion2.ts ===
type Query = (
>Query : Query
>      : ^^^^^

  container: HTMLElement,
>container : HTMLElement
>          : ^^^^^^^^^^^

  ...args: any[]
>args : any[]
>     : ^^^^^

) =>
  | Error
  | HTMLElement
  | HTMLElement[]
  | Promise<HTMLElement[]>
  | Promise<HTMLElement>
  | null;

interface Queries {
  [T: string]: Query;
>T : string
>  : ^^^^^^
}

type FindByText<T extends HTMLElement = HTMLElement> = (
>FindByText : FindByText<T>
>           : ^^^^^^^^^^^^^

  container: HTMLElement,
>container : HTMLElement
>          : ^^^^^^^^^^^

  text: string,
>text : string
>     : ^^^^^^

) => Promise<T>;

declare function findByLabelText<T extends HTMLElement = HTMLElement>(
>findByLabelText : <T extends HTMLElement = HTMLElement>(container: HTMLElement, text: string) => ReturnType<FindByText<T>>
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                         

  ...args: Parameters<FindByText<T>>
>args : [container: HTMLElement, text: string]
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

): ReturnType<FindByText<T>>;

const queries = {
>queries : { findByLabelText: <T extends HTMLElement = HTMLElement>(container: HTMLElement, text: string) => ReturnType<FindByText<T>>; }
>        : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                         ^^^
>{  findByLabelText,} : { findByLabelText: <T extends HTMLElement = HTMLElement>(container: HTMLElement, text: string) => ReturnType<FindByText<T>>; }
>                     : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                         ^^^

  findByLabelText,
>findByLabelText : <T extends HTMLElement = HTMLElement>(container: HTMLElement, text: string) => ReturnType<FindByText<T>>
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                         

};

type MapQueries<Q extends Queries = typeof queries> = {
>MapQueries : MapQueries<Q>
>           : ^^^^^^^^^^^^^
>queries : { findByLabelText: <T extends HTMLElement = HTMLElement>(container: HTMLElement, text: string) => ReturnType<FindByText<T>>; }
>        : ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                         ^^^

  [P in keyof Q]: Q[P];
};

