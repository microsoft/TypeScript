//// [tests/cases/compiler/inferenceFromUnionCombinedSingleSignature1.ts] ////

=== inferenceFromUnionCombinedSingleSignature1.ts ===
// https://github.com/microsoft/TypeScript/issues/58468

declare const fn: (() => void) | ((a: number) => void);
>fn : (() => void) | ((a: number) => void)
>   : ^^^^^^^    ^^^^^^ ^^      ^^^^^    ^
>a : number
>  : ^^^^^^

declare const x: number;
>x : number
>  : ^^^^^^

declare const y: any;
>y : any

fn.call(null, x);
>fn.call(null, x) : void
>                 : ^^^^
>fn.call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
>        : ^ ^^ ^^^^^^^^^^^^^^^^ ^^    ^^                          ^^       ^^ ^^^^^    ^^ ^^^^^^
>fn : (() => void) | ((a: number) => void)
>   : ^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^
>call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
>     : ^ ^^ ^^^^^^^^^^^^^^^^ ^^    ^^                          ^^       ^^ ^^^^^    ^^ ^^^^^^
>x : number
>  : ^^^^^^

fn.call(null, y);
>fn.call(null, y) : void
>                 : ^^^^
>fn.call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
>        : ^ ^^ ^^^^^^^^^^^^^^^^ ^^    ^^                          ^^       ^^ ^^^^^    ^^ ^^^^^^
>fn : (() => void) | ((a: number) => void)
>   : ^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^
>call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
>     : ^ ^^ ^^^^^^^^^^^^^^^^ ^^    ^^                          ^^       ^^ ^^^^^    ^^ ^^^^^^
>y : any

export {};

