//// [tests/cases/compiler/inferenceOfNullableObjectTypesWithCommonBase.ts] ////

=== inferenceOfNullableObjectTypesWithCommonBase.ts ===
function equal<T>(a: T, b: T) { }
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>a : T
>  : ^
>b : T
>  : ^

let v = null!;
>v : never
>  : ^^^^^
>null! : never
>      : ^^^^^

// Object types with common base types

type B = { foo: string }
>B : B
>  : ^
>foo : string
>    : ^^^^^^

type D = { foo: string; bar: number }
>D : D
>  : ^
>foo : string
>    : ^^^^^^
>bar : number
>    : ^^^^^^

equal(v as B, v as undefined | D)
>equal(v as B, v as undefined | D) : void
>                                  : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^
>v as undefined | D : D | undefined
>                   : ^^^^^^^^^^^^^
>v : never
>  : ^^^^^

equal(v as undefined | D, v as B)
>equal(v as undefined | D, v as B) : void
>                                  : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as undefined | D : D | undefined
>                   : ^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^

equal<undefined | B>(v as B, v as undefined | D)
>equal<undefined | B>(v as B, v as undefined | D) : void
>                                                 : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^
>v as undefined | D : D | undefined
>                   : ^^^^^^^^^^^^^
>v : never
>  : ^^^^^

equal<undefined | B>(v as undefined | D, v as B)
>equal<undefined | B>(v as undefined | D, v as B) : void
>                                                 : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as undefined | D : D | undefined
>                   : ^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^

equal(v as B, v as undefined)
>equal(v as B, v as undefined) : void
>                              : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^
>v as undefined : undefined
>               : ^^^^^^^^^
>v : never
>  : ^^^^^

equal(v as undefined, v as B)
>equal(v as undefined, v as B) : void
>                              : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as undefined : undefined
>               : ^^^^^^^^^
>v : never
>  : ^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^

equal(v as B, v as D)
>equal(v as B, v as D) : void
>                      : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^
>v as D : D
>       : ^
>v : never
>  : ^^^^^

equal(v as D, v as B)
>equal(v as D, v as B) : void
>                      : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as D : D
>       : ^
>v : never
>  : ^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^

equal(v as B, v as B | undefined)
>equal(v as B, v as B | undefined) : void
>                                  : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^
>v as B | undefined : B | undefined
>                   : ^^^^^^^^^^^^^
>v : never
>  : ^^^^^

equal(v as B | undefined, v as B)
>equal(v as B | undefined, v as B) : void
>                                  : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as B | undefined : B | undefined
>                   : ^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>v as B : B
>       : ^
>v : never
>  : ^^^^^

equal(v as 'a' | undefined, v as 'b');
>equal(v as 'a' | undefined, v as 'b') : void
>                                      : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as 'a' | undefined : "a" | undefined
>                     : ^^^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>v as 'b' : "b"
>         : ^^^
>v : never
>  : ^^^^^

equal(v as 'a', v as 'b' | undefined);
>equal(v as 'a', v as 'b' | undefined) : void
>                                      : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as 'a' : "a"
>         : ^^^
>v : never
>  : ^^^^^
>v as 'b' | undefined : "b" | undefined
>                     : ^^^^^^^^^^^^^^^
>v : never
>  : ^^^^^

equal(v as 'a' | undefined, v as 'b' | null);
>equal(v as 'a' | undefined, v as 'b' | null) : void
>                                             : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as 'a' | undefined : "a" | undefined
>                     : ^^^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>v as 'b' | null : "b" | null
>                : ^^^^^^^^^^
>v : never
>  : ^^^^^

equal(v as 'a' | null, v as 'b' | undefined);
>equal(v as 'a' | null, v as 'b' | undefined) : void
>                                             : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as 'a' | null : "a" | null
>                : ^^^^^^^^^^
>v : never
>  : ^^^^^
>v as 'b' | undefined : "b" | undefined
>                     : ^^^^^^^^^^^^^^^
>v : never
>  : ^^^^^

equal(v as string, v as string & { tag: 'foo' } | undefined);
>equal(v as string, v as string & { tag: 'foo' } | undefined) : void
>                                                             : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as string : string
>            : ^^^^^^
>v : never
>  : ^^^^^
>v as string & { tag: 'foo' } | undefined : (string & { tag: "foo"; }) | undefined
>                                         : ^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>tag : "foo"
>    : ^^^^^

equal(v as string & { tag: 'foo' } | undefined, v as string);
>equal(v as string & { tag: 'foo' } | undefined, v as string) : void
>                                                             : ^^^^
>equal : <T>(a: T, b: T) => void
>      : ^ ^^ ^^ ^^ ^^ ^^^^^^^^^
>v as string & { tag: 'foo' } | undefined : (string & { tag: "foo"; }) | undefined
>                                         : ^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^
>v : never
>  : ^^^^^
>tag : "foo"
>    : ^^^^^
>v as string : string
>            : ^^^^^^
>v : never
>  : ^^^^^

