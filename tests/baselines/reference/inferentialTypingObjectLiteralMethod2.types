//// [tests/cases/compiler/inferentialTypingObjectLiteralMethod2.ts] ////

=== inferentialTypingObjectLiteralMethod2.ts ===
interface Int<T, U> {
    [s: string]: (x: T) => U;
>s : string
>  : ^^^^^^
>x : T
>  : ^
}
declare function foo<T, U>(x: T, y: Int<T, U>, z: Int<U, T>): T;
>foo : <T, U>(x: T, y: Int<T, U>, z: Int<U, T>) => T
>    : ^ ^^ ^^ ^^ ^^ ^^         ^^ ^^         ^^^^^ 
>x : T
>  : ^
>y : Int<T, U>
>  : ^^^^^^^^^
>z : Int<U, T>
>  : ^^^^^^^^^

foo("", { method(p1) { return p1.length } }, { method(p2) { return undefined } });
>foo("", { method(p1) { return p1.length } }, { method(p2) { return undefined } }) : string
>                                                                                  : ^^^^^^
>foo : <T, U>(x: T, y: Int<T, U>, z: Int<U, T>) => T
>    : ^ ^^ ^^ ^^ ^^ ^^         ^^ ^^         ^^^^^ 
>"" : ""
>   : ^^
>{ method(p1) { return p1.length } } : { method(p1: string): number; }
>                                    : ^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^
>method : (p1: string) => number
>       : ^  ^^^^^^^^^^^^^^^^^^^
>p1 : string
>   : ^^^^^^
>p1.length : number
>          : ^^^^^^
>p1 : string
>   : ^^^^^^
>length : number
>       : ^^^^^^
>{ method(p2) { return undefined } } : { method(p2: number): any; }
>                                    : ^^^^^^^^^  ^^^^^^^^^^^^^^^^^
>method : (p2: number) => any
>       : ^  ^^^^^^^^^^^^^^^^
>p2 : number
>   : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

