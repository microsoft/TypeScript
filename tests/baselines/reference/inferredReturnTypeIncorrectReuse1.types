//// [tests/cases/compiler/inferredReturnTypeIncorrectReuse1.ts] ////

=== inferredReturnTypeIncorrectReuse1.ts ===
export type inferPipe<t, pipe> =
>inferPipe : inferPipe<t, pipe>
>          : ^^^^^^^^^^^^^^^^^^

    pipe extends (In: t) => unknown ? (In: t) => ReturnType<pipe> : never
>In : t
>   : ^
>In : t
>   : ^

interface Type<t> {
    pipe<fn extends (In: t) => unknown>(fn: fn): Type<inferPipe<t, fn>>
>pipe : <fn extends (In: t) => unknown>(fn: fn) => Type<inferPipe<t, fn>>
>     : ^  ^^^^^^^^^                  ^^  ^^  ^^^^^                      
>In : t
>   : ^
>fn : fn
>   : ^^
}

declare const t: Type<string>
>t : Type<string>
>  : ^^^^^^^^^^^^

/** Type<(In: string) => number> */
export const out = t.pipe(s => parseInt(s))
>out : Type<(In: string) => number>
>    : ^^^^^^  ^^^^^^^^^^^^^^^^^^^^
>t.pipe(s => parseInt(s)) : Type<(In: string) => number>
>                         : ^^^^^^  ^^^^^^^^^^^^^^^^^^^^
>t.pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe<string, fn_1>>
>       : ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^       ^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>t : Type<string>
>  : ^^^^^^^^^^^^
>pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe<string, fn_1>>
>     : ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^       ^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>s => parseInt(s) : (s: string) => number
>                 : ^ ^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>parseInt(s) : number
>            : ^^^^^^
>parseInt : (string: string, radix?: number) => number
>         : ^      ^^      ^^     ^^^      ^^^^^      
>s : string
>  : ^^^^^^

export type inferPipe2<t, pipe> =
>inferPipe2 : inferPipe2<t, pipe>
>           : ^^^^^^^^^^^^^^^^^^^

	pipe extends (In: t) => unknown ?
>In : t
>   : ^

		(In: t) => ReturnType<pipe> extends infer n extends number ? n
>In : t
>   : ^

		: ReturnType<pipe> extends infer s extends string ? s
		: ReturnType<pipe> extends infer b extends boolean ? b
		: never
	:	never

interface Type2<t> {
	pipe<fn extends (In: t) => unknown>(fn: fn): Type<inferPipe2<t, fn>>
>pipe : <fn extends (In: t) => unknown>(fn: fn) => Type<inferPipe2<t, fn>>
>     : ^  ^^^^^^^^^                  ^^  ^^  ^^^^^                       
>In : t
>   : ^
>fn : fn
>   : ^^
}

declare const t2: Type2<string>
>t2 : Type2<string>
>   : ^^^^^^^^^^^^^

/** Type<(In: string) => number> */
export const out2 = t2.pipe(s => parseInt(s))
>out2 : Type<(In: string) => number>
>     : ^^^^^^  ^^^^^^^^^^^^^^^^^^^^
>t2.pipe(s => parseInt(s)) : Type<(In: string) => number>
>                          : ^^^^^^  ^^^^^^^^^^^^^^^^^^^^
>t2.pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe2<string, fn_1>>
>        : ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^       ^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>t2 : Type2<string>
>   : ^^^^^^^^^^^^^
>pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe2<string, fn_1>>
>     : ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^       ^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>s => parseInt(s) : (s: string) => number
>                 : ^ ^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>parseInt(s) : number
>            : ^^^^^^
>parseInt : (string: string, radix?: number) => number
>         : ^      ^^      ^^     ^^^      ^^^^^      
>s : string
>  : ^^^^^^

