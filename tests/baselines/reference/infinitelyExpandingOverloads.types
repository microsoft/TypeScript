//// [tests/cases/compiler/infinitelyExpandingOverloads.ts] ////

=== infinitelyExpandingOverloads.ts ===
interface KnockoutSubscription2<T> {
    target: KnockoutObservableBase2<T>;
>target : KnockoutObservableBase2<T>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
}
interface KnockoutObservableBase2<T> {
    subscribe(callback: (newValue: T) => void, target?: any, topic?: string): KnockoutSubscription2<T>;
>subscribe : (callback: (newValue: T) => void, target?: any, topic?: string) => KnockoutSubscription2<T>
>          : ^        ^^                     ^^      ^^^   ^^     ^^^      ^^^^^                        
>callback : (newValue: T) => void
>         : ^        ^^ ^^^^^    
>newValue : T
>         : ^
>target : any
>topic : string
>      : ^^^^^^
}
interface ValidationPlacement2<TValue> {
    initialize(validatable: Validatable2<TValue>): void;
>initialize : (validatable: Validatable2<TValue>) => void
>           : ^           ^^                    ^^^^^    
>validatable : Validatable2<TValue>
>            : ^^^^^^^^^^^^^^^^^^^^
}
interface Validatable2<TValue> {
    validators: KnockoutObservableBase2<Validator2<TValue>>;
>validators : KnockoutObservableBase2<Validator2<TValue>>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
class Validator2<TValue> {
>Validator2 : Validator2<TValue>
>           : ^^^^^^^^^^^^^^^^^^

    private _subscription: KnockoutSubscription2<TValue>;
>_subscription : KnockoutSubscription2<TValue>
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
class ViewModel<TValue> {
>ViewModel : ViewModel<TValue>
>          : ^^^^^^^^^^^^^^^^^

    public validationPlacements: Array<ValidationPlacement2<TValue>> = new Array<ValidationPlacement2<TValue>>();
>validationPlacements : ValidationPlacement2<TValue>[]
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Array<ValidationPlacement2<TValue>>() : ValidationPlacement2<TValue>[]
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^
}
class Widget<TValue> {
>Widget : Widget<TValue>
>       : ^^^^^^^^^^^^^^

    constructor(viewModelType: new () => ViewModel<TValue>); // Shouldnt error on this overload
>viewModelType : new () => ViewModel<TValue>
>              : ^^^^^^^^^^                 

    constructor(viewModelType: new () => ViewModel<TValue>) {
>viewModelType : new () => ViewModel<TValue>
>              : ^^^^^^^^^^                 
    }
    public get options(): ViewModel<TValue> {
>options : ViewModel<TValue>
>        : ^^^^^^^^^^^^^^^^^

        return null;
    }
}
