//// [tests/cases/conformance/jsx/inline/inlineJsxFactoryDeclarations.tsx] ////

=== renderer.d.ts ===
declare global {
>global : any
>       : ^^^

    namespace JSX {
        interface IntrinsicElements {
            [e: string]: any;
>e : string
>  : ^^^^^^
        }
    }
}
export function dom(): void;
>dom : () => void
>    : ^^^^^^    

export function otherdom(): void;
>otherdom : () => void
>         : ^^^^^^    

export function createElement(): void;
>createElement : () => void
>              : ^^^^^^    

export { dom as default };
>dom : () => void
>    : ^^^^^^    
>default : () => void
>        : ^^^^^^    

=== otherreacty.tsx ===
/** @jsx React.createElement */
import * as React from "./renderer";
>React : typeof React
>      : ^^^^^^^^^^^^

<h></h>
><h></h> : error
>h : any
>  : ^^^
>h : any
>  : ^^^

=== other.tsx ===
/** @jsx h */
import { dom as h } from "./renderer"
>dom : () => void
>    : ^^^^^^    
>h : () => void
>  : ^^^^^^    

export const prerendered = <h></h>;
>prerendered : error
><h></h> : error
>h : () => void
>  : ^^^^^^    
>h : () => void
>  : ^^^^^^    

=== othernoalias.tsx ===
/** @jsx otherdom */
import { otherdom } from "./renderer"
>otherdom : () => void
>         : ^^^^^^    

export const prerendered2 = <h></h>;
>prerendered2 : error
><h></h> : error
>h : any
>  : ^^^
>h : any
>  : ^^^

=== reacty.tsx ===
import React from "./renderer"
>React : () => void
>      : ^^^^^^    

export const prerendered3 = <h></h>;
>prerendered3 : error
><h></h> : error
>h : any
>  : ^^^
>h : any
>  : ^^^

=== index.tsx ===
/** @jsx dom */
import { dom } from "./renderer"
>dom : () => void
>    : ^^^^^^    

<h></h>
><h></h> : error
>h : any
>  : ^^^
>h : any
>  : ^^^

export * from "./other";
export * from "./othernoalias";
export * from "./reacty";

