//// [tests/cases/compiler/inlineMappedTypeModifierDeclarationEmit.ts] ////

=== index.ts ===
import { test1, test2 } from "./other";
>test1 : <T, K extends string>(obj: T, k: K) => Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
>      : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^
>test2 : <T, K extends string>(obj: T, k: K) => { [P in Exclude<keyof T, K>]: T[P]; }
>      : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

export function wrappedTest1<T, K extends string>(obj: T, k: K) {
>wrappedTest1 : <T, K extends string>(obj: T, k: K) => Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
>             : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>k : K
>  : ^

  return test1(obj, k);
>test1(obj, k) : Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^
>test1 : <T_1, K_1 extends string>(obj: T_1, k: K_1) => Exclude<keyof T_1, K_1> extends infer T_2 extends keyof T_1 ? { [P in T_2]: T_1[P]; } : never
>      : ^^^^^^^^^^^^^^^^^^      ^^   ^^   ^^ ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>k : K
>  : ^
}

export function wrappedTest2<T, K extends string>(obj: T, k: K) {
>wrappedTest2 : <T, K extends string>(obj: T, k: K) => { [P in Exclude<keyof T, K>]: T[P]; }
>             : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>k : K
>  : ^

  return test2(obj, k);
>test2(obj, k) : { [P in Exclude<keyof T, K>]: T[P]; }
>              : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>test2 : <T_1, K_1 extends string>(obj: T_1, k: K_1) => { [P in Exclude<keyof T_1, K_1>]: T_1[P]; }
>      : ^^^^^^^^^^^^^^^^^^      ^^   ^^   ^^ ^^   ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : T
>    : ^
>k : K
>  : ^
}

export type Obj = {
>Obj : Obj
>    : ^^^

  a: number;
>a : number
>  : ^^^^^^

  readonly foo: string;
>foo : string
>    : ^^^^^^

};

export const processedInternally1 = wrappedTest1({} as Obj, "a");
>processedInternally1 : { readonly foo: string; }
>                     : ^^^^^^^^^^^^^^^^      ^^^
>wrappedTest1({} as Obj, "a") : { readonly foo: string; }
>                             : ^^^^^^^^^^^^^^^^      ^^^
>wrappedTest1 : <T, K extends string>(obj: T, k: K) => Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
>             : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^
>{} as Obj : Obj
>          : ^^^
>{} : {}
>   : ^^
>"a" : "a"
>    : ^^^

export const processedInternally2 = wrappedTest2({} as Obj, "a");
>processedInternally2 : { foo: string; }
>                     : ^^^^^^^^^^^^^^^^
>wrappedTest2({} as Obj, "a") : { foo: string; }
>                             : ^^^^^^^^^^^^^^^^
>wrappedTest2 : <T, K extends string>(obj: T, k: K) => { [P in Exclude<keyof T, K>]: T[P]; }
>             : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{} as Obj : Obj
>          : ^^^
>{} : {}
>   : ^^
>"a" : "a"
>    : ^^^

=== other.ts ===
// how Omit from lib is defined
type OmitReal<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;
>OmitReal : OmitReal<T, K>
>         : ^^^^^^^^^^^^^^

// what we see when we hover it
type OmitUnveiled<T, K extends string | number | symbol> = {
>OmitUnveiled : OmitUnveiled<T, K>
>             : ^^^^^^^^^^^^^^^^^^

  [P in Exclude<keyof T, K>]: T[P];
};

export function test1<T, K extends string>(obj: T, k: K): OmitReal<T, K> {
>test1 : <T, K extends string>(obj: T, k: K) => OmitReal<T, K>
>      : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^              
>obj : T
>    : ^
>k : K
>  : ^

  return {} as any;
>{} as any : any
>{} : {}
>   : ^^
}

export function test2<T, K extends string>(obj: T, k: K): OmitUnveiled<T, K> {
>test2 : <T, K extends string>(obj: T, k: K) => OmitUnveiled<T, K>
>      : ^ ^^ ^^^^^^^^^      ^^   ^^ ^^ ^^ ^^^^^                  
>obj : T
>    : ^
>k : K
>  : ^

  return {} as any;
>{} as any : any
>{} : {}
>   : ^^
}
