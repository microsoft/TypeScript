//// [tests/cases/compiler/instanceofOperator.ts] ////

=== instanceofOperator.ts ===
// Spec:
// The instanceof operator requires the left operand to be of type Any or an object type, and the right 
// operand to be of type Any or a subtype of the â€˜Functionâ€™ interface type. The result is always of the 
// Boolean primitive type.

namespace test {
>test : Symbol(test, Decl(instanceofOperator.ts, 0, 0))

    class Object { }
>Object : Symbol(Object, Decl(instanceofOperator.ts, 5, 16))

    var obj: Object;
>obj : Symbol(obj, Decl(instanceofOperator.ts, 7, 7))
>Object : Symbol(Object, Decl(instanceofOperator.ts, 5, 16))



    4 instanceof null;

    // Error and should be error
    obj instanceof 4;
>obj : Symbol(obj, Decl(instanceofOperator.ts, 7, 7))

    Object instanceof obj;
>Object : Symbol(Object, Decl(instanceofOperator.ts, 5, 16))
>obj : Symbol(obj, Decl(instanceofOperator.ts, 7, 7))

    // Error on left hand side
    null instanceof null;
    obj instanceof Object;
>obj : Symbol(obj, Decl(instanceofOperator.ts, 7, 7))
>Object : Symbol(Object, Decl(instanceofOperator.ts, 5, 16))

    undefined instanceof undefined;
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)
}


