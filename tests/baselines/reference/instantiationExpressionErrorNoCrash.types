//// [tests/cases/compiler/instantiationExpressionErrorNoCrash.ts] ////

=== instantiationExpressionErrorNoCrash.ts ===
const createCacheReducer = <N extends string, QR>(
>createCacheReducer : <N extends string, QR>(queries: Cache<N, QR>["queries"]) => (state?: { queries: QR; }) => { queries: QR; }
>                   : ^ ^^^^^^^^^      ^^  ^^       ^^                       ^^^^^^     ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><N extends string, QR>(    queries: Cache<N, QR>["queries"],) => {    const queriesMap = {} as QR;    const initialState = {        queries: queriesMap,    };    return (state = initialState) => state;} : <N extends string, QR>(queries: Cache<N, QR>["queries"]) => (state?: { queries: QR; }) => { queries: QR; }
>                                                                                                                                                                                                           : ^ ^^^^^^^^^      ^^  ^^       ^^                       ^^^^^^     ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    queries: Cache<N, QR>["queries"],
>queries : { [QK in keyof QR]: any; }
>        : ^^^  ^^^^^^^^^^^^^^^^^^^^^

) => {
    const queriesMap = {} as QR;
>queriesMap : QR
>           : ^^
>{} as QR : QR
>         : ^^
>{} : {}
>   : ^^

    const initialState = {
>initialState : { queries: QR; }
>             : ^^^^^^^^^^^^^^^^
>{        queries: queriesMap,    } : { queries: QR; }
>                                   : ^^^^^^^^^^^^^^^^

        queries: queriesMap,
>queries : QR
>        : ^^
>queriesMap : QR
>           : ^^

    };

    return (state = initialState) => state;
>(state = initialState) => state : (state?: { queries: QR; }) => { queries: QR; }
>                                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>state : { queries: QR; }
>      : ^^^^^^^^^^^^^^^^
>initialState : { queries: QR; }
>             : ^^^^^^^^^^^^^^^^
>state : { queries: QR; }
>      : ^^^^^^^^^^^^^^^^

};

export type Cache<N extends string, QR> = {
>Cache : Cache<N, QR>
>      : ^^^^^^^^^^^^

    queries: {
>queries : { [QK in keyof QR]: any; }
>        : ^^^  ^^^^^^^^^^^^^^^^^^^^^

        [QK in keyof QR]: ReturnType<typeof createCacheReducer<QR>>;
>createCacheReducer : <N_1 extends string, QR_1>(queries: Cache<N_1, QR_1>["queries"]) => (state?: { queries: QR_1; }) => { queries: QR_1; }
>                   : ^^^^^^^^^^^^^      ^^^^^^^^       ^^                           ^^^^^^     ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
};
