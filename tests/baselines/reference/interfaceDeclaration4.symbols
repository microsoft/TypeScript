//// [tests/cases/compiler/interfaceDeclaration4.ts] ////

=== interfaceDeclaration4.ts ===
// Import this module when test harness supports external modules. Also remove the internal module below.
// import Foo = require("interfaceDeclaration5")
namespace Foo {
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))

    export interface I1 { item: string; }
>I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 15))
>item : Symbol(I1.item, Decl(interfaceDeclaration4.ts, 3, 25))

    export class C1 { }
>C1 : Symbol(C1, Decl(interfaceDeclaration4.ts, 3, 41))
}

class C1 implements Foo.I1 {
>C1 : Symbol(C1, Decl(interfaceDeclaration4.ts, 5, 1))
>Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
>I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))

	public item:string;
>item : Symbol(C1.item, Decl(interfaceDeclaration4.ts, 7, 28))
}

// Allowed
interface I2 extends Foo.I1 {
>I2 : Symbol(I2, Decl(interfaceDeclaration4.ts, 9, 1))
>Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
>I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))

	item:string;
>item : Symbol(I2.item, Decl(interfaceDeclaration4.ts, 12, 29))
}

// Negative Case
interface I3 extends Foo.I1 {
>I3 : Symbol(I3, Decl(interfaceDeclaration4.ts, 14, 1))
>Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
>I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))

    item:number;
>item : Symbol(I3.item, Decl(interfaceDeclaration4.ts, 17, 29))
}

interface I4 extends Foo.I1 {
>I4 : Symbol(I4, Decl(interfaceDeclaration4.ts, 19, 1))
>Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
>I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))

    token:string;
>token : Symbol(I4.token, Decl(interfaceDeclaration4.ts, 21, 29))
}

// Err - not implemented item
class C2 implements I4 {
>C2 : Symbol(C2, Decl(interfaceDeclaration4.ts, 23, 1))
>I4 : Symbol(I4, Decl(interfaceDeclaration4.ts, 19, 1))

    public token: string;
>token : Symbol(C2.token, Decl(interfaceDeclaration4.ts, 26, 24))
}

interface I5 extends Foo { }
>I5 : Symbol(I5, Decl(interfaceDeclaration4.ts, 28, 1))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))

// Negative case
interface I6 extends Foo.C1 { }
>I6 : Symbol(I6, Decl(interfaceDeclaration4.ts, 30, 28))
>Foo.C1 : Symbol(Foo.C1, Decl(interfaceDeclaration4.ts, 3, 41))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
>C1 : Symbol(Foo.C1, Decl(interfaceDeclaration4.ts, 3, 41))

class C3 implements Foo.I1 { }
>C3 : Symbol(C3, Decl(interfaceDeclaration4.ts, 33, 31))
>Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
>I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 15))

// Negative case 
interface Foo.I1 { }
>Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))

