//// [tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendsObjectIntersection.ts] ////

=== interfaceExtendsObjectIntersection.ts ===
type T1 = { a: number };
>T1 : T1
>   : ^^
>a : number
>  : ^^^^^^

type T2 = T1 & { b: number };
>T2 : T2
>   : ^^
>b : number
>  : ^^^^^^

type T3 = () => void;
>T3 : T3
>   : ^^

type T4 = new () => { a: number };
>T4 : T4
>   : ^^
>a : number
>  : ^^^^^^

type T5 = number[];
>T5 : T5
>   : ^^

type T6 = [string, number];
>T6 : T6
>   : ^^

type T7 = { [P in 'a' | 'b' | 'c']: string };
>T7 : T7
>   : ^^

interface I1 extends T1 { x: string }
>x : string
>  : ^^^^^^

interface I2 extends T2 { x: string }
>x : string
>  : ^^^^^^

interface I3 extends T3 { x: string }
>x : string
>  : ^^^^^^

interface I4 extends T4 { x: string }
>x : string
>  : ^^^^^^

interface I5 extends T5 { x: string }
>x : string
>  : ^^^^^^

interface I6 extends T6 { x: string }
>x : string
>  : ^^^^^^

interface I7 extends T7 { x: string }
>x : string
>  : ^^^^^^

type Constructor<T> = new () => T;
>Constructor : Constructor<T>
>            : ^^^^^^^^^^^^^^

declare function Constructor<T>(): Constructor<T>;
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              

class C1 extends Constructor<I1>() { x: string }
>C1 : C1
>   : ^^
>Constructor<I1>() : I1
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C2 extends Constructor<I2>() { x: string }
>C2 : C2
>   : ^^
>Constructor<I2>() : I2
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C3 extends Constructor<I3>() { x: string }
>C3 : C3
>   : ^^
>Constructor<I3>() : I3
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C4 extends Constructor<I4>() { x: string }
>C4 : C4
>   : ^^
>Constructor<I4>() : I4
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C5 extends Constructor<I5>() { x: string }
>C5 : C5
>   : ^^
>Constructor<I5>() : I5
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C6 extends Constructor<I6>() { x: string }
>C6 : C6
>   : ^^
>Constructor<I6>() : I6
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C7 extends Constructor<I7>() { x: string }
>C7 : C7
>   : ^^
>Constructor<I7>() : I7
>                  : ^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

declare function fx(x: string): string;
>fx : (x: string) => string
>   : ^ ^^      ^^^^^      
>x : string
>  : ^^^^^^

declare class CX { a: number }
>CX : CX
>   : ^^
>a : number
>  : ^^^^^^

declare enum EX { A, B, C }
>EX : EX
>   : ^^
>A : EX.A
>  : ^^^^
>B : EX.B
>  : ^^^^
>C : EX.C
>  : ^^^^

declare namespace NX { export const a = 1 }
>NX : typeof NX
>   : ^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^

type T10 = typeof fx;
>T10 : (x: string) => string
>    : ^ ^^      ^^^^^      
>fx : (x: string) => string
>   : ^ ^^      ^^^^^      

type T11 = typeof CX;
>T11 : typeof CX
>    : ^^^^^^^^^
>CX : typeof CX
>   : ^^^^^^^^^

type T12 = typeof EX;
>T12 : typeof EX
>    : ^^^^^^^^^
>EX : typeof EX
>   : ^^^^^^^^^

type T13 = typeof NX;
>T13 : typeof NX
>    : ^^^^^^^^^
>NX : typeof NX
>   : ^^^^^^^^^

interface I10 extends T10 { x: string }
>x : string
>  : ^^^^^^

interface I11 extends T11 { x: string }
>x : string
>  : ^^^^^^

interface I12 extends T12 { x: string }
>x : string
>  : ^^^^^^

interface I13 extends T13 { x: string }
>x : string
>  : ^^^^^^

type Identifiable<T> = { _id: string } & T;
>Identifiable : Identifiable<T>
>             : ^^^^^^^^^^^^^^^
>_id : string
>    : ^^^^^^

interface I20 extends Partial<T1> { x: string }
>x : string
>  : ^^^^^^

interface I21 extends Readonly<T1> { x: string }
>x : string
>  : ^^^^^^

interface I22 extends Identifiable<T1> { x: string }
>x : string
>  : ^^^^^^

interface I23 extends Identifiable<T1 & { b: number}> { x: string }
>b : number
>  : ^^^^^^
>x : string
>  : ^^^^^^

class C20 extends Constructor<Partial<T1>>() { x: string }
>C20 : C20
>    : ^^^
>Constructor<Partial<T1>>() : Partial<T1>
>                           : ^^^^^^^^^^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C21 extends Constructor<Readonly<T1>>() { x: string }
>C21 : C21
>    : ^^^
>Constructor<Readonly<T1>>() : Readonly<T1>
>                            : ^^^^^^^^^^^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C22 extends Constructor<Identifiable<T1>>() { x: string }
>C22 : C22
>    : ^^^
>Constructor<Identifiable<T1>>() : Identifiable<T1>
>                                : ^^^^^^^^^^^^^^^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>x : string
>  : ^^^^^^

class C23 extends Constructor<Identifiable<T1 & { b: number}>>() { x: string }
>C23 : C23
>    : ^^^
>Constructor<Identifiable<T1 & { b: number}>>() : Identifiable<T1 & { b: number; }>
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^      ^^^^
>Constructor : <T>() => Constructor<T>
>            : ^ ^^^^^^^              
>b : number
>  : ^^^^^^
>x : string
>  : ^^^^^^

