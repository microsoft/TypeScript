//// [tests/cases/compiler/interfacePropertiesWithSameName2.ts] ////

=== interfacePropertiesWithSameName2.ts ===
interface Mover {
>Mover : Symbol(Mover, Decl(interfacePropertiesWithSameName2.ts, 0, 0))

    move(): void;
>move : Symbol(Mover.move, Decl(interfacePropertiesWithSameName2.ts, 0, 17))

    getStatus(): { speed: number; };
>getStatus : Symbol(Mover.getStatus, Decl(interfacePropertiesWithSameName2.ts, 1, 17))
>speed : Symbol(speed, Decl(interfacePropertiesWithSameName2.ts, 2, 18))
}
interface Shaker {
>Shaker : Symbol(Shaker, Decl(interfacePropertiesWithSameName2.ts, 3, 1))

    shake(): void;
>shake : Symbol(Shaker.shake, Decl(interfacePropertiesWithSameName2.ts, 4, 18))

    getStatus(): { frequency: number; };
>getStatus : Symbol(Shaker.getStatus, Decl(interfacePropertiesWithSameName2.ts, 5, 18))
>frequency : Symbol(frequency, Decl(interfacePropertiesWithSameName2.ts, 6, 18))
}

interface MoverShaker extends Mover, Shaker {
>MoverShaker : Symbol(MoverShaker, Decl(interfacePropertiesWithSameName2.ts, 7, 1))
>Mover : Symbol(Mover, Decl(interfacePropertiesWithSameName2.ts, 0, 0))
>Shaker : Symbol(Shaker, Decl(interfacePropertiesWithSameName2.ts, 3, 1))

}

// Inside a module
declare namespace MoversAndShakers {
>MoversAndShakers : Symbol(MoversAndShakers, Decl(interfacePropertiesWithSameName2.ts, 11, 1))

    export class Mover {
>Mover : Symbol(Mover, Decl(interfacePropertiesWithSameName2.ts, 14, 36))

        move(): void;
>move : Symbol(Mover.move, Decl(interfacePropertiesWithSameName2.ts, 15, 24))

        getStatus(): { speed: number; };
>getStatus : Symbol(Mover.getStatus, Decl(interfacePropertiesWithSameName2.ts, 16, 21))
>speed : Symbol(speed, Decl(interfacePropertiesWithSameName2.ts, 17, 22))
    }
    export interface Shaker {
>Shaker : Symbol(Shaker, Decl(interfacePropertiesWithSameName2.ts, 18, 5))

        shake(): void;
>shake : Symbol(Shaker.shake, Decl(interfacePropertiesWithSameName2.ts, 19, 29))

        getStatus(): { frequency: number; };
>getStatus : Symbol(Shaker.getStatus, Decl(interfacePropertiesWithSameName2.ts, 20, 22))
>frequency : Symbol(frequency, Decl(interfacePropertiesWithSameName2.ts, 21, 22))
    }
}

interface MoverShaker2 extends MoversAndShakers.Mover, MoversAndShakers.Shaker { } // error
>MoverShaker2 : Symbol(MoverShaker2, Decl(interfacePropertiesWithSameName2.ts, 23, 1))
>MoversAndShakers.Mover : Symbol(MoversAndShakers.Mover, Decl(interfacePropertiesWithSameName2.ts, 14, 36))
>MoversAndShakers : Symbol(MoversAndShakers, Decl(interfacePropertiesWithSameName2.ts, 11, 1))
>Mover : Symbol(MoversAndShakers.Mover, Decl(interfacePropertiesWithSameName2.ts, 14, 36))
>MoversAndShakers.Shaker : Symbol(MoversAndShakers.Shaker, Decl(interfacePropertiesWithSameName2.ts, 18, 5))
>MoversAndShakers : Symbol(MoversAndShakers, Decl(interfacePropertiesWithSameName2.ts, 11, 1))
>Shaker : Symbol(MoversAndShakers.Shaker, Decl(interfacePropertiesWithSameName2.ts, 18, 5))

interface MoverShaker3 extends MoversAndShakers.Mover, MoversAndShakers.Shaker {
>MoverShaker3 : Symbol(MoverShaker3, Decl(interfacePropertiesWithSameName2.ts, 25, 82))
>MoversAndShakers.Mover : Symbol(MoversAndShakers.Mover, Decl(interfacePropertiesWithSameName2.ts, 14, 36))
>MoversAndShakers : Symbol(MoversAndShakers, Decl(interfacePropertiesWithSameName2.ts, 11, 1))
>Mover : Symbol(MoversAndShakers.Mover, Decl(interfacePropertiesWithSameName2.ts, 14, 36))
>MoversAndShakers.Shaker : Symbol(MoversAndShakers.Shaker, Decl(interfacePropertiesWithSameName2.ts, 18, 5))
>MoversAndShakers : Symbol(MoversAndShakers, Decl(interfacePropertiesWithSameName2.ts, 11, 1))
>Shaker : Symbol(MoversAndShakers.Shaker, Decl(interfacePropertiesWithSameName2.ts, 18, 5))

    getStatus(): { speed: number; frequency: number; }; // ok because this getStatus overrides the conflicting ones above
>getStatus : Symbol(MoverShaker3.getStatus, Decl(interfacePropertiesWithSameName2.ts, 27, 80))
>speed : Symbol(speed, Decl(interfacePropertiesWithSameName2.ts, 28, 18))
>frequency : Symbol(frequency, Decl(interfacePropertiesWithSameName2.ts, 28, 33))
}
