//// [tests/cases/compiler/intersectionConstraintReduction.ts] ////

=== intersectionConstraintReduction.ts ===
type Test1<K1 extends keyof any, K2 extends keyof any> =
>Test1 : Extract<K1, string | number | symbol> & K1 & K2
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    MustBeKey<Extract<K1, keyof any> & K1 & K2>;

type Test2<K1 extends keyof any, K2 extends keyof any> =
>Test2 : K1 & K2 & Extract<K1, string | number | symbol>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    MustBeKey<K1 & K2 & Extract<K1, keyof any>>;

type MustBeKey<K extends keyof any> = K;
>MustBeKey : K
>          : ^

// https://github.com/microsoft/TypeScript/issues/58370

type AnyKey = number | string | symbol;
>AnyKey : AnyKey
>       : ^^^^^^

type ReturnTypeKeyof<Obj extends object> = Obj extends object
>ReturnTypeKeyof : ReturnTypeKeyof<Obj>
>                : ^^^^^^^^^^^^^^^^^^^^

    ? [keyof Obj] extends [never]
        ? never
        : { [Key in keyof Obj as string]-?: () => Key }[string]
    : never;

type KeyIfSignatureOfObject<
>KeyIfSignatureOfObject : KeyIfSignatureOfObject<Obj, Key, ReturnTypeKeys>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Obj extends object,
    Key extends AnyKey,
    ReturnTypeKeys = ReturnTypeKeyof<Obj>,
> = ReturnTypeKeys extends () => Key ? ((() => Key) extends ReturnTypeKeys ? Key : never) : never;

export type Reduced1<Obj extends object, Key extends AnyKey, Value, ObjKeys extends keyof Obj = keyof Obj> =
>Reduced1 : Reduced1<Obj, Key, Value, ObjKeys>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Key extends KeyIfSignatureOfObject<Obj, Key>
        ? Key extends ObjKeys
            ? { [K in Key]: Value }
            : never
        : never;

export type Reduced2<Obj extends object, Key extends AnyKey, Value, ObjKeys extends keyof Obj = keyof Obj> =
>Reduced2 : Reduced2<Obj, Key, Value, ObjKeys>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Key extends AnyKey
        ? Key extends KeyIfSignatureOfObject<Obj, Key>
            ? Key extends ObjKeys
               ? { [K in Key]: Value }
               : never
            : never
        : never;

