//// [tests/cases/conformance/types/intersection/intersectionTypeInference2.ts] ////

=== intersectionTypeInference2.ts ===
declare function f<T>(x: { prop: T }): T;
>f : <T>(x: { prop: T; }) => T
>  : ^ ^^ ^^            ^^^^^ 
>x : { prop: T; }
>  : ^^^^^^^^ ^^^
>prop : T
>     : ^

declare const a: { prop: string } & { prop: number };
>a : { prop: string; } & { prop: number; }
>  : ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^
>prop : string
>     : ^^^^^^
>prop : number
>     : ^^^^^^

declare const b: { prop: string & number };
>b : { prop: string & number; }
>  : ^^^^^^^^               ^^^
>prop : never
>     : ^^^^^

f(a);  // never
>f(a) : never
>     : ^^^^^
>f : <T>(x: { prop: T; }) => T
>  : ^ ^^ ^^            ^^^^^ 
>a : { prop: string; } & { prop: number; }
>  : ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^

f(b);  // never
>f(b) : never
>     : ^^^^^
>f : <T>(x: { prop: T; }) => T
>  : ^ ^^ ^^            ^^^^^ 
>b : { prop: string & number; }
>  : ^^^^^^^^               ^^^

// Repro from #18354

declare function f2<T, Key extends keyof T>(obj: {[K in keyof T]: T[K]}, key: Key): T[Key];
>f2 : <T, Key extends keyof T>(obj: { [K in keyof T]: T[K]; }, key: Key) => T[Key]
>   : ^ ^^   ^^^^^^^^^       ^^   ^^                         ^^   ^^   ^^^^^      
>obj : { [K in keyof T]: T[K]; }
>    : ^^^ ^^^^^^^^^^^^^^^^^^^^^
>key : Key
>    : ^^^

declare const obj: { a: string } & { b: string };
>obj : { a: string; } & { b: string; }
>    : ^^^^^      ^^^^^^^^^^^      ^^^
>a : string
>  : ^^^^^^
>b : string
>  : ^^^^^^

f2(obj, 'a');
>f2(obj, 'a') : string
>             : ^^^^^^
>f2 : <T, Key extends keyof T>(obj: { [K in keyof T]: T[K]; }, key: Key) => T[Key]
>   : ^ ^^   ^^^^^^^^^       ^^   ^^                         ^^   ^^   ^^^^^      
>obj : { a: string; } & { b: string; }
>    : ^^^^^      ^^^^^^^^^^^      ^^^
>'a' : "a"
>    : ^^^

f2(obj, 'b');
>f2(obj, 'b') : string
>             : ^^^^^^
>f2 : <T, Key extends keyof T>(obj: { [K in keyof T]: T[K]; }, key: Key) => T[Key]
>   : ^ ^^   ^^^^^^^^^       ^^   ^^                         ^^   ^^   ^^^^^      
>obj : { a: string; } & { b: string; }
>    : ^^^^^      ^^^^^^^^^^^      ^^^
>'b' : "b"
>    : ^^^

