//// [tests/cases/conformance/es2020/intlNumberFormatES2020.ts] ////

=== intlNumberFormatES2020.ts ===
// New/updated resolved options in ES2020
const { notation, style, signDisplay } = new Intl.NumberFormat('en-NZ').resolvedOptions();
>notation : "standard" | "scientific" | "engineering" | "compact"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>style : keyof Intl.NumberFormatOptionsStyleRegistry
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>signDisplay : keyof Intl.NumberFormatOptionsSignDisplayRegistry
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ').resolvedOptions() : Intl.ResolvedNumberFormatOptions
>                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ').resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ') : Intl.NumberFormat
>                               : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Empty options
new Intl.NumberFormat('en-NZ', {});
>new Intl.NumberFormat('en-NZ', {}) : Intl.NumberFormat
>                                   : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>{} : {}
>   : ^^

// Override numbering system
new Intl.NumberFormat('en-NZ', { numberingSystem: 'arab' });
>new Intl.NumberFormat('en-NZ', { numberingSystem: 'arab' }) : Intl.NumberFormat
>                                                            : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>{ numberingSystem: 'arab' } : { numberingSystem: string; }
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberingSystem : string
>                : ^^^^^^
>'arab' : "arab"
>       : ^^^^^^

// Currency
const { currency, currencySign } = new Intl.NumberFormat('en-NZ', { style: 'currency', currency: 'NZD', currencySign: 'accounting' }).resolvedOptions();
>currency : string | undefined
>         : ^^^^^^^^^^^^^^^^^^
>currencySign : "standard" | "accounting" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { style: 'currency', currency: 'NZD', currencySign: 'accounting' }).resolvedOptions() : Intl.ResolvedNumberFormatOptions
>                                                                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { style: 'currency', currency: 'NZD', currencySign: 'accounting' }).resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { style: 'currency', currency: 'NZD', currencySign: 'accounting' }) : Intl.NumberFormat
>                                                                                                   : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>{ style: 'currency', currency: 'NZD', currencySign: 'accounting' } : { style: "currency"; currency: string; currencySign: "accounting"; }
>                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>style : "currency"
>      : ^^^^^^^^^^
>'currency' : "currency"
>           : ^^^^^^^^^^
>currency : string
>         : ^^^^^^
>'NZD' : "NZD"
>      : ^^^^^
>currencySign : "accounting"
>             : ^^^^^^^^^^^^
>'accounting' : "accounting"
>             : ^^^^^^^^^^^^
>resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Units
const { unit, unitDisplay } = new Intl.NumberFormat('en-NZ', { style: 'unit', unit: 'kilogram', unitDisplay: 'narrow' }).resolvedOptions();
>unit : string | undefined
>     : ^^^^^^^^^^^^^^^^^^
>unitDisplay : "short" | "long" | "narrow" | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { style: 'unit', unit: 'kilogram', unitDisplay: 'narrow' }).resolvedOptions() : Intl.ResolvedNumberFormatOptions
>                                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { style: 'unit', unit: 'kilogram', unitDisplay: 'narrow' }).resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                                                                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { style: 'unit', unit: 'kilogram', unitDisplay: 'narrow' }) : Intl.NumberFormat
>                                                                                           : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>{ style: 'unit', unit: 'kilogram', unitDisplay: 'narrow' } : { style: "unit"; unit: string; unitDisplay: "narrow"; }
>                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>style : "unit"
>      : ^^^^^^
>'unit' : "unit"
>       : ^^^^^^
>unit : string
>     : ^^^^^^
>'kilogram' : "kilogram"
>           : ^^^^^^^^^^
>unitDisplay : "narrow"
>            : ^^^^^^^^
>'narrow' : "narrow"
>         : ^^^^^^^^
>resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Compact
const { compactDisplay } = new Intl.NumberFormat('en-NZ', { notation: 'compact', compactDisplay: 'long' }).resolvedOptions();
>compactDisplay : "short" | "long" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { notation: 'compact', compactDisplay: 'long' }).resolvedOptions() : Intl.ResolvedNumberFormatOptions
>                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { notation: 'compact', compactDisplay: 'long' }).resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                                                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-NZ', { notation: 'compact', compactDisplay: 'long' }) : Intl.NumberFormat
>                                                                                : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>{ notation: 'compact', compactDisplay: 'long' } : { notation: "compact"; compactDisplay: "long"; }
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>notation : "compact"
>         : ^^^^^^^^^
>'compact' : "compact"
>          : ^^^^^^^^^
>compactDisplay : "long"
>               : ^^^^^^
>'long' : "long"
>       : ^^^^^^
>resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Sign display
new Intl.NumberFormat('en-NZ', { signDisplay: 'always' });
>new Intl.NumberFormat('en-NZ', { signDisplay: 'always' }) : Intl.NumberFormat
>                                                          : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-NZ' : "en-NZ"
>        : ^^^^^^^
>{ signDisplay: 'always' } : { signDisplay: "always"; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>signDisplay : "always"
>            : ^^^^^^^^
>'always' : "always"
>         : ^^^^^^^^

// New additions to NumberFormatPartTypes
const types: Intl.NumberFormatPartTypes[] = [ 'compact', 'unit', 'unknown' ];
>types : (keyof Intl.NumberFormatPartTypeRegistry)[]
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : any
>     : ^^^
>[ 'compact', 'unit', 'unknown' ] : ("compact" | "unit" | "unknown")[]
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'compact' : "compact"
>          : ^^^^^^^^^
>'unit' : "unit"
>       : ^^^^^^
>'unknown' : "unknown"
>          : ^^^^^^^^^

