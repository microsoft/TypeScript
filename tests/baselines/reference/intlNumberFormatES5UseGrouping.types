//// [tests/cases/conformance/es2023/intlNumberFormatES5UseGrouping.ts] ////

=== intlNumberFormatES5UseGrouping.ts ===
new Intl.NumberFormat('en-GB', { useGrouping: true });
>new Intl.NumberFormat('en-GB', { useGrouping: true }) : Intl.NumberFormat
>                                                      : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-GB' : "en-GB"
>        : ^^^^^^^
>{ useGrouping: true } : { useGrouping: true; }
>                      : ^^^^^^^^^^^^^^^^^^^^^^
>useGrouping : true
>            : ^^^^
>true : true
>     : ^^^^

new Intl.NumberFormat('en-GB', { useGrouping: 'true' }); // expect error
>new Intl.NumberFormat('en-GB', { useGrouping: 'true' }) : Intl.NumberFormat
>                                                        : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-GB' : "en-GB"
>        : ^^^^^^^
>{ useGrouping: 'true' } : { useGrouping: string; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>useGrouping : string
>            : ^^^^^^
>'true' : "true"
>       : ^^^^^^

new Intl.NumberFormat('en-GB', { useGrouping: 'always' }); // expect error
>new Intl.NumberFormat('en-GB', { useGrouping: 'always' }) : Intl.NumberFormat
>                                                          : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-GB' : "en-GB"
>        : ^^^^^^^
>{ useGrouping: 'always' } : { useGrouping: string; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^
>useGrouping : string
>            : ^^^^^^
>'always' : "always"
>         : ^^^^^^^^

const { useGrouping } = new Intl.NumberFormat('en-GB').resolvedOptions();
>useGrouping : boolean
>            : ^^^^^^^
>new Intl.NumberFormat('en-GB').resolvedOptions() : Intl.ResolvedNumberFormatOptions
>                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-GB').resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new Intl.NumberFormat('en-GB') : Intl.NumberFormat
>                               : ^^^^^^^^^^^^^^^^^
>Intl.NumberFormat : Intl.NumberFormatConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : typeof Intl
>     : ^^^^^^^^^^^
>NumberFormat : Intl.NumberFormatConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'en-GB' : "en-GB"
>        : ^^^^^^^
>resolvedOptions : () => Intl.ResolvedNumberFormatOptions
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

