//// [tests/cases/compiler/intraBindingPatternReferences.ts] ////

=== intraBindingPatternReferences.ts ===
// https://github.com/microsoft/TypeScript/issues/59177

function foo() { return a }
>foo : () => number
>    : ^^^^^^^^^^^^
>a : number
>  : ^^^^^^

const [a, b = a + 1] = [42];
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^
>a + 1 : number
>      : ^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>[42] : [number]
>     : ^^^^^^^^
>42 : 42
>   : ^^

const [c1, c2 = c1] = [123];
>c1 : number
>   : ^^^^^^
>c2 : number
>   : ^^^^^^
>c1 : number
>   : ^^^^^^
>[123] : [number]
>      : ^^^^^^^^
>123 : 123
>    : ^^^

const [d1, d2 = d1, d3 = d2] = [123];
>d1 : number
>   : ^^^^^^
>d2 : number
>   : ^^^^^^
>d1 : number
>   : ^^^^^^
>d3 : number
>   : ^^^^^^
>d2 : number
>   : ^^^^^^
>[123] : [number]
>      : ^^^^^^^^
>123 : 123
>    : ^^^

const { e1, e2 = e1 } = { e1: 1 };
>e1 : number
>   : ^^^^^^
>e2 : number
>   : ^^^^^^
>e1 : number
>   : ^^^^^^
>{ e1: 1 } : { e1: number; }
>          : ^^^^^^^^^^^^^^^
>e1 : number
>   : ^^^^^^
>1 : 1
>  : ^

const { f1, f2 = f1, f3 = f2 } = { f1: 1 };
>f1 : number
>   : ^^^^^^
>f2 : number
>   : ^^^^^^
>f1 : number
>   : ^^^^^^
>f3 : number
>   : ^^^^^^
>f2 : number
>   : ^^^^^^
>{ f1: 1 } : { f1: number; }
>          : ^^^^^^^^^^^^^^^
>f1 : number
>   : ^^^^^^
>1 : 1
>  : ^

// Example that requires padding of object literal types at depth
const mockCallback = ({ event: { params = {} } = {} }) => {};
>mockCallback : ({ event: { params } }: { event?: { params?: {} | undefined; } | undefined; }) => void
>             : ^                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>({ event: { params = {} } = {} }) => {} : ({ event: { params } }: { event?: { params?: {} | undefined; } | undefined; }) => void
>                                        : ^                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>event : any
>      : ^^^
>params : {}
>       : ^^
>{} : {}
>   : ^^
>{} : {}
>   : ^^

// The contextual type for the second lambda in the object literal is 'any' because of the
// intra-binding-pattern reference in the initializer for fn2
const { fn1 = (x: number) => 0, fn2 = fn1 } = { fn1: x => x + 1, fn2: x => x + 2 };
>fn1 : (x: number) => number
>    : ^ ^^      ^^^^^^^^^^^
>(x: number) => 0 : (x: number) => number
>                 : ^ ^^      ^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>fn2 : ((x: number) => number) | ((x: any) => any)
>    : ^^ ^^      ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^
>fn1 : (x: number) => number
>    : ^ ^^      ^^^^^^^^^^^
>{ fn1: x => x + 1, fn2: x => x + 2 } : { fn1?: (x: number) => number; fn2?: (x: any) => any; }
>                                     : ^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>fn1 : (x: number) => number
>    : ^ ^^^^^^^^^^^^^^^^^^^
>x => x + 1 : (x: number) => number
>           : ^ ^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>x + 1 : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>fn2 : (x: any) => any
>    : ^ ^^^^^^^^^^^^^
>x => x + 2 : (x: any) => any
>           : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x + 2 : any
>      : ^^^
>x : any
>  : ^^^
>2 : 2
>  : ^

