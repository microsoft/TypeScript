//// [tests/cases/conformance/types/primitives/boolean/invalidBooleanAssignments.ts] ////

=== invalidBooleanAssignments.ts ===
var x = true;
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

var a: number = x;
>a : Symbol(a, Decl(invalidBooleanAssignments.ts, 2, 3))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

var b: string = x;
>b : Symbol(b, Decl(invalidBooleanAssignments.ts, 3, 3))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

var c: void = x;
>c : Symbol(c, Decl(invalidBooleanAssignments.ts, 4, 3))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

var d: typeof undefined = x;
>d : Symbol(d, Decl(invalidBooleanAssignments.ts, 5, 3))
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

enum E { A }
>E : Symbol(E, Decl(invalidBooleanAssignments.ts, 5, 28))
>A : Symbol(E.A, Decl(invalidBooleanAssignments.ts, 7, 8))

var e: E = x;
>e : Symbol(e, Decl(invalidBooleanAssignments.ts, 8, 3))
>E : Symbol(E, Decl(invalidBooleanAssignments.ts, 5, 28))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

class C { foo: string }
>C : Symbol(C, Decl(invalidBooleanAssignments.ts, 8, 13))
>foo : Symbol(C.foo, Decl(invalidBooleanAssignments.ts, 10, 9))

var f: C = x;
>f : Symbol(f, Decl(invalidBooleanAssignments.ts, 11, 3))
>C : Symbol(C, Decl(invalidBooleanAssignments.ts, 8, 13))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

interface I { bar: string }
>I : Symbol(I, Decl(invalidBooleanAssignments.ts, 11, 13))
>bar : Symbol(I.bar, Decl(invalidBooleanAssignments.ts, 13, 13))

var g: I = x;
>g : Symbol(g, Decl(invalidBooleanAssignments.ts, 14, 3))
>I : Symbol(I, Decl(invalidBooleanAssignments.ts, 11, 13))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

var h: { (): string } = x;
>h : Symbol(h, Decl(invalidBooleanAssignments.ts, 16, 3))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

var h2: { toString(): string } = x; // no error
>h2 : Symbol(h2, Decl(invalidBooleanAssignments.ts, 17, 3))
>toString : Symbol(toString, Decl(invalidBooleanAssignments.ts, 17, 9))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

namespace M { export var a = 1; }
>M : Symbol(M, Decl(invalidBooleanAssignments.ts, 17, 35))
>a : Symbol(a, Decl(invalidBooleanAssignments.ts, 19, 24))

M = x;
>M : Symbol(M, Decl(invalidBooleanAssignments.ts, 17, 35))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

function i<T>(a: T) {
>i : Symbol(i, Decl(invalidBooleanAssignments.ts, 20, 6))
>T : Symbol(T, Decl(invalidBooleanAssignments.ts, 22, 11))
>a : Symbol(a, Decl(invalidBooleanAssignments.ts, 22, 14))
>T : Symbol(T, Decl(invalidBooleanAssignments.ts, 22, 11))

    a = x;
>a : Symbol(a, Decl(invalidBooleanAssignments.ts, 22, 14))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))
}
i = x;
>i : Symbol(i, Decl(invalidBooleanAssignments.ts, 20, 6))
>x : Symbol(x, Decl(invalidBooleanAssignments.ts, 0, 3))

