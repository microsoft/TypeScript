//// [tests/cases/conformance/internalModules/moduleDeclarations/invalidNestedModules.ts] ////

=== invalidNestedModules.ts ===
module A.B.C {
>A : Symbol(A, Decl(invalidNestedModules.ts, 0, 0), Decl(invalidNestedModules.ts, 5, 1))
>B : Symbol(B, Decl(invalidNestedModules.ts, 0, 9), Decl(invalidNestedModules.ts, 7, 13))
>C : Symbol(C, Decl(invalidNestedModules.ts, 0, 11), Decl(invalidNestedModules.ts, 8, 24))

    export class Point {
>Point : Symbol(Point, Decl(invalidNestedModules.ts, 0, 14))

        x: number;
>x : Symbol(Point.x, Decl(invalidNestedModules.ts, 1, 24))

        y: number;
>y : Symbol(Point.y, Decl(invalidNestedModules.ts, 2, 18))
    }
}

namespace A {
>A : Symbol(A, Decl(invalidNestedModules.ts, 0, 0), Decl(invalidNestedModules.ts, 5, 1))

    export namespace B {
>B : Symbol(B, Decl(invalidNestedModules.ts, 0, 9), Decl(invalidNestedModules.ts, 7, 13))

        export class C { // Error
>C : Symbol(C, Decl(invalidNestedModules.ts, 0, 11), Decl(invalidNestedModules.ts, 8, 24))

            name: string;
>name : Symbol(C.name, Decl(invalidNestedModules.ts, 9, 24))
        }
    }
}

module M2.X {
>M2 : Symbol(M2, Decl(invalidNestedModules.ts, 13, 1), Decl(invalidNestedModules.ts, 19, 1))
>X : Symbol(X, Decl(invalidNestedModules.ts, 15, 10), Decl(invalidNestedModules.ts, 21, 14))

    export class Point {
>Point : Symbol(Point, Decl(invalidNestedModules.ts, 15, 13))

        x: number; y: number;
>x : Symbol(Point.x, Decl(invalidNestedModules.ts, 16, 24))
>y : Symbol(Point.y, Decl(invalidNestedModules.ts, 17, 18))
    }
}

namespace M2 {
>M2 : Symbol(M2, Decl(invalidNestedModules.ts, 13, 1), Decl(invalidNestedModules.ts, 19, 1))

    export namespace X {
>X : Symbol(X, Decl(invalidNestedModules.ts, 15, 10), Decl(invalidNestedModules.ts, 21, 14))

        export var Point: number; // Error
>Point : Symbol(Point, Decl(invalidNestedModules.ts, 23, 18))
    }
}



