//// [tests/cases/conformance/types/primitives/string/invalidStringAssignments.ts] ////

=== invalidStringAssignments.ts ===
var x = '';
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

var a: boolean = x;
>a : Symbol(a, Decl(invalidStringAssignments.ts, 2, 3))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

var b: number = x;
>b : Symbol(b, Decl(invalidStringAssignments.ts, 3, 3))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

var c: void = x;
>c : Symbol(c, Decl(invalidStringAssignments.ts, 4, 3))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

var d: typeof undefined = x;
>d : Symbol(d, Decl(invalidStringAssignments.ts, 5, 3))
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

class C { foo: string; }
>C : Symbol(C, Decl(invalidStringAssignments.ts, 5, 28))
>foo : Symbol(C.foo, Decl(invalidStringAssignments.ts, 7, 9))

var e: C = x;
>e : Symbol(e, Decl(invalidStringAssignments.ts, 8, 3))
>C : Symbol(C, Decl(invalidStringAssignments.ts, 5, 28))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

interface I { bar: string; }
>I : Symbol(I, Decl(invalidStringAssignments.ts, 8, 13))
>bar : Symbol(I.bar, Decl(invalidStringAssignments.ts, 10, 13))

var f: I = x;
>f : Symbol(f, Decl(invalidStringAssignments.ts, 11, 3))
>I : Symbol(I, Decl(invalidStringAssignments.ts, 8, 13))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

var g: { baz: string } = 1;
>g : Symbol(g, Decl(invalidStringAssignments.ts, 13, 3))
>baz : Symbol(baz, Decl(invalidStringAssignments.ts, 13, 8))

var g2: { 0: number } = 1;
>g2 : Symbol(g2, Decl(invalidStringAssignments.ts, 14, 3))
>0 : Symbol(0, Decl(invalidStringAssignments.ts, 14, 9))

namespace M { export var x = 1; }
>M : Symbol(M, Decl(invalidStringAssignments.ts, 14, 26))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 16, 24))

M = x;
>M : Symbol(M, Decl(invalidStringAssignments.ts, 14, 26))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

function i<T>(a: T) {
>i : Symbol(i, Decl(invalidStringAssignments.ts, 17, 6))
>T : Symbol(T, Decl(invalidStringAssignments.ts, 19, 11))
>a : Symbol(a, Decl(invalidStringAssignments.ts, 19, 14))
>T : Symbol(T, Decl(invalidStringAssignments.ts, 19, 11))

    a = x;
>a : Symbol(a, Decl(invalidStringAssignments.ts, 19, 14))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))
}
i = x;
>i : Symbol(i, Decl(invalidStringAssignments.ts, 17, 6))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

enum E { A }
>E : Symbol(E, Decl(invalidStringAssignments.ts, 22, 6))
>A : Symbol(E.A, Decl(invalidStringAssignments.ts, 24, 8))

var j: E = x;
>j : Symbol(j, Decl(invalidStringAssignments.ts, 25, 3))
>E : Symbol(E, Decl(invalidStringAssignments.ts, 22, 6))
>x : Symbol(x, Decl(invalidStringAssignments.ts, 0, 3))

