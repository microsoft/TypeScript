//// [tests/cases/compiler/invariantGenericErrorElaboration.ts] ////

=== invariantGenericErrorElaboration.ts ===
// Repro from #19746

const wat: Runtype<any> = Num;
>wat : Runtype<any>
>    : ^^^^^^^^^^^^
>Num : Num
>    : ^^^

const Foo = Obj({ foo: Num })
>Foo : Obj<{ [_: string]: Runtype<any>; }>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Obj({ foo: Num }) : Obj<{ [_: string]: Runtype<any>; }>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Obj : <O extends { [_: string]: Runtype<any>; }>(fields: O) => Obj<O>
>    : ^ ^^^^^^^^^                              ^^      ^^ ^^^^^      
>{ foo: Num } : { foo: Num; }
>             : ^^^^^^^^^^^^^
>foo : Num
>    : ^^^
>Num : Num
>    : ^^^

interface Runtype<A> {
  constraint: Constraint<this>
>constraint : Constraint<this>
>           : ^^^^^^^^^^^^^^^^

  witness: A
>witness : A
>        : ^
}

interface Num extends Runtype<number> {
  tag: 'number'
>tag : "number"
>    : ^^^^^^^^
}
declare const Num: Num
>Num : Num
>    : ^^^

interface Obj<O extends { [_ in string]: Runtype<any> }> extends Runtype<{[K in keyof O]: O[K]['witness'] }> {}
declare function Obj<O extends { [_: string]: Runtype<any> }>(fields: O): Obj<O>;
>Obj : <O extends { [_: string]: Runtype<any>; }>(fields: O) => Obj<O>
>    : ^ ^^^^^^^^^                              ^^      ^^ ^^^^^      
>_ : string
>  : ^^^^^^
>fields : O
>       : ^

interface Constraint<A extends Runtype<any>> extends Runtype<A['witness']> {
  underlying: A,
>underlying : A
>           : ^

  check: (x: A['witness']) => void,
>check : (x: A["witness"]) => void
>      : ^ ^^            ^^^^^    
>x : A["witness"]
>  : ^^^^^^^^^^^^
}

