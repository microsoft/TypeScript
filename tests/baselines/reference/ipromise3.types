//// [tests/cases/compiler/ipromise3.ts] ////

=== ipromise3.ts ===
interface IPromise3<T> {
    then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; }

>success : (value: T) => IPromise3<U>
>        : ^     ^^ ^^^^^            
>value : T
>      : ^
>error : (error: any) => IPromise3<U>
>      : ^     ^^   ^^^^^            
>error : any
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any

    then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; }

>success : (value: T) => IPromise3<U>
>        : ^     ^^ ^^^^^            
>value : T
>      : ^
>error : (error: any) => U
>      : ^     ^^   ^^^^^ 
>error : any
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any

    then<U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; }

>success : (value: T) => U
>        : ^     ^^ ^^^^^ 
>value : T
>      : ^
>error : (error: any) => IPromise3<U>
>      : ^     ^^   ^^^^^            
>error : any
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any

    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
>then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
>     : ^^^^^^^^       ^^^                            ^^     ^^^                              ^^        ^^^                       ^^^              ^^^^^^^^       ^^^                            ^^     ^^^                   ^^        ^^^                       ^^^              ^^^^^^^^       ^^^                 ^^     ^^^                              ^^        ^^^                       ^^^              ^^^ ^^       ^^^               ^^     ^^^                 ^^        ^^^                       ^^^            ^^^
>success : (value: T) => U
>        : ^     ^^ ^^^^^ 
>value : T
>      : ^
>error : (error: any) => U
>      : ^     ^^   ^^^^^ 
>error : any
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any

    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void ): void;
>done : <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
>     : ^ ^^       ^^^                 ^^     ^^^                   ^^        ^^^                       ^^^^^    
>success : (value: T) => any
>        : ^     ^^ ^^^^^   
>value : T
>      : ^
>error : (error: any) => any
>      : ^     ^^   ^^^^^   
>error : any
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
}
var p1: IPromise3<string>;
>p1 : IPromise3<string>
>   : ^^^^^^^^^^^^^^^^^

var p2: IPromise3<string> = p1.then(function (x) {
>p2 : IPromise3<string>
>   : ^^^^^^^^^^^^^^^^^
>p1.then(function (x) {    return x;}) : IPromise3<string>
>                                      : ^^^^^^^^^^^^^^^^^
>p1.then : { <U>(success?: (value: string) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: string) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }

>p1 : IPromise3<string>
>   : ^^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: string) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }

>function (x) {    return x;} : (x: string) => string
>                             : ^ ^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    return x;
>x : string
>  : ^^^^^^

});

