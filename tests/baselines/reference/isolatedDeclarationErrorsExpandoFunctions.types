//// [tests/cases/compiler/isolatedDeclarationErrorsExpandoFunctions.ts] ////

=== isolatedDeclarationErrorsExpandoFunctions.ts ===
export function foo() {}
>foo : typeof foo
>    : ^^^^^^^^^^

foo.apply = () => {}
>foo.apply = () => {} : () => void
>                     : ^^^^^^^^^^
>foo.apply : () => void
>          : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>apply : () => void
>      : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

foo.call = ()=> {}
>foo.call = ()=> {} : () => void
>                   : ^^^^^^^^^^
>foo.call : () => void
>         : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>call : () => void
>     : ^^^^^^^^^^
>()=> {} : () => void
>        : ^^^^^^^^^^

foo.bind = ()=> {}
>foo.bind = ()=> {} : () => void
>                   : ^^^^^^^^^^
>foo.bind : () => void
>         : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>bind : () => void
>     : ^^^^^^^^^^
>()=> {} : () => void
>        : ^^^^^^^^^^

foo.caller = ()=> {}
>foo.caller = ()=> {} : () => void
>                     : ^^^^^^^^^^
>foo.caller : () => void
>           : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>caller : () => void
>       : ^^^^^^^^^^
>()=> {} : () => void
>        : ^^^^^^^^^^

foo.toString = ()=> {}
>foo.toString = ()=> {} : () => void
>                       : ^^^^^^^^^^
>foo.toString : () => void
>             : ^^^^^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>toString : () => void
>         : ^^^^^^^^^^
>()=> {} : () => void
>        : ^^^^^^^^^^

foo.length = 10
>foo.length = 10 : 10
>                : ^^
>foo.length : number
>           : ^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>length : number
>       : ^^^^^^
>10 : 10
>   : ^^

foo.length = 10
>foo.length = 10 : 10
>                : ^^
>foo.length : number
>           : ^^^^^^
>foo : typeof foo
>    : ^^^^^^^^^^
>length : number
>       : ^^^^^^
>10 : 10
>   : ^^

