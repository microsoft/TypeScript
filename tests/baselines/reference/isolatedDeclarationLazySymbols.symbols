//// [tests/cases/compiler/isolatedDeclarationLazySymbols.ts] ////

=== isolatedDeclarationLazySymbols.ts ===
export function foo() {
>foo : Symbol(foo, Decl(isolatedDeclarationLazySymbols.ts, 0, 0), Decl(isolatedDeclarationLazySymbols.ts, 9, 10), Decl(isolatedDeclarationLazySymbols.ts, 11, 26))

}

const o = {
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))

    ["prop.inner"]: "a",
>["prop.inner"] : Symbol(["prop.inner"], Decl(isolatedDeclarationLazySymbols.ts, 4, 11))
>"prop.inner" : Symbol(["prop.inner"], Decl(isolatedDeclarationLazySymbols.ts, 4, 11))

    prop: {
>prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))

        inner: "b",
>inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))
    }
} as const
>const : Symbol(const)

foo[o["prop.inner"]] ="A";
>foo : Symbol(foo, Decl(isolatedDeclarationLazySymbols.ts, 0, 0), Decl(isolatedDeclarationLazySymbols.ts, 9, 10), Decl(isolatedDeclarationLazySymbols.ts, 11, 26))
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))
>"prop.inner" : Symbol(["prop.inner"], Decl(isolatedDeclarationLazySymbols.ts, 4, 11))

foo[o.prop.inner] = "B";
>foo : Symbol(foo, Decl(isolatedDeclarationLazySymbols.ts, 0, 0), Decl(isolatedDeclarationLazySymbols.ts, 9, 10), Decl(isolatedDeclarationLazySymbols.ts, 11, 26))
>o.prop.inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))
>o.prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))
>prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))
>inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))

export class Foo {
>Foo : Symbol(Foo, Decl(isolatedDeclarationLazySymbols.ts, 12, 24))

    [o["prop.inner"]] ="A"
>[o["prop.inner"]] : Symbol(Foo[o["prop.inner"]], Decl(isolatedDeclarationLazySymbols.ts, 14, 18))
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))
>"prop.inner" : Symbol(["prop.inner"], Decl(isolatedDeclarationLazySymbols.ts, 4, 11))

    [o.prop.inner] = "B"
>o.prop.inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))
>o.prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))
>prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))
>inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))
}

export let oo = {
>oo : Symbol(oo, Decl(isolatedDeclarationLazySymbols.ts, 19, 10))

    [o['prop.inner']]:"A",
>[o['prop.inner']] : Symbol([o['prop.inner']], Decl(isolatedDeclarationLazySymbols.ts, 19, 17))
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))
>'prop.inner' : Symbol(["prop.inner"], Decl(isolatedDeclarationLazySymbols.ts, 4, 11))

    [o.prop.inner]: "B",
>[o.prop.inner] : Symbol([o.prop.inner], Decl(isolatedDeclarationLazySymbols.ts, 20, 26))
>o.prop.inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))
>o.prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))
>o : Symbol(o, Decl(isolatedDeclarationLazySymbols.ts, 4, 5))
>prop : Symbol(prop, Decl(isolatedDeclarationLazySymbols.ts, 5, 24))
>inner : Symbol(inner, Decl(isolatedDeclarationLazySymbols.ts, 6, 11))
}
