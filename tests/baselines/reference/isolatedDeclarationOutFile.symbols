//// [tests/cases/compiler/isolatedDeclarationOutFile.ts] ////

=== a.ts ===
export class A {
>A : Symbol(A, Decl(a.ts, 0, 0))

    toUpper(msg: string): string {
>toUpper : Symbol(A.toUpper, Decl(a.ts, 0, 16))
>msg : Symbol(msg, Decl(a.ts, 1, 12))

        return msg.toUpperCase();
>msg.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
>msg : Symbol(msg, Decl(a.ts, 1, 12))
>toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
    }
}

=== b.ts ===
import { A } from "./a";
>A : Symbol(A, Decl(b.ts, 0, 8))

export class B extends A {
>B : Symbol(B, Decl(b.ts, 0, 24))
>A : Symbol(A, Decl(b.ts, 0, 8))

    toFixed(n: number): string {
>toFixed : Symbol(B.toFixed, Decl(b.ts, 2, 26))
>n : Symbol(n, Decl(b.ts, 3, 12))

        return n.toFixed(6);
>n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>n : Symbol(n, Decl(b.ts, 3, 12))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
    }
}

export function makeB(): A {
>makeB : Symbol(makeB, Decl(b.ts, 6, 1))
>A : Symbol(A, Decl(b.ts, 0, 8))

    return new B();
>B : Symbol(B, Decl(b.ts, 0, 24))
}

