//// [tests/cases/compiler/isolatedModulesGlobalNamespacesAndEnums.ts] ////

=== script-namespaces.ts ===
namespace Instantiated {
>Instantiated : Symbol(Instantiated, Decl(script-namespaces.ts, 0, 0))

    export const x = 1;
>x : Symbol(x, Decl(script-namespaces.ts, 1, 16))
}
namespace Uninstantiated {
>Uninstantiated : Symbol(Uninstantiated, Decl(script-namespaces.ts, 2, 1))

    export type T = number;
>T : Symbol(T, Decl(script-namespaces.ts, 3, 26))
}
declare namespace Ambient {
>Ambient : Symbol(Ambient, Decl(script-namespaces.ts, 5, 1))

    export const x: number;
>x : Symbol(x, Decl(script-namespaces.ts, 7, 16))
}

=== module-namespaces.ts ===
export namespace Instantiated {
>Instantiated : Symbol(Instantiated, Decl(module-namespaces.ts, 0, 0))

    export const x = 1;
>x : Symbol(x, Decl(module-namespaces.ts, 1, 16))
}

=== enum1.ts ===
enum Enum { A, B, C }
>Enum : Symbol(Enum, Decl(enum1.ts, 0, 0))
>A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
>B : Symbol(Enum.B, Decl(enum1.ts, 0, 14))
>C : Symbol(Enum.C, Decl(enum1.ts, 0, 17))

declare enum Enum { X = 1_000_000 }
>Enum : Symbol(Enum, Decl(enum1.ts, 0, 21))
>X : Symbol(Enum.X, Decl(enum1.ts, 1, 19))

const d = 'd';
>d : Symbol(d, Decl(enum1.ts, 2, 5))

=== enum2.ts ===
enum Enum {
>Enum : Symbol(Enum, Decl(enum2.ts, 0, 0))

    D = d,
>D : Symbol(Enum.D, Decl(enum2.ts, 0, 11))
>d : Symbol(d, Decl(enum1.ts, 2, 5))

    E = A, // error
>E : Symbol(Enum.E, Decl(enum2.ts, 1, 10))

    Y = X, // error
>Y : Symbol(Enum.Y, Decl(enum2.ts, 2, 10))

    Z = Enum.A
>Z : Symbol(Enum.Z, Decl(enum2.ts, 3, 10))
>Enum.A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
>Enum : Symbol(Enum, Decl(enum1.ts, 0, 0))
>A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
}

declare enum Enum {
>Enum : Symbol(Enum, Decl(enum2.ts, 5, 1))

    F = A
>F : Symbol(Enum.F, Decl(enum2.ts, 7, 19))
}
