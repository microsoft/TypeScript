//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassImplementsGenericsSerialization.ts] ////

=== interface.ts ===
export interface Encoder<T> {
>Encoder : Symbol(Encoder, Decl(interface.ts, 0, 0))
>T : Symbol(T, Decl(interface.ts, 0, 25))

    encode(value: T): Uint8Array
>encode : Symbol(Encoder.encode, Decl(interface.ts, 0, 29))
>value : Symbol(value, Decl(interface.ts, 1, 11))
>T : Symbol(T, Decl(interface.ts, 0, 25))
>Uint8Array : Symbol(Uint8Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
}
=== lib.js ===
/**
 * @template T
 * @implements {IEncoder<T>}
 */
export class Encoder {
>Encoder : Symbol(Encoder, Decl(lib.js, 0, 0))

    /**
     * @param {T} value 
     */
    encode(value) {
>encode : Symbol(Encoder.encode, Decl(lib.js, 4, 22))
>value : Symbol(value, Decl(lib.js, 8, 11))

        return new Uint8Array(0)
>Uint8Array : Symbol(Uint8Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
    }
}


/**
 * @template T
 * @typedef {import('./interface').Encoder<T>} IEncoder
 */
