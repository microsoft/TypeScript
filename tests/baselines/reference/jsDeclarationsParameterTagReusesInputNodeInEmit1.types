//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsParameterTagReusesInputNodeInEmit1.ts] ////

=== base.js ===
class Base {
>Base : Base
>     : ^^^^

    constructor() {}
}

const BaseFactory = () => {
>BaseFactory : { (): Base; Base: typeof Base; }
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => {    return new Base();} : { (): Base; Base: typeof Base; }
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return new Base();
>new Base() : Base
>           : ^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^

};

BaseFactory.Base = Base;
>BaseFactory.Base = Base : typeof Base
>                        : ^^^^^^^^^^^
>BaseFactory.Base : typeof Base
>                 : ^^^^^^^^^^^
>BaseFactory : { (): Base; Base: typeof Base; }
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^
>Base : typeof Base
>     : ^^^^^^^^^^^

module.exports = BaseFactory;
>module.exports = BaseFactory : { (): Base; Base: typeof Base; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>module.exports : { (): Base; Base: typeof Base; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>module : { exports: { (): Base; Base: typeof Base; }; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>exports : { (): Base; Base: typeof Base; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>BaseFactory : { (): Base; Base: typeof Base; }
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=== file.js ===
/** @typedef {import('./base')} BaseFactory */
/**
 * @callback BaseFactoryFactory
 * @param {import('./base')} factory
 */
/** @enum {import('./base')} */
const couldntThinkOfAny = {}
>couldntThinkOfAny : {}
>                  : ^^
>{} : {}
>   : ^^

/**
 *
 * @param {InstanceType<BaseFactory["Base"]>} base
 * @returns {InstanceType<BaseFactory["Base"]>}
 */
const test = (base) => {
>test : (base: InstanceType<BaseFactory["Base"]>) => InstanceType<BaseFactory["Base"]>
>     : ^    ^^                                 ^^^^^                                 
>(base) => {    return base;} : (base: InstanceType<BaseFactory["Base"]>) => InstanceType<BaseFactory["Base"]>
>                             : ^    ^^                                 ^^^^^                                 
>base : Base
>     : ^^^^

    return base;
>base : Base
>     : ^^^^

};

