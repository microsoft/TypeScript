//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsTypedefFunction.ts] ////

=== foo.js ===
/**
 * @typedef {{
 *   [id: string]: [Function, Function];
 * }} ResolveRejectMap
 */

let id = 0
>id : number
>   : ^^^^^^
>0 : 0
>  : ^

/**
 * @param {ResolveRejectMap} handlers
 * @returns {Promise<any>}
 */
const send = handlers => new Promise((resolve, reject) => {
>send : (handlers: ResolveRejectMap) => Promise<any>
>     : ^        ^^                ^^^^^            
>handlers => new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : (handlers: ResolveRejectMap) => Promise<any>
>                                                                                     : ^        ^^                ^^^^^            
>handlers : ResolveRejectMap
>         : ^^^^^^^^^^^^^^^^
>new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : Promise<any>
>                                                                         : ^^^^^^^^^^^^
>Promise : PromiseConstructor
>        : ^^^^^^^^^^^^^^^^^^
>(resolve, reject) => {  handlers[++id] = [resolve, reject]} : (resolve: (value: any) => void, reject: (reason?: any) => void) => void
>                                                            : ^       ^^^     ^^^^^^^^^^    ^^      ^^^      ^^^   ^^^^^    ^^^^^^^^^
>resolve : (value: any) => void
>        : ^     ^^^^^^^^^^    
>reject : (reason?: any) => void
>       : ^      ^^^   ^^^^^    

  handlers[++id] = [resolve, reject]
>handlers[++id] = [resolve, reject] : [(value: any) => void, (reason?: any) => void]
>                                   : ^^     ^^^^^^^^^^    ^^^      ^^^   ^^^^^    ^
>handlers[++id] : [Function, Function]
>               : ^^^^^^^^^^^^^^^^^^^^
>handlers : ResolveRejectMap
>         : ^^^^^^^^^^^^^^^^
>++id : number
>     : ^^^^^^
>id : number
>   : ^^^^^^
>[resolve, reject] : [(value: any) => void, (reason?: any) => void]
>                  : ^^     ^^^^^^^^^^    ^^^      ^^^   ^^^^^    ^
>resolve : (value: any) => void
>        : ^     ^^^^^^^^^^    
>reject : (reason?: any) => void
>       : ^      ^^^   ^^^^^    

})
