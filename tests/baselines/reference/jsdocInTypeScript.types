//// [tests/cases/compiler/jsdocInTypeScript.ts] ////

=== jsdocInTypeScript.ts ===
// JSDoc typedef tags are not bound TypeScript files.
/** @typedef {function} T */
declare const x: T;
>x : T
>  : ^

class T {
>T : T
>  : ^

    prop: number;
>prop : number
>     : ^^^^^^
}

x.prop;
>x.prop : number
>       : ^^^^^^
>x : T
>  : ^
>prop : number
>     : ^^^^^^

// Just to be sure that @property has no impact either.
/**
 * @typedef {Object} MyType
 * @property {string} yes
 */
declare const myType: MyType; // should error, no such type
>myType : MyType
>       : ^^^^^^

// @param type has no effect.
/**
 * @param {number} x
 * @returns string
 */
function f(x: boolean) { return x * 2; } // Should error
>f : (x: boolean) => number
>  : ^ ^^       ^^^^^^^^^^^
>x : boolean
>  : ^^^^^^^
>x * 2 : number
>      : ^^^^^^
>x : boolean
>  : ^^^^^^^
>2 : 2
>  : ^

// Should fail, because it takes a boolean and returns a number
f(1); f(true).length;
>f(1) : number
>     : ^^^^^^
>f : (x: boolean) => number
>  : ^ ^^       ^^^^^^^^^^^
>1 : 1
>  : ^
>f(true).length : any
>               : ^^^
>f(true) : number
>        : ^^^^^^
>f : (x: boolean) => number
>  : ^ ^^       ^^^^^^^^^^^
>true : true
>     : ^^^^
>length : any
>       : ^^^

// @type has no effect either.
/** @type {{ x?: number }} */
const z = {};
>z : {}
>  : ^^
>{} : {}
>   : ^^

z.x = 1; // Error
>z.x = 1 : 1
>        : ^
>z.x : any
>    : ^^^
>z : {}
>  : ^^
>x : any
>  : ^^^
>1 : 1
>  : ^

// @template tag should not interfere with constraint or default.
/** @template T */
interface I<T extends number = 0> {}

/** @template T */
function tem<T extends number>(t: T): I<T> { return {}; }
>tem : <T extends number>(t: T) => I<T>
>    : ^ ^^^^^^^^^      ^^ ^^ ^^^^^    
>t : T
>  : ^
>{} : {}
>   : ^^

let i: I; // Should succeed thanks to type parameter default
>i : I<0>
>  : ^^^^

/** @typedef {string} N.Str */
import M = N; // Error: @typedef does not create namespaces in TypeScript code.
>M : any
>  : ^^^
>N : any
>  : ^^^

// Not legal JSDoc, but that shouldn't matter in TypeScript.
/**
 * @type {{foo: (function(string, string): string)}}
 */
const obj = { foo: (a, b) => a + b };
>obj : { foo: (a: any, b: any) => any; }
>    : ^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>{ foo: (a, b) => a + b } : { foo: (a: any, b: any) => any; }
>                         : ^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>foo : (a: any, b: any) => any
>    : ^ ^^^^^^^ ^^^^^^^^^^^^^
>(a, b) => a + b : (a: any, b: any) => any
>                : ^ ^^^^^^^ ^^^^^^^^^^^^^
>a : any
>  : ^^^
>b : any
>  : ^^^
>a + b : any
>      : ^^^
>a : any
>  : ^^^
>b : any
>  : ^^^

/** @enum {string} */
var E = {};
>E : {}
>  : ^^
>{} : {}
>   : ^^

E[""];
>E[""] : any
>      : ^^^
>E : {}
>  : ^^
>"" : ""
>   : ^^

// make sure import types in JSDoc are not resolved
/** @type {import("should-not-be-resolved").Type} */
var v = import(String());
>v : Promise<any>
>  : ^^^^^^^^^^^^
>import(String()) : Promise<any>
>                 : ^^^^^^^^^^^^
>String() : string
>         : ^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^

