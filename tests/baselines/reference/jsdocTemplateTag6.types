//// [tests/cases/conformance/jsdoc/jsdocTemplateTag6.ts] ////

=== a.js ===
/**
 * @template const T
 * @param {T} x
 * @returns {T}
 */
function f1(x) {
>f1 : <const T>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^

    return x;
>x : T
>  : ^
}
const t1 = f1("a");
>t1 : "a"
>   : ^^^
>f1("a") : "a"
>        : ^^^
>f1 : <const T>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^^^^ 
>"a" : "a"
>    : ^^^

const t2 = f1(["a", ["b", "c"]]);
>t2 : readonly ["a", readonly ["b", "c"]]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f1(["a", ["b", "c"]]) : readonly ["a", readonly ["b", "c"]]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f1 : <const T>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^^^^ 
>["a", ["b", "c"]] : ["a", ["b", "c"]]
>                  : ^^^^^^^^^^^^^^^^^
>"a" : "a"
>    : ^^^
>["b", "c"] : ["b", "c"]
>           : ^^^^^^^^^^
>"b" : "b"
>    : ^^^
>"c" : "c"
>    : ^^^

const t3 = f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
>t3 : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f1 : <const T>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^^^^ 
>{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: 1; b: "c"; d: ["e", 2, true, { f: "g"; }]; }
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "c"
>  : ^^^
>"c" : "c"
>    : ^^^
>d : ["e", 2, true, { f: "g"; }]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>["e", 2, true, { f: "g" }] : ["e", 2, true, { f: "g"; }]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"e" : "e"
>    : ^^^
>2 : 2
>  : ^
>true : true
>     : ^^^^
>{ f: "g" } : { f: "g"; }
>           : ^^^^^^^^^^^
>f : "g"
>  : ^^^
>"g" : "g"
>    : ^^^

/**
 * @template const T, U
 * @param {T} x
 * @returns {T}
 */
function f2(x) {
>f2 : <const T, U>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^

    return x;
>x : T
>  : ^

};
const t4 = f2('a');
>t4 : "a"
>   : ^^^
>f2('a') : "a"
>        : ^^^
>f2 : <const T, U>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^ ^^^^^ 
>'a' : "a"
>    : ^^^

const t5 = f2(['a', ['b', 'c']]);
>t5 : readonly ["a", readonly ["b", "c"]]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f2(['a', ['b', 'c']]) : readonly ["a", readonly ["b", "c"]]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f2 : <const T, U>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^ ^^^^^ 
>['a', ['b', 'c']] : ["a", ["b", "c"]]
>                  : ^^^^^^^^^^^^^^^^^
>'a' : "a"
>    : ^^^
>['b', 'c'] : ["b", "c"]
>           : ^^^^^^^^^^
>'b' : "b"
>    : ^^^
>'c' : "c"
>    : ^^^

const t6 = f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
>t6 : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : { readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f2 : <const T, U>(x: T) => T
>   : ^^^^^^^ ^^ ^^ ^^ ^^^^^ 
>{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: 1; b: "c"; d: ["e", 2, true, { f: "g"; }]; }
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "c"
>  : ^^^
>"c" : "c"
>    : ^^^
>d : ["e", 2, true, { f: "g"; }]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>["e", 2, true, { f: "g" }] : ["e", 2, true, { f: "g"; }]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"e" : "e"
>    : ^^^
>2 : 2
>  : ^
>true : true
>     : ^^^^
>{ f: "g" } : { f: "g"; }
>           : ^^^^^^^^^^^
>f : "g"
>  : ^^^
>"g" : "g"
>    : ^^^

/**
 * @template const T
 * @param {T} x
 * @returns {T[]}
 */
function f3(x) {
>f3 : <const T>(x: T) => T[]
>   : ^^^^^^^ ^^ ^^ ^^^^^   
>x : T
>  : ^

    return [x];
>[x] : T[]
>    : ^^^
>x : T
>  : ^
}
const t7 = f3("hello");
>t7 : "hello"[]
>   : ^^^^^^^^^
>f3("hello") : "hello"[]
>            : ^^^^^^^^^
>f3 : <const T>(x: T) => T[]
>   : ^^^^^^^ ^^ ^^ ^^^^^   
>"hello" : "hello"
>        : ^^^^^^^

const t8 = f3("hello");
>t8 : "hello"[]
>   : ^^^^^^^^^
>f3("hello") : "hello"[]
>            : ^^^^^^^^^
>f3 : <const T>(x: T) => T[]
>   : ^^^^^^^ ^^ ^^ ^^^^^   
>"hello" : "hello"
>        : ^^^^^^^

/**
 * @template const T
 * @param {[T, T]} x
 * @returns {T}
 */
function f4(x) {
>f4 : <const T>(x: [T, T]) => T
>   : ^^^^^^^ ^^ ^^      ^^^^^ 
>x : [T, T]
>  : ^^^^^^

    return x[0];
>x[0] : T
>     : ^
>x : [T, T]
>  : ^^^^^^
>0 : 0
>  : ^
}
const t9 = f4([[1, "x"], [2, "y"]]);
>t9 : readonly [1, "x"] | readonly [2, "y"]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f4([[1, "x"], [2, "y"]]) : readonly [1, "x"] | readonly [2, "y"]
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f4 : <const T>(x: [T, T]) => T
>   : ^^^^^^^ ^^ ^^      ^^^^^ 
>[[1, "x"], [2, "y"]] : [[1, "x"], [2, "y"]]
>                     : ^^^^^^^^^^^^^^^^^^^^
>[1, "x"] : [1, "x"]
>         : ^^^^^^^^
>1 : 1
>  : ^
>"x" : "x"
>    : ^^^
>[2, "y"] : [2, "y"]
>         : ^^^^^^^^
>2 : 2
>  : ^
>"y" : "y"
>    : ^^^

const t10 = f4([{ a: 1, b: "x" }, { a: 2, b: "y" }]);
>t10 : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f4([{ a: 1, b: "x" }, { a: 2, b: "y" }]) : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f4 : <const T>(x: [T, T]) => T
>   : ^^^^^^^ ^^ ^^      ^^^^^ 
>[{ a: 1, b: "x" }, { a: 2, b: "y" }] : [{ a: 1; b: "x"; }, { a: 2; b: "y"; }]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ a: 1, b: "x" } : { a: 1; b: "x"; }
>                 : ^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "x"
>  : ^^^
>"x" : "x"
>    : ^^^
>{ a: 2, b: "y" } : { a: 2; b: "y"; }
>                 : ^^^^^^^^^^^^^^^^^
>a : 2
>  : ^
>2 : 2
>  : ^
>b : "y"
>  : ^^^
>"y" : "y"
>    : ^^^

/**
 * @template const T
 * @param {{ x: T, y: T}} obj
 * @returns {T}
 */
function f5(obj) {
>f5 : <const T>(obj: { x: T; y: T; }) => T
>   : ^^^^^^^ ^^   ^^               ^^^^^ 
>obj : { x: T; y: T; }
>    : ^^^^^ ^^^^^ ^^^

    return obj.x;
>obj.x : T
>      : ^
>obj : { x: T; y: T; }
>    : ^^^^^ ^^^^^ ^^^
>x : T
>  : ^
}
const t11 = f5({ x: [1, "x"], y: [2, "y"] });
>t11 : readonly [1, "x"] | readonly [2, "y"]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f5({ x: [1, "x"], y: [2, "y"] }) : readonly [1, "x"] | readonly [2, "y"]
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f5 : <const T>(obj: { x: T; y: T; }) => T
>   : ^^^^^^^ ^^   ^^               ^^^^^ 
>{ x: [1, "x"], y: [2, "y"] } : { x: [1, "x"]; y: [2, "y"]; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : [1, "x"]
>  : ^^^^^^^^
>[1, "x"] : [1, "x"]
>         : ^^^^^^^^
>1 : 1
>  : ^
>"x" : "x"
>    : ^^^
>y : [2, "y"]
>  : ^^^^^^^^
>[2, "y"] : [2, "y"]
>         : ^^^^^^^^
>2 : 2
>  : ^
>"y" : "y"
>    : ^^^

const t12 = f5({ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } });
>t12 : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f5({ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } }) : { readonly a: 1; readonly b: "x"; } | { readonly a: 2; readonly b: "y"; }
>                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f5 : <const T>(obj: { x: T; y: T; }) => T
>   : ^^^^^^^ ^^   ^^               ^^^^^ 
>{ x: { a: 1, b: "x" }, y: { a: 2, b: "y" } } : { x: { a: 1; b: "x"; }; y: { a: 2; b: "y"; }; }
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : { a: 1; b: "x"; }
>  : ^^^^^^^^^^^^^^^^^
>{ a: 1, b: "x" } : { a: 1; b: "x"; }
>                 : ^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "x"
>  : ^^^
>"x" : "x"
>    : ^^^
>y : { a: 2; b: "y"; }
>  : ^^^^^^^^^^^^^^^^^
>{ a: 2, b: "y" } : { a: 2; b: "y"; }
>                 : ^^^^^^^^^^^^^^^^^
>a : 2
>  : ^
>2 : 2
>  : ^
>b : "y"
>  : ^^^
>"y" : "y"
>    : ^^^

/**
 * @template const T
 */
class C {
>C : C<T>
>  : ^^^^

    /**
     * @param {T} x
     */
    constructor(x) {}
>x : T
>  : ^

    /**
     * @template const U
     * @param {U} x
     */
    foo(x) {
>foo : <const U>(x: U) => U
>    : ^^^^^^^ ^^ ^^ ^^^^^^
>x : U
>  : ^

        return x;
>x : U
>  : ^
    }
}

const t13 = new C({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
>t13 : C<{ readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>new C({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] }) : C<{ readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }>
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^
>{ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] } : { a: 1; b: "c"; d: ["e", 2, true, { f: "g"; }]; }
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "c"
>  : ^^^
>"c" : "c"
>    : ^^^
>d : ["e", 2, true, { f: "g"; }]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>["e", 2, true, { f: "g" }] : ["e", 2, true, { f: "g"; }]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"e" : "e"
>    : ^^^
>2 : 2
>  : ^
>true : true
>     : ^^^^
>{ f: "g" } : { f: "g"; }
>           : ^^^^^^^^^^^
>f : "g"
>  : ^^^
>"g" : "g"
>    : ^^^

const t14 = t13.foo(["a", ["b", "c"]]);
>t14 : readonly ["a", readonly ["b", "c"]]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>t13.foo(["a", ["b", "c"]]) : readonly ["a", readonly ["b", "c"]]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>t13.foo : <const U>(x: U) => U
>        : ^^^^^^^ ^^ ^^^^^^^^^
>t13 : C<{ readonly a: 1; readonly b: "c"; readonly d: readonly ["e", 2, true, { readonly f: "g"; }]; }>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <const U>(x: U) => U
>    : ^^^^^^^ ^^ ^^^^^^^^^
>["a", ["b", "c"]] : ["a", ["b", "c"]]
>                  : ^^^^^^^^^^^^^^^^^
>"a" : "a"
>    : ^^^
>["b", "c"] : ["b", "c"]
>           : ^^^^^^^^^^
>"b" : "b"
>    : ^^^
>"c" : "c"
>    : ^^^

/**
 * @template {readonly unknown[]} const T
 * @param {T} args
 * @returns {T}
 */
function f6(...args) {
>f6 : <const T extends readonly unknown[]>(...args: T) => T
>   : ^^^^^^^ ^^^^^^^^^                  ^^^^^    ^^ ^^^^^ 
>args : T
>     : ^

    return args;
>args : T
>     : ^
}
const t15 = f6(1, 'b', { a: 1, b: 'x' });
>t15 : readonly [1, "b", { readonly a: 1; readonly b: "x"; }]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f6(1, 'b', { a: 1, b: 'x' }) : readonly [1, "b", { readonly a: 1; readonly b: "x"; }]
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f6 : <const T extends readonly unknown[]>(...args: T) => T
>   : ^^^^^^^ ^^^^^^^^^                  ^^^^^    ^^ ^^^^^ 
>1 : 1
>  : ^
>'b' : "b"
>    : ^^^
>{ a: 1, b: 'x' } : { a: 1; b: "x"; }
>                 : ^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "x"
>  : ^^^
>'x' : "x"
>    : ^^^

