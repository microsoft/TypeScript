//// [tests/cases/compiler/jsxExcessPropsAndAssignability.tsx] ////

=== Performance Stats ===
Assignability cache: 2,500
Type Count: 10,000
Instantiation count: 100,000
Symbol count: 50,000

=== jsxExcessPropsAndAssignability.tsx ===
/// <reference path="react16.d.ts" />

import * as React from 'react';
>React : typeof React
>      : ^^^^^^^^^^^^

const myHoc = <ComposedComponentProps extends any>(
>myHoc : <ComposedComponentProps extends unknown>(ComposedComponent: React.ComponentClass<ComposedComponentProps>) => void
>      : ^                      ^^^^^^^^^^^^^^^^^^                 ^^                                            ^^^^^^^^^
><ComposedComponentProps extends any>(    ComposedComponent: React.ComponentClass<ComposedComponentProps>,) => {    type WrapperComponentProps = ComposedComponentProps & { myProp: string };    const WrapperComponent: React.ComponentClass<WrapperComponentProps> = null as any;    const props: ComposedComponentProps = null as any;    <WrapperComponent {...props} myProp={'1000000'} />;    <WrapperComponent {...props} myProp={1000000} />;} : <ComposedComponentProps extends unknown>(ComposedComponent: React.ComponentClass<ComposedComponentProps>) => void


    ComposedComponent: React.ComponentClass<ComposedComponentProps>,
>ComposedComponent : React.ComponentClass<ComposedComponentProps, any>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>React : any
>      : ^^^

) => {
    type WrapperComponentProps = ComposedComponentProps & { myProp: string };
>WrapperComponentProps : ComposedComponentProps & { myProp: string; }
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>myProp : string
>       : ^^^^^^

    const WrapperComponent: React.ComponentClass<WrapperComponentProps> = null as any;
>WrapperComponent : React.ComponentClass<ComposedComponentProps & { myProp: string; }, any>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^
>React : any
>      : ^^^
>null as any : any
>            : ^^^

    const props: ComposedComponentProps = null as any;
>props : ComposedComponentProps
>      : ^^^^^^^^^^^^^^^^^^^^^^
>null as any : any
>            : ^^^

    <WrapperComponent {...props} myProp={'1000000'} />;
><WrapperComponent {...props} myProp={'1000000'} /> : JSX.Element
>                                                   : ^^^^^^^^^^^
>WrapperComponent : React.ComponentClass<ComposedComponentProps & { myProp: string; }, any>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^
>props : ComposedComponentProps
>      : ^^^^^^^^^^^^^^^^^^^^^^
>myProp : "1000000"
>       : ^^^^^^^^^
>'1000000' : "1000000"
>          : ^^^^^^^^^

    <WrapperComponent {...props} myProp={1000000} />;
><WrapperComponent {...props} myProp={1000000} /> : JSX.Element
>                                                 : ^^^^^^^^^^^
>WrapperComponent : React.ComponentClass<ComposedComponentProps & { myProp: string; }, any>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^
>props : ComposedComponentProps
>      : ^^^^^^^^^^^^^^^^^^^^^^
>myProp : number
>       : ^^^^^^
>1000000 : 1000000
>        : ^^^^^^^

};

