//// [tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts] ////

=== labeledStatementWithLabel.ts ===
label: function fn() { }
>fn : Symbol(fn, Decl(labeledStatementWithLabel.ts, 0, 6))

label: function* gen() { }
>gen : Symbol(gen, Decl(labeledStatementWithLabel.ts, 1, 6))

label: async function gen1() { }
>gen1 : Symbol(gen1, Decl(labeledStatementWithLabel.ts, 2, 6))

label: enum E {}
>E : Symbol(E, Decl(labeledStatementWithLabel.ts, 3, 6))

label: interface I {}
>I : Symbol(I, Decl(labeledStatementWithLabel.ts, 4, 6))

label: class C { }
>C : Symbol(C, Decl(labeledStatementWithLabel.ts, 5, 6))

label: var a = 1;
>a : Symbol(a, Decl(labeledStatementWithLabel.ts, 6, 10))

label: let b = 1;
>b : Symbol(b, Decl(labeledStatementWithLabel.ts, 7, 10))

label: const c = 1;
>c : Symbol(c, Decl(labeledStatementWithLabel.ts, 8, 12))

label: namespace M { }
>M : Symbol(M, Decl(labeledStatementWithLabel.ts, 10, 6))

label: namespace N {}
>N : Symbol(N, Decl(labeledStatementWithLabel.ts, 11, 6))

label: type T = {}
>T : Symbol(T, Decl(labeledStatementWithLabel.ts, 12, 6))

