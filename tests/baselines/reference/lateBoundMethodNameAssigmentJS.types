//// [tests/cases/compiler/lateBoundMethodNameAssigmentJS.ts] ////

=== lateBoundMethodNameAssigmentJS.js ===
const _symbol = Symbol("_sym");
>_symbol : unique symbol
>        : ^^^^^^^^^^^^^
>Symbol("_sym") : unique symbol
>               : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>"_sym" : "_sym"
>       : ^^^^^^

export class MyClass {
>MyClass : MyClass
>        : ^^^^^^^

    constructor() {
        this[_symbol] = this[_symbol].bind(this);
>this[_symbol] = this[_symbol].bind(this) : () => Promise<void>
>                                         : ^^^^^^^^^^^^^^^^^^^
>this[_symbol] : () => Promise<void>
>              : ^^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>_symbol : unique symbol
>        : ^^^^^^^^^^^^^
>this[_symbol].bind(this) : () => Promise<void>
>                         : ^^^^^^^^^^^^^^^^^^^
>this[_symbol].bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
>                   : ^^^ ^^    ^^ ^^       ^^                    ^^^                    ^^^ ^^ ^^^^^^^^^     ^^ ^^^^^^^^^     ^^ ^^    ^^                                     ^^       ^^ ^^^^^    ^^ ^^^                 ^^^
>this[_symbol] : () => Promise<void>
>              : ^^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>_symbol : unique symbol
>        : ^^^^^^^^^^^^^
>bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
>     : ^^^ ^^    ^^ ^^       ^^                    ^^^                    ^^^ ^^ ^^^^^^^^^     ^^ ^^^^^^^^^     ^^ ^^    ^^                                     ^^       ^^ ^^^^^    ^^ ^^^                 ^^^
>this : this
>     : ^^^^
    }

    async [_symbol]() { }
>[_symbol] : () => Promise<void>
>          : ^^^^^^^^^^^^^^^^^^^
>_symbol : unique symbol
>        : ^^^^^^^^^^^^^
}
