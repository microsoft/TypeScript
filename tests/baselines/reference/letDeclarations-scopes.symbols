//// [tests/cases/compiler/letDeclarations-scopes.ts] ////

=== letDeclarations-scopes.ts ===
// global
let l = "string";
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 1, 3))

var n: number;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))

// Control flow statements with blocks
if (true) {
    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 7, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 7, 7))
}
else {
    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 11, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 11, 7))
}

while (true) {
    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 16, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 16, 7))
}

do {
   let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 21, 6))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 21, 6))

} while (true);

var obj;
>obj : Symbol(obj, Decl(letDeclarations-scopes.ts, 25, 3))

with (obj) {
>obj : Symbol(obj, Decl(letDeclarations-scopes.ts, 25, 3))

    let l = 0;
    n = l;
}

for (var i = 0; i < 10; i++) {
>i : Symbol(i, Decl(letDeclarations-scopes.ts, 31, 8))
>i : Symbol(i, Decl(letDeclarations-scopes.ts, 31, 8))
>i : Symbol(i, Decl(letDeclarations-scopes.ts, 31, 8))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 32, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 32, 7))
}

for (var i2 in {}) {
>i2 : Symbol(i2, Decl(letDeclarations-scopes.ts, 36, 8))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 37, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 37, 7))
}

if (true) {
    label: let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 42, 14))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 42, 14))
}

while (false) {
    label2: label3: label4: let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 47, 31))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 47, 31))
}

for (let l = 0; n = l; l++) {
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 51, 8))
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 51, 8))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 51, 8))

    let l = true;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 52, 7))

    var b3: boolean = l;
>b3 : Symbol(b3, Decl(letDeclarations-scopes.ts, 53, 7))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 52, 7))
}

for (let l in {}) {
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 56, 8))

}

// Try/catch/finally
try {
    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 62, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 62, 7))
}
catch (e) {
>e : Symbol(e, Decl(letDeclarations-scopes.ts, 65, 7))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 66, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 66, 7))
}
finally {
    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 70, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 70, 7))
}

// Switch
switch (0) {
    case 0:
        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 77, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 77, 11))

        break;
}

// blocks
{
    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 84, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 84, 7))
    {
        let l = false;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 87, 11))

        var b: boolean = l;
>b : Symbol(b, Decl(letDeclarations-scopes.ts, 88, 11))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 87, 11))
    }
}

// functions
function F() {
>F : Symbol(F, Decl(letDeclarations-scopes.ts, 90, 1))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 94, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 94, 7))
}

var F2 = () => {
>F2 : Symbol(F2, Decl(letDeclarations-scopes.ts, 98, 3))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 99, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 99, 7))

};

var F3 = function () {
>F3 : Symbol(F3, Decl(letDeclarations-scopes.ts, 103, 3))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 104, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 104, 7))

};

// modules
namespace m {
>m : Symbol(m, Decl(letDeclarations-scopes.ts, 106, 2))

    let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 110, 7))

    n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 110, 7))

    {
       let l = false;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 114, 10))

       var b2: boolean = l;
>b2 : Symbol(b2, Decl(letDeclarations-scopes.ts, 115, 10))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 114, 10))
    }

    lable: let l2 = 0;
>l2 : Symbol(l2, Decl(letDeclarations-scopes.ts, 118, 14))
}

// methods
class C {
>C : Symbol(C, Decl(letDeclarations-scopes.ts, 119, 1))

    constructor() {
        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 124, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 124, 11))
    }

    method() {
>method : Symbol(C.method, Decl(letDeclarations-scopes.ts, 126, 5))

        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 129, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 129, 11))
    }

    get v() {
>v : Symbol(C.v, Decl(letDeclarations-scopes.ts, 131, 5), Decl(letDeclarations-scopes.ts, 137, 5))

        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 134, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 134, 11))

        return n;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
    }

    set v(value) {
>v : Symbol(C.v, Decl(letDeclarations-scopes.ts, 131, 5), Decl(letDeclarations-scopes.ts, 137, 5))
>value : Symbol(value, Decl(letDeclarations-scopes.ts, 139, 10))

        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 140, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 140, 11))
    }
}

// object literals
var o = {
>o : Symbol(o, Decl(letDeclarations-scopes.ts, 146, 3))

    f() {
>f : Symbol(f, Decl(letDeclarations-scopes.ts, 146, 9))

        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 148, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 148, 11))

    },
    f2: () => {
>f2 : Symbol(f2, Decl(letDeclarations-scopes.ts, 150, 6))

        let l = 0;
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 152, 11))

        n = l;
>n : Symbol(n, Decl(letDeclarations-scopes.ts, 3, 3))
>l : Symbol(l, Decl(letDeclarations-scopes.ts, 152, 11))
    }
}
