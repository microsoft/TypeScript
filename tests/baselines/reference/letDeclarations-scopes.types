//// [tests/cases/compiler/letDeclarations-scopes.ts] ////

=== letDeclarations-scopes.ts ===
// global
let l = "string";
>l : string
>  : ^^^^^^
>"string" : "string"
>         : ^^^^^^^^

var n: number;
>n : number
>  : ^^^^^^

// Control flow statements with blocks
if (true) {
>true : true
>     : ^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}
else {
    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

while (true) {
>true : true
>     : ^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

do {
   let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

} while (true);
>true : true
>     : ^^^^

var obj;
>obj : any
>    : ^^^

with (obj) {
>obj : any
>    : ^^^

    let l = 0;
>l : any
>  : ^^^
>0 : any
>  : ^^^

    n = l;
>n = l : any
>      : ^^^
>n : any
>  : ^^^
>l : any
>  : ^^^
}

for (var i = 0; i < 10; i++) {
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 10 : boolean
>       : ^^^^^^^
>i : number
>  : ^^^^^^
>10 : 10
>   : ^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

for (var i2 in {}) {
>i2 : string
>   : ^^^^^^
>{} : {}
>   : ^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

if (true) {
>true : true
>     : ^^^^

    label: let l = 0;
>label : any
>      : ^^^
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

while (false) {
>false : false
>      : ^^^^^

    label2: label3: label4: let l = 0;
>label2 : any
>       : ^^^
>label3 : any
>       : ^^^
>label4 : any
>       : ^^^
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

for (let l = 0; n = l; l++) {
>l : number
>  : ^^^^^^
>0 : 0
>  : ^
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
>l++ : number
>    : ^^^^^^
>l : number
>  : ^^^^^^

    let l = true;
>l : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^

    var b3: boolean = l;
>b3 : boolean
>   : ^^^^^^^
>l : boolean
>  : ^^^^^^^
}

for (let l in {}) {
>l : string
>  : ^^^^^^
>{} : {}
>   : ^^

}

// Try/catch/finally
try {
    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}
catch (e) {
>e : any
>  : ^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}
finally {
    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

// Switch
switch (0) {
>0 : 0
>  : ^

    case 0:
>0 : 0
>  : ^

        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

        break;
}

// blocks
{
    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
    {
        let l = false;
>l : boolean
>  : ^^^^^^^
>false : false
>      : ^^^^^

        var b: boolean = l;
>b : boolean
>  : ^^^^^^^
>l : boolean
>  : ^^^^^^^
    }
}

// functions
function F() {
>F : () => void
>  : ^^^^^^^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
}

var F2 = () => {
>F2 : () => void
>   : ^^^^^^^^^^
>() => {    let l = 0;    n = l;} : () => void
>                                 : ^^^^^^^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

};

var F3 = function () {
>F3 : () => void
>   : ^^^^^^^^^^
>function () {    let l = 0;    n = l;} : () => void
>                                       : ^^^^^^^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

};

// modules
module m {
>m : typeof m
>  : ^^^^^^^^

    let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

    n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

    {
       let l = false;
>l : boolean
>  : ^^^^^^^
>false : false
>      : ^^^^^

       var b2: boolean = l;
>b2 : boolean
>   : ^^^^^^^
>l : false
>  : ^^^^^
    }

    lable: let l2 = 0;
>lable : any
>      : ^^^
>l2 : number
>   : ^^^^^^
>0 : 0
>  : ^
}

// methods
class C {
>C : C
>  : ^

    constructor() {
        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
    }

    method() {
>method : () => void
>       : ^^^^^^^^^^

        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
    }

    get v() {
>v : number
>  : ^^^^^^

        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

        return n;
>n : number
>  : ^^^^^^
    }

    set v(value) {
>v : number
>  : ^^^^^^
>value : number
>      : ^^^^^^

        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
    }
}

// object literals
var o = {
>o : { f(): void; f2: () => void; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    f() {        let l = 0;        n = l;    },    f2: () => {        let l = 0;        n = l;    }} : { f(): void; f2: () => void; }
>                                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    f() {
>f : () => void
>  : ^^^^^^^^^^

        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^

    },
    f2: () => {
>f2 : () => void
>   : ^^^^^^^^^^
>() => {        let l = 0;        n = l;    } : () => void
>                                             : ^^^^^^^^^^

        let l = 0;
>l : number
>  : ^^^^^^
>0 : 0
>  : ^

        n = l;
>n = l : number
>      : ^^^^^^
>n : number
>  : ^^^^^^
>l : number
>  : ^^^^^^
    }
}
