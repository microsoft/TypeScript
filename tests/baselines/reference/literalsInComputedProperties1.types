//// [tests/cases/compiler/literalsInComputedProperties1.ts] ////

=== literalsInComputedProperties1.ts ===
let x = {
>x : { 1: number; 2: number; "3": number; "4": number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    1:1,    [2]:1,    "3":1,    ["4"]:1} : { 1: number; 2: number; "3": number; "4": number; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    1:1,
>1 : number
>  : ^^^^^^
>1 : 1
>  : ^

    [2]:1,
>[2] : number
>    : ^^^^^^
>2 : 2
>  : ^
>1 : 1
>  : ^

    "3":1,
>"3" : number
>    : ^^^^^^
>1 : 1
>  : ^

    ["4"]:1
>["4"] : number
>      : ^^^^^^
>"4" : "4"
>    : ^^^
>1 : 1
>  : ^
}
x[1].toExponential();
>x[1].toExponential() : string
>                     : ^^^^^^
>x[1].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>x[1] : number
>     : ^^^^^^
>x : { 1: number; 2: number; "3": number; "4": number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

x[2].toExponential();
>x[2].toExponential() : string
>                     : ^^^^^^
>x[2].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>x[2] : number
>     : ^^^^^^
>x : { 1: number; 2: number; "3": number; "4": number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

x[3].toExponential();
>x[3].toExponential() : string
>                     : ^^^^^^
>x[3].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>x[3] : number
>     : ^^^^^^
>x : { 1: number; 2: number; "3": number; "4": number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>3 : 3
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

x[4].toExponential();
>x[4].toExponential() : string
>                     : ^^^^^^
>x[4].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>x[4] : number
>     : ^^^^^^
>x : { 1: number; 2: number; "3": number; "4": number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>4 : 4
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

interface A {
    1:number;
>1 : number
>  : ^^^^^^

    [2]:number;
>[2] : number
>    : ^^^^^^
>2 : 2
>  : ^

    "3":number;
>"3" : number
>    : ^^^^^^

    ["4"]:number;
>["4"] : number
>      : ^^^^^^
>"4" : "4"
>    : ^^^
}

let y:A;
>y : A
>  : ^

y[1].toExponential();
>y[1].toExponential() : string
>                     : ^^^^^^
>y[1].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>y[1] : number
>     : ^^^^^^
>y : A
>  : ^
>1 : 1
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

y[2].toExponential();
>y[2].toExponential() : string
>                     : ^^^^^^
>y[2].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>y[2] : number
>     : ^^^^^^
>y : A
>  : ^
>2 : 2
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

y[3].toExponential();
>y[3].toExponential() : string
>                     : ^^^^^^
>y[3].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>y[3] : number
>     : ^^^^^^
>y : A
>  : ^
>3 : 3
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

y[4].toExponential();
>y[4].toExponential() : string
>                     : ^^^^^^
>y[4].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>y[4] : number
>     : ^^^^^^
>y : A
>  : ^
>4 : 4
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

class C {
>C : C
>  : ^

    1:number;
>1 : number
>  : ^^^^^^

    [2]:number;
>[2] : number
>    : ^^^^^^
>2 : 2
>  : ^

    "3":number;
>"3" : number
>    : ^^^^^^

    ["4"]:number;
>["4"] : number
>      : ^^^^^^
>"4" : "4"
>    : ^^^
}

let z:C;
>z : C
>  : ^

z[1].toExponential();
>z[1].toExponential() : string
>                     : ^^^^^^
>z[1].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>z[1] : number
>     : ^^^^^^
>z : C
>  : ^
>1 : 1
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

z[2].toExponential();
>z[2].toExponential() : string
>                     : ^^^^^^
>z[2].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>z[2] : number
>     : ^^^^^^
>z : C
>  : ^
>2 : 2
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

z[3].toExponential();
>z[3].toExponential() : string
>                     : ^^^^^^
>z[3].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>z[3] : number
>     : ^^^^^^
>z : C
>  : ^
>3 : 3
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

z[4].toExponential();
>z[4].toExponential() : string
>                     : ^^^^^^
>z[4].toExponential : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>z[4] : number
>     : ^^^^^^
>z : C
>  : ^
>4 : 4
>  : ^
>toExponential : (fractionDigits?: number) => string
>              : ^              ^^^      ^^^^^      

enum X {
>X : X
>  : ^

    1 = 1,
>1 : (typeof X)["1"]
>  : ^^^^^^^^^^^^^^^
>1 : 1
>  : ^

    [2] = 2,
>[2] : (typeof X)["2"]
>    : ^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>2 : 2
>  : ^

    "3" = 3,
>"3" : (typeof X)["3"]
>    : ^^^^^^^^^^^^^^^
>3 : 3
>  : ^

    ["4"] = 4,
>["4"] : (typeof X)["4"]
>      : ^^^^^^^^^^^^^^^
>"4" : "4"
>    : ^^^
>4 : 4
>  : ^

    "foo" = 5,
>"foo" : X.foo
>      : ^^^^^
>5 : 5
>  : ^

    ["bar"] = 6
>["bar"] : X.bar
>        : ^^^^^
>"bar" : "bar"
>      : ^^^^^
>6 : 6
>  : ^
}

let a = X["foo"];
>a : X
>  : ^
>X["foo"] : X.foo
>         : ^^^^^
>X : typeof X
>  : ^^^^^^^^
>"foo" : "foo"
>      : ^^^^^

let a0 = X["bar"];
>a0 : X
>   : ^
>X["bar"] : X.bar
>         : ^^^^^
>X : typeof X
>  : ^^^^^^^^
>"bar" : "bar"
>      : ^^^^^

// TODO: make sure that enum still disallow template literals as member names
