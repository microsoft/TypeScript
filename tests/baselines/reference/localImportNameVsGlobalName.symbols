//// [tests/cases/compiler/localImportNameVsGlobalName.ts] ////

=== localImportNameVsGlobalName.ts ===
namespace Keyboard {
>Keyboard : Symbol(Keyboard, Decl(localImportNameVsGlobalName.ts, 0, 0))

  export enum Key { UP, DOWN, LEFT, RIGHT }
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 0, 20))
>UP : Symbol(Key.UP, Decl(localImportNameVsGlobalName.ts, 1, 19))
>DOWN : Symbol(Key.DOWN, Decl(localImportNameVsGlobalName.ts, 1, 23))
>LEFT : Symbol(Key.LEFT, Decl(localImportNameVsGlobalName.ts, 1, 29))
>RIGHT : Symbol(Key.RIGHT, Decl(localImportNameVsGlobalName.ts, 1, 35))
}

namespace App {
>App : Symbol(App, Decl(localImportNameVsGlobalName.ts, 2, 1))

  import Key = Keyboard.Key;
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 15))
>Keyboard : Symbol(Keyboard, Decl(localImportNameVsGlobalName.ts, 0, 0))
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 0, 20))

  export function foo(key: Key): void {}
>foo : Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>key : Symbol(key, Decl(localImportNameVsGlobalName.ts, 7, 22))
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 15))

  foo(Key.UP);
>foo : Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>Key.UP : Symbol(Key.UP, Decl(localImportNameVsGlobalName.ts, 1, 19))
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 15))
>UP : Symbol(Key.UP, Decl(localImportNameVsGlobalName.ts, 1, 19))

  foo(Key.DOWN);
>foo : Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>Key.DOWN : Symbol(Key.DOWN, Decl(localImportNameVsGlobalName.ts, 1, 23))
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 15))
>DOWN : Symbol(Key.DOWN, Decl(localImportNameVsGlobalName.ts, 1, 23))

  foo(Key.LEFT);
>foo : Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>Key.LEFT : Symbol(Key.LEFT, Decl(localImportNameVsGlobalName.ts, 1, 29))
>Key : Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 15))
>LEFT : Symbol(Key.LEFT, Decl(localImportNameVsGlobalName.ts, 1, 29))
}
