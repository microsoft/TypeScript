//// [tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts] ////

=== looseThisTypeInFunctions.ts ===
interface I {
    n: number;
>n : number
>  : ^^^^^^

    explicitThis(this: this, m: number): number;
>explicitThis : (this: this, m: number) => number
>             : ^    ^^    ^^ ^^      ^^^^^      
>this : this
>     : ^^^^
>m : number
>  : ^^^^^^
}
interface Unused {
    implicitNoThis(m: number): number;
>implicitNoThis : (m: number) => number
>               : ^ ^^      ^^^^^      
>m : number
>  : ^^^^^^
}
class C implements I {
>C : C
>  : ^

    n: number;
>n : number
>  : ^^^^^^

    explicitThis(this: this, m: number): number {
>explicitThis : (this: this, m: number) => number
>             : ^    ^^    ^^ ^^      ^^^^^      
>this : this
>     : ^^^^
>m : number
>  : ^^^^^^

        return this.n + m;
>this.n + m : number
>           : ^^^^^^
>this.n : number
>       : ^^^^^^
>this : this
>     : ^^^^
>n : number
>  : ^^^^^^
>m : number
>  : ^^^^^^
    }
    implicitThis(m: number): number {
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      
>m : number
>  : ^^^^^^

        return this.n + m;
>this.n + m : number
>           : ^^^^^^
>this.n : number
>       : ^^^^^^
>this : this
>     : ^^^^
>n : number
>  : ^^^^^^
>m : number
>  : ^^^^^^
    }
    explicitVoid(this: void, m: number): number {
>explicitVoid : (this: void, m: number) => number
>             : ^    ^^    ^^ ^^      ^^^^^      
>this : void
>     : ^^^^
>m : number
>  : ^^^^^^

        return m + 1;
>m + 1 : number
>      : ^^^^^^
>m : number
>  : ^^^^^^
>1 : 1
>  : ^
    }
}
let c = new C();
>c : C
>  : ^
>new C() : C
>        : ^
>C : typeof C
>  : ^^^^^^^^

c.explicitVoid = c.explicitThis; // error, 'void' is missing everything
>c.explicitVoid = c.explicitThis : (this: C, m: number) => number
>                                : ^    ^^^^^ ^^      ^^^^^      
>c.explicitVoid : (this: void, m: number) => number
>               : ^    ^^    ^^ ^^      ^^^^^      
>c : C
>  : ^
>explicitVoid : (this: void, m: number) => number
>             : ^    ^^    ^^ ^^      ^^^^^      
>c.explicitThis : (this: C, m: number) => number
>               : ^    ^^^^^ ^^      ^^^^^      
>c : C
>  : ^
>explicitThis : (this: C, m: number) => number
>             : ^    ^^^^^ ^^      ^^^^^      

let o = {
>o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^
>{    n: 101,    explicitThis: function (m: number) {        return m + this.n.length; // error, 'length' does not exist on 'number'    },    implicitThis(m: number): number { return m; }} : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>                                                                                                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^

    n: 101,
>n : number
>  : ^^^^^^
>101 : 101
>    : ^^^

    explicitThis: function (m: number) {
>explicitThis : (m: number) => any
>             : ^ ^^      ^^^^^^^^
>function (m: number) {        return m + this.n.length; // error, 'length' does not exist on 'number'    } : (m: number) => any
>                                                                                                           : ^ ^^      ^^^^^^^^
>m : number
>  : ^^^^^^

        return m + this.n.length; // error, 'length' does not exist on 'number'
>m + this.n.length : any
>                  : ^^^
>m : number
>  : ^^^^^^
>this.n.length : any
>              : ^^^
>this.n : number
>       : ^^^^^^
>this : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^
>n : number
>  : ^^^^^^
>length : any
>       : ^^^

    },
    implicitThis(m: number): number { return m; }
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      
>m : number
>  : ^^^^^^
>m : number
>  : ^^^^^^

};
let i: I = o;
>i : I
>  : ^
>o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^

let o2: I = {
>o2 : I
>   : ^
>{    n: 1001,    explicitThis: function (m) {         return m + this.n.length;  // error, this.n: number, no member 'length'    },} : { n: number; explicitThis: (this: I, m: number) => any; }
>                                                                                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^ ^^^^^^^^^^^^^^^^^^^

    n: 1001,
>n : number
>  : ^^^^^^
>1001 : 1001
>     : ^^^^

    explicitThis: function (m) {
>explicitThis : (this: I, m: number) => any
>             : ^    ^^^^^ ^^^^^^^^^^^^^^^^
>function (m) {         return m + this.n.length;  // error, this.n: number, no member 'length'    } : (this: I, m: number) => any
>                                                                                                    : ^    ^^^^^ ^^^^^^^^^^^^^^^^
>m : number
>  : ^^^^^^

         return m + this.n.length;  // error, this.n: number, no member 'length'
>m + this.n.length : any
>                  : ^^^
>m : number
>  : ^^^^^^
>this.n.length : any
>              : ^^^
>this.n : number
>       : ^^^^^^
>this : I
>     : ^
>n : number
>  : ^^^^^^
>length : any
>       : ^^^

    },
}
let x = i.explicitThis;
>x : (this: I, m: number) => number
>  : ^    ^^^^^ ^^      ^^^^^      
>i.explicitThis : (this: I, m: number) => number
>               : ^    ^^^^^ ^^      ^^^^^      
>i : I
>  : ^
>explicitThis : (this: I, m: number) => number
>             : ^    ^^^^^ ^^      ^^^^^      

let n = x(12); // callee:void doesn't match this:I
>n : number
>  : ^^^^^^
>x(12) : number
>      : ^^^^^^
>x : (this: I, m: number) => number
>  : ^    ^^^^^ ^^      ^^^^^      
>12 : 12
>   : ^^

let u: Unused;
>u : Unused
>  : ^^^^^^

let y = u.implicitNoThis;
>y : (m: number) => number
>  : ^ ^^      ^^^^^      
>u.implicitNoThis : (m: number) => number
>                 : ^ ^^      ^^^^^      
>u : Unused
>  : ^^^^^^
>implicitNoThis : (m: number) => number
>               : ^ ^^      ^^^^^      

n = y(12); // ok, callee:void matches this:any
>n = y(12) : number
>          : ^^^^^^
>n : number
>  : ^^^^^^
>y(12) : number
>      : ^^^^^^
>y : (m: number) => number
>  : ^ ^^      ^^^^^      
>12 : 12
>   : ^^

c.explicitVoid = c.implicitThis // ok, implicitThis(this:any)
>c.explicitVoid = c.implicitThis : (m: number) => number
>                                : ^ ^^      ^^^^^      
>c.explicitVoid : (this: void, m: number) => number
>               : ^    ^^    ^^ ^^      ^^^^^      
>c : C
>  : ^
>explicitVoid : (this: void, m: number) => number
>             : ^    ^^    ^^ ^^      ^^^^^      
>c.implicitThis : (m: number) => number
>               : ^ ^^      ^^^^^      
>c : C
>  : ^
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      

o.implicitThis = c.implicitThis; // ok, implicitThis(this:any)
>o.implicitThis = c.implicitThis : (m: number) => number
>                                : ^ ^^      ^^^^^      
>o.implicitThis : (m: number) => number
>               : ^ ^^      ^^^^^      
>o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      
>c.implicitThis : (m: number) => number
>               : ^ ^^      ^^^^^      
>c : C
>  : ^
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      

o.implicitThis = c.explicitThis; // ok, implicitThis(this:any) is assignable to explicitThis(this: this)
>o.implicitThis = c.explicitThis : (this: C, m: number) => number
>                                : ^    ^^^^^ ^^      ^^^^^      
>o.implicitThis : (m: number) => number
>               : ^ ^^      ^^^^^      
>o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      
>c.explicitThis : (this: C, m: number) => number
>               : ^    ^^^^^ ^^      ^^^^^      
>c : C
>  : ^
>explicitThis : (this: C, m: number) => number
>             : ^    ^^^^^ ^^      ^^^^^      

o.implicitThis = i.explicitThis;
>o.implicitThis = i.explicitThis : (this: I, m: number) => number
>                                : ^    ^^^^^ ^^      ^^^^^      
>o.implicitThis : (m: number) => number
>               : ^ ^^      ^^^^^      
>o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^      ^^^
>implicitThis : (m: number) => number
>             : ^ ^^      ^^^^^      
>i.explicitThis : (this: I, m: number) => number
>               : ^    ^^^^^ ^^      ^^^^^      
>i : I
>  : ^
>explicitThis : (this: I, m: number) => number
>             : ^    ^^^^^ ^^      ^^^^^      

i.explicitThis = function(m) {
>i.explicitThis = function(m) {     return this.n.length;  // error, this.n: number} : (this: I, m: number) => any
>                                                                                    : ^    ^^^^^ ^^^^^^^^^^^^^^^^
>i.explicitThis : (this: I, m: number) => number
>               : ^    ^^^^^ ^^      ^^^^^      
>i : I
>  : ^
>explicitThis : (this: I, m: number) => number
>             : ^    ^^^^^ ^^      ^^^^^      
>function(m) {     return this.n.length;  // error, this.n: number} : (this: I, m: number) => any
>                                                                   : ^    ^^^^^ ^^^^^^^^^^^^^^^^
>m : number
>  : ^^^^^^

     return this.n.length;  // error, this.n: number
>this.n.length : any
>              : ^^^
>this.n : number
>       : ^^^^^^
>this : I
>     : ^
>n : number
>  : ^^^^^^
>length : any
>       : ^^^
}

