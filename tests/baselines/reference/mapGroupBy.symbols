//// [tests/cases/compiler/mapGroupBy.ts] ////

=== mapGroupBy.ts ===
const basic = Map.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large');
>basic : Symbol(basic, Decl(mapGroupBy.ts, 0, 5))
>Map.groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>x : Symbol(x, Decl(mapGroupBy.ts, 0, 36))
>x : Symbol(x, Decl(mapGroupBy.ts, 0, 36))

const chars = Map.groupBy('a string', c => c);
>chars : Symbol(chars, Decl(mapGroupBy.ts, 2, 5))
>Map.groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>c : Symbol(c, Decl(mapGroupBy.ts, 2, 37))
>c : Symbol(c, Decl(mapGroupBy.ts, 2, 37))

type Employee = { name: string, role: 'ic' | 'manager' }
>Employee : Symbol(Employee, Decl(mapGroupBy.ts, 2, 46))
>name : Symbol(name, Decl(mapGroupBy.ts, 4, 17))
>role : Symbol(role, Decl(mapGroupBy.ts, 4, 31))

const employees: Set<Employee> = new Set();
>employees : Symbol(employees, Decl(mapGroupBy.ts, 5, 5))
>Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.collection.d.ts, --, --))
>Employee : Symbol(Employee, Decl(mapGroupBy.ts, 2, 46))
>Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.collection.d.ts, --, --))

const byRole = Map.groupBy(employees, x => x.role);
>byRole : Symbol(byRole, Decl(mapGroupBy.ts, 6, 5))
>Map.groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>employees : Symbol(employees, Decl(mapGroupBy.ts, 5, 5))
>x : Symbol(x, Decl(mapGroupBy.ts, 6, 37))
>x.role : Symbol(role, Decl(mapGroupBy.ts, 4, 31))
>x : Symbol(x, Decl(mapGroupBy.ts, 6, 37))
>role : Symbol(role, Decl(mapGroupBy.ts, 4, 31))

const byNonKey = Map.groupBy(employees, x => x);
>byNonKey : Symbol(byNonKey, Decl(mapGroupBy.ts, 8, 5))
>Map.groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>groupBy : Symbol(MapConstructor.groupBy, Decl(lib.es2024.collection.d.ts, --, --))
>employees : Symbol(employees, Decl(mapGroupBy.ts, 5, 5))
>x : Symbol(x, Decl(mapGroupBy.ts, 8, 39))
>x : Symbol(x, Decl(mapGroupBy.ts, 8, 39))

