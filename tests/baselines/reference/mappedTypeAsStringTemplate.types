//// [tests/cases/compiler/mappedTypeAsStringTemplate.ts] ////

=== mappedTypeAsStringTemplate.ts ===
// Repro from #44220

function foo<T extends { [K in keyof T as `${Extract<K, string>}y`]: number }>(foox: T) { }
>foo : <T extends { [K in keyof T as `${Extract<K, string>}y`]: number; }>(foox: T) => void
>    : ^ ^^^^^^^^^                                                       ^^    ^^ ^^^^^^^^^
>foox : T
>     : ^

const c = { x: 1 };
>c : { x: number; }
>  : ^^^^^^^^^^^^^^
>{ x: 1 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

foo(c);
>foo(c) : void
>       : ^^^^
>foo : <T extends { [K in keyof T as `${Extract<K, string>}y`]: number; }>(foox: T) => void
>    : ^ ^^^^^^^^^                                                       ^^    ^^ ^^^^^^^^^
>c : { x: number; }
>  : ^^^^^^^^^^^^^^

