//// [tests/cases/conformance/types/mapped/mappedTypeConstraints2.ts] ////

=== mappedTypeConstraints2.ts ===
type Mapped1<K extends string> = { [P in K]: { a: P } };
>Mapped1 : Mapped1<K>
>        : ^^^^^^^^^^
>a : P
>  : ^

function f1<K extends string>(obj: Mapped1<K>, key: K) {
>f1 : <K extends string>(obj: Mapped1<K>, key: K) => void
>   : ^ ^^^^^^^^^      ^^   ^^          ^^   ^^ ^^^^^^^^^
>obj : Mapped1<K>
>    : ^^^^^^^^^^
>key : K
>    : ^

    const x: { a: K } = obj[key];
>x : { a: K; }
>  : ^^^^^ ^^^
>a : K
>  : ^
>obj[key] : Mapped1<K>[K]
>         : ^^^^^^^^^^^^^
>obj : Mapped1<K>
>    : ^^^^^^^^^^
>key : K
>    : ^
}

type Mapped2<K extends string> = { [P in K as `get${P}`]: { a: P } };
>Mapped2 : Mapped2<K>
>        : ^^^^^^^^^^
>a : P
>  : ^

function f2<K extends string>(obj: Mapped2<K>, key: `get${K}`) {
>f2 : <K extends string>(obj: Mapped2<K>, key: `get${K}`) => void
>   : ^ ^^^^^^^^^      ^^   ^^          ^^   ^^         ^^^^^^^^^
>obj : Mapped2<K>
>    : ^^^^^^^^^^
>key : `get${K}`
>    : ^^^^^^^^^

    const x: { a: K } = obj[key];  // Error
>x : { a: K; }
>  : ^^^^^ ^^^
>a : K
>  : ^
>obj[key] : Mapped2<K>[`get${K}`]
>         : ^^^^^^^^^^^^^^^^^^^^^
>obj : Mapped2<K>
>    : ^^^^^^^^^^
>key : `get${K}`
>    : ^^^^^^^^^
}

type Mapped3<K extends string> = { [P in K as Uppercase<P>]: { a: P } };
>Mapped3 : Mapped3<K>
>        : ^^^^^^^^^^
>a : P
>  : ^

function f3<K extends string>(obj: Mapped3<K>, key: Uppercase<K>) {
>f3 : <K extends string>(obj: Mapped3<K>, key: Uppercase<K>) => void
>   : ^ ^^^^^^^^^      ^^   ^^          ^^   ^^            ^^^^^^^^^
>obj : Mapped3<K>
>    : ^^^^^^^^^^
>key : Uppercase<K>
>    : ^^^^^^^^^^^^

    const x: { a: K } = obj[key];  // Error
>x : { a: K; }
>  : ^^^^^ ^^^
>a : K
>  : ^
>obj[key] : Mapped3<K>[Uppercase<K>]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^
>obj : Mapped3<K>
>    : ^^^^^^^^^^
>key : Uppercase<K>
>    : ^^^^^^^^^^^^
}

type Mapped4<K extends `_${string}`> = {
>Mapped4 : Mapped4<K>
>        : ^^^^^^^^^^

  [P in K]: P;
};

function f4<K extends `_${string}`>(obj: Mapped4<K>, key: keyof Mapped4<K>) {
>f4 : <K extends `_${string}`>(obj: Mapped4<K>, key: keyof Mapped4<K>) => void
>   : ^ ^^^^^^^^^            ^^   ^^          ^^   ^^                ^^^^^^^^^
>obj : Mapped4<K>
>    : ^^^^^^^^^^
>key : K
>    : ^

  let s: `_${string}` = obj[key];
>s : `_${string}`
>  : ^^^^^^^^^^^^
>obj[key] : Mapped4<K>[K]
>         : ^^^^^^^^^^^^^
>obj : Mapped4<K>
>    : ^^^^^^^^^^
>key : K
>    : ^
}

type Mapped5<K extends string> = {
>Mapped5 : Mapped5<K>
>        : ^^^^^^^^^^

  [P in K as P extends `_${string}` ? P : never]: P;
};

function f5<K extends string>(obj: Mapped5<K>, key: keyof Mapped5<K>) {
>f5 : <K extends string>(obj: Mapped5<K>, key: keyof Mapped5<K>) => void
>   : ^ ^^^^^^^^^      ^^   ^^          ^^   ^^                ^^^^^^^^^
>obj : Mapped5<K>
>    : ^^^^^^^^^^
>key : K extends `_${string}` ? K : never
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  let s: `_${string}` = obj[key];
>s : `_${string}`
>  : ^^^^^^^^^^^^
>obj[key] : Mapped5<K>[K extends `_${string}` ? K : never]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : Mapped5<K>
>    : ^^^^^^^^^^
>key : K extends `_${string}` ? K : never
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

// repro from #53066#issuecomment-1913384757

type Mapped6<K extends string> = {
>Mapped6 : Mapped6<K>
>        : ^^^^^^^^^^

  [P in K as `_${P}`]: P;
};

function f6<K extends string>(obj: Mapped6<K>, key: keyof Mapped6<K>) {
>f6 : <K extends string>(obj: Mapped6<K>, key: keyof Mapped6<K>) => void
>   : ^ ^^^^^^^^^      ^^   ^^          ^^   ^^                ^^^^^^^^^
>obj : Mapped6<K>
>    : ^^^^^^^^^^
>key : keyof Mapped6<K>
>    : ^^^^^^^^^^^^^^^^

  let s: `_${string}` = obj[key]; // Error
>s : `_${string}`
>  : ^^^^^^^^^^^^
>obj[key] : Mapped6<K>[keyof Mapped6<K>]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : Mapped6<K>
>    : ^^^^^^^^^^
>key : keyof Mapped6<K>
>    : ^^^^^^^^^^^^^^^^
}

// Repro from #47794

type Foo<T extends string> = {
>Foo : Foo<T>
>    : ^^^^^^

    [RemappedT in T as `get${RemappedT}`]: RemappedT;
};

const get = <T extends string>(t: T, foo: Foo<T>): T => foo[`get${t}`];  // Type 'Foo<T>[`get${T}`]' is not assignable to type 'T'
>get : <T extends string>(t: T, foo: Foo<T>) => T
>    : ^ ^^^^^^^^^      ^^ ^^ ^^   ^^      ^^^^^ 
><T extends string>(t: T, foo: Foo<T>): T => foo[`get${t}`] : <T extends string>(t: T, foo: Foo<T>) => T
>                                                           : ^ ^^^^^^^^^      ^^ ^^ ^^   ^^      ^^^^^ 
>t : T
>  : ^
>foo : Foo<T>
>    : ^^^^^^
>foo[`get${t}`] : Foo<T>[`get${T}`]
>               : ^^^^^^^^^^^^^^^^^
>foo : Foo<T>
>    : ^^^^^^
>`get${t}` : `get${T}`
>          : ^^^^^^^^^
>t : T
>  : ^

// Repro from #48626

interface Bounds {
    min: number;
>min : number
>    : ^^^^^^

    max: number;
>max : number
>    : ^^^^^^
}

type NumericBoundsOf<T> = {
>NumericBoundsOf : NumericBoundsOf<T>
>                : ^^^^^^^^^^^^^^^^^^

    [K in keyof T as T[K] extends number | undefined ? K : never]: Bounds;
}

function validate<T extends object>(obj: T, bounds: NumericBoundsOf<T>) {
>validate : <T extends object>(obj: T, bounds: NumericBoundsOf<T>) => boolean
>         : ^ ^^^^^^^^^      ^^   ^^ ^^      ^^                  ^^^^^^^^^^^^
>obj : T
>    : ^
>bounds : NumericBoundsOf<T>
>       : ^^^^^^^^^^^^^^^^^^

    for (const [key, val] of Object.entries(obj)) {
>key : string
>    : ^^^^^^
>val : any
>    : ^^^
>Object.entries(obj) : [string, any][]
>                    : ^^^^^^^^^^^^^^^
>Object.entries : { <T_1>(o: { [s: string]: T_1; } | ArrayLike<T_1>): [string, T_1][]; (o: {}): [string, any][]; }
>               : ^^^^^^^^ ^^                                      ^^^               ^^^ ^^  ^^^               ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>entries : { <T_1>(o: { [s: string]: T_1; } | ArrayLike<T_1>): [string, T_1][]; (o: {}): [string, any][]; }
>        : ^^^^^^^^ ^^                                      ^^^               ^^^ ^^  ^^^               ^^^
>obj : T
>    : ^

        const boundsForKey = bounds[key as keyof NumericBoundsOf<T>];
>boundsForKey : NumericBoundsOf<T>[keyof NumericBoundsOf<T>]
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>bounds[key as keyof NumericBoundsOf<T>] : NumericBoundsOf<T>[keyof NumericBoundsOf<T>]
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>bounds : NumericBoundsOf<T>
>       : ^^^^^^^^^^^^^^^^^^
>key as keyof NumericBoundsOf<T> : keyof NumericBoundsOf<T>
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^
>key : string
>    : ^^^^^^

        if (boundsForKey) {
>boundsForKey : NumericBoundsOf<T>[keyof NumericBoundsOf<T>]
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            const { min, max } = boundsForKey;
>min : number
>    : ^^^^^^
>max : number
>    : ^^^^^^
>boundsForKey : NumericBoundsOf<T>[keyof NumericBoundsOf<T>]
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            if (min > val || max < val) return false;
>min > val || max < val : boolean
>                       : ^^^^^^^
>min > val : boolean
>          : ^^^^^^^
>min : number
>    : ^^^^^^
>val : any
>    : ^^^
>max < val : boolean
>          : ^^^^^^^
>max : number
>    : ^^^^^^
>val : any
>    : ^^^
>false : false
>      : ^^^^^
        }
    }
    return true;
>true : true
>     : ^^^^
}

// repro from #50030

type ObjectWithUnderscoredKeys<K extends string> = {
>ObjectWithUnderscoredKeys : ObjectWithUnderscoredKeys<K>
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    [k in K as `_${k}`]: true;
>true : true
>     : ^^^^

};

function genericTest<K extends string>(objectWithUnderscoredKeys: ObjectWithUnderscoredKeys<K>, key: K) {
>genericTest : <K extends string>(objectWithUnderscoredKeys: ObjectWithUnderscoredKeys<K>, key: K) => void
>            : ^ ^^^^^^^^^      ^^                         ^^                            ^^   ^^ ^^^^^^^^^
>objectWithUnderscoredKeys : ObjectWithUnderscoredKeys<K>
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>key : K
>    : ^

  const shouldBeTrue: true = objectWithUnderscoredKeys[`_${key}`]; // assignability fails here, but ideally should not
>shouldBeTrue : true
>             : ^^^^
>true : true
>     : ^^^^
>objectWithUnderscoredKeys[`_${key}`] : ObjectWithUnderscoredKeys<K>[`_${K}`]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>objectWithUnderscoredKeys : ObjectWithUnderscoredKeys<K>
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>`_${key}` : `_${K}`
>          : ^^^^^^^
>key : K
>    : ^
}

