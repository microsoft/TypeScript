//// [tests/cases/compiler/mappedTypeInferenceAliasSubstitution.ts] ////

=== mappedTypeInferenceAliasSubstitution.ts ===
// repro from #31616

const v = { test: { smth: 5 } };
>v : { test: { smth: number; }; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ test: { smth: 5 } } : { test: { smth: number; }; }
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>test : { smth: number; }
>     : ^^^^^^^^^^^^^^^^^
>{ smth: 5 } : { smth: number; }
>            : ^^^^^^^^^^^^^^^^^
>smth : number
>     : ^^^^^^
>5 : 5
>  : ^

type Field<A extends string, R> = { [K in A]: R }
>Field : Field<A, R>
>      : ^^^^^^^^^^^

const f = <A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }): R => ({} as any);
>f : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R>; }) => R
>  : ^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^ ^^ ^^                          ^^^^^ 
><A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }): R => ({} as any) : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R>; }) => R
>                                                                                        : ^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^ ^^ ^^                          ^^^^^ 
>x : { [K in A]: Field<B, R>; }
>  : ^^^ ^^^^^^^^^^^^^^^^^^^^^^
>({} as any) : any
>{} as any : any
>{} : {}
>   : ^^

const r1 = f(v);
>r1 : number
>   : ^^^^^^
>f(v) : number
>     : ^^^^^^
>f : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R>; }) => R
>  : ^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^ ^^ ^^                          ^^^^^ 
>v : { test: { smth: number; }; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const g = <A extends string, B extends string, R>(x: Field<A, Field<B, R>>): R => ({} as any);
>g : <A extends string, B extends string, R>(x: Field<A, Field<B, R>>) => R
>  : ^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^ ^^ ^^                     ^^^^^ 
><A extends string, B extends string, R>(x: Field<A, Field<B, R>>): R => ({} as any) : <A extends string, B extends string, R>(x: Field<A, Field<B, R>>) => R
>                                                                                    : ^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^ ^^ ^^                     ^^^^^ 
>x : Field<A, Field<B, R>>
>  : ^^^^^^^^^^^^^^^^^^^^^
>({} as any) : any
>{} as any : any
>{} : {}
>   : ^^

const r2 = g(v);
>r2 : number
>   : ^^^^^^
>g(v) : number
>     : ^^^^^^
>g : <A extends string, B extends string, R>(x: Field<A, Field<B, R>>) => R
>  : ^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^ ^^ ^^                     ^^^^^ 
>v : { test: { smth: number; }; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

