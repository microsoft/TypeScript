//// [tests/cases/conformance/types/mapped/mappedTypeProperties.ts] ////

=== mappedTypeProperties.ts ===
export type PlaceType = 'openSky' | 'roofed' | 'garage'
>PlaceType : PlaceType
>          : ^^^^^^^^^

type Before = {
>Before : Before
>       : ^^^^^^

    model: 'hour' | 'day';
>model : "hour" | "day"
>      : ^^^^^^^^^^^^^^

    [placeType in PlaceType]: void;
>[placeType in PlaceType] : void
>                         : ^^^^
>placeType in PlaceType : boolean
>                       : ^^^^^^^
>placeType : any
>          : ^^^
>PlaceType : any
>          : ^^^
}

type After = {
>After : After
>      : ^^^^^

    [placeType in PlaceType]: void;
    model: 'hour' | 'day'
>model : "hour" | "day"
>      : ^^^^^^^^^^^^^^
}

type AfterQuestion = {
>AfterQuestion : AfterQuestion
>              : ^^^^^^^^^^^^^

    [placeType in PlaceType]?: void;
    model: 'hour' | 'day';
>model : "hour" | "day"
>      : ^^^^^^^^^^^^^^
}
type AfterMethod = {
>AfterMethod : AfterMethod
>            : ^^^^^^^^^^^

    [placeType in PlaceType]?: void;
    model(duration: number): 'hour' | 'day';
>model : (duration: number) => "hour" | "day"
>      : ^        ^^      ^^^^^              
>duration : number
>         : ^^^^^^
}

type AfterImplicit = {
>AfterImplicit : AfterImplicit
>              : ^^^^^^^^^^^^^

    [placeType in PlaceType]
    model: 'hour' | 'day';
>model : "hour" | "day"
>      : ^^^^^^^^^^^^^^
}
type AfterImplicitQ = {
>AfterImplicitQ : AfterImplicitQ
>               : ^^^^^^^^^^^^^^

    [placeType in PlaceType]?
    model: 'hour' | 'day'
>model : "hour" | "day"
>      : ^^^^^^^^^^^^^^
}

interface I {
    [P in PlaceType]: any
>[P in PlaceType] : any
>                 : ^^^
>P in PlaceType : boolean
>               : ^^^^^^^
>P : any
>  : ^^^
>PlaceType : any
>          : ^^^
}
class C {
>C : C
>  : ^

    [P in PlaceType]: any
>[P in PlaceType] : any
>                 : ^^^
>P in PlaceType : boolean
>               : ^^^^^^^
>P : any
>  : ^^^
>PlaceType : any
>          : ^^^
}
const D = class {
>D : typeof D
>  : ^^^^^^^^
>class {    [P in PlaceType]: any} : typeof D
>                                  : ^^^^^^^^

    [P in PlaceType]: any
>[P in PlaceType] : any
>                 : ^^^
>P in PlaceType : boolean
>               : ^^^^^^^
>P : any
>  : ^^^
>PlaceType : any
>          : ^^^
}
const E = class {
>E : typeof E
>  : ^^^^^^^^
>class {    [P in 'a' | 'b']: any} : typeof E
>                                  : ^^^^^^^^

    [P in 'a' | 'b']: any
>[P in 'a' | 'b'] : any
>                 : ^^^
>P in 'a' | 'b' : number
>               : ^^^^^^
>P in 'a' : boolean
>         : ^^^^^^^
>P : any
>  : ^^^
>'a' : "a"
>    : ^^^
>'b' : "b"
>    : ^^^
}

