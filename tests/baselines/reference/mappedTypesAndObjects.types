//// [tests/cases/conformance/types/mapped/mappedTypesAndObjects.ts] ////

=== mappedTypesAndObjects.ts ===
function f1<T>(x: Partial<T>, y: Readonly<T>) {
>f1 : <T>(x: Partial<T>, y: Readonly<T>) => void
>   : ^ ^^ ^^          ^^ ^^           ^^^^^^^^^
>x : Partial<T>
>  : ^^^^^^^^^^
>y : Readonly<T>
>  : ^^^^^^^^^^^

    let obj: {};
>obj : {}
>    : ^^

    obj = x;
>obj = x : Partial<T>
>        : ^^^^^^^^^^
>obj : {}
>    : ^^
>x : Partial<T>
>  : ^^^^^^^^^^

    obj = y;
>obj = y : Readonly<T>
>        : ^^^^^^^^^^^
>obj : {}
>    : ^^
>y : Readonly<T>
>  : ^^^^^^^^^^^
}

function f2<T>(x: Partial<T>, y: Readonly<T>) {
>f2 : <T>(x: Partial<T>, y: Readonly<T>) => void
>   : ^ ^^ ^^          ^^ ^^           ^^^^^^^^^
>x : Partial<T>
>  : ^^^^^^^^^^
>y : Readonly<T>
>  : ^^^^^^^^^^^

    let obj: { [x: string]: any };
>obj : { [x: string]: any; }
>    : ^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

    obj = x;
>obj = x : Partial<T>
>        : ^^^^^^^^^^
>obj : { [x: string]: any; }
>    : ^^^^^^^^^^^^^^^^^^^^^
>x : Partial<T>
>  : ^^^^^^^^^^

    obj = y;
>obj = y : Readonly<T>
>        : ^^^^^^^^^^^
>obj : { [x: string]: any; }
>    : ^^^^^^^^^^^^^^^^^^^^^
>y : Readonly<T>
>  : ^^^^^^^^^^^
}

function f3<T>(x: Partial<T>) {
>f3 : <T>(x: Partial<T>) => void
>   : ^ ^^ ^^          ^^^^^^^^^
>x : Partial<T>
>  : ^^^^^^^^^^

    x = {};
>x = {} : {}
>       : ^^
>x : Partial<T>
>  : ^^^^^^^^^^
>{} : {}
>   : ^^
}

// Repro from #12900

interface Base {
    foo: { [key: string]: any };
>foo : { [key: string]: any; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^
>key : string
>    : ^^^^^^

    bar: any;
>bar : any
>    : ^^^

    baz: any;
>baz : any
>    : ^^^
}

interface E1<T> extends Base {
    foo: T;
>foo : T
>    : ^
}

interface Something { name: string, value: string };
>name : string
>     : ^^^^^^
>value : string
>      : ^^^^^^

interface E2 extends Base {
    foo: Partial<Something>;  // or other mapped type
>foo : Partial<Something>
>    : ^^^^^^^^^^^^^^^^^^
}

interface E3<T> extends Base {
    foo: Partial<T>; // or other mapped type
>foo : Partial<T>
>    : ^^^^^^^^^^
}

// Repro from #13747

class Form<T> {
>Form : Form<T>
>     : ^^^^^^^

    private values: {[P in keyof T]?: T[P]} = {}
>values : { [P in keyof T]?: T[P] | undefined; }
>       : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{} : {}
>   : ^^
}

