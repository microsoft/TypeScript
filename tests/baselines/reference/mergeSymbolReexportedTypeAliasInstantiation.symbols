//// [tests/cases/compiler/mergeSymbolReexportedTypeAliasInstantiation.ts] ////

=== main.ts ===
import {Row2, C} from '.'
>Row2 : Symbol(Row2, Decl(main.ts, 0, 8))
>C : Symbol(C, Decl(main.ts, 0, 13))

const x: ((rowData: Row2<string>) => unknown) = (rowData: Row2<any>) => (null)
>x : Symbol(x, Decl(main.ts, 1, 5))
>rowData : Symbol(rowData, Decl(main.ts, 1, 11))
>Row2 : Symbol(Row2, Decl(main.ts, 0, 8))
>rowData : Symbol(rowData, Decl(main.ts, 1, 49))
>Row2 : Symbol(Row2, Decl(main.ts, 0, 8))

const y : C = { s: '' }
>y : Symbol(y, Decl(main.ts, 2, 5))
>C : Symbol(C, Decl(main.ts, 0, 13))
>s : Symbol(s, Decl(main.ts, 2, 15))

=== ./a.d.ts ===
import '.'
declare module '.' {
>'.' : Symbol("index", Decl(index.d.ts, 0, 0), Decl(a.d.ts, 0, 10))

  type Row2<T> = {}
>Row2 : Symbol(Row2, Decl(a.d.ts, 1, 20))
>T : Symbol(T, Decl(a.d.ts, 2, 12))

  type C = { s : string }
>C : Symbol(C, Decl(a.d.ts, 2, 19))
>s : Symbol(s, Decl(a.d.ts, 3, 12))
}

=== ./index.d.ts ===
export type {Row2} from './common';
>Row2 : Symbol(Row2, Decl(index.d.ts, 0, 13))

=== ./common.d.ts ===
export interface Row2 {}
>Row2 : Symbol(Row2, Decl(common.d.ts, 0, 0))

