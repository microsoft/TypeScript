//// [tests/cases/compiler/mergedDeclarations1.ts] ////

=== mergedDeclarations1.ts ===
interface Point {
>Point : Symbol(Point, Decl(mergedDeclarations1.ts, 0, 0))

    x: number;
>x : Symbol(Point.x, Decl(mergedDeclarations1.ts, 0, 17))

    y: number;
>y : Symbol(Point.y, Decl(mergedDeclarations1.ts, 1, 14))
}
function point(x: number, y: number): Point {
>point : Symbol(point, Decl(mergedDeclarations1.ts, 3, 1), Decl(mergedDeclarations1.ts, 6, 1))
>x : Symbol(x, Decl(mergedDeclarations1.ts, 4, 15))
>y : Symbol(y, Decl(mergedDeclarations1.ts, 4, 25))
>Point : Symbol(Point, Decl(mergedDeclarations1.ts, 0, 0))

    return { x: x, y: y };
>x : Symbol(x, Decl(mergedDeclarations1.ts, 5, 12))
>x : Symbol(x, Decl(mergedDeclarations1.ts, 4, 15))
>y : Symbol(y, Decl(mergedDeclarations1.ts, 5, 18))
>y : Symbol(y, Decl(mergedDeclarations1.ts, 4, 25))
}
namespace point {
>point : Symbol(point, Decl(mergedDeclarations1.ts, 3, 1), Decl(mergedDeclarations1.ts, 6, 1))

    export var origin = point(0, 0);
>origin : Symbol(origin, Decl(mergedDeclarations1.ts, 8, 14))
>point : Symbol(point, Decl(mergedDeclarations1.ts, 3, 1), Decl(mergedDeclarations1.ts, 6, 1))

    export function equals(p1: Point, p2: Point) {
>equals : Symbol(equals, Decl(mergedDeclarations1.ts, 8, 36))
>p1 : Symbol(p1, Decl(mergedDeclarations1.ts, 9, 27))
>Point : Symbol(Point, Decl(mergedDeclarations1.ts, 0, 0))
>p2 : Symbol(p2, Decl(mergedDeclarations1.ts, 9, 37))
>Point : Symbol(Point, Decl(mergedDeclarations1.ts, 0, 0))

        return p1.x == p2.x && p1.y == p2.y;
>p1.x : Symbol(Point.x, Decl(mergedDeclarations1.ts, 0, 17))
>p1 : Symbol(p1, Decl(mergedDeclarations1.ts, 9, 27))
>x : Symbol(Point.x, Decl(mergedDeclarations1.ts, 0, 17))
>p2.x : Symbol(Point.x, Decl(mergedDeclarations1.ts, 0, 17))
>p2 : Symbol(p2, Decl(mergedDeclarations1.ts, 9, 37))
>x : Symbol(Point.x, Decl(mergedDeclarations1.ts, 0, 17))
>p1.y : Symbol(Point.y, Decl(mergedDeclarations1.ts, 1, 14))
>p1 : Symbol(p1, Decl(mergedDeclarations1.ts, 9, 27))
>y : Symbol(Point.y, Decl(mergedDeclarations1.ts, 1, 14))
>p2.y : Symbol(Point.y, Decl(mergedDeclarations1.ts, 1, 14))
>p2 : Symbol(p2, Decl(mergedDeclarations1.ts, 9, 37))
>y : Symbol(Point.y, Decl(mergedDeclarations1.ts, 1, 14))
    }
}
var p1 = point(0, 0);
>p1 : Symbol(p1, Decl(mergedDeclarations1.ts, 13, 3))
>point : Symbol(point, Decl(mergedDeclarations1.ts, 3, 1), Decl(mergedDeclarations1.ts, 6, 1))

var p2 = point.origin;
>p2 : Symbol(p2, Decl(mergedDeclarations1.ts, 14, 3))
>point.origin : Symbol(point.origin, Decl(mergedDeclarations1.ts, 8, 14))
>point : Symbol(point, Decl(mergedDeclarations1.ts, 3, 1), Decl(mergedDeclarations1.ts, 6, 1))
>origin : Symbol(point.origin, Decl(mergedDeclarations1.ts, 8, 14))

var b = point.equals(p1, p2);
>b : Symbol(b, Decl(mergedDeclarations1.ts, 15, 3))
>point.equals : Symbol(point.equals, Decl(mergedDeclarations1.ts, 8, 36))
>point : Symbol(point, Decl(mergedDeclarations1.ts, 3, 1), Decl(mergedDeclarations1.ts, 6, 1))
>equals : Symbol(point.equals, Decl(mergedDeclarations1.ts, 8, 36))
>p1 : Symbol(p1, Decl(mergedDeclarations1.ts, 13, 3))
>p2 : Symbol(p2, Decl(mergedDeclarations1.ts, 14, 3))

