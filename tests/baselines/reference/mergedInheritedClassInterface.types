//// [tests/cases/conformance/classes/classDeclarations/mergedInheritedClassInterface.ts] ////

=== mergedInheritedClassInterface.ts ===
interface BaseInterface {
    required: number;
>required : number
>         : ^^^^^^

    optional?: number;
>optional : number
>         : ^^^^^^
}

class BaseClass {
>BaseClass : BaseClass
>          : ^^^^^^^^^

    baseMethod() { }
>baseMethod : () => void
>           : ^^^^^^^^^^

    baseNumber: number;
>baseNumber : number
>           : ^^^^^^
}

interface Child extends BaseInterface {
    additional: number;
>additional : number
>           : ^^^^^^
}

class Child extends BaseClass {
>Child : Child
>      : ^^^^^
>BaseClass : BaseClass
>          : ^^^^^^^^^

    classNumber: number;
>classNumber : number
>            : ^^^^^^

    method() { }
>method : () => void
>       : ^^^^^^^^^^
}

interface ChildNoBaseClass extends BaseInterface {
    additional2: string;
>additional2 : string
>            : ^^^^^^
}
class ChildNoBaseClass {
>ChildNoBaseClass : ChildNoBaseClass
>                 : ^^^^^^^^^^^^^^^^

    classString: string;
>classString : string
>            : ^^^^^^

    method2() { }
>method2 : () => void
>        : ^^^^^^^^^^
}
class Grandchild extends ChildNoBaseClass {
>Grandchild : Grandchild
>           : ^^^^^^^^^^
>ChildNoBaseClass : ChildNoBaseClass
>                 : ^^^^^^^^^^^^^^^^
}

// checks if properties actually were merged
var child : Child;
>child : Child
>      : ^^^^^

child.required;
>child.required : number
>               : ^^^^^^
>child : Child
>      : ^^^^^
>required : number
>         : ^^^^^^

child.optional;
>child.optional : number
>               : ^^^^^^
>child : Child
>      : ^^^^^
>optional : number
>         : ^^^^^^

child.additional;
>child.additional : number
>                 : ^^^^^^
>child : Child
>      : ^^^^^
>additional : number
>           : ^^^^^^

child.baseNumber;
>child.baseNumber : number
>                 : ^^^^^^
>child : Child
>      : ^^^^^
>baseNumber : number
>           : ^^^^^^

child.classNumber;
>child.classNumber : number
>                  : ^^^^^^
>child : Child
>      : ^^^^^
>classNumber : number
>            : ^^^^^^

child.baseMethod();
>child.baseMethod() : void
>                   : ^^^^
>child.baseMethod : () => void
>                 : ^^^^^^^^^^
>child : Child
>      : ^^^^^
>baseMethod : () => void
>           : ^^^^^^^^^^

child.method();
>child.method() : void
>               : ^^^^
>child.method : () => void
>             : ^^^^^^^^^^
>child : Child
>      : ^^^^^
>method : () => void
>       : ^^^^^^^^^^

var grandchild: Grandchild;
>grandchild : Grandchild
>           : ^^^^^^^^^^

grandchild.required;
>grandchild.required : number
>                    : ^^^^^^
>grandchild : Grandchild
>           : ^^^^^^^^^^
>required : number
>         : ^^^^^^

grandchild.optional;
>grandchild.optional : number
>                    : ^^^^^^
>grandchild : Grandchild
>           : ^^^^^^^^^^
>optional : number
>         : ^^^^^^

grandchild.additional2;
>grandchild.additional2 : string
>                       : ^^^^^^
>grandchild : Grandchild
>           : ^^^^^^^^^^
>additional2 : string
>            : ^^^^^^

grandchild.classString;
>grandchild.classString : string
>                       : ^^^^^^
>grandchild : Grandchild
>           : ^^^^^^^^^^
>classString : string
>            : ^^^^^^

grandchild.method2();
>grandchild.method2() : void
>                     : ^^^^
>grandchild.method2 : () => void
>                   : ^^^^^^^^^^
>grandchild : Grandchild
>           : ^^^^^^^^^^
>method2 : () => void
>        : ^^^^^^^^^^

