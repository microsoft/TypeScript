//// [tests/cases/compiler/mergedModuleDeclarationCodeGen5.ts] ////

=== mergedModuleDeclarationCodeGen5.ts ===
namespace M.buz.plop {
>M : Symbol(M, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 0), Decl(mergedModuleDeclarationCodeGen5.ts, 3, 1))
>buz : Symbol(buz, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 12), Decl(mergedModuleDeclarationCodeGen5.ts, 4, 12))
>plop : Symbol(plop, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 16), Decl(mergedModuleDeclarationCodeGen5.ts, 4, 16))

    export function doom() { }
>doom : Symbol(doom, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 22))

    export function M() { }
>M : Symbol(M, Decl(mergedModuleDeclarationCodeGen5.ts, 1, 30))
}
namespace M.buz.plop {
>M : Symbol(M, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 0), Decl(mergedModuleDeclarationCodeGen5.ts, 3, 1))
>buz : Symbol(buz, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 12), Decl(mergedModuleDeclarationCodeGen5.ts, 4, 12))
>plop : Symbol(plop, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 16), Decl(mergedModuleDeclarationCodeGen5.ts, 4, 16))

    function gunk() { }
>gunk : Symbol(gunk, Decl(mergedModuleDeclarationCodeGen5.ts, 4, 22))

    function buz() { }
>buz : Symbol(buz, Decl(mergedModuleDeclarationCodeGen5.ts, 5, 23))

    export class fudge { }
>fudge : Symbol(fudge, Decl(mergedModuleDeclarationCodeGen5.ts, 6, 22))

    export enum plop { }
>plop : Symbol(plop, Decl(mergedModuleDeclarationCodeGen5.ts, 7, 26))

    // Emit these references as follows
    var v1 = gunk; // gunk
>v1 : Symbol(v1, Decl(mergedModuleDeclarationCodeGen5.ts, 11, 7))
>gunk : Symbol(gunk, Decl(mergedModuleDeclarationCodeGen5.ts, 4, 22))

    var v2 = buz; // buz
>v2 : Symbol(v2, Decl(mergedModuleDeclarationCodeGen5.ts, 12, 7))
>buz : Symbol(buz, Decl(mergedModuleDeclarationCodeGen5.ts, 5, 23))

    export var v3 = doom; // _plop.doom
>v3 : Symbol(v3, Decl(mergedModuleDeclarationCodeGen5.ts, 13, 14))
>doom : Symbol(doom, Decl(mergedModuleDeclarationCodeGen5.ts, 0, 22))

    export var v4 = M; // _plop.M
>v4 : Symbol(v4, Decl(mergedModuleDeclarationCodeGen5.ts, 14, 14))
>M : Symbol(M, Decl(mergedModuleDeclarationCodeGen5.ts, 1, 30))

    export var v5 = fudge; // fudge
>v5 : Symbol(v5, Decl(mergedModuleDeclarationCodeGen5.ts, 15, 14))
>fudge : Symbol(fudge, Decl(mergedModuleDeclarationCodeGen5.ts, 6, 22))

    export var v6 = plop; // plop
>v6 : Symbol(v6, Decl(mergedModuleDeclarationCodeGen5.ts, 16, 14))
>plop : Symbol(plop, Decl(mergedModuleDeclarationCodeGen5.ts, 7, 26))
}
