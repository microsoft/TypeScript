//// [tests/cases/compiler/methodChainError.ts] ////

=== methodChainError.ts ===
class Builder {
>Builder : Builder
>        : ^^^^^^^

    notMethod: string
>notMethod : string
>          : ^^^^^^

    method(param: string): Builder {
>method : (param: string) => Builder
>       : ^     ^^      ^^^^^       
>param : string
>      : ^^^^^^

        return this;
>this : this
>     : ^^^^
    }
}

new Builder()
>new Builder()    .method("a")    .method()    .method("a") : Builder
>                                                           : ^^^^^^^
>new Builder()    .method("a")    .method()    .method : (param: string) => Builder
>                                                      : ^     ^^      ^^^^^       
>new Builder()    .method("a")    .method() : Builder
>                                           : ^^^^^^^
>new Builder()    .method("a")    .method : (param: string) => Builder
>                                         : ^     ^^      ^^^^^       
>new Builder()    .method("a") : Builder
>                              : ^^^^^^^
>new Builder()    .method : (param: string) => Builder
>                         : ^     ^^      ^^^^^       
>new Builder() : Builder
>              : ^^^^^^^
>Builder : typeof Builder
>        : ^^^^^^^^^^^^^^

    .method("a")
>method : (param: string) => Builder
>       : ^     ^^      ^^^^^       
>"a" : "a"
>    : ^^^

    .method()
>method : (param: string) => Builder
>       : ^     ^^      ^^^^^       

    .method("a");
>method : (param: string) => Builder
>       : ^     ^^      ^^^^^       
>"a" : "a"
>    : ^^^

    
new Builder()
>new Builder()    .method("a")    .notMethod()    .method("a") : any
>                                                              : ^^^
>new Builder()    .method("a")    .notMethod()    .method : any
>                                                         : ^^^
>new Builder()    .method("a")    .notMethod() : any
>                                              : ^^^
>new Builder()    .method("a")    .notMethod : string
>                                            : ^^^^^^
>new Builder()    .method("a") : Builder
>                              : ^^^^^^^
>new Builder()    .method : (param: string) => Builder
>                         : ^     ^^      ^^^^^       
>new Builder() : Builder
>              : ^^^^^^^
>Builder : typeof Builder
>        : ^^^^^^^^^^^^^^

    .method("a")
>method : (param: string) => Builder
>       : ^     ^^      ^^^^^       
>"a" : "a"
>    : ^^^

    .notMethod()
>notMethod : string
>          : ^^^^^^

    .method("a");
>method : any
>       : ^^^
>"a" : "a"
>    : ^^^

