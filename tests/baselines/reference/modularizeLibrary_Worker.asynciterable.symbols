//// [tests/cases/compiler/modularizeLibrary_Worker.asynciterable.ts] ////

=== modularizeLibrary_Worker.asynciterable.ts ===
navigator.storage.getDirectory().then(async directory => {
>navigator.storage.getDirectory().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
>navigator.storage.getDirectory : Symbol(StorageManager.getDirectory, Decl(lib.webworker.d.ts, --, --))
>navigator.storage : Symbol(NavigatorStorage.storage, Decl(lib.webworker.d.ts, --, --))
>navigator : Symbol(navigator, Decl(lib.webworker.d.ts, --, --))
>storage : Symbol(NavigatorStorage.storage, Decl(lib.webworker.d.ts, --, --))
>getDirectory : Symbol(StorageManager.getDirectory, Decl(lib.webworker.d.ts, --, --))
>then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
>directory : Symbol(directory, Decl(modularizeLibrary_Worker.asynciterable.ts, 0, 43))

    for await (const [key, handle] of directory) {
>key : Symbol(key, Decl(modularizeLibrary_Worker.asynciterable.ts, 1, 22))
>handle : Symbol(handle, Decl(modularizeLibrary_Worker.asynciterable.ts, 1, 26))
>directory : Symbol(directory, Decl(modularizeLibrary_Worker.asynciterable.ts, 0, 43))

        handle.kind;
>handle.kind : Symbol(FileSystemHandle.kind, Decl(lib.webworker.d.ts, --, --))
>handle : Symbol(handle, Decl(modularizeLibrary_Worker.asynciterable.ts, 1, 26))
>kind : Symbol(FileSystemHandle.kind, Decl(lib.webworker.d.ts, --, --))
    }
});

