//// [tests/cases/compiler/moduleAugmentationDuringSyntheticDefaultCheck.ts] ////

=== idx.test.ts ===
/// <reference path="./idx" />

import moment = require("moment-timezone");
>moment : { default: () => moment.Moment; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=== node_modules/moment/index.d.ts ===
declare function moment(): moment.Moment;
>moment : () => moment.Moment
>       : ^^^^^^             
>moment : any
>       : ^^^

declare namespace moment {
  interface Moment extends Object {
    valueOf(): number;
>valueOf : () => number
>        : ^^^^^^      
  }
}
export = moment;
>moment : () => moment.Moment
>       : ^^^^^^             

=== node_modules/moment-timezone/index.d.ts ===
import * as moment from 'moment';
>moment : { default: () => moment.Moment; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

export = moment;
>moment : { default: () => moment.Moment; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare module "moment" {
>"moment" : () => Moment
>         : ^^^^^^^^^^^^

    interface Moment {
        tz(): string;
>tz : () => string
>   : ^^^^^^      
    }
}
=== idx.ts ===
import * as _moment from "moment";
>_moment : { default: () => _moment.Moment; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare module "moment" {
>"moment" : () => Moment
>         : ^^^^^^^^^^^^

    interface Moment {
        strftime(pattern: string): string;
>strftime : { (pattern: string): string; (pattern: string): string; }
>         : ^^^       ^^      ^^^      ^^^       ^^      ^^^      ^^^
>pattern : string
>        : ^^^^^^
    }
}
declare module "moment-timezone" {
>"moment-timezone" : { default: () => Moment; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    interface Moment {
        strftime(pattern: string): string;
>strftime : { (pattern: string): string; (pattern: string): string; }
>         : ^^^       ^^      ^^^      ^^^       ^^      ^^^      ^^^
>pattern : string
>        : ^^^^^^
    }
}
