//// [tests/cases/compiler/moduleAugmentationExtendFileModule1.ts] ////

=== map.ts ===
import { Observable } from "./observable"
>Observable : typeof Observable
>           : ^^^^^^^^^^^^^^^^^

(<any>Observable.prototype).map = function() { }
>(<any>Observable.prototype).map = function() { } : () => void
>                                                 : ^^^^^^^^^^
>(<any>Observable.prototype).map : any
>(<any>Observable.prototype) : any
>                            : ^^^
><any>Observable.prototype : any
>Observable.prototype : Observable<any>
>                     : ^^^^^^^^^^^^^^^
>Observable : typeof Observable
>           : ^^^^^^^^^^^^^^^^^
>prototype : Observable<any>
>          : ^^^^^^^^^^^^^^^
>map : any
>    : ^^^
>function() { } : () => void
>               : ^^^^^^^^^^

declare module "./observable" {
>"./observable" : typeof import("observable")
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    interface Observable<T> {
        map<U>(proj: (e:T) => U): Observable<U>
>map : <U>(proj: (e: T) => U) => Observable<U>
>    : ^ ^^    ^^           ^^^^^             
>proj : (e: T) => U
>     : ^ ^^ ^^^^^ 
>e : T
>  : ^
    }
    namespace Observable {
>Observable : typeof Observable
>           : ^^^^^^^^^^^^^^^^^

        let someAnotherValue: number;
>someAnotherValue : number
>                 : ^^^^^^
    }
}

=== observable.ts ===
export declare class Observable<T> {
>Observable : Observable<T>
>           : ^^^^^^^^^^^^^

    filter(pred: (e:T) => boolean): Observable<T>;
>filter : (pred: (e: T) => boolean) => Observable<T>
>       : ^    ^^                 ^^^^^             
>pred : (e: T) => boolean
>     : ^ ^^ ^^^^^       
>e : T
>  : ^
}

export namespace Observable {
>Observable : typeof Observable
>           : ^^^^^^^^^^^^^^^^^

    let someValue: number;
>someValue : number
>          : ^^^^^^
}


=== main.ts ===
import { Observable } from "./observable"
>Observable : typeof Observable
>           : ^^^^^^^^^^^^^^^^^

import "./map";

let x: Observable<number>;
>x : Observable<number>
>  : ^^^^^^^^^^^^^^^^^^

let y = x.map(x => x + 1);
>y : Observable<number>
>  : ^^^^^^^^^^^^^^^^^^
>x.map(x => x + 1) : Observable<number>
>                  : ^^^^^^^^^^^^^^^^^^
>x.map : <U>(proj: (e: number) => U) => Observable<U>
>      : ^ ^^    ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : Observable<number>
>  : ^^^^^^^^^^^^^^^^^^
>map : <U>(proj: (e: number) => U) => Observable<U>
>    : ^ ^^    ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x => x + 1 : (x: number) => number
>           : ^ ^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>x + 1 : number
>      : ^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

