//// [tests/cases/compiler/moduleAugmentationImportsAndExports4.ts] ////

=== f1.ts ===
export class A {}
>A : A
>  : ^

=== f2.ts ===
export class B {
>B : B
>  : ^

    n: number;
>n : number
>  : ^^^^^^
}

=== f3.ts ===
import {A} from "./f1";
>A : typeof A
>  : ^^^^^^^^

import {B} from "./f2";
>B : typeof B
>  : ^^^^^^^^

A.prototype.foo = function () { return undefined; }
>A.prototype.foo = function () { return undefined; } : () => any
>                                                    : ^^^^^^^^^
>A.prototype.foo : () => B
>                : ^^^^^^ 
>A.prototype : A
>            : ^
>A : typeof A
>  : ^^^^^^^^
>prototype : A
>          : ^
>foo : () => B
>    : ^^^^^^ 
>function () { return undefined; } : () => any
>                                  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

namespace N {
    export interface Ifc { a: number; }
>a : number
>  : ^^^^^^

    export interface Cls { b: number; }
>b : number
>  : ^^^^^^
}
import I = N.Ifc;
>I : any
>  : ^^^
>N : any
>  : ^^^
>Ifc : I
>    : ^

import C = N.Cls;
>C : any
>  : ^^^
>N : any
>  : ^^^
>Cls : C
>    : ^

declare module "./f1" {
>"./f1" : typeof import("f1")
>       : ^^^^^^^^^^^^^^^^^^^

    interface A {
        foo(): B;
>foo : () => B
>    : ^^^^^^ 

        bar(): I;
>bar : () => I
>    : ^^^^^^ 

        baz(): C;
>baz : () => C
>    : ^^^^^^ 
    }
}

=== f4.ts ===
import {A} from "./f1";
>A : typeof A
>  : ^^^^^^^^

import "./f3";

let a: A;
>a : A
>  : ^

let b = a.foo().n;
>b : number
>  : ^^^^^^
>a.foo().n : number
>          : ^^^^^^
>a.foo() : import("f2").B
>        : ^^^^^^^^^^^^^^
>a.foo : () => import("f2").B
>      : ^^^^^^       ^^^^  ^
>a : A
>  : ^
>foo : () => import("f2").B
>    : ^^^^^^       ^^^^  ^
>n : number
>  : ^^^^^^

let c = a.bar().a;
>c : number
>  : ^^^^^^
>a.bar().a : number
>          : ^^^^^^
>a.bar() : N.Ifc
>        : ^^^^^
>a.bar : () => N.Ifc
>      : ^^^^^^^^^^^
>a : A
>  : ^
>bar : () => N.Ifc
>    : ^^^^^^^^^^^
>a : number
>  : ^^^^^^

let d = a.baz().b;
>d : number
>  : ^^^^^^
>a.baz().b : number
>          : ^^^^^^
>a.baz() : N.Cls
>        : ^^^^^
>a.baz : () => N.Cls
>      : ^^^^^^^^^^^
>a : A
>  : ^
>baz : () => N.Cls
>    : ^^^^^^^^^^^
>b : number
>  : ^^^^^^

