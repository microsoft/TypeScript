//// [tests/cases/compiler/moduleAugmentationsImports1.ts] ////

=== a.ts ===
export class A {}
>A : A
>  : ^

=== b.ts ===
export class B {x: number;}
>B : B
>  : ^
>x : number
>  : ^^^^^^

=== c.d.ts ===
declare module "C" {
>"C" : typeof import("C")
>    : ^^^^^^^^^^^^^^^^^^

    class Cls {y: string; }
>Cls : Cls
>    : ^^^
>y : string
>  : ^^^^^^
}

=== d.ts ===
/// <reference path="c.d.ts"/>

import {A} from "./a";
>A : typeof A
>  : ^^^^^^^^

import {B} from "./b";
>B : typeof B
>  : ^^^^^^^^

import {Cls} from "C";
>Cls : typeof Cls
>    : ^^^^^^^^^^

A.prototype.getB = function () { return undefined; }
>A.prototype.getB = function () { return undefined; } : () => any
>                                                     : ^^^^^^^^^
>A.prototype.getB : () => B
>                 : ^^^^^^ 
>A.prototype : A
>            : ^
>A : typeof A
>  : ^^^^^^^^
>prototype : A
>          : ^
>getB : () => B
>     : ^^^^^^ 
>function () { return undefined; } : () => any
>                                  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

A.prototype.getCls = function () { return undefined; }
>A.prototype.getCls = function () { return undefined; } : () => any
>                                                       : ^^^^^^^^^
>A.prototype.getCls : () => Cls
>                   : ^^^^^^   
>A.prototype : A
>            : ^
>A : typeof A
>  : ^^^^^^^^
>prototype : A
>          : ^
>getCls : () => Cls
>       : ^^^^^^   
>function () { return undefined; } : () => any
>                                  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

declare module "./a" {
>"./a" : typeof import("a")
>      : ^^^^^^^^^^^^^^^^^^

    interface A {
        getB(): B;
>getB : () => B
>     : ^^^^^^ 
    }
}

declare module "./a" {
>"./a" : typeof import("a")
>      : ^^^^^^^^^^^^^^^^^^

    interface A {
        getCls(): Cls;
>getCls : () => Cls
>       : ^^^^^^   
    }
}

=== main.ts ===
import {A} from "./a";
>A : typeof A
>  : ^^^^^^^^

import "d";

let a: A;
>a : A
>  : ^

let b = a.getB().x.toFixed();
>b : string
>  : ^^^^^^
>a.getB().x.toFixed() : string
>                     : ^^^^^^
>a.getB().x.toFixed : (fractionDigits?: number) => string
>                   : ^              ^^^      ^^^^^      
>a.getB().x : number
>           : ^^^^^^
>a.getB() : import("b").B
>         : ^^^^^^^^^^^^^
>a.getB : () => import("b").B
>       : ^^^^^^       ^^^  ^
>a : A
>  : ^
>getB : () => import("b").B
>     : ^^^^^^       ^^^  ^
>x : number
>  : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      

let c = a.getCls().y.toLowerCase();
>c : string
>  : ^^^^^^
>a.getCls().y.toLowerCase() : string
>                           : ^^^^^^
>a.getCls().y.toLowerCase : () => string
>                         : ^^^^^^      
>a.getCls().y : string
>             : ^^^^^^
>a.getCls() : import("C").Cls
>           : ^^^^^^^^^^^^^^^
>a.getCls : () => import("C").Cls
>         : ^^^^^^       ^^^  ^^^
>a : A
>  : ^
>getCls : () => import("C").Cls
>       : ^^^^^^       ^^^  ^^^
>y : string
>  : ^^^^^^
>toLowerCase : () => string
>            : ^^^^^^      

