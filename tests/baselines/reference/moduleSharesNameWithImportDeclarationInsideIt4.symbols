//// [tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt4.ts] ////

=== moduleSharesNameWithImportDeclarationInsideIt4.ts ===
namespace Z.M {
>Z : Symbol(Z, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 0))
>M : Symbol(M, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 12))

    export function bar() {
>bar : Symbol(bar, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 15))

        return "";
    }
}
namespace A.M {
>A : Symbol(A, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 4, 1))
>M : Symbol(M, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 5, 12))

    interface M { }
>M : Symbol(M, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 5, 15), Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 6, 19))

    import M = Z.M;
>M : Symbol(M, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 5, 15), Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 6, 19))
>Z : Symbol(Z, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 0))
>M : Symbol(M, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 12))

    export function bar() {
>bar : Symbol(bar, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 7, 19))
    }
    M.bar(); // Should call Z.M.bar
>M.bar : Symbol(M.bar, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 15))
>M : Symbol(M, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 5, 15), Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 6, 19))
>bar : Symbol(M.bar, Decl(moduleSharesNameWithImportDeclarationInsideIt4.ts, 0, 15))
}
