//// [tests/cases/compiler/moduleVisibilityTest1.ts] ////

=== moduleVisibilityTest1.ts ===
namespace OuterMod {
>OuterMod : Symbol(OuterMod, Decl(moduleVisibilityTest1.ts, 0, 0))

	export function someExportedOuterFunc() { return -1; }
>someExportedOuterFunc : Symbol(someExportedOuterFunc, Decl(moduleVisibilityTest1.ts, 0, 20))

	export namespace OuterInnerMod {
>OuterInnerMod : Symbol(OuterInnerMod, Decl(moduleVisibilityTest1.ts, 1, 55))

		export function someExportedOuterInnerFunc() { return "foo"; }
>someExportedOuterInnerFunc : Symbol(someExportedOuterInnerFunc, Decl(moduleVisibilityTest1.ts, 3, 33))
	}
}

import OuterInnerAlias = OuterMod.OuterInnerMod;
>OuterInnerAlias : Symbol(OuterInnerAlias, Decl(moduleVisibilityTest1.ts, 6, 1))
>OuterMod : Symbol(OuterMod, Decl(moduleVisibilityTest1.ts, 0, 0))
>OuterInnerMod : Symbol(OuterInnerAlias, Decl(moduleVisibilityTest1.ts, 1, 55))

namespace M {
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))

	export namespace InnerMod {
>InnerMod : Symbol(InnerMod, Decl(moduleVisibilityTest1.ts, 10, 13))

		export function someExportedInnerFunc() { return -2; }
>someExportedInnerFunc : Symbol(someExportedInnerFunc, Decl(moduleVisibilityTest1.ts, 12, 28))
	}

	export enum E {
>E : Symbol(E, Decl(moduleVisibilityTest1.ts, 14, 2))

		A,
>A : Symbol(E.A, Decl(moduleVisibilityTest1.ts, 16, 16))

		B,
>B : Symbol(E.B, Decl(moduleVisibilityTest1.ts, 17, 4))

		C,
>C : Symbol(E.C, Decl(moduleVisibilityTest1.ts, 18, 4))
	}

	export var x = 5;
>x : Symbol(x, Decl(moduleVisibilityTest1.ts, 22, 11))

	export declare var exported_var;
>exported_var : Symbol(exported_var, Decl(moduleVisibilityTest1.ts, 23, 19))

	var y = x + x;
>y : Symbol(y, Decl(moduleVisibilityTest1.ts, 25, 4))
>x : Symbol(x, Decl(moduleVisibilityTest1.ts, 22, 11))
>x : Symbol(x, Decl(moduleVisibilityTest1.ts, 22, 11))


	export interface I {
>I : Symbol(I, Decl(moduleVisibilityTest1.ts, 25, 15))

		someMethod():number;
>someMethod : Symbol(I.someMethod, Decl(moduleVisibilityTest1.ts, 28, 21))
	}

	 class B {public b = 0;}
>B : Symbol(B, Decl(moduleVisibilityTest1.ts, 30, 2))
>b : Symbol(B.b, Decl(moduleVisibilityTest1.ts, 32, 11))

	 export class C implements I {
>C : Symbol(C, Decl(moduleVisibilityTest1.ts, 32, 25))
>I : Symbol(I, Decl(moduleVisibilityTest1.ts, 25, 15))

		public someMethodThatCallsAnOuterMethod() {return OuterInnerAlias.someExportedOuterInnerFunc();}
>someMethodThatCallsAnOuterMethod : Symbol(C.someMethodThatCallsAnOuterMethod, Decl(moduleVisibilityTest1.ts, 34, 31))
>OuterInnerAlias.someExportedOuterInnerFunc : Symbol(OuterInnerAlias.someExportedOuterInnerFunc, Decl(moduleVisibilityTest1.ts, 3, 33))
>OuterInnerAlias : Symbol(OuterInnerAlias, Decl(moduleVisibilityTest1.ts, 6, 1))
>someExportedOuterInnerFunc : Symbol(OuterInnerAlias.someExportedOuterInnerFunc, Decl(moduleVisibilityTest1.ts, 3, 33))

		public someMethodThatCallsAnInnerMethod() {return InnerMod.someExportedInnerFunc();}
>someMethodThatCallsAnInnerMethod : Symbol(C.someMethodThatCallsAnInnerMethod, Decl(moduleVisibilityTest1.ts, 35, 98))
>InnerMod.someExportedInnerFunc : Symbol(InnerMod.someExportedInnerFunc, Decl(moduleVisibilityTest1.ts, 12, 28))
>InnerMod : Symbol(InnerMod, Decl(moduleVisibilityTest1.ts, 10, 13))
>someExportedInnerFunc : Symbol(InnerMod.someExportedInnerFunc, Decl(moduleVisibilityTest1.ts, 12, 28))

		public someMethodThatCallsAnOuterInnerMethod() {return OuterMod.someExportedOuterFunc();}
>someMethodThatCallsAnOuterInnerMethod : Symbol(C.someMethodThatCallsAnOuterInnerMethod, Decl(moduleVisibilityTest1.ts, 36, 86))
>OuterMod.someExportedOuterFunc : Symbol(OuterMod.someExportedOuterFunc, Decl(moduleVisibilityTest1.ts, 0, 20))
>OuterMod : Symbol(OuterMod, Decl(moduleVisibilityTest1.ts, 0, 0))
>someExportedOuterFunc : Symbol(OuterMod.someExportedOuterFunc, Decl(moduleVisibilityTest1.ts, 0, 20))

		public someMethod() { return 0; }
>someMethod : Symbol(C.someMethod, Decl(moduleVisibilityTest1.ts, 37, 91))

		public someProp = 1;
>someProp : Symbol(C.someProp, Decl(moduleVisibilityTest1.ts, 38, 35))

		constructor() {
		    function someInnerFunc() { return 2; }
>someInnerFunc : Symbol(someInnerFunc, Decl(moduleVisibilityTest1.ts, 41, 17))

            var someInnerVar = 3;
>someInnerVar : Symbol(someInnerVar, Decl(moduleVisibilityTest1.ts, 43, 15))
		}
	}

	var someModuleVar = 4;
>someModuleVar : Symbol(someModuleVar, Decl(moduleVisibilityTest1.ts, 47, 4))

	function someModuleFunction() { return 5;}
>someModuleFunction : Symbol(someModuleFunction, Decl(moduleVisibilityTest1.ts, 47, 23))
}

namespace M {
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))

	export var c = x;
>c : Symbol(c, Decl(moduleVisibilityTest1.ts, 53, 11))
>x : Symbol(x, Decl(moduleVisibilityTest1.ts, 22, 11))

	export var meb = M.E.B;
>meb : Symbol(meb, Decl(moduleVisibilityTest1.ts, 54, 11))
>M.E.B : Symbol(E.B, Decl(moduleVisibilityTest1.ts, 17, 4))
>M.E : Symbol(E, Decl(moduleVisibilityTest1.ts, 14, 2))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>E : Symbol(E, Decl(moduleVisibilityTest1.ts, 14, 2))
>B : Symbol(E.B, Decl(moduleVisibilityTest1.ts, 17, 4))
}

var cprime : M.I = <M.I>null;
>cprime : Symbol(cprime, Decl(moduleVisibilityTest1.ts, 57, 3))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>I : Symbol(M.I, Decl(moduleVisibilityTest1.ts, 25, 15))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>I : Symbol(M.I, Decl(moduleVisibilityTest1.ts, 25, 15))

var c = new M.C();
>c : Symbol(c, Decl(moduleVisibilityTest1.ts, 59, 3))
>M.C : Symbol(M.C, Decl(moduleVisibilityTest1.ts, 32, 25))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>C : Symbol(M.C, Decl(moduleVisibilityTest1.ts, 32, 25))

var z = M.x;
>z : Symbol(z, Decl(moduleVisibilityTest1.ts, 60, 3))
>M.x : Symbol(M.x, Decl(moduleVisibilityTest1.ts, 22, 11))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>x : Symbol(M.x, Decl(moduleVisibilityTest1.ts, 22, 11))

var alpha = M.E.A;
>alpha : Symbol(alpha, Decl(moduleVisibilityTest1.ts, 61, 3))
>M.E.A : Symbol(M.E.A, Decl(moduleVisibilityTest1.ts, 16, 16))
>M.E : Symbol(M.E, Decl(moduleVisibilityTest1.ts, 14, 2))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>E : Symbol(M.E, Decl(moduleVisibilityTest1.ts, 14, 2))
>A : Symbol(M.E.A, Decl(moduleVisibilityTest1.ts, 16, 16))

var omega = M.exported_var;
>omega : Symbol(omega, Decl(moduleVisibilityTest1.ts, 62, 3))
>M.exported_var : Symbol(M.exported_var, Decl(moduleVisibilityTest1.ts, 23, 19))
>M : Symbol(M, Decl(moduleVisibilityTest1.ts, 8, 48), Decl(moduleVisibilityTest1.ts, 50, 1))
>exported_var : Symbol(M.exported_var, Decl(moduleVisibilityTest1.ts, 23, 19))

c.someMethodThatCallsAnOuterMethod();
>c.someMethodThatCallsAnOuterMethod : Symbol(M.C.someMethodThatCallsAnOuterMethod, Decl(moduleVisibilityTest1.ts, 34, 31))
>c : Symbol(c, Decl(moduleVisibilityTest1.ts, 59, 3))
>someMethodThatCallsAnOuterMethod : Symbol(M.C.someMethodThatCallsAnOuterMethod, Decl(moduleVisibilityTest1.ts, 34, 31))

