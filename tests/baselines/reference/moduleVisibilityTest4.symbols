//// [tests/cases/compiler/moduleVisibilityTest4.ts] ////

=== moduleVisibilityTest4.ts ===
namespace M {
>M : Symbol(M, Decl(moduleVisibilityTest4.ts, 0, 0))

    export type nums = number;
>nums : Symbol(nums, Decl(moduleVisibilityTest4.ts, 0, 13))
}

namespace N {
>N : Symbol(N, Decl(moduleVisibilityTest4.ts, 2, 1))

    export type nums = number;
>nums : Symbol(nums, Decl(moduleVisibilityTest4.ts, 4, 13))
}

let a1: M.num;
>a1 : Symbol(a1, Decl(moduleVisibilityTest4.ts, 8, 3))
>M : Symbol(M, Decl(moduleVisibilityTest4.ts, 0, 0))
>num : Symbol(M.num)

let b1: M.nums;
>b1 : Symbol(b1, Decl(moduleVisibilityTest4.ts, 9, 3))
>M : Symbol(M, Decl(moduleVisibilityTest4.ts, 0, 0))
>nums : Symbol(M.nums, Decl(moduleVisibilityTest4.ts, 0, 13))

let c1: M.bar;
>c1 : Symbol(c1, Decl(moduleVisibilityTest4.ts, 10, 3))
>M : Symbol(M, Decl(moduleVisibilityTest4.ts, 0, 0))
>bar : Symbol(M.bar)

let a2: N.num;
>a2 : Symbol(a2, Decl(moduleVisibilityTest4.ts, 12, 3))
>N : Symbol(N, Decl(moduleVisibilityTest4.ts, 2, 1))
>num : Symbol(N.num)

let b2: N.nums;
>b2 : Symbol(b2, Decl(moduleVisibilityTest4.ts, 13, 3))
>N : Symbol(N, Decl(moduleVisibilityTest4.ts, 2, 1))
>nums : Symbol(N.nums, Decl(moduleVisibilityTest4.ts, 4, 13))

let c2: N.bar;
>c2 : Symbol(c2, Decl(moduleVisibilityTest4.ts, 14, 3))
>N : Symbol(N, Decl(moduleVisibilityTest4.ts, 2, 1))
>bar : Symbol(N.bar)

