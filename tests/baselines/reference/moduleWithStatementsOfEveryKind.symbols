//// [tests/cases/conformance/internalModules/moduleBody/moduleWithStatementsOfEveryKind.ts] ////

=== moduleWithStatementsOfEveryKind.ts ===
namespace A {
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 0, 0))

    class A { s: string }
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 0, 13))
>s : Symbol(A.s, Decl(moduleWithStatementsOfEveryKind.ts, 1, 13))

    class AA<T> { s: T }
>AA : Symbol(AA, Decl(moduleWithStatementsOfEveryKind.ts, 1, 25))
>T : Symbol(T, Decl(moduleWithStatementsOfEveryKind.ts, 2, 13))
>s : Symbol(AA.s, Decl(moduleWithStatementsOfEveryKind.ts, 2, 17))
>T : Symbol(T, Decl(moduleWithStatementsOfEveryKind.ts, 2, 13))

    interface I { id: number }
>I : Symbol(I, Decl(moduleWithStatementsOfEveryKind.ts, 2, 24))
>id : Symbol(I.id, Decl(moduleWithStatementsOfEveryKind.ts, 3, 17))

    class B extends AA<string> implements I { id: number }
>B : Symbol(B, Decl(moduleWithStatementsOfEveryKind.ts, 3, 30))
>AA : Symbol(AA, Decl(moduleWithStatementsOfEveryKind.ts, 1, 25))
>I : Symbol(I, Decl(moduleWithStatementsOfEveryKind.ts, 2, 24))
>id : Symbol(B.id, Decl(moduleWithStatementsOfEveryKind.ts, 5, 45))

    class BB<T> extends A {
>BB : Symbol(BB, Decl(moduleWithStatementsOfEveryKind.ts, 5, 58))
>T : Symbol(T, Decl(moduleWithStatementsOfEveryKind.ts, 6, 13))
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 0, 13))

        id: number;
>id : Symbol(BB.id, Decl(moduleWithStatementsOfEveryKind.ts, 6, 27))
    }

    namespace Module {
>Module : Symbol(Module, Decl(moduleWithStatementsOfEveryKind.ts, 8, 5))

        class A { s: string }
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 10, 22))
>s : Symbol(A.s, Decl(moduleWithStatementsOfEveryKind.ts, 11, 17))
    }
    enum Color { Blue, Red }
>Color : Symbol(Color, Decl(moduleWithStatementsOfEveryKind.ts, 12, 5))
>Blue : Symbol(Color.Blue, Decl(moduleWithStatementsOfEveryKind.ts, 13, 16))
>Red : Symbol(Color.Red, Decl(moduleWithStatementsOfEveryKind.ts, 13, 22))

    var x = 12;
>x : Symbol(x, Decl(moduleWithStatementsOfEveryKind.ts, 14, 7))

    function F(s: string): number {
>F : Symbol(F, Decl(moduleWithStatementsOfEveryKind.ts, 14, 15))
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 15, 15))

        return 2;
    }
    var array: I[] = null;
>array : Symbol(array, Decl(moduleWithStatementsOfEveryKind.ts, 18, 7))
>I : Symbol(I, Decl(moduleWithStatementsOfEveryKind.ts, 2, 24))

    var fn = (s: string) => {
>fn : Symbol(fn, Decl(moduleWithStatementsOfEveryKind.ts, 19, 7))
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 19, 14))

        return 'hello ' + s;
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 19, 14))
    }
    var ol = { s: 'hello', id: 2, isvalid: true };
>ol : Symbol(ol, Decl(moduleWithStatementsOfEveryKind.ts, 22, 7))
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 22, 14))
>id : Symbol(id, Decl(moduleWithStatementsOfEveryKind.ts, 22, 26))
>isvalid : Symbol(isvalid, Decl(moduleWithStatementsOfEveryKind.ts, 22, 33))

    declare class DC {
>DC : Symbol(DC, Decl(moduleWithStatementsOfEveryKind.ts, 22, 50))

        static x: number;
>x : Symbol(DC.x, Decl(moduleWithStatementsOfEveryKind.ts, 24, 22))
    }
}

namespace Y {
>Y : Symbol(Y, Decl(moduleWithStatementsOfEveryKind.ts, 27, 1))

    export class A { s: string }
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 29, 13))
>s : Symbol(A.s, Decl(moduleWithStatementsOfEveryKind.ts, 30, 20))

    export class AA<T> { s: T }
>AA : Symbol(AA, Decl(moduleWithStatementsOfEveryKind.ts, 30, 32))
>T : Symbol(T, Decl(moduleWithStatementsOfEveryKind.ts, 31, 20))
>s : Symbol(AA.s, Decl(moduleWithStatementsOfEveryKind.ts, 31, 24))
>T : Symbol(T, Decl(moduleWithStatementsOfEveryKind.ts, 31, 20))

    export interface I { id: number }
>I : Symbol(I, Decl(moduleWithStatementsOfEveryKind.ts, 31, 31))
>id : Symbol(I.id, Decl(moduleWithStatementsOfEveryKind.ts, 32, 24))

    export class B extends AA<string> implements I { id: number }
>B : Symbol(B, Decl(moduleWithStatementsOfEveryKind.ts, 32, 37))
>AA : Symbol(AA, Decl(moduleWithStatementsOfEveryKind.ts, 30, 32))
>I : Symbol(I, Decl(moduleWithStatementsOfEveryKind.ts, 31, 31))
>id : Symbol(B.id, Decl(moduleWithStatementsOfEveryKind.ts, 34, 52))

    export class BB<T> extends A {
>BB : Symbol(BB, Decl(moduleWithStatementsOfEveryKind.ts, 34, 65))
>T : Symbol(T, Decl(moduleWithStatementsOfEveryKind.ts, 35, 20))
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 29, 13))

        id: number;
>id : Symbol(BB.id, Decl(moduleWithStatementsOfEveryKind.ts, 35, 34))
    }

    export namespace Module {
>Module : Symbol(Module, Decl(moduleWithStatementsOfEveryKind.ts, 37, 5))

        class A { s: string }
>A : Symbol(A, Decl(moduleWithStatementsOfEveryKind.ts, 39, 29))
>s : Symbol(A.s, Decl(moduleWithStatementsOfEveryKind.ts, 40, 17))
    }
    export enum Color { Blue, Red }
>Color : Symbol(Color, Decl(moduleWithStatementsOfEveryKind.ts, 41, 5))
>Blue : Symbol(Color.Blue, Decl(moduleWithStatementsOfEveryKind.ts, 42, 23))
>Red : Symbol(Color.Red, Decl(moduleWithStatementsOfEveryKind.ts, 42, 29))

    export var x = 12;
>x : Symbol(x, Decl(moduleWithStatementsOfEveryKind.ts, 43, 14))

    export function F(s: string): number {
>F : Symbol(F, Decl(moduleWithStatementsOfEveryKind.ts, 43, 22))
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 44, 22))

        return 2;
    }
    export var array: I[] = null;
>array : Symbol(array, Decl(moduleWithStatementsOfEveryKind.ts, 47, 14))
>I : Symbol(I, Decl(moduleWithStatementsOfEveryKind.ts, 31, 31))

    export var fn = (s: string) => {
>fn : Symbol(fn, Decl(moduleWithStatementsOfEveryKind.ts, 48, 14))
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 48, 21))

        return 'hello ' + s;
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 48, 21))
    }
    export var ol = { s: 'hello', id: 2, isvalid: true };
>ol : Symbol(ol, Decl(moduleWithStatementsOfEveryKind.ts, 51, 14))
>s : Symbol(s, Decl(moduleWithStatementsOfEveryKind.ts, 51, 21))
>id : Symbol(id, Decl(moduleWithStatementsOfEveryKind.ts, 51, 33))
>isvalid : Symbol(isvalid, Decl(moduleWithStatementsOfEveryKind.ts, 51, 40))

    export declare class DC {
>DC : Symbol(DC, Decl(moduleWithStatementsOfEveryKind.ts, 51, 57))

        static x: number;
>x : Symbol(DC.x, Decl(moduleWithStatementsOfEveryKind.ts, 53, 29))
    }
}

