//// [tests/cases/compiler/multiModuleFundule1.ts] ////

=== multiModuleFundule1.ts ===
function C(x: number) { }
>C : Symbol(C, Decl(multiModuleFundule1.ts, 0, 0), Decl(multiModuleFundule1.ts, 0, 25), Decl(multiModuleFundule1.ts, 4, 1))
>x : Symbol(x, Decl(multiModuleFundule1.ts, 0, 11))

namespace C {
>C : Symbol(C, Decl(multiModuleFundule1.ts, 0, 0), Decl(multiModuleFundule1.ts, 0, 25), Decl(multiModuleFundule1.ts, 4, 1))

    export var x = 1;
>x : Symbol(x, Decl(multiModuleFundule1.ts, 3, 14))
}
namespace C {
>C : Symbol(C, Decl(multiModuleFundule1.ts, 0, 0), Decl(multiModuleFundule1.ts, 0, 25), Decl(multiModuleFundule1.ts, 4, 1))

    export function foo() { }
>foo : Symbol(foo, Decl(multiModuleFundule1.ts, 5, 13))
}

var r = C(2);
>r : Symbol(r, Decl(multiModuleFundule1.ts, 9, 3))
>C : Symbol(C, Decl(multiModuleFundule1.ts, 0, 0), Decl(multiModuleFundule1.ts, 0, 25), Decl(multiModuleFundule1.ts, 4, 1))

var r2 = new C(2); // using void returning function as constructor
>r2 : Symbol(r2, Decl(multiModuleFundule1.ts, 10, 3))
>C : Symbol(C, Decl(multiModuleFundule1.ts, 0, 0), Decl(multiModuleFundule1.ts, 0, 25), Decl(multiModuleFundule1.ts, 4, 1))

var r3 = C.foo();
>r3 : Symbol(r3, Decl(multiModuleFundule1.ts, 11, 3))
>C.foo : Symbol(C.foo, Decl(multiModuleFundule1.ts, 5, 13))
>C : Symbol(C, Decl(multiModuleFundule1.ts, 0, 0), Decl(multiModuleFundule1.ts, 0, 25), Decl(multiModuleFundule1.ts, 4, 1))
>foo : Symbol(C.foo, Decl(multiModuleFundule1.ts, 5, 13))

