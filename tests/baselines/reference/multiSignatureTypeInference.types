//// [tests/cases/compiler/multiSignatureTypeInference.ts] ////

=== multiSignatureTypeInference.ts ===
declare function f1(arg: boolean): string;
>f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
>   : ^^^   ^^       ^^^      ^^^    ^^      ^^    ^^      ^^^      ^^^^^^    ^^        ^^^        ^^^
>arg : boolean
>    : ^^^^^^^

declare function f1(arg1: number, arg2: number): number;
>f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
>   : ^^^   ^^       ^^^      ^^^    ^^      ^^    ^^      ^^^      ^^^^^^    ^^        ^^^        ^^^
>arg1 : number
>     : ^^^^^^
>arg2 : number
>     : ^^^^^^

declare function f1(...args: string[]): string[];
>f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
>   : ^^^   ^^       ^^^      ^^^    ^^      ^^    ^^      ^^^      ^^^^^^    ^^        ^^^        ^^^
>args : string[]
>     : ^^^^^^^^

declare function f2(arg: unknown): unknown;
>f2 : (arg: unknown) => unknown
>   : ^   ^^       ^^^^^       
>arg : unknown
>    : ^^^^^^^

declare function f3(): string;
>f3 : () => string
>   : ^^^^^^      

type AllParams<T> =
>AllParams : AllParams<T>
>          : ^^^^^^^^^^^^

    T extends { (...a: infer A1): any, (...a: infer A2): any, (...a: infer A3): any, (...a: infer A4): any } ? A1 | A2 | A3 | A4 : never;
>a : A1
>  : ^^
>a : A2
>  : ^^
>a : A3
>  : ^^
>a : A4
>  : ^^

type AllReturns<T> =
>AllReturns : AllReturns<T>
>           : ^^^^^^^^^^^^^

    T extends { (...a: any[]): infer R1, (...a: any[]): infer R2, (...a: any[]): infer R3, (...a: any[]): infer R4 } ? R1 | R2 | R3 | R4 : never;
>a : any[]
>  : ^^^^^
>a : any[]
>  : ^^^^^
>a : any[]
>  : ^^^^^
>a : any[]
>  : ^^^^^

type Params1 = AllParams<typeof f1>;  // string[] | [arg: boolean] | [arg1: number, arg2: number]
>Params1 : string[] | [arg: boolean] | [arg1: number, arg2: number]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
>   : ^^^   ^^       ^^^      ^^^    ^^      ^^    ^^      ^^^      ^^^^^^    ^^        ^^^        ^^^

type Params2 = AllParams<typeof f2>;  // [arg: unknown]
>Params2 : [arg: unknown]
>        : ^^^^^^^^^^^^^^
>f2 : (arg: unknown) => unknown
>   : ^   ^^       ^^^^^       

type Params3 = AllParams<typeof f3>;  // []
>Params3 : []
>        : ^^
>f3 : () => string
>   : ^^^^^^      

type Returns1 = AllReturns<typeof f1>  // string | number | string[]
>Returns1 : string | number | string[]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
>   : ^^^   ^^       ^^^      ^^^    ^^      ^^    ^^      ^^^      ^^^^^^    ^^        ^^^        ^^^

type Returns2 = AllReturns<typeof f2>;  // unknown
>Returns2 : unknown
>         : ^^^^^^^
>f2 : (arg: unknown) => unknown
>   : ^   ^^       ^^^^^       

type Returns3 = AllReturns<typeof f3>;  // string
>Returns3 : string
>         : ^^^^^^
>f3 : () => string
>   : ^^^^^^      

// Repro from #28867

type InferTwoOverloads<F extends Function> = 
>InferTwoOverloads : InferTwoOverloads<F>
>                  : ^^^^^^^^^^^^^^^^^^^^

  F extends { (...a1: infer A1): infer R1, (...a0: infer A0): infer R0 } ? 
>a1 : A1
>   : ^^
>a0 : A0
>   : ^^

    [(...a1: A1) => R1, (...a0: A0) => R0] : 
>a1 : A1
>   : ^^
>a0 : A0
>   : ^^

    never;

type Expected = InferTwoOverloads<((x: string) => number) & (() => string)>;  // [(x: string) => number, () => string]    
>Expected : [(x: string) => number, () => string]
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

type JustOneSignature = InferTwoOverloads<((x: string) => number)>;  // [(x: string) => number, (x: string) => number]
>JustOneSignature : [(x: string) => number, (x: string) => number]
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

type JustTheOtherSignature = InferTwoOverloads<(() => string)>;  // [() => string, () => string]
>JustTheOtherSignature : [() => string, () => string]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Repro from #28867

type Overloads<F> =
>Overloads : Overloads<F>
>          : ^^^^^^^^^^^^

    F extends {
          (...args: infer A1): infer R1
>args : A1
>     : ^^

          (...args: infer A2): infer R2;
>args : A2
>     : ^^

      } ? {rule: 2, variants: [A1, R1] | [A2, R2]} :
>rule : 2
>     : ^
>variants : [A1, R1] | [A2, R2]
>         : ^^^^^^^^^^^^^^^^^^^

    F extends {
          (...args: infer A1): infer R1;
>args : A1
>     : ^^

      } ? {rule: 1, variants: [A1, R1]} :
>rule : 1
>     : ^
>variants : [A1, R1]
>         : ^^^^^^^^

    never;

declare const ok1: Overloads<(x: number) => boolean>;  // {rule: 2, variants: [[number], boolean]}
>ok1 : { rule: 2; variants: [[x: number], boolean]; }
>    : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^

declare const ok2: Overloads<{(): 1; (x: number): 2}>;  // {rule: 2, variants: [[], 1] | [[number], 2]}
>ok2 : { rule: 2; variants: [[], 1] | [[x: number], 2]; }
>    : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^

declare const ok3: Overloads<() => boolean>;  // {rule: 2, variants: [[], boolean] }
>ok3 : { rule: 2; variants: [[], boolean]; }
>    : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const ok4: Overloads<(...args: unknown[]) => boolean>;  // {rule: 2, variants: [unknown[], boolean] }
>ok4 : { rule: 2; variants: [unknown[], boolean]; }
>    : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>args : unknown[]
>     : ^^^^^^^^^

declare const ok5: Overloads<(x: unknown) => boolean>;  // {rule: 2, variants: [[unknown], boolean] }
>ok5 : { rule: 2; variants: [[x: unknown], boolean]; }
>    : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : unknown
>  : ^^^^^^^

declare const ok6: Overloads<(x: any) => boolean>;  // {rule: 2, variants: [[any], boolean] }
>ok6 : { rule: 2; variants: [[x: any], boolean]; }
>    : ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : any

