//// [tests/cases/conformance/directives/multiline.tsx] ////

=== Performance Stats ===
Type Count: 2,500
Instantiation count: 2,500

=== a.ts ===
export const texts: string[] = [];
>texts : string[]
>      : ^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

/**
 @ts-ignore */
texts.push(100);
>texts.push(100) : number
>                : ^^^^^^
>texts.push : (...items: string[]) => number
>           : ^^^^     ^^^^^^^^^^^^^^^      
>texts : string[]
>      : ^^^^^^^^
>push : (...items: string[]) => number
>     : ^^^^     ^^^^^^^^^^^^^^^      
>100 : 100
>    : ^^^

/**
 @ts-expect-error */
texts.push(100);
>texts.push(100) : number
>                : ^^^^^^
>texts.push : (...items: string[]) => number
>           : ^^^^     ^^^^^^^^^^^^^^^      
>texts : string[]
>      : ^^^^^^^^
>push : (...items: string[]) => number
>     : ^^^^     ^^^^^^^^^^^^^^^      
>100 : 100
>    : ^^^

/**
 @ts-expect-error */
texts.push("100");
>texts.push("100") : number
>                  : ^^^^^^
>texts.push : (...items: string[]) => number
>           : ^^^^     ^^^^^^^^^^^^^^^      
>texts : string[]
>      : ^^^^^^^^
>push : (...items: string[]) => number
>     : ^^^^     ^^^^^^^^^^^^^^^      
>"100" : "100"
>      : ^^^^^

=== b.tsx ===
import * as React from "react";
>React : typeof React
>      : ^^^^^^^^^^^^

export function MyComponent(props: { foo: string }) {
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>props : { foo: string; }
>      : ^^^^^^^      ^^^
>foo : string
>    : ^^^^^^

  return <div />;
><div /> : JSX.Element
>        : ^^^^^^^^^^^
>div : any
>    : ^^^
}

let x = (
>x : JSX.Element
>  : ^^^^^^^^^^^
>(  <div>    {/*   @ts-ignore */}    <MyComponent foo={100} />    {/*@ts-ignore*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={100} />    {/*   // @ts-expect-error */}    <MyComponent foo={100} />    {/*   * @ts-expect-error */}    <MyComponent foo={100} />    {/*@ts-expect-error*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={"hooray"} />  </div>) : JSX.Element
>                                                                                                                                                                                                                                                                                                                                                                                                                                     : ^^^^^^^^^^^

  <div>
><div>    {/*   @ts-ignore */}    <MyComponent foo={100} />    {/*@ts-ignore*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={100} />    {/*   // @ts-expect-error */}    <MyComponent foo={100} />    {/*   * @ts-expect-error */}    <MyComponent foo={100} />    {/*@ts-expect-error*/}    <MyComponent foo={100} />    {/*   @ts-expect-error */}    <MyComponent foo={"hooray"} />  </div> : JSX.Element
>                                                                                                                                                                                                                                                                                                                                                                                                                                 : ^^^^^^^^^^^
>div : any
>    : ^^^

    {/*
   @ts-ignore */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : JSX.Element
>                          : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    {/*@ts-ignore*/}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : JSX.Element
>                          : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    {/*
   @ts-expect-error */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : JSX.Element
>                          : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    {/*
   // @ts-expect-error */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : JSX.Element
>                          : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    {/*
   * @ts-expect-error */}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : JSX.Element
>                          : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    {/*@ts-expect-error*/}
    <MyComponent foo={100} />
><MyComponent foo={100} /> : JSX.Element
>                          : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>100 : 100
>    : ^^^

    {/*
   @ts-expect-error */}
    <MyComponent foo={"hooray"} />
><MyComponent foo={"hooray"} /> : JSX.Element
>                               : ^^^^^^^^^^^
>MyComponent : (props: { foo: string; }) => JSX.Element
>            : ^     ^^                ^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>"hooray" : "hooray"
>         : ^^^^^^^^

  </div>
>div : any
>    : ^^^

);

