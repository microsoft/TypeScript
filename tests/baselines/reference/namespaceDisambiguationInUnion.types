//// [tests/cases/compiler/namespaceDisambiguationInUnion.ts] ////

=== namespaceDisambiguationInUnion.ts ===
namespace Foo {
  export type Yep = { type: "foo.yep" };
>Yep : Yep
>    : ^^^
>type : "foo.yep"
>     : ^^^^^^^^^
}

namespace Bar {
  export type Yep = { type: "bar.yep" };
>Yep : Yep
>    : ^^^
>type : "bar.yep"
>     : ^^^^^^^^^
}

const x = { type: "wat.nup" };
>x : { type: string; }
>  : ^^^^^^^^^^^^^^^^^
>{ type: "wat.nup" } : { type: string; }
>                    : ^^^^^^^^^^^^^^^^^
>type : string
>     : ^^^^^^
>"wat.nup" : "wat.nup"
>          : ^^^^^^^^^

const val1: Foo.Yep | Bar.Yep = x;
>val1 : Foo.Yep | Bar.Yep
>     : ^^^^^^^^^^^^^^^^^
>Foo : any
>    : ^^^
>Bar : any
>    : ^^^
>x : { type: string; }
>  : ^^^^^^^^^^^^^^^^^

const y = [{ type: "a" }, { type: "b" }];
>y : { type: string; }[]
>  : ^^^^^^^^^^^^^^^^^^^
>[{ type: "a" }, { type: "b" }] : { type: string; }[]
>                               : ^^^^^^^^^^^^^^^^^^^
>{ type: "a" } : { type: string; }
>              : ^^^^^^^^^^^^^^^^^
>type : string
>     : ^^^^^^
>"a" : "a"
>    : ^^^
>{ type: "b" } : { type: string; }
>              : ^^^^^^^^^^^^^^^^^
>type : string
>     : ^^^^^^
>"b" : "b"
>    : ^^^

const val2: [Foo.Yep, Bar.Yep] = y;
>val2 : [Foo.Yep, Bar.Yep]
>     : ^^^^^^^^^^^^^^^^^^
>Foo : any
>    : ^^^
>Bar : any
>    : ^^^
>y : { type: string; }[]
>  : ^^^^^^^^^^^^^^^^^^^

