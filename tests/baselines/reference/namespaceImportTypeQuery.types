//// [tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery.ts] ////

=== /a.ts ===
class A {}
>A : A
>  : ^

export type { A };
>A : A
>  : ^

export class B {};
>B : B
>  : ^

=== /b.ts ===
import * as types from './a';
>types : typeof types
>      : ^^^^^^^^^^^^

let A: typeof types.A;
>A : typeof types.A
>  : ^^^^^^^^^^^^^^
>types.A : typeof types.A
>        : ^^^^^^^^^^^^^^
>types : typeof types
>      : ^^^^^^^^^^^^
>A : typeof types.A
>  : ^^^^^^^^^^^^^^

let B: typeof types.B;
>B : typeof types.B
>  : ^^^^^^^^^^^^^^
>types.B : typeof types.B
>        : ^^^^^^^^^^^^^^
>types : typeof types
>      : ^^^^^^^^^^^^
>B : typeof types.B
>  : ^^^^^^^^^^^^^^

let t: typeof types = {
>t : typeof types
>  : ^^^^^^^^^^^^
>types : typeof types
>      : ^^^^^^^^^^^^
>{  // error: while you can ask for `typeof types.A`,  // `typeof types` does not include `A`  A: undefined as any,  B: undefined as any,} : { A: any; B: any; }
>                                                                                                                                          : ^^^^^   ^^^^^   ^^^

  // error: while you can ask for `typeof types.A`,
  // `typeof types` does not include `A`
  A: undefined as any,
>A : any
>  : ^^^
>undefined as any : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^

  B: undefined as any,
>B : any
>  : ^^^
>undefined as any : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^
}

