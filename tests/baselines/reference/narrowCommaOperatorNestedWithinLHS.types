//// [tests/cases/compiler/narrowCommaOperatorNestedWithinLHS.ts] ////

=== narrowCommaOperatorNestedWithinLHS.ts ===
const otherValue = () => true;
>otherValue : () => boolean
>           : ^^^^^^^^^^^^^
>() => true : () => boolean
>           : ^^^^^^^^^^^^^
>true : true
>     : ^^^^

const value: { inner: number | string } = null as any;
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : string | number
>      : ^^^^^^^^^^^^^^^
>null as any : any

function isNumber(obj: any): obj is number {
>isNumber : (obj: any) => obj is number
>         : ^   ^^   ^^^^^             
>obj : any

    return true; // method implementation irrelevant
>true : true
>     : ^^^^
}

if (typeof (otherValue(), value).inner === 'number') {
>typeof (otherValue(), value).inner === 'number' : boolean
>                                                : ^^^^^^^
>typeof (otherValue(), value).inner : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(otherValue(), value).inner : string | number
>                            : ^^^^^^^^^^^^^^^
>(otherValue(), value) : { inner: number | string; }
>                      : ^^^^^^^^^               ^^^
>otherValue(), value : { inner: number | string; }
>                    : ^^^^^^^^^               ^^^
>otherValue() : boolean
>             : ^^^^^^^
>otherValue : () => boolean
>           : ^^^^^^^^^^^^^
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : string | number
>      : ^^^^^^^^^^^^^^^
>'number' : "number"
>         : ^^^^^^^^

    const a = value.inner; // number
>a : number
>  : ^^^^^^
>value.inner : number
>            : ^^^^^^
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : number
>      : ^^^^^^

    const b: number = (otherValue(), value).inner; // string | number , but should be number
>b : number
>  : ^^^^^^
>(otherValue(), value).inner : number
>                            : ^^^^^^
>(otherValue(), value) : { inner: number | string; }
>                      : ^^^^^^^^^               ^^^
>otherValue(), value : { inner: number | string; }
>                    : ^^^^^^^^^               ^^^
>otherValue() : boolean
>             : ^^^^^^^
>otherValue : () => boolean
>           : ^^^^^^^^^^^^^
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : number
>      : ^^^^^^
}

if (isNumber((otherValue(), value).inner)) {
>isNumber((otherValue(), value).inner) : boolean
>                                      : ^^^^^^^
>isNumber : (obj: any) => obj is number
>         : ^   ^^   ^^^^^             
>(otherValue(), value).inner : string | number
>                            : ^^^^^^^^^^^^^^^
>(otherValue(), value) : { inner: number | string; }
>                      : ^^^^^^^^^               ^^^
>otherValue(), value : { inner: number | string; }
>                    : ^^^^^^^^^               ^^^
>otherValue() : boolean
>             : ^^^^^^^
>otherValue : () => boolean
>           : ^^^^^^^^^^^^^
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : string | number
>      : ^^^^^^^^^^^^^^^

    const a = value.inner; // number
>a : number
>  : ^^^^^^
>value.inner : number
>            : ^^^^^^
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : number
>      : ^^^^^^

    const b: number = (otherValue(), value).inner; // string | number , but should be number
>b : number
>  : ^^^^^^
>(otherValue(), value).inner : number
>                            : ^^^^^^
>(otherValue(), value) : { inner: number | string; }
>                      : ^^^^^^^^^               ^^^
>otherValue(), value : { inner: number | string; }
>                    : ^^^^^^^^^               ^^^
>otherValue() : boolean
>             : ^^^^^^^
>otherValue : () => boolean
>           : ^^^^^^^^^^^^^
>value : { inner: number | string; }
>      : ^^^^^^^^^               ^^^
>inner : number
>      : ^^^^^^
}
