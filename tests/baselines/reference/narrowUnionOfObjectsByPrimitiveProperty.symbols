//// [tests/cases/compiler/narrowUnionOfObjectsByPrimitiveProperty.ts] ////

=== narrowUnionOfObjectsByPrimitiveProperty.ts ===
export {}

interface State<Type> {
>State : Symbol(State, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 0, 9))
>Type : Symbol(Type, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 2, 16))

  state: Type;
>state : Symbol(State.state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 2, 23))
>Type : Symbol(Type, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 2, 16))
}

interface UserName {
>UserName : Symbol(UserName, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 4, 1))

  first: string;
>first : Symbol(UserName.first, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 6, 20))

  last?: string;
>last : Symbol(UserName.last, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 7, 16))
}

const nameState = {} as {
>nameState : Symbol(nameState, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 5))

  value: string;
>value : Symbol(value, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 25))

  state: State<string>;
>state : Symbol(state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 12, 16))
>State : Symbol(State, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 0, 9))

} | {
  value: UserName;
>value : Symbol(value, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 14, 5))
>UserName : Symbol(UserName, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 4, 1))

  state: State<UserName>;
>state : Symbol(state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 15, 18))
>State : Symbol(State, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 0, 9))
>UserName : Symbol(UserName, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 4, 1))
}

if (typeof nameState.value === "string") {
>nameState.value : Symbol(value, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 25), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 14, 5))
>nameState : Symbol(nameState, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 5))
>value : Symbol(value, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 25), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 14, 5))

  nameState.state satisfies State<string>;
>nameState.state : Symbol(state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 12, 16))
>nameState : Symbol(nameState, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 5))
>state : Symbol(state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 12, 16))
>State : Symbol(State, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 0, 9))

} else {
  nameState.state satisfies State<UserName>;
>nameState.state : Symbol(state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 15, 18))
>nameState : Symbol(nameState, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 11, 5))
>state : Symbol(state, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 15, 18))
>State : Symbol(State, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 0, 9))
>UserName : Symbol(UserName, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 4, 1))
}


declare const arr: [string, number] | [number, string];
>arr : Symbol(arr, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 26, 13))

if (typeof arr[0] === "string") {
>arr : Symbol(arr, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 26, 13))
>0 : Symbol(0)

  arr[1] satisfies number;
>arr : Symbol(arr, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 26, 13))
>1 : Symbol(1)

} else {
  arr[1] satisfies string;
>arr : Symbol(arr, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 26, 13))
>1 : Symbol(1)
}


function aStringOrANumber<T extends { a: string } | { a: number }>(param: T): T extends { a: string } ? string : T extends { a: number } ? number : never {
>aStringOrANumber : Symbol(aStringOrANumber, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 31, 1))
>T : Symbol(T, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 26))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 37))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))
>param : Symbol(param, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 67))
>T : Symbol(T, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 26))
>T : Symbol(T, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 26))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 89))
>T : Symbol(T, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 26))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 124))

  if (typeof param.a === "string") {
>param.a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 37), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))
>param : Symbol(param, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 67))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 37), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))

    return param.a.repeat(3);
>param.a.repeat : Symbol(String.repeat, Decl(lib.es2015.core.d.ts, --, --))
>param.a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 37))
>param : Symbol(param, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 67))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 37))
>repeat : Symbol(String.repeat, Decl(lib.es2015.core.d.ts, --, --))
  }
  if (typeof param.a === "number") {
>param.a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))
>param : Symbol(param, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 67))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))

    return Math.exp(param.a);
>Math.exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --))
>param.a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))
>param : Symbol(param, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 67))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 34, 53))
  }
  throw new Error()
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2022.error.d.ts, --, --))
}

aStringOrANumber({ a: "string" })
>aStringOrANumber : Symbol(aStringOrANumber, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 31, 1))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 44, 18))

aStringOrANumber({ a: 42 })
>aStringOrANumber : Symbol(aStringOrANumber, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 31, 1))
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 45, 18))


// The following two tests ensure that the discriminativeness of property 'prop'
// is treated differently in assignability and narrowing, and that the discriminativeness is properly cached.
declare let obj: { prop: string, other: string } | { prop: number, other: number }
>obj : Symbol(obj, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 11))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 18))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 32))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 52))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 66))

// Here, we first perform narrowing, but the subsequent assignability should not be affected.
// We expect an error there because of an incorrect value assigned to 'prop'.
// See contextualTypeWithUnionTypeObjectLiteral.ts
if(typeof obj.prop === "string") {
>obj.prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 18), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 52))
>obj : Symbol(obj, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 11))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 18), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 52))

  obj.other.repeat(3);
>obj.other.repeat : Symbol(String.repeat, Decl(lib.es2015.core.d.ts, --, --))
>obj.other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 32))
>obj : Symbol(obj, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 11))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 32))
>repeat : Symbol(String.repeat, Decl(lib.es2015.core.d.ts, --, --))

} else {
  Math.exp(obj.other);
>Math.exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --))
>obj.other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 66))
>obj : Symbol(obj, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 11))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 66))
}

obj = { prop: Math.random() > 0.5 ? "whatever" : 42, other: "irrelevant" as never }
>obj : Symbol(obj, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 50, 11))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 61, 7))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 61, 52))


declare let obj2: { prop: string, other: string } | { prop: number, other: number }
>obj2 : Symbol(obj2, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 11))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 19))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 33))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 53))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 67))

// Here, we first assign a value to 'obj2' and then perform narrowing.
// We expect an error here because of an incorrect value assigned to 'prop', like above,
// but the subsequent narrowing should not be affected by the assignability.
obj2 = { prop: Math.random() > 0.5 ? "whatever" : 42, other: "irrelevant" as never }
>obj2 : Symbol(obj2, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 11))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 69, 8))
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 69, 53))

if(typeof obj2.prop === "string") {
>obj2.prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 19), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 53))
>obj2 : Symbol(obj2, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 11))
>prop : Symbol(prop, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 19), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 53))

  obj2.other.repeat(3);
>obj2.other.repeat : Symbol(String.repeat, Decl(lib.es2015.core.d.ts, --, --))
>obj2.other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 33))
>obj2 : Symbol(obj2, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 11))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 33))
>repeat : Symbol(String.repeat, Decl(lib.es2015.core.d.ts, --, --))

} else {
  Math.exp(obj2.other);
>Math.exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>exp : Symbol(Math.exp, Decl(lib.es5.d.ts, --, --))
>obj2.other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 67))
>obj2 : Symbol(obj2, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 11))
>other : Symbol(other, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 64, 67))
}


interface ILocalizedString {
>ILocalizedString : Symbol(ILocalizedString, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 75, 1))

    original: string;
>original : Symbol(ILocalizedString.original, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 78, 28))

    value: string;
>value : Symbol(ILocalizedString.value, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 79, 21))
}

type Opt = ({
>Opt : Symbol(Opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 81, 1))

    label: ILocalizedString;
>label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13))
>ILocalizedString : Symbol(ILocalizedString, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 75, 1))

    alias?: string;
>alias : Symbol(alias, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 84, 28))

} | {
    label: string;
>label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 86, 5))

    alias: string;
>alias : Symbol(alias, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 87, 18))

})

declare const opt: Opt
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>Opt : Symbol(Opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 81, 1))

if (typeof opt.label === 'string') {
>opt.label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 86, 5))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13), Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 86, 5))

    const l = opt.label;
>l : Symbol(l, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 94, 9))
>opt.label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 86, 5))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 86, 5))

    const a = opt.alias ?? opt.label;
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 95, 9))
>opt.alias : Symbol(alias, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 87, 18))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>alias : Symbol(alias, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 87, 18))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))

} else {
    const l = opt.label;
>l : Symbol(l, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 97, 9))
>opt.label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13))

    const a = opt.alias ?? opt.label.original;
>a : Symbol(a, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 98, 9))
>opt.alias : Symbol(alias, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 84, 28))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>alias : Symbol(alias, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 84, 28))
>opt.label.original : Symbol(ILocalizedString.original, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 78, 28))
>opt.label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13))
>opt : Symbol(opt, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 91, 13))
>label : Symbol(label, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 83, 13))
>original : Symbol(ILocalizedString.original, Decl(narrowUnionOfObjectsByPrimitiveProperty.ts, 78, 28))
}
