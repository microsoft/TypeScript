//// [tests/cases/conformance/types/typeRelationships/instanceOf/narrowingConstrainedTypeVariable.ts] ////

=== narrowingConstrainedTypeVariable.ts ===
// Repro from #20138

class C { }
>C : C
>  : ^

function f1<T extends C>(v: T | string): void {
>f1 : <T extends C>(v: T | string) => void
>   : ^ ^^^^^^^^^ ^^ ^^          ^^^^^    
>v : string | T
>  : ^^^^^^^^^^

    if (v instanceof C) {
>v instanceof C : boolean
>               : ^^^^^^^
>v : string | T
>  : ^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^

        const x: T = v;
>x : T
>  : ^
>v : T
>  : ^
    }
    else {
        const s: string = v;
>s : string
>  : ^^^^^^
>v : string
>  : ^^^^^^
    }
}

class D { }
>D : D
>  : ^

function f2<T extends C, U extends D>(v: T | U) {
>f2 : <T extends C, U extends D>(v: T | U) => void
>   : ^ ^^^^^^^^^ ^^ ^^^^^^^^^ ^^ ^^     ^^^^^^^^^
>v : T | U
>  : ^^^^^

    if (v instanceof C) {
>v instanceof C : boolean
>               : ^^^^^^^
>v : T | U
>  : ^^^^^
>C : typeof C
>  : ^^^^^^^^

        const x: T = v;
>x : T
>  : ^
>v : T
>  : ^
    }
    else {
        const y: U = v;
>y : U
>  : ^
>v : U
>  : ^
    }
}

class E { x: string | undefined }
>E : E
>  : ^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

function f3<T extends E>(v: T | { x: string }) {
>f3 : <T extends E>(v: T | { x: string; }) => void
>   : ^ ^^^^^^^^^ ^^ ^^                  ^^^^^^^^^
>v : T | { x: string; }
>  : ^^^^^^^^^      ^^^
>x : string
>  : ^^^^^^

    if (v instanceof E) {
>v instanceof E : boolean
>               : ^^^^^^^
>v : T | { x: string; }
>  : ^^^^^^^^^      ^^^
>E : typeof E
>  : ^^^^^^^^

        const x: T = v;
>x : T
>  : ^
>v : T
>  : ^
    }
    else {
        const y: { x: string } = v;
>y : { x: string; }
>  : ^^^^^      ^^^
>x : string
>  : ^^^^^^
>v : { x: string; }
>  : ^^^^^      ^^^
    }
}

