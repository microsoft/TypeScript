//// [tests/cases/compiler/narrowingInCaseClauseAfterCaseClauseWithReturn.ts] ////

=== narrowingInCaseClauseAfterCaseClauseWithReturn.ts ===
// https://github.com/microsoft/TypeScript/issues/56352

function test1(arg: string | undefined) {
>test1 : (arg: string | undefined) => "A" | "B, C or D" | "Not A, B, C or D"
>      : ^   ^^                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>arg : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

  if (!arg) throw new Error();
>!arg : boolean
>     : ^^^^^^^
>arg : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>new Error() : Error
>            : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^

  switch (true) {
>true : true
>     : ^^^^

    case arg.toUpperCase() === "A":
>arg.toUpperCase() === "A" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"A" : "A"
>    : ^^^

      return "A";
>"A" : "A"
>    : ^^^

    case arg.toUpperCase() === "B":
>arg.toUpperCase() === "B" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"B" : "B"
>    : ^^^

    case arg.toUpperCase() === "C":
>arg.toUpperCase() === "C" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"C" : "C"
>    : ^^^

    case arg.toUpperCase() === "D":
>arg.toUpperCase() === "D" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"D" : "D"
>    : ^^^

      return "B, C or D";
>"B, C or D" : "B, C or D"
>            : ^^^^^^^^^^^
  }

  return "Not A, B, C or D";
>"Not A, B, C or D" : "Not A, B, C or D"
>                   : ^^^^^^^^^^^^^^^^^^
}

function test2(arg: string | undefined) {
>test2 : (arg: string | undefined) => "Not A, B, C or D" | "D" | "A, B or C"
>      : ^   ^^                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>arg : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

  if (!arg) throw new Error();
>!arg : boolean
>     : ^^^^^^^
>arg : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>new Error() : Error
>            : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^

  switch (true) {
>true : true
>     : ^^^^

    case arg.toUpperCase() === "A":
>arg.toUpperCase() === "A" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"A" : "A"
>    : ^^^

    case arg.toUpperCase() === "B":
>arg.toUpperCase() === "B" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"B" : "B"
>    : ^^^

    case arg.toUpperCase() === "C":
>arg.toUpperCase() === "C" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"C" : "C"
>    : ^^^

      return "A, B or C";
>"A, B or C" : "A, B or C"
>            : ^^^^^^^^^^^

    case arg.toUpperCase() === "D":
>arg.toUpperCase() === "D" : boolean
>                          : ^^^^^^^
>arg.toUpperCase() : string
>                  : ^^^^^^
>arg.toUpperCase : () => string
>                : ^^^^^^      
>arg : string
>    : ^^^^^^
>toUpperCase : () => string
>            : ^^^^^^      
>"D" : "D"
>    : ^^^

      return "D";
>"D" : "D"
>    : ^^^
  }

  return "Not A, B, C or D";
>"Not A, B, C or D" : "Not A, B, C or D"
>                   : ^^^^^^^^^^^^^^^^^^
}

function test3(
>test3 : (foo: { kind: "a"; prop: string; } | { kind: "b"; prop: number; } | { kind: "c"; prop: boolean; }, bar?: { type: "b"; }) => void
>      : ^   ^^                                                                                           ^^   ^^^              ^^^^^^^^^

  foo:
>foo : { kind: "a"; prop: string; } | { kind: "b"; prop: number; } | { kind: "c"; prop: boolean; }
>    : ^^^^^^^^   ^^^^^^^^      ^^^^^^^^^^^^^^   ^^^^^^^^      ^^^^^^^^^^^^^^   ^^^^^^^^       ^^^

    | { kind: "a"; prop: string }
>kind : "a"
>     : ^^^
>prop : string
>     : ^^^^^^

    | { kind: "b"; prop: number }
>kind : "b"
>     : ^^^
>prop : number
>     : ^^^^^^

    | { kind: "c"; prop: boolean },
>kind : "c"
>     : ^^^
>prop : boolean
>     : ^^^^^^^

  bar?: {
>bar : { type: "b"; } | undefined
>    : ^^^^^^^^   ^^^^^^^^^^^^^^^

    type: "b";
>type : "b"
>     : ^^^

  },
) {
  if (!bar) {
>!bar : boolean
>     : ^^^^^^^
>bar : { type: "b"; } | undefined
>    : ^^^^^^^^   ^^^^^^^^^^^^^^^

    return;
  }

  switch (foo.kind) {
>foo.kind : "a" | "b" | "c"
>         : ^^^^^^^^^^^^^^^
>foo : { kind: "a"; prop: string; } | { kind: "b"; prop: number; } | { kind: "c"; prop: boolean; }
>    : ^^^^^^^^   ^^^^^^^^      ^^^^^^^^^^^^^^   ^^^^^^^^      ^^^^^^^^^^^^^^   ^^^^^^^^       ^^^
>kind : "a" | "b" | "c"
>     : ^^^^^^^^^^^^^^^

    case "a":
>"a" : "a"
>    : ^^^

      return;
    case bar.type:
>bar.type : "b"
>         : ^^^
>bar : { type: "b"; }
>    : ^^^^^^^^   ^^^
>type : "b"
>     : ^^^

    case "c":
>"c" : "c"
>    : ^^^

      return;
  }
}
