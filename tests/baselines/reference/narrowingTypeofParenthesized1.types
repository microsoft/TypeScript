//// [tests/cases/compiler/narrowingTypeofParenthesized1.ts] ////

=== narrowingTypeofParenthesized1.ts ===
// https://github.com/microsoft/TypeScript/issues/42203

declare const foo: string;
>foo : string
>    : ^^^^^^

if ((typeof foo) === "string") {
>(typeof foo) === "string" : boolean
>                          : ^^^^^^^
>(typeof foo) : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>"string" : "string"
>         : ^^^^^^^^

  foo;
>foo : string
>    : ^^^^^^

} else {
  foo;
>foo : never
>    : ^^^^^
}

if (typeof foo === ("string")) {
>typeof foo === ("string") : boolean
>                          : ^^^^^^^
>typeof foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>("string") : "string"
>           : ^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

  foo;
>foo : string
>    : ^^^^^^

} else {
  foo;
>foo : never
>    : ^^^^^
}

