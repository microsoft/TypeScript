//// [tests/cases/compiler/nestedBlockScopedBindings5.ts] ////

=== nestedBlockScopedBindings5.ts ===
function a0() {
>a0 : () => void
>   : ^^^^^^^^^^

    for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

        x = x + 1;
>x = x + 1 : string
>          : ^^^^^^
>x : string
>  : ^^^^^^
>x + 1 : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^
    }
    for (let x;;) {
>x : any

        x = x + 2;
>x = x + 2 : any
>x : any
>x + 2 : any
>x : any
>2 : 2
>  : ^
    }
}

function a1() {
>a1 : () => void
>   : ^^^^^^^^^^

    for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

        x = x + 1;
>x = x + 1 : string
>          : ^^^^^^
>x : string
>  : ^^^^^^
>x + 1 : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^

        () => x;
>() => x : () => string
>        : ^^^^^^^^^^^^
>x : string
>  : ^^^^^^
    }
    for (let x;;) {
>x : any

        x = x + 2;
>x = x + 2 : any
>x : any
>x + 2 : any
>x : any
>2 : 2
>  : ^
    }
}

function a2() {
>a2 : () => void
>   : ^^^^^^^^^^

    for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

        x = x + 1;
>x = x + 1 : string
>          : ^^^^^^
>x : string
>  : ^^^^^^
>x + 1 : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^
    }
    for (let x;;) {
>x : any

        x = x + 2;
>x = x + 2 : any
>x : any
>x + 2 : any
>x : any
>2 : 2
>  : ^

        () => x;
>() => x : () => any
>        : ^^^^^^^^^
>x : any
    }
}


function a3() {
>a3 : () => void
>   : ^^^^^^^^^^

    for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

        x = x + 1;
>x = x + 1 : string
>          : ^^^^^^
>x : string
>  : ^^^^^^
>x + 1 : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^

        () => x;
>() => x : () => string
>        : ^^^^^^^^^^^^
>x : string
>  : ^^^^^^
    }
    for (let x;false;) {
>x : any
>false : false
>      : ^^^^^

        x = x + 2;
>x = x + 2 : any
>x : any
>x + 2 : any
>x : any
>2 : 2
>  : ^

        () => x;
>() => x : () => any
>        : ^^^^^^^^^
>x : any
    }
    switch (1) {
>1 : 1
>  : ^

        case 1:
>1 : 1
>  : ^

            let x;
>x : any

            () => x;
>() => x : () => any
>        : ^^^^^^^^^
>x : any

            break;
    }
    
}

function a4() {
>a4 : () => void
>   : ^^^^^^^^^^

    for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

        x = x + 1;
>x = x + 1 : string
>          : ^^^^^^
>x : string
>  : ^^^^^^
>x + 1 : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^
    }
    for (let x;false;) {
>x : any
>false : false
>      : ^^^^^

        x = x + 2;
>x = x + 2 : any
>x : any
>x + 2 : any
>x : any
>2 : 2
>  : ^
    }
    switch (1) {
>1 : 1
>  : ^

        case 1:
>1 : 1
>  : ^

            let x;
>x : any

            () => x;
>() => x : () => any
>        : ^^^^^^^^^
>x : any

            break;
    }
    
}

function a5() {
>a5 : () => void
>   : ^^^^^^^^^^

    let y;
>y : any

    for (let x in []) {
>x : string
>  : ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

        x = x + 1;
>x = x + 1 : string
>          : ^^^^^^
>x : string
>  : ^^^^^^
>x + 1 : string
>      : ^^^^^^
>x : string
>  : ^^^^^^
>1 : 1
>  : ^
    }
    for (let x;false;) {
>x : any
>false : false
>      : ^^^^^

        x = x + 2;
>x = x + 2 : any
>x : any
>x + 2 : any
>x : any
>2 : 2
>  : ^

        () => x;
>() => x : () => any
>        : ^^^^^^^^^
>x : any
    }
    switch (1) {
>1 : 1
>  : ^

        case 1:
>1 : 1
>  : ^

            let x;
>x : any

            break;
    }
    
}
