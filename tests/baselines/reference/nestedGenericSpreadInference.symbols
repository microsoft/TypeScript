//// [tests/cases/compiler/nestedGenericSpreadInference.ts] ////

=== nestedGenericSpreadInference.ts ===
declare function wrap<X>(x: X): { x: X };
>wrap : Symbol(wrap, Decl(nestedGenericSpreadInference.ts, 0, 0))
>X : Symbol(X, Decl(nestedGenericSpreadInference.ts, 0, 22))
>x : Symbol(x, Decl(nestedGenericSpreadInference.ts, 0, 25))
>X : Symbol(X, Decl(nestedGenericSpreadInference.ts, 0, 22))
>x : Symbol(x, Decl(nestedGenericSpreadInference.ts, 0, 33))
>X : Symbol(X, Decl(nestedGenericSpreadInference.ts, 0, 22))

declare function call<A extends unknown[], T>(x: { x: (...args: A) => T }, ...args: A): T;
>call : Symbol(call, Decl(nestedGenericSpreadInference.ts, 0, 41))
>A : Symbol(A, Decl(nestedGenericSpreadInference.ts, 1, 22))
>T : Symbol(T, Decl(nestedGenericSpreadInference.ts, 1, 42))
>x : Symbol(x, Decl(nestedGenericSpreadInference.ts, 1, 46))
>x : Symbol(x, Decl(nestedGenericSpreadInference.ts, 1, 50))
>args : Symbol(args, Decl(nestedGenericSpreadInference.ts, 1, 55))
>A : Symbol(A, Decl(nestedGenericSpreadInference.ts, 1, 22))
>T : Symbol(T, Decl(nestedGenericSpreadInference.ts, 1, 42))
>args : Symbol(args, Decl(nestedGenericSpreadInference.ts, 1, 74))
>A : Symbol(A, Decl(nestedGenericSpreadInference.ts, 1, 22))
>T : Symbol(T, Decl(nestedGenericSpreadInference.ts, 1, 42))

const leak = call(wrap(<T>(x: T) => x), 1);
>leak : Symbol(leak, Decl(nestedGenericSpreadInference.ts, 3, 5))
>call : Symbol(call, Decl(nestedGenericSpreadInference.ts, 0, 41))
>wrap : Symbol(wrap, Decl(nestedGenericSpreadInference.ts, 0, 0))
>T : Symbol(T, Decl(nestedGenericSpreadInference.ts, 3, 24))
>x : Symbol(x, Decl(nestedGenericSpreadInference.ts, 3, 27))
>T : Symbol(T, Decl(nestedGenericSpreadInference.ts, 3, 24))
>x : Symbol(x, Decl(nestedGenericSpreadInference.ts, 3, 27))

