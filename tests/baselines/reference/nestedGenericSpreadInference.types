//// [tests/cases/compiler/nestedGenericSpreadInference.ts] ////

=== nestedGenericSpreadInference.ts ===
declare function wrap<X>(x: X): { x: X };
>wrap : <X>(x: X) => { x: X; }
>     : ^ ^^ ^^ ^^^^^         
>x : X
>  : ^
>x : X
>  : ^

declare function call<A extends unknown[], T>(x: { x: (...args: A) => T }, ...args: A): T;
>call : <A extends unknown[], T>(x: { x: (...args: A) => T; }, ...args: A) => T
>     : ^ ^^^^^^^^^         ^^ ^^ ^^                         ^^^^^    ^^ ^^^^^ 
>x : { x: (...args: A) => T; }
>  : ^^^^^                 ^^^
>x : (...args: A) => T
>  : ^^^^    ^^ ^^^^^ 
>args : A
>     : ^
>args : A
>     : ^

const leak = call(wrap(<T>(x: T) => x), 1);
>leak : unknown
>     : ^^^^^^^
>call(wrap(<T>(x: T) => x), 1) : unknown
>                              : ^^^^^^^
>call : <A extends unknown[], T>(x: { x: (...args: A) => T; }, ...args: A) => T
>     : ^ ^^^^^^^^^         ^^ ^^ ^^                         ^^^^^    ^^ ^^^^^ 
>wrap(<T>(x: T) => x) : { x: (x: unknown) => unknown; }
>                     : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^
>wrap : <X>(x: X) => { x: X; }
>     : ^ ^^ ^^ ^^^^^         
><T>(x: T) => x : <T>(x: T) => T
>               : ^ ^^ ^^ ^^^^^^
>x : T
>  : ^
>x : T
>  : ^
>1 : 1
>  : ^

