//// [tests/cases/conformance/controlFlow/neverReturningFunctions1.ts] ////

=== neverReturningFunctions1.ts ===
function fail(message?: string): never {
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^

    throw new Error(message);
>new Error(message) : Error
>                   : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^
}

function f01(x: string | undefined) {
>f01 : (x: string | undefined) => void
>    : ^ ^^                  ^^^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    if (x === undefined) fail("undefined argument");
>x === undefined : boolean
>                : ^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>fail("undefined argument") : never
>                           : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"undefined argument" : "undefined argument"
>                     : ^^^^^^^^^^^^^^^^^^^^

    x.length;  // string
>x.length : number
>         : ^^^^^^
>x : string
>  : ^^^^^^
>length : number
>       : ^^^^^^
}

function f02(x: number): number {
>f02 : (x: number) => number
>    : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

    if (x >= 0) return x;
>x >= 0 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>x : number
>  : ^^^^^^

    fail("negative number");
>fail("negative number") : never
>                        : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"negative number" : "negative number"
>                  : ^^^^^^^^^^^^^^^^^

    x;  // Unreachable
>x : number
>  : ^^^^^^
}

function f03(x: string) {
>f03 : (x: string) => void
>    : ^ ^^      ^^^^^^^^^
>x : string
>  : ^^^^^^

    x;  // string
>x : string
>  : ^^^^^^

    fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

    x;  // Unreachable
>x : string
>  : ^^^^^^
}

function f11(x: string | undefined, fail: (message?: string) => never) {
>f11 : (x: string | undefined, fail: (message?: string) => never) => void
>    : ^ ^^                  ^^    ^^                           ^^^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^

    if (x === undefined) fail("undefined argument");
>x === undefined : boolean
>                : ^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>fail("undefined argument") : never
>                           : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"undefined argument" : "undefined argument"
>                     : ^^^^^^^^^^^^^^^^^^^^

    x.length;  // string
>x.length : number
>         : ^^^^^^
>x : string
>  : ^^^^^^
>length : number
>       : ^^^^^^
}

function f12(x: number, fail: (message?: string) => never): number {
>f12 : (x: number, fail: (message?: string) => never) => number
>    : ^ ^^      ^^    ^^                           ^^^^^      
>x : number
>  : ^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^

    if (x >= 0) return x;
>x >= 0 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>x : number
>  : ^^^^^^

    fail("negative number");
>fail("negative number") : never
>                        : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"negative number" : "negative number"
>                  : ^^^^^^^^^^^^^^^^^

    x;  // Unreachable
>x : number
>  : ^^^^^^
}

function f13(x: string, fail: (message?: string) => never) {
>f13 : (x: string, fail: (message?: string) => never) => void
>    : ^ ^^      ^^    ^^                           ^^^^^^^^^
>x : string
>  : ^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^

    x;  // string
>x : string
>  : ^^^^^^

    fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

    x;  // Unreachable
>x : string
>  : ^^^^^^
}

namespace Debug {
>Debug : typeof Debug
>      : ^^^^^^^^^^^^

    export declare function fail(message?: string): never;
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^
}

function f21(x: string | undefined) {
>f21 : (x: string | undefined) => void
>    : ^ ^^                  ^^^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    if (x === undefined) Debug.fail("undefined argument");
>x === undefined : boolean
>                : ^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>Debug.fail("undefined argument") : never
>                                 : ^^^^^
>Debug.fail : (message?: string) => never
>           : ^       ^^^      ^^^^^     
>Debug : typeof Debug
>      : ^^^^^^^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"undefined argument" : "undefined argument"
>                     : ^^^^^^^^^^^^^^^^^^^^

    x.length;  // string
>x.length : number
>         : ^^^^^^
>x : string
>  : ^^^^^^
>length : number
>       : ^^^^^^
}

function f22(x: number): number {
>f22 : (x: number) => number
>    : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

    if (x >= 0) return x;
>x >= 0 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>x : number
>  : ^^^^^^

    Debug.fail("negative number");
>Debug.fail("negative number") : never
>                              : ^^^^^
>Debug.fail : (message?: string) => never
>           : ^       ^^^      ^^^^^     
>Debug : typeof Debug
>      : ^^^^^^^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"negative number" : "negative number"
>                  : ^^^^^^^^^^^^^^^^^

    x;  // Unreachable
>x : number
>  : ^^^^^^
}

function f23(x: string) {
>f23 : (x: string) => void
>    : ^ ^^      ^^^^^^^^^
>x : string
>  : ^^^^^^

    x;  // string
>x : string
>  : ^^^^^^

    Debug.fail();
>Debug.fail() : never
>             : ^^^^^
>Debug.fail : (message?: string) => never
>           : ^       ^^^      ^^^^^     
>Debug : typeof Debug
>      : ^^^^^^^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

    x;  // Unreachable
>x : string
>  : ^^^^^^
}

function f24(x: string) {
>f24 : (x: string) => void
>    : ^ ^^      ^^^^^^^^^
>x : string
>  : ^^^^^^

    x;  // string
>x : string
>  : ^^^^^^

    ((Debug).fail)();
>((Debug).fail)() : never
>                 : ^^^^^
>((Debug).fail) : (message?: string) => never
>               : ^       ^^^      ^^^^^     
>(Debug).fail : (message?: string) => never
>             : ^       ^^^      ^^^^^     
>(Debug) : typeof Debug
>        : ^^^^^^^^^^^^
>Debug : typeof Debug
>      : ^^^^^^^^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

    x;  // Unreachable
>x : string
>  : ^^^^^^
}

class Test {
>Test : Test
>     : ^^^^

    fail(message?: string): never {
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^

        throw new Error(message);
>new Error(message) : Error
>                   : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>message : string | undefined
>        : ^^^^^^^^^^^^^^^^^^
    }
    f1(x: string | undefined) {
>f1 : (x: string | undefined) => void
>   : ^ ^^                  ^^^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

        if (x === undefined) this.fail("undefined argument");
>x === undefined : boolean
>                : ^^^^^^^
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>this.fail("undefined argument") : never
>                                : ^^^^^
>this.fail : (message?: string) => never
>          : ^       ^^^      ^^^^^     
>this : this
>     : ^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"undefined argument" : "undefined argument"
>                     : ^^^^^^^^^^^^^^^^^^^^

        x.length;  // string
>x.length : number
>         : ^^^^^^
>x : string
>  : ^^^^^^
>length : number
>       : ^^^^^^
    }
    f2(x: number): number {
>f2 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

        if (x >= 0) return x;
>x >= 0 : boolean
>       : ^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>x : number
>  : ^^^^^^

        this.fail("negative number");
>this.fail("negative number") : never
>                             : ^^^^^
>this.fail : (message?: string) => never
>          : ^       ^^^      ^^^^^     
>this : this
>     : ^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     
>"negative number" : "negative number"
>                  : ^^^^^^^^^^^^^^^^^

        x;  // Unreachable
>x : number
>  : ^^^^^^
    }
    f3(x: string) {
>f3 : (x: string) => void
>   : ^ ^^      ^^^^^^^^^
>x : string
>  : ^^^^^^

        x;  // string
>x : string
>  : ^^^^^^

        this.fail();
>this.fail() : never
>            : ^^^^^
>this.fail : (message?: string) => never
>          : ^       ^^^      ^^^^^     
>this : this
>     : ^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;  // Unreachable
>x : string
>  : ^^^^^^
    }
}

function f30(x: string | number | undefined) {
>f30 : (x: string | number | undefined) => void
>    : ^ ^^                           ^^^^^^^^^
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    if (typeof x === "string") {
>typeof x === "string" : boolean
>                      : ^^^^^^^
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

        fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;  // Unreachable
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    else {
        x;  // number | undefined
>x : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

        if (x !== undefined) {
>x !== undefined : boolean
>                : ^^^^^^^
>x : number | undefined
>  : ^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

            x;  // number
>x : number
>  : ^^^^^^

            fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

            x;  // Unreachable
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
        }
        else {
            x;  // undefined
>x : undefined
>  : ^^^^^^^^^

            fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

            x;  // Unreachable
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
        }
        x;  // Unreachable
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    x;  // Unreachable
>x : string | number | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

function f31(x: { a: string | number }) {
>f31 : (x: { a: string | number; }) => void
>    : ^ ^^                       ^^^^^^^^^
>x : { a: string | number; }
>  : ^^^^^               ^^^
>a : string | number
>  : ^^^^^^^^^^^^^^^

    if (typeof x.a === "string") {
>typeof x.a === "string" : boolean
>                        : ^^^^^^^
>typeof x.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x.a : string | number
>    : ^^^^^^^^^^^^^^^
>x : { a: string | number; }
>  : ^^^^^               ^^^
>a : string | number
>  : ^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

        fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;    // Unreachable
>x : { a: string | number; }
>  : ^^^^^               ^^^

        x.a;  // Unreachable
>x.a : string | number
>    : ^^^^^^^^^^^^^^^
>x : { a: string | number; }
>  : ^^^^^               ^^^
>a : string | number
>  : ^^^^^^^^^^^^^^^
    }
    x;    // { a: string | number }
>x : { a: string | number; }
>  : ^^^^^               ^^^

    x.a;  // number
>x.a : number
>    : ^^^^^^
>x : { a: string | number; }
>  : ^^^^^               ^^^
>a : number
>  : ^^^^^^
}

function f40(x: number) {
>f40 : (x: number) => void
>    : ^ ^^      ^^^^^^^^^
>x : number
>  : ^^^^^^

    try {
        x;
>x : number
>  : ^^^^^^

        fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;  // Unreachable
>x : number
>  : ^^^^^^
    }
    finally {
        x;
>x : number
>  : ^^^^^^

        fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;  // Unreachable
>x : number
>  : ^^^^^^
    }
    x;  // Unreachable
>x : number
>  : ^^^^^^
}

function f41(x: number) {
>f41 : (x: number) => void
>    : ^ ^^      ^^^^^^^^^
>x : number
>  : ^^^^^^

    try {
        x;
>x : number
>  : ^^^^^^
    }
    finally {
        x;
>x : number
>  : ^^^^^^

        fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;  // Unreachable
>x : number
>  : ^^^^^^
    }
    x;  // Unreachable
>x : number
>  : ^^^^^^
}

function f42(x: number) {
>f42 : (x: number) => void
>    : ^ ^^      ^^^^^^^^^
>x : number
>  : ^^^^^^

    try {
        x;
>x : number
>  : ^^^^^^

        fail();
>fail() : never
>       : ^^^^^
>fail : (message?: string) => never
>     : ^       ^^^      ^^^^^     

        x;  // Unreachable
>x : number
>  : ^^^^^^
    }
    finally {
        x;
>x : number
>  : ^^^^^^
    }
    x;  // Unreachable
>x : number
>  : ^^^^^^
}

function f43() {
>f43 : () => void
>    : ^^^^^^^^^^

    const fail = (): never => { throw new Error(); };
>fail : () => never
>     : ^^^^^^     
>(): never => { throw new Error(); } : () => never
>                                    : ^^^^^^     
>new Error() : Error
>            : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^

    const f = [fail];
>f : (() => never)[]
>  : ^^^^^^^     ^^^
>[fail] : (() => never)[]
>       : ^^^^^^^     ^^^
>fail : () => never
>     : ^^^^^^     

    fail();  // No effect (missing type annotation)
>fail() : never
>       : ^^^^^
>fail : () => never
>     : ^^^^^^     

    f[0]();  // No effect (not a dotted name)
>f[0]() : never
>       : ^^^^^
>f[0] : () => never
>     : ^^^^^^     
>f : (() => never)[]
>  : ^^^^^^^     ^^^
>0 : 0
>  : ^

    f;
>f : (() => never)[]
>  : ^^^^^^^     ^^^
}

// Repro from #33582

export interface Component<T extends object = any> {
	attrName?: string;
>attrName : string | undefined
>         : ^^^^^^^^^^^^^^^^^^

	data: T;
>data : T
>     : ^

	dependencies?: string[];
>dependencies : string[] | undefined
>             : ^^^^^^^^^^^^^^^^^^^^

	el: any;
>el : any
>   : ^^^

	id: string;
>id : string
>   : ^^^^^^

	multiple?: boolean;
>multiple : boolean | undefined
>         : ^^^^^^^^^^^^^^^^^^^

	name: string;
>name : string
>     : ^^^^^^

	schema: unknown;
>schema : unknown
>       : ^^^^^^^

	system: any;
>system : any
>       : ^^^

	init(data?: T): void;
>init : (data?: T) => void
>     : ^    ^^^ ^^^^^    
>data : T | undefined
>     : ^^^^^^^^^^^^^

	pause(): void;
>pause : () => void
>      : ^^^^^^    

	play(): void;
>play : () => void
>     : ^^^^^^    

	remove(): void;
>remove : () => void
>       : ^^^^^^    

	tick?(time: number, timeDelta: number): void;
>tick : ((time: number, timeDelta: number) => void) | undefined
>     : ^^    ^^      ^^         ^^      ^^^^^    ^^^^^^^^^^^^^
>time : number
>     : ^^^^^^
>timeDelta : number
>          : ^^^^^^

	update(oldData: T): void;
>update : (oldData: T) => void
>       : ^       ^^ ^^^^^    
>oldData : T
>        : ^

	updateSchema?(): void;
>updateSchema : (() => void) | undefined
>             : ^^^^^^^    ^^^^^^^^^^^^^

	extendSchema(update: unknown): void;
>extendSchema : (update: unknown) => void
>             : ^      ^^       ^^^^^    
>update : unknown
>       : ^^^^^^^

	flushToDOM(): void;
>flushToDOM : () => void
>           : ^^^^^^    
}

export interface ComponentConstructor<T extends object> {
	new (el: unknown, attrValue: string, id: string): T & Component;
>el : unknown
>   : ^^^^^^^
>attrValue : string
>          : ^^^^^^
>id : string
>   : ^^^^^^

	prototype: T & {
>prototype : T & { name: string; system: unknown; play(): void; pause(): void; }
>          : ^^^^^^^^^^^^      ^^^^^^^^^^       ^^^^^^^^^^    ^^^^^^^^^^^    ^^^

		name: string;
>name : string
>     : ^^^^^^

		system: unknown;
>system : unknown
>       : ^^^^^^^

		play(): void;
>play : () => void
>     : ^^^^^^    

		pause(): void;
>pause : () => void
>      : ^^^^^^    

	};
}

declare function registerComponent<T extends object>(
>registerComponent : <T extends object>(name: string, component: ComponentDefinition<T>) => ComponentConstructor<T>
>                  : ^ ^^^^^^^^^      ^^    ^^      ^^         ^^                      ^^^^^                       

    name: string,
>name : string
>     : ^^^^^^

    component: ComponentDefinition<T>
>component : ComponentDefinition<T>
>          : ^^^^^^^^^^^^^^^^^^^^^^

): ComponentConstructor<T>;

export type ComponentDefinition<T extends object = object> = T & Partial<Component> & ThisType<T & Component>;
>ComponentDefinition : ComponentDefinition<T>
>                    : ^^^^^^^^^^^^^^^^^^^^^^

const Component = registerComponent('test-component', {
>Component : ComponentConstructor<{ schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; }>
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^
>registerComponent('test-component', {	schema: {		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	},	init() {		this.data.num = 0;		this.el.setAttribute('custom-attribute', 'custom-value');	},	update() {},	tick() {},	remove() {},	pause() {},	play() {},	multiply(f: number) {		// Reference to system because both were registered with the same name.		return f * this.data.num * this.system!.data.counter;	}}) : ComponentConstructor<{ schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; }>

>registerComponent : <T extends object>(name: string, component: ComponentDefinition<T>) => ComponentConstructor<T>
>                  : ^ ^^^^^^^^^      ^^    ^^      ^^         ^^                      ^^^^^                       
>'test-component' : "test-component"
>                 : ^^^^^^^^^^^^^^^^
>{	schema: {		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	},	init() {		this.data.num = 0;		this.el.setAttribute('custom-attribute', 'custom-value');	},	update() {},	tick() {},	remove() {},	pause() {},	play() {},	multiply(f: number) {		// Reference to system because both were registered with the same name.		return f * this.data.num * this.system!.data.counter;	}} : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; }


	schema: {
>schema : { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	} : { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }
>                                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

		myProperty: {
>myProperty : { default: never[]; parse(): boolean[]; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{			default: [],			parse() {				return [true];			}		} : { default: never[]; parse(): boolean[]; }
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

			default: [],
>default : never[]
>        : ^^^^^^^
>[] : never[]
>   : ^^^^^^^

			parse() {
>parse : () => boolean[]
>      : ^^^^^^^^^^^^^^^

				return [true];
>[true] : true[]
>       : ^^^^^^
>true : true
>     : ^^^^
			}
		},
		string: { type: 'string' },
>string : { type: string; }
>       : ^^^^^^^^^^^^^^^^^
>{ type: 'string' } : { type: string; }
>                   : ^^^^^^^^^^^^^^^^^
>type : string
>     : ^^^^^^
>'string' : "string"
>         : ^^^^^^^^

		num: 0
>num : number
>    : ^^^^^^
>0 : 0
>  : ^

	},
	init() {
>init : () => void
>     : ^^^^^^^^^^

		this.data.num = 0;
>this.data.num = 0 : 0
>                  : ^
>this.data.num : any
>              : ^^^
>this.data : any
>          : ^^^
>this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>data : any
>     : ^^^
>num : any
>    : ^^^
>0 : 0
>  : ^

		this.el.setAttribute('custom-attribute', 'custom-value');
>this.el.setAttribute('custom-attribute', 'custom-value') : any
>                                                         : ^^^
>this.el.setAttribute : any
>                     : ^^^
>this.el : any
>        : ^^^
>this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>el : any
>   : ^^^
>setAttribute : any
>             : ^^^
>'custom-attribute' : "custom-attribute"
>                   : ^^^^^^^^^^^^^^^^^^
>'custom-value' : "custom-value"
>               : ^^^^^^^^^^^^^^

	},
	update() {},
>update : () => void
>       : ^^^^^^^^^^

	tick() {},
>tick : () => void
>     : ^^^^^^^^^^

	remove() {},
>remove : () => void
>       : ^^^^^^^^^^

	pause() {},
>pause : () => void
>      : ^^^^^^^^^^

	play() {},
>play : () => void
>     : ^^^^^^^^^^

	multiply(f: number) {
>multiply : (f: number) => number
>         : ^ ^^      ^^^^^^^^^^^
>f : number
>  : ^^^^^^

		// Reference to system because both were registered with the same name.
		return f * this.data.num * this.system!.data.counter;
>f * this.data.num * this.system!.data.counter : number
>                                              : ^^^^^^
>f * this.data.num : number
>                  : ^^^^^^
>f : number
>  : ^^^^^^
>this.data.num : any
>              : ^^^
>this.data : any
>          : ^^^
>this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>data : any
>     : ^^^
>num : any
>    : ^^^
>this.system!.data.counter : any
>                          : ^^^
>this.system!.data : any
>                  : ^^^
>this.system! : any
>             : ^^^
>this.system : any
>            : ^^^
>this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>system : any
>       : ^^^
>data : any
>     : ^^^
>counter : any
>        : ^^^
	}
});

// Repro from #36147

class MyThrowable {
>MyThrowable : MyThrowable
>            : ^^^^^^^^^^^

    throw(): never {
>throw : () => never
>      : ^^^^^^     

        throw new Error();
>new Error() : Error
>            : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
    }
}

class SuperThrowable extends MyThrowable {
>SuperThrowable : SuperThrowable
>               : ^^^^^^^^^^^^^^
>MyThrowable : MyThrowable
>            : ^^^^^^^^^^^

    err(msg: string): never {
>err : (msg: string) => never
>    : ^   ^^      ^^^^^     
>msg : string
>    : ^^^^^^

        super.throw()
>super.throw() : never
>              : ^^^^^
>super.throw : () => never
>            : ^^^^^^     
>super : MyThrowable
>      : ^^^^^^^^^^^
>throw : () => never
>      : ^^^^^^     
    }
    ok(): never {
>ok : () => never
>   : ^^^^^^     

        this.throw()
>this.throw() : never
>             : ^^^^^
>this.throw : () => never
>           : ^^^^^^     
>this : this
>     : ^^^^
>throw : () => never
>      : ^^^^^^     
    }
}

// Repro from #40346

interface Services {
    panic(message: string): never;
>panic : (message: string) => never
>      : ^       ^^      ^^^^^     
>message : string
>        : ^^^^^^
}

function foo(services: Readonly<Services>, s: string | null): string {
>foo : (services: Readonly<Services>, s: string | null) => string
>    : ^        ^^                  ^^ ^^             ^^^^^      
>services : Readonly<Services>
>         : ^^^^^^^^^^^^^^^^^^
>s : string | null
>  : ^^^^^^^^^^^^^

    if (s === null) {
>s === null : boolean
>           : ^^^^^^^
>s : string | null
>  : ^^^^^^^^^^^^^

        services.panic("ouch");
>services.panic("ouch") : never
>                       : ^^^^^
>services.panic : (message: string) => never
>               : ^       ^^      ^^^^^     
>services : Readonly<Services>
>         : ^^^^^^^^^^^^^^^^^^
>panic : (message: string) => never
>      : ^       ^^      ^^^^^     
>"ouch" : "ouch"
>       : ^^^^^^

    } else {
        return s;
>s : string
>  : ^^^^^^
    }
}

