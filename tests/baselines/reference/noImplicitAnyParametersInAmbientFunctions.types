//// [tests/cases/compiler/noImplicitAnyParametersInAmbientFunctions.ts] ////

=== noImplicitAnyParametersInAmbientFunctions.ts ===
// No implicit-'any' errors.
declare function d_f1(): void;
>d_f1 : () => void
>     : ^^^^^^    

// Implicit-'any' errors for x.
declare function d_f2(x): void;
>d_f2 : (x: any) => void
>     : ^ ^^^^^^^^^^    
>x : any
>  : ^^^

// No implicit-'any' errors.
declare function d_f3(x: any): void;
>d_f3 : (x: any) => void
>     : ^ ^^   ^^^^^    
>x : any
>  : ^^^

// Implicit-'any' errors for x, y, and z.
declare function d_f4(x, y, z): void;
>d_f4 : (x: any, y: any, z: any) => void
>     : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

// Implicit-'any' errors for x, and z.
declare function d_f5(x, y: any, z): void;
>d_f5 : (x: any, y: any, z: any) => void
>     : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

// Implicit-'any[]' errors for r.
declare function d_f6(...r): void;
>d_f6 : (...r: any[]) => void
>     : ^^^^ ^^^^^^^^^^^^    
>r : any[]
>  : ^^^^^

// Implicit-'any'/'any[]' errors for x, r.
declare function d_f7(x, ...r): void;
>d_f7 : (x: any, ...r: any[]) => void
>     : ^ ^^^^^^^^^^ ^^^^^^^^^^^^    
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^

// Implicit-'any' errors for x1, y2, x3, and y3.
declare function d_f8(x1, y1: number): any;
>d_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; (x3: any, y3: any): any; }
>     : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^  ^^^^^^^  ^^^^^^^^   ^^^
>x1 : any
>   : ^^^
>y1 : number
>   : ^^^^^^

declare function d_f8(x2: string, y2): any;
>d_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; (x3: any, y3: any): any; }
>     : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^  ^^^^^^^  ^^^^^^^^   ^^^
>x2 : string
>   : ^^^^^^
>y2 : any
>   : ^^^

declare function d_f8(x3, y3): any;
>d_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; (x3: any, y3: any): any; }
>     : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^  ^^^^^^^  ^^^^^^^^   ^^^
>x3 : any
>   : ^^^
>y3 : any
>   : ^^^

// No implicit-'any' errors.
declare var d_f9: () => string;
>d_f9 : () => string
>     : ^^^^^^      

// Implicit-'any' error for x.
declare var d_f10: (x) => string;
>d_f10 : (x: any) => string
>      : ^ ^^^^^^^^^^      
>x : any
>  : ^^^

// Implicit-'any' errors for x, y, and z.
declare var d_f11: (x, y, z) => string;
>d_f11 : (x: any, y: any, z: any) => string
>      : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^      
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

// Implicit-'any' errors for x and z.
declare var d_f12: (x, y: any, z) => string;
>d_f12 : (x: any, y: any, z: any) => string
>      : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^      
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

// Implicit-'any[]' error for r.
declare var d_f13: (...r) => string;
>d_f13 : (...r: any[]) => string
>      : ^^^^ ^^^^^^^^^^^^      
>r : any[]
>  : ^^^^^

// Implicit-'any'/'any[]' errors for x, r.
declare var d_f14: (x, ...r) => string;
>d_f14 : (x: any, ...r: any[]) => string
>      : ^ ^^^^^^^^^^ ^^^^^^^^^^^^      
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^

