//// [tests/cases/compiler/noImplicitAnyParametersInBareFunctions.ts] ////

=== noImplicitAnyParametersInBareFunctions.ts ===
// No implicit-'any' errors.
function f1(): void { }
>f1 : () => void
>   : ^^^^^^    

// Implicit-'any' error for x.
function f2(x): void { }
>f2 : (x: any) => void
>   : ^ ^^^^^^^^^^    
>x : any
>  : ^^^

// No implicit-'any' errors.
function f3(x: any): void { }
>f3 : (x: any) => void
>   : ^ ^^   ^^^^^    
>x : any
>  : ^^^

// Implicit-'any' errors for x, y, and z.
function f4(x, y, z): void { }
>f4 : (x: any, y: any, z: any) => void
>   : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

// Implicit-'any' errors for x, and z.
function f5(x, y: any, z): void { }
>f5 : (x: any, y: any, z: any) => void
>   : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

// Implicit-'any[]' error for r.
function f6(...r): void { }
>f6 : (...r: any[]) => void
>   : ^^^^ ^^^^^^^^^^^^    
>r : any[]
>  : ^^^^^

// Implicit-'any'/'any[]' errors for x, r.
function f7(x, ...r): void { }
>f7 : (x: any, ...r: any[]) => void
>   : ^ ^^^^^^^^^^ ^^^^^^^^^^^^    
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^

// Implicit-'any' errors for x1, y2, x3, and y3.
function f8(x1, y1: number): any;
>f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>   : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x1 : any
>   : ^^^
>y1 : number
>   : ^^^^^^

function f8(x2: string, y2): any;
>f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>   : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x2 : string
>   : ^^^^^^
>y2 : any
>   : ^^^

function f8(x3, y3): any { } 
>f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>   : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x3 : any
>   : ^^^
>y3 : any
>   : ^^^

// No implicit-'any' errors.
var f9 = () => "";
>f9 : () => string
>   : ^^^^^^^^^^^^
>() => "" : () => string
>         : ^^^^^^^^^^^^
>"" : ""
>   : ^^

// Implicit-'any' errors for x.
var f10 = (x) => "";
>f10 : (x: any) => string
>    : ^ ^^^^^^^^^^^^^^^^
>(x) => "" : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>"" : ""
>   : ^^

// Implicit-'any' errors for x, y, and z.
var f11 = (x, y, z) => "";
>f11 : (x: any, y: any, z: any) => string
>    : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>(x, y, z) => "" : (x: any, y: any, z: any) => string
>                : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>"" : ""
>   : ^^

// Implicit-'any' errors for x and z.
var f12 = (x, y: any, z) => "";
>f12 : (x: any, y: any, z: any) => string
>    : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^^^^^^^
>(x, y: any, z) => "" : (x: any, y: any, z: any) => string
>                     : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>"" : ""
>   : ^^

// Implicit-'any[]' error for r.
var f13 = (...r) => "";
>f13 : (...r: any[]) => string
>    : ^^^^ ^^^^^^^^^^^^^^^^^^
>(...r) => "" : (...r: any[]) => string
>             : ^^^^ ^^^^^^^^^^^^^^^^^^
>r : any[]
>  : ^^^^^
>"" : ""
>   : ^^

// Implicit-'any'/'any[]' errors for x, r.
var f14 = (x, ...r) => "";
>f14 : (x: any, ...r: any[]) => string
>    : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>(x, ...r) => "" : (x: any, ...r: any[]) => string
>                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^
>"" : ""
>   : ^^

