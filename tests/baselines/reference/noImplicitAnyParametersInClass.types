//// [tests/cases/compiler/noImplicitAnyParametersInClass.ts] ////

=== noImplicitAnyParametersInClass.ts ===
class C {
>C : C
>  : ^

    // No implicit-'any' errors.
    public pub_f1(): void { }
>pub_f1 : () => void
>       : ^^^^^^    

    // Implicit-'any' errors for x.
    public pub_f2(x): void { }
>pub_f2 : (x: any) => void
>       : ^ ^^^^^^^^^^    
>x : any
>  : ^^^

    // No implicit-'any' errors.
    public pub_f3(x: any): void { }
>pub_f3 : (x: any) => void
>       : ^ ^^   ^^^^^    
>x : any
>  : ^^^

    // Implicit-'any' errors for x, y, and z.
    public pub_f4(x, y, z): void { }
>pub_f4 : (x: any, y: any, z: any) => void
>       : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

    // Implicit-'any' errors for x, and z.
    public pub_f5(x, y: any, z): void { }
>pub_f5 : (x: any, y: any, z: any) => void
>       : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

    // Implicit-'any[]' errors for r.
    public pub_f6(...r): void { }
>pub_f6 : (...r: any[]) => void
>       : ^^^^ ^^^^^^^^^^^^    
>r : any[]
>  : ^^^^^

    // Implicit-'any'/'any[]' errors for x, r.
    public pub_f7(x, ...r): void { }
>pub_f7 : (x: any, ...r: any[]) => void
>       : ^ ^^^^^^^^^^ ^^^^^^^^^^^^    
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^

    // Implicit-'any' errors for x1, y2, x3, and y3.
    public pub_f8(x1, y1: number): any;
>pub_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>       : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x1 : any
>   : ^^^
>y1 : number
>   : ^^^^^^

    public pub_f8(x2: string, y2): any;
>pub_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>       : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x2 : string
>   : ^^^^^^
>y2 : any
>   : ^^^

    public pub_f8(x3, y3): any { }
>pub_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>       : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x3 : any
>   : ^^^
>y3 : any
>   : ^^^

    // No implicit-'any' errors.
    public pub_f9 = () => "";
>pub_f9 : () => string
>       : ^^^^^^^^^^^^
>() => "" : () => string
>         : ^^^^^^^^^^^^
>"" : ""
>   : ^^

    // Implicit-'any' errors for x.
    public pub_f10 = (x) => "";
>pub_f10 : (x: any) => string
>        : ^ ^^^^^^^^^^^^^^^^
>(x) => "" : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>"" : ""
>   : ^^

    // Implicit-'any' errors for x, y, and z.
    public pub_f11 = (x, y, z) => "";
>pub_f11 : (x: any, y: any, z: any) => string
>        : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>(x, y, z) => "" : (x: any, y: any, z: any) => string
>                : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>"" : ""
>   : ^^

    // Implicit-'any' errors for x and z.
    public pub_f12 = (x, y: any, z) => "";
>pub_f12 : (x: any, y: any, z: any) => string
>        : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^^^^^^^
>(x, y: any, z) => "" : (x: any, y: any, z: any) => string
>                     : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>"" : ""
>   : ^^

    // Implicit-'any[]' error for r.
    public pub_f13 = (...r) => "";
>pub_f13 : (...r: any[]) => string
>        : ^^^^ ^^^^^^^^^^^^^^^^^^
>(...r) => "" : (...r: any[]) => string
>             : ^^^^ ^^^^^^^^^^^^^^^^^^
>r : any[]
>  : ^^^^^
>"" : ""
>   : ^^

    // Implicit-'any'/'any[]' errors for x, r.
    public pub_f14 = (x, ...r) => "";
>pub_f14 : (x: any, ...r: any[]) => string
>        : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>(x, ...r) => "" : (x: any, ...r: any[]) => string
>                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^
>"" : ""
>   : ^^

    ///////////////////////////////////////////

    // No implicit-'any' errors.
    private priv_f1(): void { }
>priv_f1 : () => void
>        : ^^^^^^    

    // Implicit-'any' errors for x.
    private priv_f2(x): void { }
>priv_f2 : (x: any) => void
>        : ^ ^^^^^^^^^^    
>x : any
>  : ^^^

    // No implicit-'any' errors.
    private priv_f3(x: any): void { }
>priv_f3 : (x: any) => void
>        : ^ ^^   ^^^^^    
>x : any
>  : ^^^

    // Implicit-'any' errors for x, y, and z.
    private priv_f4(x, y, z): void { }
>priv_f4 : (x: any, y: any, z: any) => void
>        : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

    // Implicit-'any' errors for x, and z.
    private priv_f5(x, y: any, z): void { }
>priv_f5 : (x: any, y: any, z: any) => void
>        : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^    
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

    // Implicit-'any[]' errors for r.
    private priv_f6(...r): void { }
>priv_f6 : (...r: any[]) => void
>        : ^^^^ ^^^^^^^^^^^^    
>r : any[]
>  : ^^^^^

    // Implicit-'any'/'any[]' errors for x, r.
    private priv_f7(x, ...r): void { }
>priv_f7 : (x: any, ...r: any[]) => void
>        : ^ ^^^^^^^^^^ ^^^^^^^^^^^^    
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^

    // Implicit-'any' errors for x1, y2, x3, and y3.
    private priv_f8(x1, y1: number): any;
>priv_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>        : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x1 : any
>   : ^^^
>y1 : number
>   : ^^^^^^

    private priv_f8(x2: string, y2): any;
>priv_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>        : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x2 : string
>   : ^^^^^^
>y2 : any
>   : ^^^

    private priv_f8(x3, y3): any { }
>priv_f8 : { (x1: any, y1: number): any; (x2: string, y2: any): any; }
>        : ^^^  ^^^^^^^  ^^      ^^^   ^^^  ^^      ^^  ^^^^^^^^   ^^^
>x3 : any
>   : ^^^
>y3 : any
>   : ^^^

    // No implicit-'any' errors.
    private priv_f9 = () => "";
>priv_f9 : () => string
>        : ^^^^^^^^^^^^
>() => "" : () => string
>         : ^^^^^^^^^^^^
>"" : ""
>   : ^^

    // Implicit-'any' errors for x.
    private priv_f10 = (x) => "";
>priv_f10 : (x: any) => string
>         : ^ ^^^^^^^^^^^^^^^^
>(x) => "" : (x: any) => string
>          : ^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>"" : ""
>   : ^^

    // Implicit-'any' errors for x, y, and z.
    private priv_f11 = (x, y, z) => "";
>priv_f11 : (x: any, y: any, z: any) => string
>         : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>(x, y, z) => "" : (x: any, y: any, z: any) => string
>                : ^ ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>"" : ""
>   : ^^

    // Implicit-'any' errors for x and z.
    private priv_f12 = (x, y: any, z) => "";
>priv_f12 : (x: any, y: any, z: any) => string
>         : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^^^^^^^
>(x, y: any, z) => "" : (x: any, y: any, z: any) => string
>                     : ^ ^^^^^^^ ^^   ^^ ^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>"" : ""
>   : ^^

    // Implicit-'any[]' error for r.
    private priv_f13 = (...r) => "";
>priv_f13 : (...r: any[]) => string
>         : ^^^^ ^^^^^^^^^^^^^^^^^^
>(...r) => "" : (...r: any[]) => string
>             : ^^^^ ^^^^^^^^^^^^^^^^^^
>r : any[]
>  : ^^^^^
>"" : ""
>   : ^^

    // Implicit-'any'/'any[]' errors for x, r.
    private priv_f14 = (x, ...r) => "";
>priv_f14 : (x: any, ...r: any[]) => string
>         : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>(x, ...r) => "" : (x: any, ...r: any[]) => string
>                : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^
>x : any
>  : ^^^
>r : any[]
>  : ^^^^^
>"" : ""
>   : ^^
}
