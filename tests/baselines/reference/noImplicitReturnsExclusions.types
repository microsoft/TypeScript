//// [tests/cases/compiler/noImplicitReturnsExclusions.ts] ////

=== noImplicitReturnsExclusions.ts ===
// Functions with a return type of any, undefined, or a type that includes void are excluded
// from --noImplicitReturns checks.

function f1(b: boolean): undefined {
>f1 : (b: boolean) => undefined
>   : ^ ^^       ^^^^^         
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f2(b: boolean): void {
>f2 : (b: boolean) => void
>   : ^ ^^       ^^^^^    
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f3(b: boolean): any {
>f3 : (b: boolean) => any
>   : ^ ^^       ^^^^^   
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f4(b: boolean): string | undefined {  // Error
>f4 : (b: boolean) => string | undefined
>   : ^ ^^       ^^^^^                  
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f5(b: boolean): string | void {
>f5 : (b: boolean) => string | void
>   : ^ ^^       ^^^^^             
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f6(b: boolean): unknown {  // Error
>f6 : (b: boolean) => unknown
>   : ^ ^^       ^^^^^       
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f10(b: boolean) {
>f10 : (b: boolean) => void
>    : ^ ^^       ^^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return;
>b : boolean
>  : ^^^^^^^
}

function f11(b: boolean) {
>f11 : (b: boolean) => undefined
>    : ^ ^^       ^^^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return undefined;
>b : boolean
>  : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f12(b: boolean) {
>f12 : (b: boolean) => any
>    : ^ ^^       ^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return undefined as any;
>b : boolean
>  : ^^^^^^^
>undefined as any : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f13(b: boolean) {  // Error
>f13 : (b: boolean) => unknown
>    : ^ ^^       ^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return undefined as unknown;
>b : boolean
>  : ^^^^^^^
>undefined as unknown : unknown
>                     : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f14(b: boolean) {  // Error
>f14 : (b: boolean) => 42 | undefined
>    : ^ ^^       ^^^^^^^^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return 42;
>b : boolean
>  : ^^^^^^^
>42 : 42
>   : ^^
}

function f15(b: boolean) {  // Error
>f15 : (b: boolean) => 42 | undefined
>    : ^ ^^       ^^^^^^^^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return 42;
>b : boolean
>  : ^^^^^^^
>42 : 42
>   : ^^

    if (b) return undefined;
>b : false
>  : ^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

function f16(b: boolean) {  // Error
>f16 : (b: boolean) => 42 | undefined
>    : ^ ^^       ^^^^^^^^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^

    if (b) return 42;
>b : boolean
>  : ^^^^^^^
>42 : 42
>   : ^^

    if (b) return;
>b : false
>  : ^^^^^
}

declare class HistoryItem {
>HistoryItem : HistoryItem
>            : ^^^^^^^^^^^

  input: {
>input : { location: { uri: string; }; }
>      : ^^^^^^^^^^^^                ^^^

    location: {
>location : { uri: string; }
>         : ^^^^^^^      ^^^

      uri: string;
>uri : string
>    : ^^^^^^

    };
  };
}

interface Thenable<T> {
  then<TResult>(
>then : { <TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: any) => TResult | Thenable<TResult>): Thenable<TResult>; <TResult_1>(onfulfilled?: (value: T) => TResult_1 | Thenable<TResult_1>, onrejected?: (reason: any) => void): Thenable<TResult_1>; }
>     : ^^^       ^^           ^^^                                         ^^          ^^^                                            ^^^                 ^^^^^^^^^^^^^^           ^^^                                             ^^          ^^^                     ^^^                   ^^^

    onfulfilled?: (value: T) => TResult | Thenable<TResult>,
>onfulfilled : ((value: T) => TResult | Thenable<TResult>) | undefined
>            : ^^     ^^ ^^^^^                           ^^^^^^^^^^^^^
>value : T
>      : ^

    onrejected?: (reason: any) => TResult | Thenable<TResult>
>onrejected : ((reason: any) => TResult | Thenable<TResult>) | undefined
>           : ^^      ^^   ^^^^^                           ^^^^^^^^^^^^^
>reason : any
>       : ^^^

  ): Thenable<TResult>;
  then<TResult>(
>then : { <TResult_1>(onfulfilled?: (value: T) => TResult_1 | Thenable<TResult_1>, onrejected?: (reason: any) => TResult_1 | Thenable<TResult_1>): Thenable<TResult_1>; <TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: any) => void): Thenable<TResult>; }
>     : ^^^^^^^^^^^^^^           ^^^                                             ^^          ^^^                                                ^^^                   ^^^       ^^           ^^^                                         ^^          ^^^                     ^^^                 ^^^

    onfulfilled?: (value: T) => TResult | Thenable<TResult>,
>onfulfilled : ((value: T) => TResult | Thenable<TResult>) | undefined
>            : ^^     ^^ ^^^^^                           ^^^^^^^^^^^^^
>value : T
>      : ^

    onrejected?: (reason: any) => void
>onrejected : ((reason: any) => void) | undefined
>           : ^^      ^^   ^^^^^    ^^^^^^^^^^^^^
>reason : any
>       : ^^^

  ): Thenable<TResult>;
}

export declare function executeCommand<T = unknown>(
>executeCommand : <T = unknown>(command: string, ...rest: any[]) => Thenable<T>
>               : ^ ^^^^^^^^^^^^       ^^      ^^^^^    ^^     ^^^^^           

  command: string,
>command : string
>        : ^^^^^^

  ...rest: any[]
>rest : any[]
>     : ^^^^^

): Thenable<T>;

export declare function registerCommand(
>registerCommand : (command: string, callback: (...args: any[]) => any, thisArg?: any) => void
>                : ^       ^^      ^^        ^^                       ^^       ^^^   ^^^^^    

  command: string,
>command : string
>        : ^^^^^^

  callback: (...args: any[]) => any,
>callback : (...args: any[]) => any
>         : ^^^^    ^^     ^^^^^   
>args : any[]
>     : ^^^^^

  thisArg?: any
>thisArg : any
>        : ^^^

): void;

registerCommand("_references-view.showHistoryItem", async (item) => { // Error, contextual return type of Promise<unknown>
>registerCommand("_references-view.showHistoryItem", async (item) => { // Error, contextual return type of Promise<unknown>  if (item instanceof HistoryItem) {    return executeCommand("vscode.open", item.input.location.uri);  }}) : void
>                                                                                                                                                                                                                                      : ^^^^
>registerCommand : (command: string, callback: (...args: any[]) => any, thisArg?: any) => void
>                : ^       ^^      ^^        ^^                       ^^       ^^^   ^^^^^    
>"_references-view.showHistoryItem" : "_references-view.showHistoryItem"
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>async (item) => { // Error, contextual return type of Promise<unknown>  if (item instanceof HistoryItem) {    return executeCommand("vscode.open", item.input.location.uri);  }} : (item: any) => Promise<unknown>
>                                                                                                                                                                                 : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : any
>     : ^^^

  if (item instanceof HistoryItem) {
>item instanceof HistoryItem : boolean
>                            : ^^^^^^^
>item : any
>     : ^^^
>HistoryItem : typeof HistoryItem
>            : ^^^^^^^^^^^^^^^^^^

    return executeCommand("vscode.open", item.input.location.uri);
>executeCommand("vscode.open", item.input.location.uri) : Thenable<unknown>
>                                                       : ^^^^^^^^^^^^^^^^^
>executeCommand : <T = unknown>(command: string, ...rest: any[]) => Thenable<T>
>               : ^ ^^^^^^^^^^^^       ^^      ^^^^^    ^^     ^^^^^           
>"vscode.open" : "vscode.open"
>              : ^^^^^^^^^^^^^
>item.input.location.uri : string
>                        : ^^^^^^
>item.input.location : { uri: string; }
>                    : ^^^^^^^      ^^^
>item.input : { location: { uri: string; }; }
>           : ^^^^^^^^^^^^                ^^^
>item : HistoryItem
>     : ^^^^^^^^^^^
>input : { location: { uri: string; }; }
>      : ^^^^^^^^^^^^                ^^^
>location : { uri: string; }
>         : ^^^^^^^      ^^^
>uri : string
>    : ^^^^^^
  }
});

