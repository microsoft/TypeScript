//// [tests/cases/compiler/noInferCommonPropertyCheck1.ts] ////

=== noInferCommonPropertyCheck1.ts ===
declare const partialObj1: Partial<{ a: unknown; b: unknown }>;
>partialObj1 : Partial<{ a: unknown; b: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>a : unknown
>  : ^^^^^^^
>b : unknown
>  : ^^^^^^^

declare const partialObj2: Partial<{ c: unknown; d: unknown }>;
>partialObj2 : Partial<{ c: unknown; d: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>c : unknown
>  : ^^^^^^^
>d : unknown
>  : ^^^^^^^

declare const someObj1: { x: string };
>someObj1 : { x: string; }
>         : ^^^^^      ^^^
>x : string
>  : ^^^^^^

declare function test1<T>(a: T, b: NoInfer<T> & { prop?: unknown }): void;
>test1 : <T>(a: T, b: NoInfer<T> & { prop?: unknown; }) => void
>      : ^ ^^ ^^ ^^ ^^                                ^^^^^    
>a : T
>  : ^
>b : NoInfer<T> & { prop?: unknown; }
>  : ^^^^^^^^^^^^^^^^^^^^^^       ^^^
>prop : unknown
>     : ^^^^^^^

test1(partialObj1, someObj1);
>test1(partialObj1, someObj1) : void
>                             : ^^^^
>test1 : <T>(a: T, b: NoInfer<T> & { prop?: unknown; }) => void
>      : ^ ^^ ^^ ^^ ^^                                ^^^^^    
>partialObj1 : Partial<{ a: unknown; b: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>someObj1 : { x: string; }
>         : ^^^^^      ^^^

declare function test2<T1, T2>(
>test2 : <T1, T2>(a: T1, b: T2, c: NoInfer<T1> & NoInfer<T2>) => void
>      : ^  ^^  ^^ ^^  ^^ ^^  ^^ ^^                         ^^^^^    

  a: T1,
>a : T1
>  : ^^

  b: T2,
>b : T2
>  : ^^

  c: NoInfer<T1> & NoInfer<T2>,
>c : NoInfer<T1> & NoInfer<T2>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

): void;

test2(partialObj1, partialObj2, someObj1);
>test2(partialObj1, partialObj2, someObj1) : void
>                                          : ^^^^
>test2 : <T1, T2>(a: T1, b: T2, c: NoInfer<T1> & NoInfer<T2>) => void
>      : ^  ^^  ^^ ^^  ^^ ^^  ^^ ^^                         ^^^^^    
>partialObj1 : Partial<{ a: unknown; b: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>partialObj2 : Partial<{ c: unknown; d: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>someObj1 : { x: string; }
>         : ^^^^^      ^^^

declare function test3<T1, T2>(
>test3 : <T1, T2>(a: T1, b: T2, c: NoInfer<T1 & T2>) => void
>      : ^  ^^  ^^ ^^  ^^ ^^  ^^ ^^                ^^^^^    

  a: T1,
>a : T1
>  : ^^

  b: T2,
>b : T2
>  : ^^

  c: NoInfer<T1 & T2>,
>c : NoInfer<T1 & T2>
>  : ^^^^^^^^^^^^^^^^

): void;

test3(partialObj1, partialObj2, someObj1);
>test3(partialObj1, partialObj2, someObj1) : void
>                                          : ^^^^
>test3 : <T1, T2>(a: T1, b: T2, c: NoInfer<T1 & T2>) => void
>      : ^  ^^  ^^ ^^  ^^ ^^  ^^ ^^                ^^^^^    
>partialObj1 : Partial<{ a: unknown; b: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>partialObj2 : Partial<{ c: unknown; d: unknown; }>
>            : ^^^^^^^^^^^^^       ^^^^^       ^^^^
>someObj1 : { x: string; }
>         : ^^^^^      ^^^

