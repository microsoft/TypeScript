//// [tests/cases/conformance/types/typeRelationships/typeInference/noInferRedeclaration.ts] ////

=== a.ts ===
export const f = <T>(x: T, y: NoInfer<T>) => x;
>f : <T>(x: T, y: NoInfer<T>) => T
>  : ^ ^^ ^^ ^^ ^^          ^^^^^^
><T>(x: T, y: NoInfer<T>) => x : <T>(x: T, y: NoInfer<T>) => T
>                              : ^ ^^ ^^ ^^ ^^          ^^^^^^
>x : T
>  : ^
>y : NoInfer<T>
>  : ^^^^^^^^^^
>x : T
>  : ^

=== b.ts ===
import { f } from "./a";
>f : <T>(x: T, y: globalThis.NoInfer<T>) => T
>  : ^ ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^   ^^^^^^

type NoInfer<T> = T & number;
>NoInfer : NoInfer<T>
>        : ^^^^^^^^^^

export const g = f;
>g : <T>(x: T, y: globalThis.NoInfer<T>) => T
>  : ^ ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^   ^^^^^^
>f : <T>(x: T, y: globalThis.NoInfer<T>) => T
>  : ^ ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^   ^^^^^^

