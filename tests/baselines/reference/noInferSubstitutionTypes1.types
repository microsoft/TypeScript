//// [tests/cases/conformance/types/typeRelationships/typeInference/noInferSubstitutionTypes1.ts] ////

=== noInferSubstitutionTypes1.ts ===
// https://github.com/microsoft/TypeScript/issues/59826

declare function g<A>(a: A, b: A extends string ? `rel:${NoInfer<A>}` : never): A;
>g : <A>(a: A, b: A extends string ? `rel:${NoInfer<A>}` : never) => A
>  : ^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>a : A
>  : ^
>b : A extends string ? `rel:${NoInfer<string & A>}` : never
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const result1 = g("5", "rel:7"); // error
>result1 : "5"
>        : ^^^
>g("5", "rel:7") : "5"
>                : ^^^
>g : <A>(a: A, b: A extends string ? `rel:${NoInfer<A>}` : never) => A
>  : ^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>"5" : "5"
>    : ^^^
>"rel:7" : "rel:7"
>        : ^^^^^^^

declare function g2<A>(a: A, b: A extends string ? NoInfer<`rel:${A}`> : never): A;
>g2 : <A>(a: A, b: A extends string ? NoInfer<`rel:${A}`> : never) => A
>   : ^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>a : A
>  : ^
>b : A extends string ? NoInfer<`rel:${A}`> : never
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const result2 = g2("5", "rel:7"); // error
>result2 : "5"
>        : ^^^
>g2("5", "rel:7") : "5"
>                 : ^^^
>g2 : <A>(a: A, b: A extends string ? NoInfer<`rel:${A}`> : never) => A
>   : ^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>"5" : "5"
>    : ^^^
>"rel:7" : "rel:7"
>        : ^^^^^^^

declare function g3<A>(a: A, b: NoInfer<A extends string ? `rel:${A}` : never>): A;
>g3 : <A>(a: A, b: NoInfer<A extends string ? `rel:${A}` : never>) => A
>   : ^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>a : A
>  : ^
>b : NoInfer<A extends string ? `rel:${A}` : never>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const result3 = g3("5", "rel:7"); // error
>result3 : "5"
>        : ^^^
>g3("5", "rel:7") : "5"
>                 : ^^^
>g3 : <A>(a: A, b: NoInfer<A extends string ? `rel:${A}` : never>) => A
>   : ^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>"5" : "5"
>    : ^^^
>"rel:7" : "rel:7"
>        : ^^^^^^^

declare function h<const A>(a: A, b: A extends string ? NoInfer<A> : never): A;
>h : <const A>(a: A, b: A extends string ? NoInfer<A> : never) => A
>  : ^^^^^^^ ^^ ^^ ^^ ^^                                     ^^^^^ 
>a : A
>  : ^
>b : A extends string ? NoInfer<string & A> : never
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const result4 = h("foo", "bar"); // error
>result4 : "foo"
>        : ^^^^^
>h("foo", "bar") : "foo"
>                : ^^^^^
>h : <const A>(a: A, b: A extends string ? NoInfer<A> : never) => A
>  : ^^^^^^^ ^^ ^^ ^^ ^^                                     ^^^^^ 
>"foo" : "foo"
>      : ^^^^^
>"bar" : "bar"
>      : ^^^^^

declare function h2<const A>(a: A, b: NoInfer<A> extends string ? NoInfer<A> : never): A;
>h2 : <const A>(a: A, b: NoInfer<A> extends string ? NoInfer<A> : never) => A
>   : ^^^^^^^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>a : A
>  : ^
>b : NoInfer<A> extends string ? NoInfer<string & A> : never
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const result5 = h2("foo", "bar"); // error
>result5 : "foo"
>        : ^^^^^
>h2("foo", "bar") : "foo"
>                 : ^^^^^
>h2 : <const A>(a: A, b: NoInfer<A> extends string ? NoInfer<A> : never) => A
>   : ^^^^^^^ ^^ ^^ ^^ ^^                                              ^^^^^ 
>"foo" : "foo"
>      : ^^^^^
>"bar" : "bar"
>      : ^^^^^

declare function h3<const A>(a: A, b: NoInfer<A> extends string ? A : never): A;
>h3 : <const A>(a: A, b: NoInfer<A> extends string ? A : never) => A
>   : ^^^^^^^ ^^ ^^ ^^ ^^                                     ^^^^^ 
>a : A
>  : ^
>b : NoInfer<A> extends string ? A : never
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const result6 = h3("foo", "bar"); // no error
>result6 : "foo" | "bar"
>        : ^^^^^^^^^^^^^
>h3("foo", "bar") : "foo" | "bar"
>                 : ^^^^^^^^^^^^^
>h3 : <const A>(a: A, b: NoInfer<A> extends string ? A : never) => A
>   : ^^^^^^^ ^^ ^^ ^^ ^^                                     ^^^^^ 
>"foo" : "foo"
>      : ^^^^^
>"bar" : "bar"
>      : ^^^^^

const result7 = h3("foo", 42); // error
>result7 : "foo"
>        : ^^^^^
>h3("foo", 42) : "foo"
>              : ^^^^^
>h3 : <const A>(a: A, b: NoInfer<A> extends string ? A : never) => A
>   : ^^^^^^^ ^^ ^^ ^^ ^^                                     ^^^^^ 
>"foo" : "foo"
>      : ^^^^^
>42 : 42
>   : ^^

