//// [tests/cases/compiler/noInferUnionExcessPropertyCheck1.ts] ////

=== noInferUnionExcessPropertyCheck1.ts ===
declare function test1<T extends { x: string }>(
>test1 : <T extends { x: string; }>(a: T, b: NoInfer<T> | (() => NoInfer<T>)) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                               ^^^^^    
>x : string
>  : ^^^^^^

  a: T,
>a : T
>  : ^

  b: NoInfer<T> | (() => NoInfer<T>),
>b : NoInfer<T> | (() => NoInfer<T>)
>  : ^^^^^^^^^^^^^^^^^^^^          ^

): void;

test1({ x: "foo" }, { x: "bar" }); // no error
>test1({ x: "foo" }, { x: "bar" }) : void
>                                  : ^^^^
>test1 : <T extends { x: string; }>(a: T, b: NoInfer<T> | (() => NoInfer<T>)) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                               ^^^^^    
>{ x: "foo" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"foo" : "foo"
>      : ^^^^^
>{ x: "bar" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"bar" : "bar"
>      : ^^^^^

test1({ x: "foo" }, { x: "bar", y: 42 }); // epc error
>test1({ x: "foo" }, { x: "bar", y: 42 }) : void
>                                         : ^^^^
>test1 : <T extends { x: string; }>(a: T, b: NoInfer<T> | (() => NoInfer<T>)) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                               ^^^^^    
>{ x: "foo" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"foo" : "foo"
>      : ^^^^^
>{ x: "bar", y: 42 } : { x: string; y: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"bar" : "bar"
>      : ^^^^^
>y : number
>  : ^^^^^^
>42 : 42
>   : ^^

declare function test2<T extends { x: string }>(
>test2 : <T extends { x: string; }>(a: T, b: NoInfer<T> | NoInfer<() => T>) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                             ^^^^^    
>x : string
>  : ^^^^^^

  a: T,
>a : T
>  : ^

  b: NoInfer<T> | NoInfer<() => T>,
>b : NoInfer<T> | NoInfer<() => T>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^

): void;

test2({ x: "foo" }, { x: "bar" }); // no error
>test2({ x: "foo" }, { x: "bar" }) : void
>                                  : ^^^^
>test2 : <T extends { x: string; }>(a: T, b: NoInfer<T> | NoInfer<() => T>) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                             ^^^^^    
>{ x: "foo" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"foo" : "foo"
>      : ^^^^^
>{ x: "bar" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"bar" : "bar"
>      : ^^^^^

test2({ x: "foo" }, { x: "bar", y: 42 }); // epc error
>test2({ x: "foo" }, { x: "bar", y: 42 }) : void
>                                         : ^^^^
>test2 : <T extends { x: string; }>(a: T, b: NoInfer<T> | NoInfer<() => T>) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                             ^^^^^    
>{ x: "foo" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"foo" : "foo"
>      : ^^^^^
>{ x: "bar", y: 42 } : { x: string; y: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"bar" : "bar"
>      : ^^^^^
>y : number
>  : ^^^^^^
>42 : 42
>   : ^^

declare function test3<T extends { x: string }>(
>test3 : <T extends { x: string; }>(a: T, b: NoInfer<T | (() => T)>) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                      ^^^^^    
>x : string
>  : ^^^^^^

  a: T,
>a : T
>  : ^

  b: NoInfer<T | (() => T)>,
>b : NoInfer<T | (() => T)>
>  : ^^^^^^^^^^^^^^^^^^^ ^^

): void;

test3({ x: "foo" }, { x: "bar" }); // no error
>test3({ x: "foo" }, { x: "bar" }) : void
>                                  : ^^^^
>test3 : <T extends { x: string; }>(a: T, b: NoInfer<T | (() => T)>) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                      ^^^^^    
>{ x: "foo" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"foo" : "foo"
>      : ^^^^^
>{ x: "bar" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"bar" : "bar"
>      : ^^^^^

test3({ x: "foo" }, { x: "bar", y: 42 }); // epc error
>test3({ x: "foo" }, { x: "bar", y: 42 }) : void
>                                         : ^^^^
>test3 : <T extends { x: string; }>(a: T, b: NoInfer<T | (() => T)>) => void
>      : ^ ^^^^^^^^^              ^^ ^^ ^^ ^^                      ^^^^^    
>{ x: "foo" } : { x: string; }
>             : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"foo" : "foo"
>      : ^^^^^
>{ x: "bar", y: 42 } : { x: string; y: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"bar" : "bar"
>      : ^^^^^
>y : number
>  : ^^^^^^
>42 : 42
>   : ^^

