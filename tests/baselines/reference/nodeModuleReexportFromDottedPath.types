//// [tests/cases/compiler/nodeModuleReexportFromDottedPath.ts] ////

=== /node_modules/.prisma/client/index.d.ts ===
export interface PrismaClientOptions {
  rejectOnNotFound?: any;
>rejectOnNotFound : any
}

export class PrismaClient<T extends PrismaClientOptions = PrismaClientOptions> {
>PrismaClient : PrismaClient<T>
>             : ^^^^^^^^^^^^^^^

  private fetcher;
>fetcher : any
}

=== /node_modules/@prisma/client/index.d.ts ===

export * from ".prisma/client";

=== /index.ts ===
import { PrismaClient } from "@prisma/client";
>PrismaClient : typeof PrismaClient
>             : ^^^^^^^^^^^^^^^^^^^

declare const enhancePrisma: <TPrismaClientCtor>(client: TPrismaClientCtor) => TPrismaClientCtor & { enhanced: unknown };
>enhancePrisma : <TPrismaClientCtor>(client: TPrismaClientCtor) => TPrismaClientCtor & { enhanced: unknown; }
>              : ^                 ^^      ^^                 ^^^^^                                          
>client : TPrismaClientCtor
>       : ^^^^^^^^^^^^^^^^^
>enhanced : unknown
>         : ^^^^^^^

const EnhancedPrisma = enhancePrisma(PrismaClient);
>EnhancedPrisma : typeof PrismaClient & { enhanced: unknown; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>enhancePrisma(PrismaClient) : typeof PrismaClient & { enhanced: unknown; }
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>enhancePrisma : <TPrismaClientCtor>(client: TPrismaClientCtor) => TPrismaClientCtor & { enhanced: unknown; }
>              : ^                 ^^      ^^                 ^^^^^                                          
>PrismaClient : typeof PrismaClient
>             : ^^^^^^^^^^^^^^^^^^^

export default new EnhancedPrisma();
>new EnhancedPrisma() : PrismaClient<import("/node_modules/.prisma/client/index").PrismaClientOptions>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>EnhancedPrisma : typeof PrismaClient & { enhanced: unknown; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^

