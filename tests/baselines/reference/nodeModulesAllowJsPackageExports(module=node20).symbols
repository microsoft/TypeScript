//// [tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackageExports.ts] ////

=== index.js ===
// esm format file
import * as cjs from "package/cjs";
>cjs : Symbol(cjs, Decl(index.js, 1, 6))

import * as mjs from "package/mjs";
>mjs : Symbol(mjs, Decl(index.js, 2, 6))

import * as type from "package";
>type : Symbol(type, Decl(index.js, 3, 6))

cjs;
>cjs : Symbol(cjs, Decl(index.js, 1, 6))

mjs;
>mjs : Symbol(mjs, Decl(index.js, 2, 6))

type;
>type : Symbol(type, Decl(index.js, 3, 6))

import * as cjsi from "inner/cjs";
>cjsi : Symbol(cjsi, Decl(index.js, 7, 6))

import * as mjsi from "inner/mjs";
>mjsi : Symbol(mjsi, Decl(index.js, 8, 6))

import * as typei from "inner";
>typei : Symbol(typei, Decl(index.js, 9, 6))

cjsi;
>cjsi : Symbol(cjsi, Decl(index.js, 7, 6))

mjsi;
>mjsi : Symbol(mjsi, Decl(index.js, 8, 6))

typei;
>typei : Symbol(typei, Decl(index.js, 9, 6))

=== index.mjs ===
// esm format file
import * as cjs from "package/cjs";
>cjs : Symbol(cjs, Decl(index.mjs, 1, 6))

import * as mjs from "package/mjs";
>mjs : Symbol(mjs, Decl(index.mjs, 2, 6))

import * as type from "package";
>type : Symbol(type, Decl(index.mjs, 3, 6))

cjs;
>cjs : Symbol(cjs, Decl(index.mjs, 1, 6))

mjs;
>mjs : Symbol(mjs, Decl(index.mjs, 2, 6))

type;
>type : Symbol(type, Decl(index.mjs, 3, 6))

import * as cjsi from "inner/cjs";
>cjsi : Symbol(cjsi, Decl(index.mjs, 7, 6))

import * as mjsi from "inner/mjs";
>mjsi : Symbol(mjsi, Decl(index.mjs, 8, 6))

import * as typei from "inner";
>typei : Symbol(typei, Decl(index.mjs, 9, 6))

cjsi;
>cjsi : Symbol(cjsi, Decl(index.mjs, 7, 6))

mjsi;
>mjsi : Symbol(mjsi, Decl(index.mjs, 8, 6))

typei;
>typei : Symbol(typei, Decl(index.mjs, 9, 6))

=== index.cjs ===
// cjs format file
import * as cjs from "package/cjs";
>cjs : Symbol(cjs, Decl(index.cjs, 1, 6))

import * as mjs from "package/mjs";
>mjs : Symbol(mjs, Decl(index.cjs, 2, 6))

import * as type from "package";
>type : Symbol(type, Decl(index.cjs, 3, 6))

cjs;
>cjs : Symbol(cjs, Decl(index.cjs, 1, 6))

mjs;
>mjs : Symbol(mjs, Decl(index.cjs, 2, 6))

type;
>type : Symbol(type, Decl(index.cjs, 3, 6))

import * as cjsi from "inner/cjs";
>cjsi : Symbol(cjsi, Decl(index.cjs, 7, 6))

import * as mjsi from "inner/mjs";
>mjsi : Symbol(mjsi, Decl(index.cjs, 8, 6))

import * as typei from "inner";
>typei : Symbol(typei, Decl(index.cjs, 9, 6))

cjsi;
>cjsi : Symbol(cjsi, Decl(index.cjs, 7, 6))

mjsi;
>mjsi : Symbol(mjsi, Decl(index.cjs, 8, 6))

typei;
>typei : Symbol(typei, Decl(index.cjs, 9, 6))

=== node_modules/inner/index.d.ts ===
// cjs format file
export const implicitCjsSource = true;
>implicitCjsSource : Symbol(implicitCjsSource, Decl(index.d.ts, 1, 12))

=== node_modules/inner/test.d.ts ===
// cjs format file
import * as cjs from "inner/cjs";
>cjs : Symbol(cjs, Decl(test.d.ts, 1, 6))

import * as mjs from "inner/mjs";
>mjs : Symbol(mjs, Decl(test.d.ts, 2, 6))

import * as type from "inner";
>type : Symbol(type, Decl(test.d.ts, 3, 6))

export { cjs };
>cjs : Symbol(cjs, Decl(test.d.ts, 4, 8))

export { mjs };
>mjs : Symbol(mjs, Decl(test.d.ts, 5, 8))

export { type };
>type : Symbol(type, Decl(test.d.ts, 6, 8))

=== node_modules/inner/index.d.mts ===
// esm format file
export const mjsSource = true;
>mjsSource : Symbol(mjsSource, Decl(index.d.mts, 1, 12))

=== node_modules/inner/test.d.mts ===
// esm format file
import * as cjs from "inner/cjs";
>cjs : Symbol(cjs, Decl(test.d.mts, 1, 6))

import * as mjs from "inner/mjs";
>mjs : Symbol(mjs, Decl(test.d.mts, 2, 6))

import * as type from "inner";
>type : Symbol(type, Decl(test.d.mts, 3, 6))

export { cjs };
>cjs : Symbol(cjs, Decl(test.d.mts, 4, 8))

export { mjs };
>mjs : Symbol(mjs, Decl(test.d.mts, 5, 8))

export { type };
>type : Symbol(type, Decl(test.d.mts, 6, 8))

=== node_modules/inner/index.d.cts ===
// cjs format file
export const cjsSource = true;
>cjsSource : Symbol(cjsSource, Decl(index.d.cts, 1, 12))

=== node_modules/inner/test.d.cts ===
// cjs format file
import * as cjs from "inner/cjs";
>cjs : Symbol(cjs, Decl(test.d.cts, 1, 6))

import * as mjs from "inner/mjs";
>mjs : Symbol(mjs, Decl(test.d.cts, 2, 6))

import * as type from "inner";
>type : Symbol(type, Decl(test.d.cts, 3, 6))

export { cjs };
>cjs : Symbol(cjs, Decl(test.d.cts, 4, 8))

export { mjs };
>mjs : Symbol(mjs, Decl(test.d.cts, 5, 8))

export { type };
>type : Symbol(type, Decl(test.d.cts, 6, 8))

