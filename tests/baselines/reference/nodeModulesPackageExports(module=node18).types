//// [tests/cases/conformance/node/nodeModulesPackageExports.ts] ////

=== index.ts ===
// esm format file
import * as cjs from "package/cjs";
>cjs : typeof cjs
>    : ^^^^^^^^^^

import * as mjs from "package/mjs";
>mjs : typeof mjs
>    : ^^^^^^^^^^

import * as type from "package";
>type : typeof type
>     : ^^^^^^^^^^^

cjs;
>cjs : typeof cjs
>    : ^^^^^^^^^^

mjs;
>mjs : typeof mjs
>    : ^^^^^^^^^^

type;
>type : typeof type
>     : ^^^^^^^^^^^

import * as cjsi from "inner/cjs";
>cjsi : typeof cjsi
>     : ^^^^^^^^^^^

import * as mjsi from "inner/mjs";
>mjsi : typeof cjsi.cjs.mjs
>     : ^^^^^^^^^^^^^^^^^^^

import * as typei from "inner";
>typei : typeof typei
>      : ^^^^^^^^^^^^

cjsi;
>cjsi : typeof cjsi
>     : ^^^^^^^^^^^

mjsi;
>mjsi : typeof cjsi.cjs.mjs
>     : ^^^^^^^^^^^^^^^^^^^

typei;
>typei : typeof typei
>      : ^^^^^^^^^^^^

=== index.mts ===
// esm format file
import * as cjs from "package/cjs";
>cjs : typeof cjs
>    : ^^^^^^^^^^

import * as mjs from "package/mjs";
>mjs : typeof mjs
>    : ^^^^^^^^^^

import * as type from "package";
>type : typeof type
>     : ^^^^^^^^^^^

cjs;
>cjs : typeof cjs
>    : ^^^^^^^^^^

mjs;
>mjs : typeof mjs
>    : ^^^^^^^^^^

type;
>type : typeof type
>     : ^^^^^^^^^^^

import * as cjsi from "inner/cjs";
>cjsi : typeof cjsi
>     : ^^^^^^^^^^^

import * as mjsi from "inner/mjs";
>mjsi : typeof cjsi.cjs.mjs
>     : ^^^^^^^^^^^^^^^^^^^

import * as typei from "inner";
>typei : typeof typei
>      : ^^^^^^^^^^^^

cjsi;
>cjsi : typeof cjsi
>     : ^^^^^^^^^^^

mjsi;
>mjsi : typeof cjsi.cjs.mjs
>     : ^^^^^^^^^^^^^^^^^^^

typei;
>typei : typeof typei
>      : ^^^^^^^^^^^^

=== index.cts ===
// cjs format file
import * as cjs from "package/cjs";
>cjs : typeof cjs
>    : ^^^^^^^^^^

import * as mjs from "package/mjs";
>mjs : typeof mjs
>    : ^^^^^^^^^^

import * as type from "package";
>type : typeof type
>     : ^^^^^^^^^^^

cjs;
>cjs : typeof cjs
>    : ^^^^^^^^^^

mjs;
>mjs : typeof mjs
>    : ^^^^^^^^^^

type;
>type : typeof type
>     : ^^^^^^^^^^^

import * as cjsi from "inner/cjs";
>cjsi : typeof cjsi
>     : ^^^^^^^^^^^

import * as mjsi from "inner/mjs";
>mjsi : typeof cjsi.mjs
>     : ^^^^^^^^^^^^^^^

import * as typei from "inner";
>typei : typeof cjsi.mjs.cjs.type
>      : ^^^^^^^^^^^^^^^^^^^^^^^^

cjsi;
>cjsi : typeof cjsi
>     : ^^^^^^^^^^^

mjsi;
>mjsi : typeof cjsi.mjs
>     : ^^^^^^^^^^^^^^^

typei;
>typei : typeof cjsi.mjs.cjs.type
>      : ^^^^^^^^^^^^^^^^^^^^^^^^

=== node_modules/inner/index.d.ts ===
// cjs format file
import * as cjs from "inner/cjs";
>cjs : any
>    : ^^^

import * as mjs from "inner/mjs";
>mjs : typeof mjs
>    : ^^^^^^^^^^

import * as type from "inner";
>type : typeof mjs.cjs.cjs.type
>     : ^^^^^^^^^^^^^^^^^^^^^^^

export { cjs };
>cjs : any
>    : ^^^

export { mjs };
>mjs : typeof mjs
>    : ^^^^^^^^^^

export { type };
>type : typeof mjs.cjs.cjs.type
>     : ^^^^^^^^^^^^^^^^^^^^^^^

=== node_modules/inner/index.d.mts ===
// esm format file
import * as cjs from "inner/cjs";
>cjs : typeof cjs
>    : ^^^^^^^^^^

import * as mjs from "inner/mjs";
>mjs : typeof cjs.cjs.mjs
>    : ^^^^^^^^^^^^^^^^^^

import * as type from "inner";
>type : typeof cjs.cjs.mjs.type
>     : ^^^^^^^^^^^^^^^^^^^^^^^

export { cjs };
>cjs : typeof cjs
>    : ^^^^^^^^^^

export { mjs };
>mjs : typeof cjs.cjs.mjs
>    : ^^^^^^^^^^^^^^^^^^

export { type };
>type : typeof cjs.cjs.mjs.type
>     : ^^^^^^^^^^^^^^^^^^^^^^^

=== node_modules/inner/index.d.cts ===
// cjs format file
import * as cjs from "inner/cjs";
>cjs : typeof cjs
>    : ^^^^^^^^^^

import * as mjs from "inner/mjs";
>mjs : typeof cjs.mjs
>    : ^^^^^^^^^^^^^^

import * as type from "inner";
>type : typeof cjs.mjs.cjs.type
>     : ^^^^^^^^^^^^^^^^^^^^^^^

export { cjs };
>cjs : typeof cjs
>    : ^^^^^^^^^^

export { mjs };
>mjs : typeof cjs.mjs
>    : ^^^^^^^^^^^^^^

export { type };
>type : typeof cjs.mjs.cjs.type
>     : ^^^^^^^^^^^^^^^^^^^^^^^

