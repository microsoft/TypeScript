//// [tests/cases/conformance/types/nonPrimitive/nonPrimitiveAndTypeVariables.ts] ////

=== nonPrimitiveAndTypeVariables.ts ===
// Repros from #23800

type A<T, V> = { [P in keyof T]: T[P] extends V ? 1 : 0; };
>A : A<T, V>
>  : ^^^^^^^

type B<T, V> = { [P in keyof T]: T[P] extends V | object ? 1 : 0; };
>B : B<T, V>
>  : ^^^^^^^

let a: A<{ a: 0 | 1 }, 0> = { a: 0 };
>a : A<{ a: 0 | 1; }, 0>
>  : ^^^^^^^     ^^^^^^^
>a : 0 | 1
>  : ^^^^^
>{ a: 0 } : { a: 0; }
>         : ^^^^^^^^^
>a : 0
>  : ^
>0 : 0
>  : ^

let b: B<{ a: 0 | 1 }, 0> = { a: 0 };
>b : B<{ a: 0 | 1; }, 0>
>  : ^^^^^^^     ^^^^^^^
>a : 0 | 1
>  : ^^^^^
>{ a: 0 } : { a: 0; }
>         : ^^^^^^^^^
>a : 0
>  : ^
>0 : 0
>  : ^

function foo<T, U>(x: T) {
>foo : <T, U>(x: T) => void
>    : ^ ^^ ^^ ^^ ^^^^^^^^^
>x : T
>  : ^

    let a: object = x;  // Error
>a : object
>  : ^^^^^^
>x : T
>  : ^

    let b: U | object = x;  // Error
>b : object | U
>  : ^^^^^^^^^^
>x : T
>  : ^
}

