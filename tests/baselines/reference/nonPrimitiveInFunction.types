//// [tests/cases/conformance/types/nonPrimitive/nonPrimitiveInFunction.ts] ////

=== nonPrimitiveInFunction.ts ===
function takeObject(o: object) {}
>takeObject : (o: object) => void
>           : ^ ^^      ^^^^^^^^^
>o : object
>  : ^^^^^^

function returnObject(): object {
>returnObject : () => object
>             : ^^^^^^      

    return {};
>{} : {}
>   : ^^
}

var nonPrimitive: object;
>nonPrimitive : object
>             : ^^^^^^

var primitive: boolean;
>primitive : boolean
>          : ^^^^^^^

takeObject(nonPrimitive);
>takeObject(nonPrimitive) : void
>                         : ^^^^
>takeObject : (o: object) => void
>           : ^ ^^      ^^^^^^^^^
>nonPrimitive : object
>             : ^^^^^^

nonPrimitive = returnObject();
>nonPrimitive = returnObject() : object
>                              : ^^^^^^
>nonPrimitive : object
>             : ^^^^^^
>returnObject() : object
>               : ^^^^^^
>returnObject : () => object
>             : ^^^^^^      

takeObject(primitive); // expect error
>takeObject(primitive) : void
>                      : ^^^^
>takeObject : (o: object) => void
>           : ^ ^^      ^^^^^^^^^
>primitive : boolean
>          : ^^^^^^^

primitive = returnObject(); // expect error
>primitive = returnObject() : object
>                           : ^^^^^^
>primitive : boolean
>          : ^^^^^^^
>returnObject() : object
>               : ^^^^^^
>returnObject : () => object
>             : ^^^^^^      

function returnError(): object {
>returnError : () => object
>            : ^^^^^^      

    var ret = 123;
>ret : number
>    : ^^^^^^
>123 : 123
>    : ^^^

    return ret; // expect error
>ret : number
>    : ^^^^^^
}

