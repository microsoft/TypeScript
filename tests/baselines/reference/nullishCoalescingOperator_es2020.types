//// [tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator_es2020.ts] ////

=== nullishCoalescingOperator_es2020.ts ===
declare const a1: 'literal' | undefined | null
>a1 : "literal" | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const a2: '' | undefined | null
>a2 : "" | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^

declare const a3: 1 | undefined | null
>a3 : 1 | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^

declare const a4: 0 | undefined | null
>a4 : 0 | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^

declare const a5: true | undefined | null
>a5 : true | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

declare const a6: false | undefined | null
>a6 : false | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>false : false
>      : ^^^^^

declare const a7: unknown | null
>a7 : unknown
>   : ^^^^^^^

declare const a8: never | null
>a8 : null
>   : ^^^^

declare const a9: any | null
>a9 : any


const aa1 = a1 ?? 'whatever'
>aa1 : "literal" | "whatever"
>    : ^^^^^^^^^^^^^^^^^^^^^^
>a1 ?? 'whatever' : "literal" | "whatever"
>                 : ^^^^^^^^^^^^^^^^^^^^^^
>a1 : "literal" | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa2 = a2 ?? 'whatever'
>aa2 : "" | "whatever"
>    : ^^^^^^^^^^^^^^^
>a2 ?? 'whatever' : "" | "whatever"
>                 : ^^^^^^^^^^^^^^^
>a2 : "" | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa3 = a3 ?? 'whatever'
>aa3 : 1 | "whatever"
>    : ^^^^^^^^^^^^^^
>a3 ?? 'whatever' : 1 | "whatever"
>                 : ^^^^^^^^^^^^^^
>a3 : 1 | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa4 = a4 ?? 'whatever'
>aa4 : 0 | "whatever"
>    : ^^^^^^^^^^^^^^
>a4 ?? 'whatever' : 0 | "whatever"
>                 : ^^^^^^^^^^^^^^
>a4 : 0 | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa5 = a5 ?? 'whatever'
>aa5 : true | "whatever"
>    : ^^^^^^^^^^^^^^^^^
>a5 ?? 'whatever' : true | "whatever"
>                 : ^^^^^^^^^^^^^^^^^
>a5 : true | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa6 = a6 ?? 'whatever'
>aa6 : false | "whatever"
>    : ^^^^^^^^^^^^^^^^^^
>a6 ?? 'whatever' : false | "whatever"
>                 : ^^^^^^^^^^^^^^^^^^
>a6 : false | null | undefined
>   : ^^^^^^^^^^^^^^^^^^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa7 = a7 ?? 'whatever'
>aa7 : {}
>    : ^^
>a7 ?? 'whatever' : {}
>                 : ^^
>a7 : unknown
>   : ^^^^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa8 = a8 ?? 'whatever'
>aa8 : "whatever"
>    : ^^^^^^^^^^
>a8 ?? 'whatever' : "whatever"
>                 : ^^^^^^^^^^
>a8 : null
>   : ^^^^
>'whatever' : "whatever"
>           : ^^^^^^^^^^

const aa9 = a9 ?? 'whatever'
>aa9 : any
>a9 ?? 'whatever' : any
>a9 : any
>'whatever' : "whatever"
>           : ^^^^^^^^^^


declare let a: any, b: any, c: any;
>a : any
>b : any
>c : any

let x1 = (a ?? b as any) || c;
>x1 : any
>(a ?? b as any) || c : any
>(a ?? b as any) : any
>a ?? b as any : any
>a : any
>b as any : any
>b : any
>c : any

let x2 = c || (a ?? b as any);
>x2 : any
>c || (a ?? b as any) : any
>c : any
>(a ?? b as any) : any
>a ?? b as any : any
>a : any
>b as any : any
>b : any

let x3 = ((a ?? b) as any) || c;
>x3 : any
>((a ?? b) as any) || c : any
>((a ?? b) as any) : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any
>c : any

let x4 = c || ((a ?? b) as any);
>x4 : any
>c || ((a ?? b) as any) : any
>c : any
>((a ?? b) as any) : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any

let x5 = (a ?? b) as any || c;
>x5 : any
>(a ?? b) as any || c : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any
>c : any

let x6 = c || (a ?? b) as any;
>x6 : any
>c || (a ?? b) as any : any
>c : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any

let y1 = (a ?? b as any) && c;
>y1 : any
>(a ?? b as any) && c : any
>(a ?? b as any) : any
>a ?? b as any : any
>a : any
>b as any : any
>b : any
>c : any

let y2 = c && (a ?? b as any);
>y2 : any
>c && (a ?? b as any) : any
>c : any
>(a ?? b as any) : any
>a ?? b as any : any
>a : any
>b as any : any
>b : any

let y3 = ((a ?? b) as any) && c;
>y3 : any
>((a ?? b) as any) && c : any
>((a ?? b) as any) : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any
>c : any

let y4 = c && ((a ?? b) as any);
>y4 : any
>c && ((a ?? b) as any) : any
>c : any
>((a ?? b) as any) : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any

let y5 = (a ?? b) as any && c;
>y5 : any
>(a ?? b) as any && c : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any
>c : any

let y6 = c && (a ?? b) as any;
>y6 : any
>c && (a ?? b) as any : any
>c : any
>(a ?? b) as any : any
>(a ?? b) : any
>a ?? b : any
>a : any
>b : any

