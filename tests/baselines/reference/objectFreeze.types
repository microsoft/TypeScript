//// [tests/cases/compiler/objectFreeze.ts] ////

=== objectFreeze.ts ===
const f = Object.freeze(function foo(a: number, b: string) { return false; });
>f : (a: number, b: string) => false
>  : ^ ^^      ^^ ^^      ^^^^^^^^^^
>Object.freeze(function foo(a: number, b: string) { return false; }) : (a: number, b: string) => false
>                                                                    : ^ ^^      ^^ ^^      ^^^^^^^^^^
>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>              : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>       : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>function foo(a: number, b: string) { return false; } : (a: number, b: string) => false
>                                                     : ^ ^^      ^^ ^^      ^^^^^^^^^^
>foo : (a: number, b: string) => false
>    : ^ ^^      ^^ ^^      ^^^^^^^^^^
>a : number
>  : ^^^^^^
>b : string
>  : ^^^^^^
>false : false
>      : ^^^^^

f(1, "") === false;
>f(1, "") === false : boolean
>                   : ^^^^^^^
>f(1, "") : false
>         : ^^^^^
>f : (a: number, b: string) => false
>  : ^ ^^      ^^ ^^      ^^^^^^^^^^
>1 : 1
>  : ^
>"" : ""
>   : ^^
>false : false
>      : ^^^^^

class C { constructor(a: number) { } }
>C : C
>  : ^
>a : number
>  : ^^^^^^

const c = Object.freeze(C);
>c : typeof C
>  : ^^^^^^^^
>Object.freeze(C) : typeof C
>                 : ^^^^^^^^
>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>              : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>       : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>C : typeof C
>  : ^^^^^^^^

new c(1);
>new c(1) : C
>         : ^
>c : typeof C
>  : ^^^^^^^^
>1 : 1
>  : ^

const a = Object.freeze([1, 2, 3]);
>a : readonly number[]
>  : ^^^^^^^^^^^^^^^^^
>Object.freeze([1, 2, 3]) : readonly number[]
>                         : ^^^^^^^^^^^^^^^^^
>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>              : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>       : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

a[0] = a[2].toString();
>a[0] = a[2].toString() : string
>                       : ^^^^^^
>a[0] : number
>     : ^^^^^^
>a : readonly number[]
>  : ^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>a[2].toString() : string
>                : ^^^^^^
>a[2].toString : (radix?: number) => string
>              : ^     ^^^      ^^^^^      
>a[2] : number
>     : ^^^^^^
>a : readonly number[]
>  : ^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>toString : (radix?: number) => string
>         : ^     ^^^      ^^^^^      

const o = Object.freeze({ a: 1, b: "string", c: true });
>o : Readonly<{ a: 1; b: "string"; c: true; }>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Object.freeze({ a: 1, b: "string", c: true }) : Readonly<{ a: 1; b: "string"; c: true; }>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>              : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
>       : ^^^ ^^^^^^^^^        ^^ ^^ ^^^ ^^^ ^^^^^^^^^                                                 ^^ ^^^^^^^^^                                           ^^ ^^ ^^^           ^^^ ^^ ^^ ^^^           ^^^
>{ a: 1, b: "string", c: true } : { a: 1; b: "string"; c: true; }
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>1 : 1
>  : ^
>b : "string"
>  : ^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^
>c : true
>  : ^^^^
>true : true
>     : ^^^^

o.b = o.a.toString();
>o.b = o.a.toString() : string
>                     : ^^^^^^
>o.b : any
>    : ^^^
>o : Readonly<{ a: 1; b: "string"; c: true; }>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : any
>  : ^^^
>o.a.toString() : string
>               : ^^^^^^
>o.a.toString : (radix?: number) => string
>             : ^     ^^^      ^^^^^      
>o.a : 1
>    : ^
>o : Readonly<{ a: 1; b: "string"; c: true; }>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : 1
>  : ^
>toString : (radix?: number) => string
>         : ^     ^^^      ^^^^^      

