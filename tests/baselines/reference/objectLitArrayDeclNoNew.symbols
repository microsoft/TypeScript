//// [tests/cases/compiler/objectLitArrayDeclNoNew.ts] ////

=== objectLitArrayDeclNoNew.ts ===
declare var console;
>console : Symbol(console, Decl(objectLitArrayDeclNoNew.ts, 0, 11))

"use strict";
namespace Test {
>Test : Symbol(Test, Decl(objectLitArrayDeclNoNew.ts, 1, 13))

    export interface IState {
>IState : Symbol(IState, Decl(objectLitArrayDeclNoNew.ts, 2, 16))
    }

    export interface IToken {
>IToken : Symbol(IToken, Decl(objectLitArrayDeclNoNew.ts, 4, 5))
    }

    export interface ILineTokens {
>ILineTokens : Symbol(ILineTokens, Decl(objectLitArrayDeclNoNew.ts, 7, 5))

        tokens: IToken[];
>tokens : Symbol(ILineTokens.tokens, Decl(objectLitArrayDeclNoNew.ts, 9, 34))
>IToken : Symbol(IToken, Decl(objectLitArrayDeclNoNew.ts, 4, 5))

        endState: IState;
>endState : Symbol(ILineTokens.endState, Decl(objectLitArrayDeclNoNew.ts, 10, 25))
>IState : Symbol(IState, Decl(objectLitArrayDeclNoNew.ts, 2, 16))
    }

    export class Gar {
>Gar : Symbol(Gar, Decl(objectLitArrayDeclNoNew.ts, 12, 5))

        public moo: number = 0;
>moo : Symbol(Gar.moo, Decl(objectLitArrayDeclNoNew.ts, 14, 22))
    }

    export function bug(): ILineTokens {
>bug : Symbol(bug, Decl(objectLitArrayDeclNoNew.ts, 16, 5))
>ILineTokens : Symbol(ILineTokens, Decl(objectLitArrayDeclNoNew.ts, 7, 5))

      var state:IState= null;
>state : Symbol(state, Decl(objectLitArrayDeclNoNew.ts, 19, 9))
>IState : Symbol(IState, Decl(objectLitArrayDeclNoNew.ts, 2, 16))

      return {
       tokens: Gar[],//IToken[],  // Missing new. Correct syntax is: tokens: new IToken[]
>tokens : Symbol(tokens, Decl(objectLitArrayDeclNoNew.ts, 20, 14))
>Gar : Symbol(Gar, Decl(objectLitArrayDeclNoNew.ts, 12, 5))

       endState: state
>endState : Symbol(endState, Decl(objectLitArrayDeclNoNew.ts, 21, 21))
>state : Symbol(state, Decl(objectLitArrayDeclNoNew.ts, 19, 9))

      };
     }
    }
}
