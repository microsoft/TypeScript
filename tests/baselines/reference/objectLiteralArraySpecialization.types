//// [tests/cases/compiler/objectLiteralArraySpecialization.ts] ////

=== objectLiteralArraySpecialization.ts ===
declare function create<T>(initialValues?: T[]): MyArrayWrapper<T>;
>create : <T>(initialValues?: T[]) => MyArrayWrapper<T>
>       : ^ ^^             ^^^   ^^^^^                 
>initialValues : T[]
>              : ^^^

interface MyArrayWrapper<T> {
	constructor(initialItems?: T[]);
>constructor : (initialItems?: T[]) => any
>            : ^            ^^^   ^^^^^^^^
>initialItems : T[]
>             : ^^^

	doSomething(predicate: (x: T, y: T) => boolean): void;
>doSomething : (predicate: (x: T, y: T) => boolean) => void
>            : ^         ^^                       ^^^^^    
>predicate : (x: T, y: T) => boolean
>          : ^ ^^ ^^ ^^ ^^^^^       
>x : T
>  : ^
>y : T
>  : ^
}
var thing = create([ { name: "bob", id: 24 }, { name: "doug", id: 32 } ]); // should not error
>thing : MyArrayWrapper<{ name: string; id: number; }>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>create([ { name: "bob", id: 24 }, { name: "doug", id: 32 } ]) : MyArrayWrapper<{ name: string; id: number; }>
>                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>create : <T>(initialValues?: T[]) => MyArrayWrapper<T>
>       : ^ ^^             ^^^   ^^^^^                 
>[ { name: "bob", id: 24 }, { name: "doug", id: 32 } ] : { name: string; id: number; }[]
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ name: "bob", id: 24 } : { name: string; id: number; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"bob" : "bob"
>      : ^^^^^
>id : number
>   : ^^^^^^
>24 : 24
>   : ^^
>{ name: "doug", id: 32 } : { name: string; id: number; }
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"doug" : "doug"
>       : ^^^^^^
>id : number
>   : ^^^^^^
>32 : 32
>   : ^^

thing.doSomething((x, y) => x.name === "bob"); // should not error
>thing.doSomething((x, y) => x.name === "bob") : void
>                                              : ^^^^
>thing.doSomething : (predicate: (x: { name: string; id: number; }, y: { name: string; id: number; }) => boolean) => void
>                  : ^         ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^    
>thing : MyArrayWrapper<{ name: string; id: number; }>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>doSomething : (predicate: (x: { name: string; id: number; }, y: { name: string; id: number; }) => boolean) => void
>            : ^         ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^    
>(x, y) => x.name === "bob" : (x: { name: string; id: number; }, y: { name: string; id: number; }) => boolean
>                           : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : { name: string; id: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>y : { name: string; id: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x.name === "bob" : boolean
>                 : ^^^^^^^
>x.name : string
>       : ^^^^^^
>x : { name: string; id: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"bob" : "bob"
>      : ^^^^^

