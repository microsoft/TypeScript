//// [tests/cases/conformance/expressions/objectLiterals/objectLiteralGettersAndSetters.ts] ////

=== objectLiteralGettersAndSetters.ts ===
// Get and set accessor with the same name
var sameName1a = { get 'a'() { return ''; }, set a(n) { var p = n; var p: string; } };
>sameName1a : Symbol(sameName1a, Decl(objectLiteralGettersAndSetters.ts, 1, 3))
>'a' : Symbol('a', Decl(objectLiteralGettersAndSetters.ts, 1, 18), Decl(objectLiteralGettersAndSetters.ts, 1, 44))
>a : Symbol('a', Decl(objectLiteralGettersAndSetters.ts, 1, 18), Decl(objectLiteralGettersAndSetters.ts, 1, 44))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 1, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 1, 59), Decl(objectLiteralGettersAndSetters.ts, 1, 70))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 1, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 1, 59), Decl(objectLiteralGettersAndSetters.ts, 1, 70))

var sameName2a = { get 0.0() { return ''; }, set 0(n) { var p = n; var p: string; } };
>sameName2a : Symbol(sameName2a, Decl(objectLiteralGettersAndSetters.ts, 2, 3))
>0.0 : Symbol(0.0, Decl(objectLiteralGettersAndSetters.ts, 2, 18), Decl(objectLiteralGettersAndSetters.ts, 2, 44))
>0 : Symbol(0.0, Decl(objectLiteralGettersAndSetters.ts, 2, 18), Decl(objectLiteralGettersAndSetters.ts, 2, 44))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 2, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 2, 59), Decl(objectLiteralGettersAndSetters.ts, 2, 70))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 2, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 2, 59), Decl(objectLiteralGettersAndSetters.ts, 2, 70))

var sameName3a = { get 0x20() { return ''; }, set 3.2e1(n) { var p = n; var p: string; } };
>sameName3a : Symbol(sameName3a, Decl(objectLiteralGettersAndSetters.ts, 3, 3))
>0x20 : Symbol(0x20, Decl(objectLiteralGettersAndSetters.ts, 3, 18), Decl(objectLiteralGettersAndSetters.ts, 3, 45))
>3.2e1 : Symbol(0x20, Decl(objectLiteralGettersAndSetters.ts, 3, 18), Decl(objectLiteralGettersAndSetters.ts, 3, 45))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 3, 56))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 3, 64), Decl(objectLiteralGettersAndSetters.ts, 3, 75))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 3, 56))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 3, 64), Decl(objectLiteralGettersAndSetters.ts, 3, 75))

var sameName4a = { get ''() { return ''; }, set ""(n) { var p = n; var p: string; } };
>sameName4a : Symbol(sameName4a, Decl(objectLiteralGettersAndSetters.ts, 4, 3))
>'' : Symbol('', Decl(objectLiteralGettersAndSetters.ts, 4, 18), Decl(objectLiteralGettersAndSetters.ts, 4, 43))
>"" : Symbol('', Decl(objectLiteralGettersAndSetters.ts, 4, 18), Decl(objectLiteralGettersAndSetters.ts, 4, 43))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 4, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 4, 59), Decl(objectLiteralGettersAndSetters.ts, 4, 70))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 4, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 4, 59), Decl(objectLiteralGettersAndSetters.ts, 4, 70))

var sameName5a = { get '\t'() { return ''; }, set '\t'(n) { var p = n; var p: string; } };
>sameName5a : Symbol(sameName5a, Decl(objectLiteralGettersAndSetters.ts, 5, 3))
>'\t' : Symbol('\t', Decl(objectLiteralGettersAndSetters.ts, 5, 18), Decl(objectLiteralGettersAndSetters.ts, 5, 45))
>'\t' : Symbol('\t', Decl(objectLiteralGettersAndSetters.ts, 5, 18), Decl(objectLiteralGettersAndSetters.ts, 5, 45))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 5, 55))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 5, 63), Decl(objectLiteralGettersAndSetters.ts, 5, 74))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 5, 55))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 5, 63), Decl(objectLiteralGettersAndSetters.ts, 5, 74))

var sameName6a = { get 'a'() { return ''; }, set a(n) { var p = n; var p: string; } };
>sameName6a : Symbol(sameName6a, Decl(objectLiteralGettersAndSetters.ts, 6, 3))
>'a' : Symbol('a', Decl(objectLiteralGettersAndSetters.ts, 6, 18), Decl(objectLiteralGettersAndSetters.ts, 6, 44))
>a : Symbol('a', Decl(objectLiteralGettersAndSetters.ts, 6, 18), Decl(objectLiteralGettersAndSetters.ts, 6, 44))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 6, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 6, 59), Decl(objectLiteralGettersAndSetters.ts, 6, 70))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 6, 51))
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 6, 59), Decl(objectLiteralGettersAndSetters.ts, 6, 70))

// PropertyName CallSignature{FunctionBody} is equivalent to PropertyName:function CallSignature{FunctionBody}
var callSig1 = { num(n: number) { return '' } };
>callSig1 : Symbol(callSig1, Decl(objectLiteralGettersAndSetters.ts, 9, 3), Decl(objectLiteralGettersAndSetters.ts, 10, 3))
>num : Symbol(num, Decl(objectLiteralGettersAndSetters.ts, 9, 16))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 9, 21))

var callSig1: { num: (n: number) => string; };
>callSig1 : Symbol(callSig1, Decl(objectLiteralGettersAndSetters.ts, 9, 3), Decl(objectLiteralGettersAndSetters.ts, 10, 3))
>num : Symbol(num, Decl(objectLiteralGettersAndSetters.ts, 10, 15))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 10, 22))

var callSig2 = { num: function (n: number) { return '' } };
>callSig2 : Symbol(callSig2, Decl(objectLiteralGettersAndSetters.ts, 11, 3), Decl(objectLiteralGettersAndSetters.ts, 12, 3))
>num : Symbol(num, Decl(objectLiteralGettersAndSetters.ts, 11, 16))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 11, 32))

var callSig2: { num: (n: number) => string; };
>callSig2 : Symbol(callSig2, Decl(objectLiteralGettersAndSetters.ts, 11, 3), Decl(objectLiteralGettersAndSetters.ts, 12, 3))
>num : Symbol(num, Decl(objectLiteralGettersAndSetters.ts, 12, 15))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 12, 22))

var callSig3 = { num: (n: number) => '' };
>callSig3 : Symbol(callSig3, Decl(objectLiteralGettersAndSetters.ts, 13, 3), Decl(objectLiteralGettersAndSetters.ts, 14, 3))
>num : Symbol(num, Decl(objectLiteralGettersAndSetters.ts, 13, 16))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 13, 23))

var callSig3: { num: (n: number) => string; };
>callSig3 : Symbol(callSig3, Decl(objectLiteralGettersAndSetters.ts, 13, 3), Decl(objectLiteralGettersAndSetters.ts, 14, 3))
>num : Symbol(num, Decl(objectLiteralGettersAndSetters.ts, 14, 15))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 14, 22))

// Get accessor only, type of the property is the annotated return type of the get accessor
var getter1 = { get x(): string { return undefined; } };
>getter1 : Symbol(getter1, Decl(objectLiteralGettersAndSetters.ts, 17, 3), Decl(objectLiteralGettersAndSetters.ts, 18, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 17, 15))
>undefined : Symbol(undefined)

var getter1: { readonly x: string; }
>getter1 : Symbol(getter1, Decl(objectLiteralGettersAndSetters.ts, 17, 3), Decl(objectLiteralGettersAndSetters.ts, 18, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 18, 14))

// Get accessor only, type of the property is the inferred return type of the get accessor
var getter2 = { get x() { return ''; } };
>getter2 : Symbol(getter2, Decl(objectLiteralGettersAndSetters.ts, 21, 3), Decl(objectLiteralGettersAndSetters.ts, 22, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 21, 15))

var getter2: { readonly x: string; }
>getter2 : Symbol(getter2, Decl(objectLiteralGettersAndSetters.ts, 21, 3), Decl(objectLiteralGettersAndSetters.ts, 22, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 22, 14))

// Set accessor only, type of the property is the param type of the set accessor
var setter1 = { set x(n: number) { } };
>setter1 : Symbol(setter1, Decl(objectLiteralGettersAndSetters.ts, 25, 3), Decl(objectLiteralGettersAndSetters.ts, 26, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 25, 15))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 25, 22))

var setter1: { x: number };
>setter1 : Symbol(setter1, Decl(objectLiteralGettersAndSetters.ts, 25, 3), Decl(objectLiteralGettersAndSetters.ts, 26, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 26, 14))

// Set accessor only, type of the property is Any for an unannotated set accessor
var setter2 = { set x(n) { } };
>setter2 : Symbol(setter2, Decl(objectLiteralGettersAndSetters.ts, 29, 3), Decl(objectLiteralGettersAndSetters.ts, 30, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 29, 15))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 29, 22))

var setter2: { x: any };
>setter2 : Symbol(setter2, Decl(objectLiteralGettersAndSetters.ts, 29, 3), Decl(objectLiteralGettersAndSetters.ts, 30, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 30, 14))

var anyVar: any;
>anyVar : Symbol(anyVar, Decl(objectLiteralGettersAndSetters.ts, 32, 3))

// Get and set accessor with matching type annotations
var sameType1 = { get x(): string { return undefined; }, set x(n: string) { } };
>sameType1 : Symbol(sameType1, Decl(objectLiteralGettersAndSetters.ts, 34, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 34, 17), Decl(objectLiteralGettersAndSetters.ts, 34, 56))
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 34, 17), Decl(objectLiteralGettersAndSetters.ts, 34, 56))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 34, 63))

var sameType2 = { get x(): Array<number> { return undefined; }, set x(n: number[]) { } };
>sameType2 : Symbol(sameType2, Decl(objectLiteralGettersAndSetters.ts, 35, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 35, 17), Decl(objectLiteralGettersAndSetters.ts, 35, 63))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 4 more)
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 35, 17), Decl(objectLiteralGettersAndSetters.ts, 35, 63))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 35, 70))

var sameType3 = { get x(): any { return undefined; }, set x(n: typeof anyVar) { } };
>sameType3 : Symbol(sameType3, Decl(objectLiteralGettersAndSetters.ts, 36, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 36, 17), Decl(objectLiteralGettersAndSetters.ts, 36, 53))
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 36, 17), Decl(objectLiteralGettersAndSetters.ts, 36, 53))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 36, 60))
>anyVar : Symbol(anyVar, Decl(objectLiteralGettersAndSetters.ts, 32, 3))

var sameType4 = { get x(): Date { return undefined; }, set x(n: Date) { } };
>sameType4 : Symbol(sameType4, Decl(objectLiteralGettersAndSetters.ts, 37, 3))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 37, 17), Decl(objectLiteralGettersAndSetters.ts, 37, 54))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 1 more)
>undefined : Symbol(undefined)
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 37, 17), Decl(objectLiteralGettersAndSetters.ts, 37, 54))
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 37, 61))
>Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --) ... and 1 more)

// Type of unannotated get accessor return type is the type annotation of the set accessor param
var setParamType1 = {
>setParamType1 : Symbol(setParamType1, Decl(objectLiteralGettersAndSetters.ts, 40, 3))

    set n(x: (t: string) => void) { },
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 40, 21), Decl(objectLiteralGettersAndSetters.ts, 41, 38))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 41, 10))
>t : Symbol(t, Decl(objectLiteralGettersAndSetters.ts, 41, 14))

    get n() { return (t) => {
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 40, 21), Decl(objectLiteralGettersAndSetters.ts, 41, 38))
>t : Symbol(t, Decl(objectLiteralGettersAndSetters.ts, 42, 22))

            var p: string;
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 43, 15), Decl(objectLiteralGettersAndSetters.ts, 44, 15))

            var p = t;
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 43, 15), Decl(objectLiteralGettersAndSetters.ts, 44, 15))
>t : Symbol(t, Decl(objectLiteralGettersAndSetters.ts, 42, 22))
        }
    }
};
var setParamType2 = {
>setParamType2 : Symbol(setParamType2, Decl(objectLiteralGettersAndSetters.ts, 48, 3))

    get n() { return (t) => {
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 48, 21), Decl(objectLiteralGettersAndSetters.ts, 53, 6))
>t : Symbol(t, Decl(objectLiteralGettersAndSetters.ts, 49, 22))

            var p: string;
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 50, 15), Decl(objectLiteralGettersAndSetters.ts, 51, 15))

            var p = t;
>p : Symbol(p, Decl(objectLiteralGettersAndSetters.ts, 50, 15), Decl(objectLiteralGettersAndSetters.ts, 51, 15))
>t : Symbol(t, Decl(objectLiteralGettersAndSetters.ts, 49, 22))
        }
    },
    set n(x: (t: string) => void) { }
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 48, 21), Decl(objectLiteralGettersAndSetters.ts, 53, 6))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 54, 10))
>t : Symbol(t, Decl(objectLiteralGettersAndSetters.ts, 54, 14))

};

// Type of unannotated set accessor parameter is the return type annotation of the get accessor
var getParamType1 = {
>getParamType1 : Symbol(getParamType1, Decl(objectLiteralGettersAndSetters.ts, 58, 3))

    set n(x) {
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 58, 21), Decl(objectLiteralGettersAndSetters.ts, 62, 6))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 59, 10))

        var y = x;
>y : Symbol(y, Decl(objectLiteralGettersAndSetters.ts, 60, 11), Decl(objectLiteralGettersAndSetters.ts, 61, 11))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 59, 10))

        var y: string;
>y : Symbol(y, Decl(objectLiteralGettersAndSetters.ts, 60, 11), Decl(objectLiteralGettersAndSetters.ts, 61, 11))

    },
    get n() { return ''; }
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 58, 21), Decl(objectLiteralGettersAndSetters.ts, 62, 6))

};
var getParamType2 = {
>getParamType2 : Symbol(getParamType2, Decl(objectLiteralGettersAndSetters.ts, 65, 3))

    get n() { return ''; },
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 65, 21), Decl(objectLiteralGettersAndSetters.ts, 66, 27))

    set n(x) {
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 65, 21), Decl(objectLiteralGettersAndSetters.ts, 66, 27))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 67, 10))

        var y = x;
>y : Symbol(y, Decl(objectLiteralGettersAndSetters.ts, 68, 11), Decl(objectLiteralGettersAndSetters.ts, 69, 11))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 67, 10))

        var y: string;
>y : Symbol(y, Decl(objectLiteralGettersAndSetters.ts, 68, 11), Decl(objectLiteralGettersAndSetters.ts, 69, 11))
    }
};

// Type of unannotated accessors is the inferred return type of the get accessor
var getParamType3 = {
>getParamType3 : Symbol(getParamType3, Decl(objectLiteralGettersAndSetters.ts, 74, 3))

    get n() { return ''; },
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 74, 21), Decl(objectLiteralGettersAndSetters.ts, 75, 27))

    set n(x) {
>n : Symbol(n, Decl(objectLiteralGettersAndSetters.ts, 74, 21), Decl(objectLiteralGettersAndSetters.ts, 75, 27))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 76, 10))

        var y = x;
>y : Symbol(y, Decl(objectLiteralGettersAndSetters.ts, 77, 11), Decl(objectLiteralGettersAndSetters.ts, 78, 11))
>x : Symbol(x, Decl(objectLiteralGettersAndSetters.ts, 76, 10))

        var y: string;
>y : Symbol(y, Decl(objectLiteralGettersAndSetters.ts, 77, 11), Decl(objectLiteralGettersAndSetters.ts, 78, 11))
    }
};


