//// [tests/cases/compiler/objectLiteralThisWidenedOnUse.ts] ////

=== objectLiteralThisWidenedOnUse.ts ===
interface Foo { bar: boolean; }
>bar : boolean
>    : ^^^^^^^

var GlobalIns = {
>GlobalIns : { prop1: number; prop2: number; prop3: number; test(): void; accept_foo(foo: Foo): boolean; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^   ^^^       ^^^
>{  prop1: 1,  prop2: 2,  prop3: 3,  test () {    this.accept_foo(this);  },  accept_foo (foo: Foo): boolean {    return !!foo && !!foo.bar;  }} : { prop1: number; prop2: number; prop3: number; test(): void; accept_foo(foo: Foo): boolean; }
>                                                                                                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^   ^^^       ^^^

  prop1: 1,
>prop1 : number
>      : ^^^^^^
>1 : 1
>  : ^

  prop2: 2,
>prop2 : number
>      : ^^^^^^
>2 : 2
>  : ^

  prop3: 3,
>prop3 : number
>      : ^^^^^^
>3 : 3
>  : ^

  test () {
>test : () => void
>     : ^^^^^^^^^^

    this.accept_foo(this);
>this.accept_foo(this) : boolean
>                      : ^^^^^^^
>this.accept_foo : (foo: Foo) => boolean
>                : ^   ^^   ^^^^^       
>this : { prop1: number; prop2: number; prop3: number; test(): void; accept_foo(foo: Foo): boolean; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^   ^^^       ^^^
>accept_foo : (foo: Foo) => boolean
>           : ^   ^^   ^^^^^       
>this : { prop1: number; prop2: number; prop3: number; test(): void; accept_foo(foo: Foo): boolean; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^   ^^^       ^^^

  },
  accept_foo (foo: Foo): boolean {
>accept_foo : (foo: Foo) => boolean
>           : ^   ^^   ^^^^^       
>foo : Foo
>    : ^^^

    return !!foo && !!foo.bar;
>!!foo && !!foo.bar : boolean
>                   : ^^^^^^^
>!!foo : boolean
>      : ^^^^^^^
>!foo : boolean
>     : ^^^^^^^
>foo : Foo
>    : ^^^
>!!foo.bar : boolean
>          : ^^^^^^^
>!foo.bar : boolean
>         : ^^^^^^^
>foo.bar : boolean
>        : ^^^^^^^
>foo : Foo
>    : ^^^
>bar : boolean
>    : ^^^^^^^
  }
};
