//// [tests/cases/conformance/types/spread/objectSpreadIndexSignature.ts] ////

=== objectSpreadIndexSignature.ts ===
declare let indexed1: { [n: string]: number; a: number; };
>indexed1 : { [n: string]: number; a: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>n : string
>  : ^^^^^^
>a : number
>  : ^^^^^^

declare let indexed2: { [n: string]: boolean; c: boolean; };
>indexed2 : { [n: string]: boolean; c: boolean; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>n : string
>  : ^^^^^^
>c : boolean
>  : ^^^^^^^

declare let indexed3: { [n: string]: number };
>indexed3 : { [n: string]: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^
>n : string
>  : ^^^^^^

let i = { ...indexed1, b: 11 };
>i : { b: number; a: number; }
>  : ^^^^^^^^^^^^^^^^      ^^^
>{ ...indexed1, b: 11 } : { b: number; a: number; }
>                       : ^^^^^^^^^^^^^^^^      ^^^
>indexed1 : { [n: string]: number; a: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>b : number
>  : ^^^^^^
>11 : 11
>   : ^^

// only indexed has indexer, so i[101]: any
i[101];
>i[101] : any
>       : ^^^
>i : { b: number; a: number; }
>  : ^^^^^^^^^^^^^^^^      ^^^
>101 : 101
>    : ^^^

let ii = { ...indexed1, ...indexed2 };
>ii : { [x: string]: number | boolean; c: boolean; a: number; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^      ^^^
>{ ...indexed1, ...indexed2 } : { [x: string]: number | boolean; c: boolean; a: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^      ^^^
>indexed1 : { [n: string]: number; a: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>indexed2 : { [n: string]: boolean; c: boolean; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^

// both have indexer, so i[1001]: number | boolean
ii[1001];
>ii[1001] : number | boolean
>         : ^^^^^^^^^^^^^^^^
>ii : { [x: string]: number | boolean; c: boolean; a: number; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^      ^^^
>1001 : 1001
>     : ^^^^

declare const b: boolean;
>b : boolean
>  : ^^^^^^^

indexed3 = { ...b ? indexed3 : undefined };
>indexed3 = { ...b ? indexed3 : undefined } : { [n: string]: number; }
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>indexed3 : { [n: string]: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^
>{ ...b ? indexed3 : undefined } : { [n: string]: number; }
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^
>b ? indexed3 : undefined : { [n: string]: number; } | undefined
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^
>indexed3 : { [n: string]: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

declare var roindex: { readonly [x:string]: number };
>roindex : { readonly [x: string]: number; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^

var writable = { ...roindex };
>writable : { [x: string]: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^
>{ ...roindex } : { [x: string]: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^
>roindex : { readonly [x: string]: number; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

writable.a = 0;  // should be ok.
>writable.a = 0 : 0
>               : ^
>writable.a : number
>           : ^^^^^^
>writable : { [x: string]: number; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>0 : 0
>  : ^

