//// [tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignatures3.ts] ////

=== objectTypesIdentityWithCallSignatures3.ts ===
// object types are identical structurally

interface I {
    (x: string): string;
>x : string
>  : ^^^^^^
}

interface I2<T> {
    (x: T): T;
>x : T
>  : ^
}

var a: { (x: string): string }
>a : (x: string) => string
>  : ^ ^^      ^^^^^      
>x : string
>  : ^^^^^^

function foo2(x: I);
>foo2 : { (x: I): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : I
>  : ^

function foo2(x: I); // error
>foo2 : { (x: I): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : I
>  : ^

function foo2(x: any) { }
>foo2 : { (x: I): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : any
>  : ^^^

function foo3(x: typeof a);
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : (x: string) => string
>  : ^ ^^      ^^^^^      
>a : (x: string) => string
>  : ^ ^^      ^^^^^      

function foo3(x: typeof a); // error
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : (x: string) => string
>  : ^ ^^      ^^^^^      
>a : (x: string) => string
>  : ^ ^^      ^^^^^      

function foo3(x: any) { }
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any
>  : ^^^

function foo4(x: typeof b);
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any
>  : ^^^
>b : any
>  : ^^^

function foo4(x: typeof b); // error
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any
>  : ^^^
>b : any
>  : ^^^

function foo4(x: any) { }
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any
>  : ^^^

function foo13(x: I);
>foo13 : { (x: I): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : I
>  : ^

function foo13(x: typeof a); // error
>foo13 : { (x: I): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : (x: string) => string
>  : ^ ^^      ^^^^^      
>a : (x: string) => string
>  : ^ ^^      ^^^^^      

function foo13(x: any) { }
>foo13 : { (x: I): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any
>  : ^^^

function foo14(x: I);
>foo14 : { (x: I): any; (x: I2<string>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^          ^^^^^^^^^
>x : I
>  : ^

function foo14(x: I2<string>); // error
>foo14 : { (x: I): any; (x: I2<string>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^          ^^^^^^^^^
>x : I2<string>
>  : ^^^^^^^^^^

function foo14(x: any) { }
>foo14 : { (x: I): any; (x: I2<string>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^          ^^^^^^^^^
>x : any
>  : ^^^

function foo14b(x: typeof a);
>foo14b : { (x: typeof a): any; (x: I2<string>): any; }
>       : ^^^ ^^        ^^^^^^^^^ ^^          ^^^^^^^^^
>x : (x: string) => string
>  : ^ ^^      ^^^^^      
>a : (x: string) => string
>  : ^ ^^      ^^^^^      

function foo14b(x: I2<string>); // error
>foo14b : { (x: typeof a): any; (x: I2<string>): any; }
>       : ^^^ ^^        ^^^^^^^^^ ^^          ^^^^^^^^^
>x : I2<string>
>  : ^^^^^^^^^^

function foo14b(x: any) { }
>foo14b : { (x: typeof a): any; (x: I2<string>): any; }
>       : ^^^ ^^        ^^^^^^^^^ ^^          ^^^^^^^^^
>x : any
>  : ^^^

function foo15(x: I);
>foo15 : { (x: I): any; (x: I2<number>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^          ^^^^^^^^^
>x : I
>  : ^

function foo15(x: I2<number>); // ok
>foo15 : { (x: I): any; (x: I2<number>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^          ^^^^^^^^^
>x : I2<number>
>  : ^^^^^^^^^^

function foo15(x: any) { }
>foo15 : { (x: I): any; (x: I2<number>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^          ^^^^^^^^^
>x : any
>  : ^^^

