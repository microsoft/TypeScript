//// [tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignaturesDifferingParamCounts.ts] ////

=== objectTypesIdentityWithConstructSignaturesDifferingParamCounts.ts ===
// object types are identical structurally

class B {
>B : B
>  : ^

    constructor(x: string, y: string) { return null; }
>x : string
>  : ^^^^^^
>y : string
>  : ^^^^^^
}

class C<T> {
>C : C<T>
>  : ^^^^

    constructor(x: T, y: T) { return null; }
>x : T
>  : ^
>y : T
>  : ^
}

interface I {
    new(x: string): string;
>x : string
>  : ^^^^^^
}

interface I2<T> {
    new(x: T): T;
>x : T
>  : ^
}

var a: { new(x: string, y: string): string }
>a : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      
>x : string
>  : ^^^^^^
>y : string
>  : ^^^^^^

var b = { new(x: string) { return ''; } }; // not a construct signature, function called new
>b : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^
>{ new(x: string) { return ''; } } : { "new"(x: string): string; }
>                                  : ^^^^^^^^ ^^      ^^^^^^^^^^^^
>new : (x: string) => string
>    : ^ ^^      ^^^^^^^^^^^
>x : string
>  : ^^^^^^
>'' : ""
>   : ^^

function foo1b(x: B);
>foo1b : { (x: B): any; (x: B): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : B
>  : ^

function foo1b(x: B); // error
>foo1b : { (x: B): any; (x: B): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : B
>  : ^

function foo1b(x: any) { }
>foo1b : { (x: B): any; (x: B): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : any

function foo1c(x: C<string>);
>foo1c : { (x: C<string>): any; (x: C<string>): any; }
>      : ^^^ ^^         ^^^^^^^^^ ^^         ^^^^^^^^^
>x : C<string>
>  : ^^^^^^^^^

function foo1c(x: C<string>); // error
>foo1c : { (x: C<string>): any; (x: C<string>): any; }
>      : ^^^ ^^         ^^^^^^^^^ ^^         ^^^^^^^^^
>x : C<string>
>  : ^^^^^^^^^

function foo1c(x: any) { }
>foo1c : { (x: C<string>): any; (x: C<string>): any; }
>      : ^^^ ^^         ^^^^^^^^^ ^^         ^^^^^^^^^
>x : any

function foo2(x: I);
>foo2 : { (x: I): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : I
>  : ^

function foo2(x: I); // error
>foo2 : { (x: I): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : I
>  : ^

function foo2(x: any) { }
>foo2 : { (x: I): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : any

function foo3(x: typeof a);
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      
>a : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      

function foo3(x: typeof a); // error
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      
>a : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      

function foo3(x: any) { }
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo4(x: typeof b);
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^
>b : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^

function foo4(x: typeof b); // error
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^
>b : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^

function foo4(x: any) { }
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo8(x: B);
>foo8 : { (x: B): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : B
>  : ^

function foo8(x: I); // ok
>foo8 : { (x: B): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : I
>  : ^

function foo8(x: any) { }
>foo8 : { (x: B): any; (x: I): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^ ^^^^^^^^^
>x : any

function foo9(x: B);
>foo9 : { (x: B): any; (x: C<string>): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^         ^^^^^^^^^
>x : B
>  : ^

function foo9(x: C<string>); // error, types are structurally equal
>foo9 : { (x: B): any; (x: C<string>): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^         ^^^^^^^^^
>x : C<string>
>  : ^^^^^^^^^

function foo9(x: any) { }
>foo9 : { (x: B): any; (x: C<string>): any; }
>     : ^^^ ^^ ^^^^^^^^^ ^^         ^^^^^^^^^
>x : any

function foo10(x: B);
>foo10 : { (x: B): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : B
>  : ^

function foo10(x: typeof a); // ok
>foo10 : { (x: B): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      
>a : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      

function foo10(x: any) { }
>foo10 : { (x: B): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo11(x: B);
>foo11 : { (x: B): any; (x: typeof b): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : B
>  : ^

function foo11(x: typeof b); // ok
>foo11 : { (x: B): any; (x: typeof b): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^
>b : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^

function foo11(x: any) { }
>foo11 : { (x: B): any; (x: typeof b): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo12(x: I);
>foo12 : { (x: I): any; (x: C<string>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^         ^^^^^^^^^
>x : I
>  : ^

function foo12(x: C<string>); // ok
>foo12 : { (x: I): any; (x: C<string>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^         ^^^^^^^^^
>x : C<string>
>  : ^^^^^^^^^

function foo12(x: any) { }
>foo12 : { (x: I): any; (x: C<string>): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^         ^^^^^^^^^
>x : any

function foo12b(x: I2<string>);
>foo12b : { (x: I2<string>): any; (x: C<string>): any; }
>       : ^^^ ^^          ^^^^^^^^^ ^^         ^^^^^^^^^
>x : I2<string>
>  : ^^^^^^^^^^

function foo12b(x: C<string>); // ok
>foo12b : { (x: I2<string>): any; (x: C<string>): any; }
>       : ^^^ ^^          ^^^^^^^^^ ^^         ^^^^^^^^^
>x : C<string>
>  : ^^^^^^^^^

function foo12b(x: any) { }
>foo12b : { (x: I2<string>): any; (x: C<string>): any; }
>       : ^^^ ^^          ^^^^^^^^^ ^^         ^^^^^^^^^
>x : any

function foo13(x: I);
>foo13 : { (x: I): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : I
>  : ^

function foo13(x: typeof a); // ok
>foo13 : { (x: I): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      
>a : new (x: string, y: string) => string
>  : ^^^^^ ^^      ^^ ^^      ^^^^^      

function foo13(x: any) { }
>foo13 : { (x: I): any; (x: typeof a): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo14(x: I);
>foo14 : { (x: I): any; (x: typeof b): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : I
>  : ^

function foo14(x: typeof b); // ok
>foo14 : { (x: I): any; (x: typeof b): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^
>b : { "new"(x: string): string; }
>  : ^^^^^^^^ ^^      ^^^^^^^^^^^^

function foo14(x: any) { }
>foo14 : { (x: I): any; (x: typeof b): any; }
>      : ^^^ ^^ ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo15(x: I2<string>);
>foo15 : { (x: I2<string>): any; (x: C<number>): any; }
>      : ^^^ ^^          ^^^^^^^^^ ^^         ^^^^^^^^^
>x : I2<string>
>  : ^^^^^^^^^^

function foo15(x: C<number>); // ok
>foo15 : { (x: I2<string>): any; (x: C<number>): any; }
>      : ^^^ ^^          ^^^^^^^^^ ^^         ^^^^^^^^^
>x : C<number>
>  : ^^^^^^^^^

function foo15(x: any) { }
>foo15 : { (x: I2<string>): any; (x: C<number>): any; }
>      : ^^^ ^^          ^^^^^^^^^ ^^         ^^^^^^^^^
>x : any

