//// [tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterCounts.ts] ////

=== objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterCounts.ts ===
// object types are identical structurally

class B<U, V> {
>B : B<U, V>
>  : ^^^^^^^

    constructor(x: U) { return null; }
>x : U
>  : ^
}

class C<V, W, X> {
>C : C<V, W, X>
>  : ^^^^^^^^^^

    constructor(x: V) { return null; }
>x : V
>  : ^
}

interface I<X, Y, Z, A> {
    new(x: X): B<X,Y>;
>x : X
>  : ^
}

interface I2 {
    new <Y, Z, A, B>(x: Y): C<Y, Z, A>;
>x : Y
>  : ^
}

var a: { new <Z, A, B, CC, D>(x: Z): C<Z, A, B>; }
>a : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          
>x : Z
>  : ^

var b = { new<A, B, C, D, E, F>(x: A) { return x; } };
>b : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^
>{ new<A, B, C, D, E, F>(x: A) { return x; } } : { "new"<A, B, C, D, E, F>(x: A): A; }
>                                              : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^
>new : <A, B, C, D, E, F>(x: A) => A
>    : ^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^
>x : A
>  : ^
>x : A
>  : ^

function foo1b(x: B<string, string>);
>foo1b : { (x: B<string, string>): any; (x: B<string, string>): any; }
>      : ^^^ ^^                 ^^^^^^^^^ ^^                 ^^^^^^^^^
>x : B<string, string>
>  : ^^^^^^^^^^^^^^^^^

function foo1b(x: B<string, string>); // error
>foo1b : { (x: B<string, string>): any; (x: B<string, string>): any; }
>      : ^^^ ^^                 ^^^^^^^^^ ^^                 ^^^^^^^^^
>x : B<string, string>
>  : ^^^^^^^^^^^^^^^^^

function foo1b(x: any) { }
>foo1b : { (x: B<string, string>): any; (x: B<string, string>): any; }
>      : ^^^ ^^                 ^^^^^^^^^ ^^                 ^^^^^^^^^
>x : any

function foo1c(x: C<string, number, boolean>);
>foo1c : { (x: C<string, number, boolean>): any; (x: C<string, number, boolean>): any; }
>      : ^^^ ^^                          ^^^^^^^^^ ^^                          ^^^^^^^^^
>x : C<string, number, boolean>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo1c(x: C<string, number, boolean>); // error
>foo1c : { (x: C<string, number, boolean>): any; (x: C<string, number, boolean>): any; }
>      : ^^^ ^^                          ^^^^^^^^^ ^^                          ^^^^^^^^^
>x : C<string, number, boolean>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo1c(x: any) { }
>foo1c : { (x: C<string, number, boolean>): any; (x: C<string, number, boolean>): any; }
>      : ^^^ ^^                          ^^^^^^^^^ ^^                          ^^^^^^^^^
>x : any

function foo2(x: I<string, boolean, number, string>);
>foo2 : { (x: I<string, boolean, number, string>): any; (x: I<string, boolean, number, string>): any; }
>     : ^^^ ^^                                  ^^^^^^^^^ ^^                                  ^^^^^^^^^
>x : I<string, boolean, number, string>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo2(x: I<string, boolean, number, string>); // error
>foo2 : { (x: I<string, boolean, number, string>): any; (x: I<string, boolean, number, string>): any; }
>     : ^^^ ^^                                  ^^^^^^^^^ ^^                                  ^^^^^^^^^
>x : I<string, boolean, number, string>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo2(x: any) { }
>foo2 : { (x: I<string, boolean, number, string>): any; (x: I<string, boolean, number, string>): any; }
>     : ^^^ ^^                                  ^^^^^^^^^ ^^                                  ^^^^^^^^^
>x : any

function foo3(x: typeof a);
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          
>a : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          

function foo3(x: typeof a); // error
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          
>a : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          

function foo3(x: any) { }
>foo3 : { (x: typeof a): any; (x: typeof a): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo4(x: typeof b);
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^
>b : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^

function foo4(x: typeof b); // error
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^
>b : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^

function foo4(x: any) { }
>foo4 : { (x: typeof b): any; (x: typeof b): any; }
>     : ^^^ ^^        ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo8(x: B<string, string>);
>foo8 : { (x: B<string, string>): any; (x: I<string, string, boolean, Date>): any; }
>     : ^^^ ^^                 ^^^^^^^^^ ^^                                ^^^^^^^^^
>x : B<string, string>
>  : ^^^^^^^^^^^^^^^^^

function foo8(x: I<string, string, boolean, Date>); // BUG 832086
>foo8 : { (x: B<string, string>): any; (x: I<string, string, boolean, Date>): any; }
>     : ^^^ ^^                 ^^^^^^^^^ ^^                                ^^^^^^^^^
>x : I<string, string, boolean, Date>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo8(x: any) { }
>foo8 : { (x: B<string, string>): any; (x: I<string, string, boolean, Date>): any; }
>     : ^^^ ^^                 ^^^^^^^^^ ^^                                ^^^^^^^^^
>x : any

function foo9(x: B<string, number>);
>foo9 : { (x: B<string, number>): any; (x: C<string, number, B<string, string>>): any; }
>     : ^^^ ^^                 ^^^^^^^^^ ^^                                    ^^^^^^^^^
>x : B<string, number>
>  : ^^^^^^^^^^^^^^^^^

function foo9(x: C<string, number, B<string, string>>); // error
>foo9 : { (x: B<string, number>): any; (x: C<string, number, B<string, string>>): any; }
>     : ^^^ ^^                 ^^^^^^^^^ ^^                                    ^^^^^^^^^
>x : C<string, number, B<string, string>>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo9(x: any) { }
>foo9 : { (x: B<string, number>): any; (x: C<string, number, B<string, string>>): any; }
>     : ^^^ ^^                 ^^^^^^^^^ ^^                                    ^^^^^^^^^
>x : any

function foo10(x: B<string, boolean>);
>foo10 : { (x: B<string, boolean>): any; (x: typeof a): any; }
>      : ^^^ ^^                  ^^^^^^^^^ ^^        ^^^^^^^^^
>x : B<string, boolean>
>  : ^^^^^^^^^^^^^^^^^^

function foo10(x: typeof a); // ok
>foo10 : { (x: B<string, boolean>): any; (x: typeof a): any; }
>      : ^^^ ^^                  ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          
>a : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          

function foo10(x: any) { }
>foo10 : { (x: B<string, boolean>): any; (x: typeof a): any; }
>      : ^^^ ^^                  ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo11(x: B<string, boolean>);
>foo11 : { (x: B<string, boolean>): any; (x: typeof b): any; }
>      : ^^^ ^^                  ^^^^^^^^^ ^^        ^^^^^^^^^
>x : B<string, boolean>
>  : ^^^^^^^^^^^^^^^^^^

function foo11(x: typeof b); // ok
>foo11 : { (x: B<string, boolean>): any; (x: typeof b): any; }
>      : ^^^ ^^                  ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^
>b : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^

function foo11(x: any) { }
>foo11 : { (x: B<string, boolean>): any; (x: typeof b): any; }
>      : ^^^ ^^                  ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo12(x: I<B<string, number>, number, Date, string>);
>foo12 : { (x: I<B<string, number>, number, Date, string>): any; (x: C<B<string, number>, number, Date>): any; }
>      : ^^^ ^^                                          ^^^^^^^^^ ^^                                  ^^^^^^^^^
>x : I<B<string, number>, number, Date, string>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo12(x: C<B<string, number>, number, Date>); // ok
>foo12 : { (x: I<B<string, number>, number, Date, string>): any; (x: C<B<string, number>, number, Date>): any; }
>      : ^^^ ^^                                          ^^^^^^^^^ ^^                                  ^^^^^^^^^
>x : C<B<string, number>, number, Date>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo12(x: any) { }
>foo12 : { (x: I<B<string, number>, number, Date, string>): any; (x: C<B<string, number>, number, Date>): any; }
>      : ^^^ ^^                                          ^^^^^^^^^ ^^                                  ^^^^^^^^^
>x : any

function foo12b(x: I2);
>foo12b : { (x: I2): any; (x: C<string, string, boolean>): any; }
>       : ^^^ ^^  ^^^^^^^^^ ^^                          ^^^^^^^^^
>x : I2
>  : ^^

function foo12b(x: C<string, string, boolean>); // BUG 832086
>foo12b : { (x: I2): any; (x: C<string, string, boolean>): any; }
>       : ^^^ ^^  ^^^^^^^^^ ^^                          ^^^^^^^^^
>x : C<string, string, boolean>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo12b(x: any) { }
>foo12b : { (x: I2): any; (x: C<string, string, boolean>): any; }
>       : ^^^ ^^  ^^^^^^^^^ ^^                          ^^^^^^^^^
>x : any

function foo13(x: I<string, Date, RegExp, Date>);
>foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: typeof a): any; }
>      : ^^^ ^^                             ^^^^^^^^^ ^^        ^^^^^^^^^
>x : I<string, Date, RegExp, Date>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo13(x: typeof a); // ok
>foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: typeof a): any; }
>      : ^^^ ^^                             ^^^^^^^^^ ^^        ^^^^^^^^^
>x : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          
>a : new <Z, A, B, CC, D>(x: Z) => C<Z, A, B>
>  : ^^^^^ ^^ ^^ ^^  ^^ ^^ ^^ ^^^^^          

function foo13(x: any) { }
>foo13 : { (x: I<string, Date, RegExp, Date>): any; (x: typeof a): any; }
>      : ^^^ ^^                             ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

function foo14(x: I<string, Date, RegExp, boolean>);
>foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: typeof b): any; }
>      : ^^^ ^^                                ^^^^^^^^^ ^^        ^^^^^^^^^
>x : I<string, Date, RegExp, boolean>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

function foo14(x: typeof b); // ok
>foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: typeof b): any; }
>      : ^^^ ^^                                ^^^^^^^^^ ^^        ^^^^^^^^^
>x : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^
>b : { "new"<A, B, C, D, E, F>(x: A): A; }
>  : ^^^^^^^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^ ^^^^^^^

function foo14(x: any) { }
>foo14 : { (x: I<string, Date, RegExp, boolean>): any; (x: typeof b): any; }
>      : ^^^ ^^                                ^^^^^^^^^ ^^        ^^^^^^^^^
>x : any

