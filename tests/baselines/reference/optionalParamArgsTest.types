//// [tests/cases/compiler/optionalParamArgsTest.ts] ////

=== optionalParamArgsTest.ts ===
// Optional parameter and default argument tests

// Key:
// Cx - "Class x"
// My - "Method x"
// Az - "Argument z"
// E.g., C1M1A1 = "Class 1, Method 1, Argument 1"

interface I1 {
    C1M1():number;
>C1M1 : () => number
>     : ^^^^^^      

    C1M2(C1M2A1:number):number;
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^      
>C1M2A1 : number
>       : ^^^^^^

    C1M3(C1M3A1?:number,C1M3A2?:number):number;
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^      
>C1M3A1 : number
>       : ^^^^^^
>C1M3A2 : number
>       : ^^^^^^

    C1M4(C1M4A1:number,C1M4A2?:number):number;
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^      
>C1M4A1 : number
>       : ^^^^^^
>C1M4A2 : number
>       : ^^^^^^
}

// test basic configurations
class C1 {
>C1 : C1
>   : ^^

    constructor(v: number = 1, p: number = 0) { }
>v : number
>  : ^^^^^^
>1 : 1
>  : ^
>p : number
>  : ^^^^^^
>0 : 0
>  : ^

    public n:number = 0;
>n : number
>  : ^^^^^^
>0 : 0
>  : ^

    public C1M1() { return 0; } // returning C1M1A1 will result in "Unresolved symbol C1M1A1"
>C1M1 : () => number
>     : ^^^^^^^^^^^^
>0 : 0
>  : ^

    public C1M2(C1M2A1:number) { return C1M2A1; } // will return C1M1A2 without complaint
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^^^^^^^
>C1M2A1 : number
>       : ^^^^^^
>C1M2A1 : number
>       : ^^^^^^

    // C1M3 contains all optional parameters
    public C1M3(C1M3A1:number=0,C1M3A2:number=C1M3A1) {return C1M3A1 + C1M3A2; }
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>C1M3A1 : number
>       : ^^^^^^
>0 : 0
>  : ^
>C1M3A2 : number
>       : ^^^^^^
>C1M3A1 : number
>       : ^^^^^^
>C1M3A1 + C1M3A2 : number
>                : ^^^^^^
>C1M3A1 : number
>       : ^^^^^^
>C1M3A2 : number
>       : ^^^^^^

    // C1M4 contains a mix of optional and non-optional parameters
    public C1M4(C1M4A1:number,C1M4A2?:number) { return C1M4A1 + C1M4A2; }
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^^^^^^^
>C1M4A1 : number
>       : ^^^^^^
>C1M4A2 : number
>       : ^^^^^^
>C1M4A1 + C1M4A2 : number
>                : ^^^^^^
>C1M4A1 : number
>       : ^^^^^^
>C1M4A2 : number
>       : ^^^^^^

    public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3?:number) { return C1M5A1 + C1M5A2; }
>C1M5 : (C1M5A1: number, C1M5A2?: number, C1M5A3?: number) => number
>     : ^      ^^      ^^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>C1M5A1 : number
>       : ^^^^^^
>C1M5A2 : number
>       : ^^^^^^
>0 : 0
>  : ^
>C1M5A3 : number
>       : ^^^^^^
>C1M5A1 + C1M5A2 : number
>                : ^^^^^^
>C1M5A1 : number
>       : ^^^^^^
>C1M5A2 : number
>       : ^^^^^^

    // Uninitialized parameter makes the initialized one required
    public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3:number) { return C1M5A1 + C1M5A2; }
>C1M5 : (C1M5A1: number, C1M5A2?: number, C1M5A3?: number) => number
>     : ^      ^^      ^^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>C1M5A1 : number
>       : ^^^^^^
>C1M5A2 : number
>       : ^^^^^^
>0 : 0
>  : ^
>C1M5A3 : number
>       : ^^^^^^
>C1M5A1 + C1M5A2 : number
>                : ^^^^^^
>C1M5A1 : number
>       : ^^^^^^
>C1M5A2 : number
>       : ^^^^^^
}

class C2 extends C1 {
>C2 : C2
>   : ^^
>C1 : C1
>   : ^^

    constructor(v2: number = 6) {
>v2 : number
>   : ^^^^^^
>6 : 6
>  : ^

        super(v2);
>super(v2) : void
>          : ^^^^
>super : typeof C1
>      : ^^^^^^^^^
>v2 : number
>   : ^^^^^^
    }
}


function F1() { return 0; } 
>F1 : () => number
>   : ^^^^^^^^^^^^
>0 : 0
>  : ^

function F2(F2A1:number) { return F2A1; } 
>F2 : (F2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^
>F2A1 : number
>     : ^^^^^^
>F2A1 : number
>     : ^^^^^^

function F3(F3A1=0,F3A2=F3A1) {return F3A1 + F3A2; }
>F3 : (F3A1?: number, F3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>F3A1 : number
>     : ^^^^^^
>0 : 0
>  : ^
>F3A2 : number
>     : ^^^^^^
>F3A1 : number
>     : ^^^^^^
>F3A1 + F3A2 : number
>            : ^^^^^^
>F3A1 : number
>     : ^^^^^^
>F3A2 : number
>     : ^^^^^^

function F4(F4A1:number,F4A2?:number) { return F4A1 + F4A2; }
>F4 : (F4A1: number, F4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>F4A1 : number
>     : ^^^^^^
>F4A2 : number
>     : ^^^^^^
>F4A1 + F4A2 : number
>            : ^^^^^^
>F4A1 : number
>     : ^^^^^^
>F4A2 : number
>     : ^^^^^^

var L1 = function() {return 0;}
>L1 : () => number
>   : ^^^^^^^^^^^^
>function() {return 0;} : () => number
>                       : ^^^^^^^^^^^^
>0 : 0
>  : ^

var L2 = function (L2A1:number) { return L2A1; } 
>L2 : (L2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^
>function (L2A1:number) { return L2A1; } : (L2A1: number) => number
>                                        : ^    ^^      ^^^^^^^^^^^
>L2A1 : number
>     : ^^^^^^
>L2A1 : number
>     : ^^^^^^

var L3 = function (L3A1=0,L3A2=L3A1) {return L3A1 + L3A2; }
>L3 : (L3A1?: number, L3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>function (L3A1=0,L3A2=L3A1) {return L3A1 + L3A2; } : (L3A1?: number, L3A2?: number) => number
>                                                   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>L3A1 : number
>     : ^^^^^^
>0 : 0
>  : ^
>L3A2 : number
>     : ^^^^^^
>L3A1 : number
>     : ^^^^^^
>L3A1 + L3A2 : number
>            : ^^^^^^
>L3A1 : number
>     : ^^^^^^
>L3A2 : number
>     : ^^^^^^

var L4 = function (L4A1:number,L4A2?:number) { return L4A1 + L4A2; }
>L4 : (L4A1: number, L4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>function (L4A1:number,L4A2?:number) { return L4A1 + L4A2; } : (L4A1: number, L4A2?: number) => number
>                                                            : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>L4A1 : number
>     : ^^^^^^
>L4A2 : number
>     : ^^^^^^
>L4A1 + L4A2 : number
>            : ^^^^^^
>L4A1 : number
>     : ^^^^^^
>L4A2 : number
>     : ^^^^^^

var c1o1:C1 = new C1(5);
>c1o1 : C1
>     : ^^
>new C1(5) : C1
>          : ^^
>C1 : typeof C1
>   : ^^^^^^^^^
>5 : 5
>  : ^

var i1o1:I1 = new C1(5);
>i1o1 : I1
>     : ^^
>new C1(5) : C1
>          : ^^
>C1 : typeof C1
>   : ^^^^^^^^^
>5 : 5
>  : ^

// Valid
c1o1.C1M1();
>c1o1.C1M1() : number
>            : ^^^^^^
>c1o1.C1M1 : () => number
>          : ^^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M1 : () => number
>     : ^^^^^^^^^^^^

var f1v1=F1();
>f1v1 : number
>     : ^^^^^^
>F1() : number
>     : ^^^^^^
>F1 : () => number
>   : ^^^^^^^^^^^^

var l1v1=L1();
>l1v1 : number
>     : ^^^^^^
>L1() : number
>     : ^^^^^^
>L1 : () => number
>   : ^^^^^^^^^^^^

// Valid
c1o1.C1M2(1);
>c1o1.C1M2(1) : number
>             : ^^^^^^
>c1o1.C1M2 : (C1M2A1: number) => number
>          : ^      ^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^^^^^^^
>1 : 1
>  : ^

i1o1.C1M2(1);
>i1o1.C1M2(1) : number
>             : ^^^^^^
>i1o1.C1M2 : (C1M2A1: number) => number
>          : ^      ^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^      
>1 : 1
>  : ^

var f2v1=F2(1);
>f2v1 : number
>     : ^^^^^^
>F2(1) : number
>      : ^^^^^^
>F2 : (F2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^
>1 : 1
>  : ^

var l2v1=L2(1);
>l2v1 : number
>     : ^^^^^^
>L2(1) : number
>      : ^^^^^^
>L2 : (L2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^
>1 : 1
>  : ^

// Valid
c1o1.C1M3(1,2);
>c1o1.C1M3(1,2) : number
>               : ^^^^^^
>c1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

i1o1.C1M3(1,2);
>i1o1.C1M3(1,2) : number
>               : ^^^^^^
>i1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^      
>1 : 1
>  : ^
>2 : 2
>  : ^

var f3v1=F3(1,2);
>f3v1 : number
>     : ^^^^^^
>F3(1,2) : number
>        : ^^^^^^
>F3 : (F3A1?: number, F3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

var l3v1=L3(1,2);
>l3v1 : number
>     : ^^^^^^
>L3(1,2) : number
>        : ^^^^^^
>L3 : (L3A1?: number, L3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

// Valid
c1o1.C1M4(1,2);
>c1o1.C1M4(1,2) : number
>               : ^^^^^^
>c1o1.C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>          : ^      ^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

i1o1.C1M4(1,2);
>i1o1.C1M4(1,2) : number
>               : ^^^^^^
>i1o1.C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>          : ^      ^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^      
>1 : 1
>  : ^
>2 : 2
>  : ^

var f4v1=F4(1,2);
>f4v1 : number
>     : ^^^^^^
>F4(1,2) : number
>        : ^^^^^^
>F4 : (F4A1: number, F4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

var l4v1=L4(1,2);
>l4v1 : number
>     : ^^^^^^
>L4(1,2) : number
>        : ^^^^^^
>L4 : (L4A1: number, L4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

// Valid
c1o1.C1M3(1);
>c1o1.C1M3(1) : number
>             : ^^^^^^
>c1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^

i1o1.C1M3(1);
>i1o1.C1M3(1) : number
>             : ^^^^^^
>i1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^      
>1 : 1
>  : ^

var f3v2=F3(1);
>f3v2 : number
>     : ^^^^^^
>F3(1) : number
>      : ^^^^^^
>F3 : (F3A1?: number, F3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^

var l3v2=L3(1);
>l3v2 : number
>     : ^^^^^^
>L3(1) : number
>      : ^^^^^^
>L3 : (L3A1?: number, L3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^

// Valid 
c1o1.C1M3();
>c1o1.C1M3() : number
>            : ^^^^^^
>c1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^

i1o1.C1M3();
>i1o1.C1M3() : number
>            : ^^^^^^
>i1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^      

var f3v3=F3();
>f3v3 : number
>     : ^^^^^^
>F3() : number
>     : ^^^^^^
>F3 : (F3A1?: number, F3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^

var l3v3=L3();
>l3v3 : number
>     : ^^^^^^
>L3() : number
>     : ^^^^^^
>L3 : (L3A1?: number, L3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^

// Valid
c1o1.C1M4(1);
>c1o1.C1M4(1) : number
>             : ^^^^^^
>c1o1.C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>          : ^      ^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^

i1o1.C1M4(1);
>i1o1.C1M4(1) : number
>             : ^^^^^^
>i1o1.C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>          : ^      ^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^      
>1 : 1
>  : ^

var f4v2=F4(1);
>f4v2 : number
>     : ^^^^^^
>F4(1) : number
>      : ^^^^^^
>F4 : (F4A1: number, F4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^

var l4v2=L4(1);
>l4v2 : number
>     : ^^^^^^
>L4(1) : number
>      : ^^^^^^
>L4 : (L4A1: number, L4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^

// Negative tests - we expect these cases to fail
c1o1.C1M1(1);
>c1o1.C1M1(1) : number
>             : ^^^^^^
>c1o1.C1M1 : () => number
>          : ^^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M1 : () => number
>     : ^^^^^^^^^^^^
>1 : 1
>  : ^

i1o1.C1M1(1);
>i1o1.C1M1(1) : number
>             : ^^^^^^
>i1o1.C1M1 : () => number
>          : ^^^^^^      
>i1o1 : I1
>     : ^^
>C1M1 : () => number
>     : ^^^^^^      
>1 : 1
>  : ^

F1(1);
>F1(1) : number
>      : ^^^^^^
>F1 : () => number
>   : ^^^^^^^^^^^^
>1 : 1
>  : ^

L1(1);
>L1(1) : number
>      : ^^^^^^
>L1 : () => number
>   : ^^^^^^^^^^^^
>1 : 1
>  : ^

c1o1.C1M2();
>c1o1.C1M2() : number
>            : ^^^^^^
>c1o1.C1M2 : (C1M2A1: number) => number
>          : ^      ^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^^^^^^^

i1o1.C1M2();
>i1o1.C1M2() : number
>            : ^^^^^^
>i1o1.C1M2 : (C1M2A1: number) => number
>          : ^      ^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^      

F2();
>F2() : number
>     : ^^^^^^
>F2 : (F2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^

L2();
>L2() : number
>     : ^^^^^^
>L2 : (L2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^

c1o1.C1M2(1,2);
>c1o1.C1M2(1,2) : number
>               : ^^^^^^
>c1o1.C1M2 : (C1M2A1: number) => number
>          : ^      ^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

i1o1.C1M2(1,2);
>i1o1.C1M2(1,2) : number
>               : ^^^^^^
>i1o1.C1M2 : (C1M2A1: number) => number
>          : ^      ^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M2 : (C1M2A1: number) => number
>     : ^      ^^      ^^^^^      
>1 : 1
>  : ^
>2 : 2
>  : ^

F2(1,2);
>F2(1,2) : number
>        : ^^^^^^
>F2 : (F2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

L2(1,2);
>L2(1,2) : number
>        : ^^^^^^
>L2 : (L2A1: number) => number
>   : ^    ^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

c1o1.C1M3(1,2,3);
>c1o1.C1M3(1,2,3) : number
>                 : ^^^^^^
>c1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

i1o1.C1M3(1,2,3);
>i1o1.C1M3(1,2,3) : number
>                 : ^^^^^^
>i1o1.C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>          : ^      ^^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M3 : (C1M3A1?: number, C1M3A2?: number) => number
>     : ^      ^^^      ^^      ^^^      ^^^^^      
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

F3(1,2,3);
>F3(1,2,3) : number
>          : ^^^^^^
>F3 : (F3A1?: number, F3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

L3(1,2,3);
>L3(1,2,3) : number
>          : ^^^^^^
>L3 : (L3A1?: number, L3A2?: number) => number
>   : ^    ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

c1o1.C1M4();
>c1o1.C1M4() : number
>            : ^^^^^^
>c1o1.C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>          : ^      ^^      ^^      ^^^      ^^^^^^^^^^^
>c1o1 : C1
>     : ^^
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^^^^^^^

i1o1.C1M4();
>i1o1.C1M4() : number
>            : ^^^^^^
>i1o1.C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>          : ^      ^^      ^^      ^^^      ^^^^^      
>i1o1 : I1
>     : ^^
>C1M4 : (C1M4A1: number, C1M4A2?: number) => number
>     : ^      ^^      ^^      ^^^      ^^^^^      

F4();
>F4() : number
>     : ^^^^^^
>F4 : (F4A1: number, F4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^

L4();
>L4() : number
>     : ^^^^^^
>L4 : (L4A1: number, L4A2?: number) => number
>   : ^    ^^      ^^    ^^^      ^^^^^^^^^^^

function fnOpt1(id: number, children: number[] = [], expectedPath: number[] = [], isRoot?: boolean): void {}
>fnOpt1 : (id: number, children?: number[], expectedPath?: number[], isRoot?: boolean) => void
>       : ^  ^^      ^^        ^^^        ^^            ^^^        ^^      ^^^       ^^^^^    
>id : number
>   : ^^^^^^
>children : number[]
>         : ^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>expectedPath : number[]
>             : ^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>isRoot : boolean
>       : ^^^^^^^

function fnOpt2(id: number, children?: number[], expectedPath?: number[], isRoot?: boolean): void {}
>fnOpt2 : (id: number, children?: number[], expectedPath?: number[], isRoot?: boolean) => void
>       : ^  ^^      ^^        ^^^        ^^            ^^^        ^^      ^^^       ^^^^^    
>id : number
>   : ^^^^^^
>children : number[]
>         : ^^^^^^^^
>expectedPath : number[]
>             : ^^^^^^^^
>isRoot : boolean
>       : ^^^^^^^

fnOpt1(1, [2, 3], [1], true);
>fnOpt1(1, [2, 3], [1], true) : void
>                             : ^^^^
>fnOpt1 : (id: number, children?: number[], expectedPath?: number[], isRoot?: boolean) => void
>       : ^  ^^      ^^        ^^^        ^^            ^^^        ^^      ^^^       ^^^^^    
>1 : 1
>  : ^
>[2, 3] : number[]
>       : ^^^^^^^^
>2 : 2
>  : ^
>3 : 3
>  : ^
>[1] : number[]
>    : ^^^^^^^^
>1 : 1
>  : ^
>true : true
>     : ^^^^

fnOpt2(1, [2, 3], [1], true);
>fnOpt2(1, [2, 3], [1], true) : void
>                             : ^^^^
>fnOpt2 : (id: number, children?: number[], expectedPath?: number[], isRoot?: boolean) => void
>       : ^  ^^      ^^        ^^^        ^^            ^^^        ^^      ^^^       ^^^^^    
>1 : 1
>  : ^
>[2, 3] : number[]
>       : ^^^^^^^^
>2 : 2
>  : ^
>3 : 3
>  : ^
>[1] : number[]
>    : ^^^^^^^^
>1 : 1
>  : ^
>true : true
>     : ^^^^

