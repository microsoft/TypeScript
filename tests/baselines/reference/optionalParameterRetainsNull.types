//// [tests/cases/compiler/optionalParameterRetainsNull.ts] ////

=== optionalParameterRetainsNull.ts ===
interface Bar {  bar: number; foo: object | null;  }
>bar : number
>    : ^^^^^^
>foo : object | null
>    : ^^^^^^^^^^^^^

let a = {
>a : { test<K extends keyof Bar>(a: K, b?: Bar[K] | null): void; }
>  : ^^^^^^^ ^^^^^^^^^         ^^ ^^ ^^ ^^^             ^^^^^^^^^^
>{  test<K extends keyof Bar> (a: K,  b?: Bar[K]  |  null)  { }} : { test<K extends keyof Bar>(a: K, b?: Bar[K] | null): void; }
>                                                                : ^^^^^^^ ^^^^^^^^^         ^^ ^^ ^^ ^^^             ^^^^^^^^^^

  test<K extends keyof Bar> (a: K,  b?: Bar[K]  |  null)  { }
>test : <K extends keyof Bar>(a: K, b?: Bar[K] | null) => void
>     : ^ ^^^^^^^^^         ^^ ^^ ^^ ^^^             ^^^^^^^^^
>a : K
>  : ^
>b : Bar[K] | null | undefined
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^

};
a.test("bar", null); // ok, null is assignable to number | null | undefined
>a.test("bar", null) : void
>                    : ^^^^
>a.test : <K extends keyof Bar>(a: K, b?: Bar[K] | null) => void
>       : ^ ^^^^^^^^^         ^^ ^^ ^^ ^^^             ^^^^^^^^^
>a : { test<K extends keyof Bar>(a: K, b?: Bar[K] | null): void; }
>  : ^^^^^^^ ^^^^^^^^^         ^^ ^^ ^^ ^^^             ^^^^^^^^^^
>test : <K extends keyof Bar>(a: K, b?: Bar[K] | null) => void
>     : ^ ^^^^^^^^^         ^^ ^^ ^^ ^^^             ^^^^^^^^^
>"bar" : "bar"
>      : ^^^^^

