//// [tests/cases/compiler/overloadAssignmentCompat.ts] ////

=== overloadAssignmentCompat.ts ===
// ok - overload signatures are assignment compatible with their implementation
class Accessor {}
>Accessor : Accessor
>         : ^^^^^^^^

function attr(name: string): string;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>     : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>name : string
>     : ^^^^^^

function attr(name: string, value: string): Accessor;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>     : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>name : string
>     : ^^^^^^
>value : string
>      : ^^^^^^

function attr(map: any): Accessor;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>     : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>map : any
>    : ^^^

function attr(nameOrMap: any, value?: string): any {
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>     : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>nameOrMap : any
>          : ^^^
>value : string
>      : ^^^^^^

    if (nameOrMap && typeof nameOrMap === "object") {
>nameOrMap && typeof nameOrMap === "object" : boolean
>                                           : ^^^^^^^
>nameOrMap : any
>          : ^^^
>typeof nameOrMap === "object" : boolean
>                              : ^^^^^^^
>typeof nameOrMap : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameOrMap : any
>          : ^^^
>"object" : "object"
>         : ^^^^^^^^

        // handle map case
        return new Accessor;
>new Accessor : Accessor
>             : ^^^^^^^^
>Accessor : typeof Accessor
>         : ^^^^^^^^^^^^^^^
    }
    else {
        // handle string case
        return "s";
>"s" : "s"
>    : ^^^
    }
}

// not ok - there's an assignment compat error
function attr2(name: string): string;
>attr2 : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>      : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>name : string
>     : ^^^^^^

function attr2(name: string, value: string): Accessor;
>attr2 : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>      : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>name : string
>     : ^^^^^^
>value : string
>      : ^^^^^^

function attr2(map: any): Accessor;
>attr2 : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>      : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>map : any
>    : ^^^

function attr2(nameOrMap: any, value?: string): string {
>attr2 : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }
>      : ^^^    ^^      ^^^      ^^^    ^^      ^^     ^^      ^^^        ^^^   ^^   ^^^        ^^^
>nameOrMap : any
>          : ^^^
>value : string
>      : ^^^^^^

    if (nameOrMap && typeof nameOrMap === "object") {
>nameOrMap && typeof nameOrMap === "object" : boolean
>                                           : ^^^^^^^
>nameOrMap : any
>          : ^^^
>typeof nameOrMap === "object" : boolean
>                              : ^^^^^^^
>typeof nameOrMap : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameOrMap : any
>          : ^^^
>"object" : "object"
>         : ^^^^^^^^

        // handle map case
        return "t";
>"t" : "t"
>    : ^^^
    }
    else {
        // handle string case
        return "s";
>"s" : "s"
>    : ^^^
    }
}

// error - signatures are not assignment compatible
function foo():number; 
>foo : () => number
>    : ^^^^^^      

function foo():string { return "a" };
>foo : () => number
>    : ^^^^^^      
>"a" : "a"
>    : ^^^


