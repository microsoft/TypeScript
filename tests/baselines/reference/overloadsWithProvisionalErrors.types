//// [tests/cases/compiler/overloadsWithProvisionalErrors.ts] ////

=== overloadsWithProvisionalErrors.ts ===
var func: {
>func : { (s: string): number; (lambda: (s: string) => { a: number; b: number; }): string; }
>     : ^^^ ^^      ^^^      ^^^      ^^                                        ^^^      ^^^

    (s: string): number;
>s : string
>  : ^^^^^^

    (lambda: (s: string) => { a: number; b: number }): string;
>lambda : (s: string) => { a: number; b: number; }
>       : ^ ^^      ^^^^^                         
>s : string
>  : ^^^^^^
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^

};

func(s => ({})); // Error for no applicable overload (object type is missing a and b)
>func(s => ({})) : never
>                : ^^^^^
>func : { (s: string): number; (lambda: (s: string) => { a: number; b: number; }): string; }
>     : ^^^ ^^      ^^^      ^^^      ^^                                        ^^^      ^^^
>s => ({}) : (s: string) => {}
>          : ^ ^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>({}) : {}
>     : ^^
>{} : {}
>   : ^^

func(s => ({ a: blah, b: 3 })); // Only error inside the function, but not outside (since it would be applicable if not for the provisional error)
>func(s => ({ a: blah, b: 3 })) : string
>                               : ^^^^^^
>func : { (s: string): number; (lambda: (s: string) => { a: number; b: number; }): string; }
>     : ^^^ ^^      ^^^      ^^^      ^^                                        ^^^      ^^^
>s => ({ a: blah, b: 3 }) : (s: string) => { a: any; b: number; }
>                         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>({ a: blah, b: 3 }) : { a: any; b: number; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^
>{ a: blah, b: 3 } : { a: any; b: number; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^
>a : any
>  : ^^^
>blah : any
>     : ^^^
>b : number
>  : ^^^^^^
>3 : 3
>  : ^

func(s => ({ a: blah })); // Two errors here, one for blah not being defined, and one for the overload since it would not be applicable anyway
>func(s => ({ a: blah })) : never
>                         : ^^^^^
>func : { (s: string): number; (lambda: (s: string) => { a: number; b: number; }): string; }
>     : ^^^ ^^      ^^^      ^^^      ^^                                        ^^^      ^^^
>s => ({ a: blah }) : (s: string) => { a: any; }
>                   : ^ ^^^^^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>({ a: blah }) : { a: any; }
>              : ^^^^^^^^^^^
>{ a: blah } : { a: any; }
>            : ^^^^^^^^^^^
>a : any
>  : ^^^
>blah : any
>     : ^^^

