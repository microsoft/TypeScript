//// [tests/cases/conformance/override/override7.ts] ////

=== override7.ts ===
class B {
>B : B
>  : ^

    p1: number = 1;
>p1 : number
>   : ^^^^^^
>1 : 1
>  : ^

    p2: number = 2;
>p2 : number
>   : ^^^^^^
>2 : 2
>  : ^

    p3: number = 3;
>p3 : number
>   : ^^^^^^
>3 : 3
>  : ^

    p4: number = 4;
>p4 : number
>   : ^^^^^^
>4 : 4
>  : ^
}

class D extends B{
>D : D
>  : ^
>B : B
>  : ^

    declare p1: number
>p1 : number
>   : ^^^^^^

    override declare p2: number;
>p2 : number
>   : ^^^^^^

    readonly override p3: number;
>p3 : number
>   : ^^^^^^

    override readonly p4: number;
>p4 : number
>   : ^^^^^^

    static override sp: number;
>sp : number
>   : ^^^^^^

    override override oop: number;
>oop : number
>    : ^^^^^^

    public override pp: number;
>pp : number
>   : ^^^^^^

    override public op: number;
>op : number
>   : ^^^^^^

    override constructor () {
        super();
>super() : void
>        : ^^^^
>super : typeof B
>      : ^^^^^^^^
    }
}


abstract class AB {
>AB : AB
>   : ^^

    abstract f (): void;
>f : () => void
>  : ^^^^^^    

    abstract b (): void;
>b : () => void
>  : ^^^^^^    
}

abstract class AD extends AB {
>AD : AD
>   : ^^
>AB : AB
>   : ^^

    override abstract f(): void;
>f : () => void
>  : ^^^^^^    

    abstract override b(): void;
>b : () => void
>  : ^^^^^^    
}

abstract class AND {
>AND : AND
>    : ^^^

    override abstract f(): void;
>f : () => void
>  : ^^^^^^    

    abstract override b(): void;
>b : () => void
>  : ^^^^^^    
}

class ADD extends AD {
>ADD : ADD
>    : ^^^
>AD : AD
>   : ^^

    override f(): void {
>f : () => void
>  : ^^^^^^    

    }
    override b(): void {
>b : () => void
>  : ^^^^^^    

    }
}

