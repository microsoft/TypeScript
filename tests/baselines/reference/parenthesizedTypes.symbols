//// [tests/cases/conformance/types/specifyingTypes/typeLiterals/parenthesizedTypes.ts] ////

=== parenthesizedTypes.ts ===
var a: string;
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

var a: (string);
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

var a: ((string) | string | (((string))));
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

var a: ((((((((((((((((((((((((((((((((((((((((string))))))))))))))))))))))))))))))))))))))));
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

var b: (x: string) => string;
>b : Symbol(b, Decl(parenthesizedTypes.ts, 5, 3), Decl(parenthesizedTypes.ts, 6, 3))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 5, 8))

var b: ((x: (string)) => (string));
>b : Symbol(b, Decl(parenthesizedTypes.ts, 5, 3), Decl(parenthesizedTypes.ts, 6, 3))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 6, 9))

var c: string[] | number[];
>c : Symbol(c, Decl(parenthesizedTypes.ts, 8, 3), Decl(parenthesizedTypes.ts, 9, 3), Decl(parenthesizedTypes.ts, 10, 3))

var c: (string)[] | (number)[];
>c : Symbol(c, Decl(parenthesizedTypes.ts, 8, 3), Decl(parenthesizedTypes.ts, 9, 3), Decl(parenthesizedTypes.ts, 10, 3))

var c: ((string)[]) | ((number)[]);
>c : Symbol(c, Decl(parenthesizedTypes.ts, 8, 3), Decl(parenthesizedTypes.ts, 9, 3), Decl(parenthesizedTypes.ts, 10, 3))

var d: (((x: string) => string) | ((x: number) => number))[];
>d : Symbol(d, Decl(parenthesizedTypes.ts, 12, 3), Decl(parenthesizedTypes.ts, 13, 3), Decl(parenthesizedTypes.ts, 14, 3), Decl(parenthesizedTypes.ts, 15, 3), Decl(parenthesizedTypes.ts, 16, 3))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 12, 10))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 12, 36))

var d: ({ (x: string): string } | { (x: number): number })[];
>d : Symbol(d, Decl(parenthesizedTypes.ts, 12, 3), Decl(parenthesizedTypes.ts, 13, 3), Decl(parenthesizedTypes.ts, 14, 3), Decl(parenthesizedTypes.ts, 15, 3), Decl(parenthesizedTypes.ts, 16, 3))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 13, 11))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 13, 37))

var d: Array<((x: string) => string) | ((x: number) => number)>;
>d : Symbol(d, Decl(parenthesizedTypes.ts, 12, 3), Decl(parenthesizedTypes.ts, 13, 3), Decl(parenthesizedTypes.ts, 14, 3), Decl(parenthesizedTypes.ts, 15, 3), Decl(parenthesizedTypes.ts, 16, 3))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 14, 15))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 14, 41))

var d: Array<{ (x: string): string } | { (x: number): number }>;
>d : Symbol(d, Decl(parenthesizedTypes.ts, 12, 3), Decl(parenthesizedTypes.ts, 13, 3), Decl(parenthesizedTypes.ts, 14, 3), Decl(parenthesizedTypes.ts, 15, 3), Decl(parenthesizedTypes.ts, 16, 3))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 15, 16))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 15, 42))

var d: (Array<{ (x: string): string } | { (x: number): number }>);
>d : Symbol(d, Decl(parenthesizedTypes.ts, 12, 3), Decl(parenthesizedTypes.ts, 13, 3), Decl(parenthesizedTypes.ts, 14, 3), Decl(parenthesizedTypes.ts, 15, 3), Decl(parenthesizedTypes.ts, 16, 3))
>Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 16, 17))
>x : Symbol(x, Decl(parenthesizedTypes.ts, 16, 43))

var e: typeof a[];
>e : Symbol(e, Decl(parenthesizedTypes.ts, 18, 3), Decl(parenthesizedTypes.ts, 19, 3))
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

var e: (typeof a)[];
>e : Symbol(e, Decl(parenthesizedTypes.ts, 18, 3), Decl(parenthesizedTypes.ts, 19, 3))
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

var f: (string) => string;
>f : Symbol(f, Decl(parenthesizedTypes.ts, 21, 3), Decl(parenthesizedTypes.ts, 22, 3))
>string : Symbol(string, Decl(parenthesizedTypes.ts, 21, 8))

var f: (string: any) => string;
>f : Symbol(f, Decl(parenthesizedTypes.ts, 21, 3), Decl(parenthesizedTypes.ts, 22, 3))
>string : Symbol(string, Decl(parenthesizedTypes.ts, 22, 8))

var g: [string, string];
>g : Symbol(g, Decl(parenthesizedTypes.ts, 24, 3), Decl(parenthesizedTypes.ts, 25, 3), Decl(parenthesizedTypes.ts, 26, 3))

var g: [(string), string];
>g : Symbol(g, Decl(parenthesizedTypes.ts, 24, 3), Decl(parenthesizedTypes.ts, 25, 3), Decl(parenthesizedTypes.ts, 26, 3))

var g: [(string), (((typeof a)))];
>g : Symbol(g, Decl(parenthesizedTypes.ts, 24, 3), Decl(parenthesizedTypes.ts, 25, 3), Decl(parenthesizedTypes.ts, 26, 3))
>a : Symbol(a, Decl(parenthesizedTypes.ts, 0, 3), Decl(parenthesizedTypes.ts, 1, 3), Decl(parenthesizedTypes.ts, 2, 3), Decl(parenthesizedTypes.ts, 3, 3))

