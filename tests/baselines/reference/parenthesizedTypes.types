//// [tests/cases/conformance/types/specifyingTypes/typeLiterals/parenthesizedTypes.ts] ////

=== parenthesizedTypes.ts ===
var a: string;
>a : string
>  : ^^^^^^

var a: (string);
>a : string
>  : ^^^^^^

var a: ((string) | string | (((string))));
>a : string
>  : ^^^^^^

var a: ((((((((((((((((((((((((((((((((((((((((string))))))))))))))))))))))))))))))))))))))));
>a : string
>  : ^^^^^^

var b: (x: string) => string;
>b : (x: string) => string
>  : ^ ^^      ^^^^^      
>x : string
>  : ^^^^^^

var b: ((x: (string)) => (string));
>b : (x: string) => string
>  : ^ ^^      ^^^^^      
>x : string
>  : ^^^^^^

var c: string[] | number[];
>c : string[] | number[]
>  : ^^^^^^^^^^^^^^^^^^^

var c: (string)[] | (number)[];
>c : string[] | number[]
>  : ^^^^^^^^^^^^^^^^^^^

var c: ((string)[]) | ((number)[]);
>c : string[] | number[]
>  : ^^^^^^^^^^^^^^^^^^^

var d: (((x: string) => string) | ((x: number) => number))[];
>d : (((x: string) => string) | ((x: number) => number))[]
>  : ^^^ ^^      ^^^^^      ^^^^^^ ^^      ^^^^^      ^^^^
>x : string
>  : ^^^^^^
>x : number
>  : ^^^^^^

var d: ({ (x: string): string } | { (x: number): number })[];
>d : (((x: string) => string) | ((x: number) => number))[]
>  : ^^^ ^^      ^^^^^      ^^^^^^ ^^      ^^^^^      ^^^^
>x : string
>  : ^^^^^^
>x : number
>  : ^^^^^^

var d: Array<((x: string) => string) | ((x: number) => number)>;
>d : (((x: string) => string) | ((x: number) => number))[]
>  : ^^^ ^^      ^^^^^      ^^^^^^ ^^      ^^^^^      ^^^^
>x : string
>  : ^^^^^^
>x : number
>  : ^^^^^^

var d: Array<{ (x: string): string } | { (x: number): number }>;
>d : (((x: string) => string) | ((x: number) => number))[]
>  : ^^^ ^^      ^^^^^      ^^^^^^ ^^      ^^^^^      ^^^^
>x : string
>  : ^^^^^^
>x : number
>  : ^^^^^^

var d: (Array<{ (x: string): string } | { (x: number): number }>);
>d : (((x: string) => string) | ((x: number) => number))[]
>  : ^^^ ^^      ^^^^^      ^^^^^^ ^^      ^^^^^      ^^^^
>x : string
>  : ^^^^^^
>x : number
>  : ^^^^^^

var e: typeof a[];
>e : string[]
>  : ^^^^^^^^
>a : string
>  : ^^^^^^

var e: (typeof a)[];
>e : string[]
>  : ^^^^^^^^
>a : string
>  : ^^^^^^

var f: (string) => string;
>f : (string: any) => string
>  : ^      ^^^^^^^^^^      
>string : any

var f: (string: any) => string;
>f : (string: any) => string
>  : ^      ^^^^^^^^^^      
>string : any

var g: [string, string];
>g : [string, string]
>  : ^^^^^^^^^^^^^^^^

var g: [(string), string];
>g : [string, string]
>  : ^^^^^^^^^^^^^^^^

var g: [(string), (((typeof a)))];
>g : [string, string]
>  : ^^^^^^^^^^^^^^^^
>a : string
>  : ^^^^^^

