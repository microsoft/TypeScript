//// [tests/cases/compiler/parseInvalidNullableTypes.ts] ////

=== parseInvalidNullableTypes.ts ===
function f1(a: string): a is ?string {
>f1 : (a: string) => a is string | null
>   : ^ ^^      ^^^^^              ^^^^
>a : string
>  : ^^^^^^

    return true;
>true : true
>     : ^^^^
}

function f2(a: string?) {}
>f2 : (a: string | null) => void
>   : ^ ^^         ^^^^^^^^^^^^^
>a : string | null
>  : ^^^^^^^^^^^^^

function f3(a: number?) {}
>f3 : (a: number | null) => void
>   : ^ ^^         ^^^^^^^^^^^^^
>a : number | null
>  : ^^^^^^^^^^^^^

function f4(a: ?string) {}
>f4 : (a: string | null) => void
>   : ^ ^^         ^^^^^^^^^^^^^
>a : string | null
>  : ^^^^^^^^^^^^^

function f5(a: ?number) {}
>f5 : (a: number | null) => void
>   : ^ ^^         ^^^^^^^^^^^^^
>a : number | null
>  : ^^^^^^^^^^^^^

function f6(a: string): ?string {
>f6 : (a: string) => string | null
>   : ^ ^^      ^^^^^         ^^^^
>a : string
>  : ^^^^^^

    return true;
>true : true
>     : ^^^^
}

const a = 1 as any?;
>a : any
>  : ^^^
>1 as any? : any
>          : ^^^
>1 : 1
>  : ^

const b: number? = 1;
>b : number | null
>  : ^^^^^^^^^^^^^
>1 : 1
>  : ^

const c = 1 as ?any;
>c : any
>  : ^^^
>1 as ?any : any
>          : ^^^
>1 : 1
>  : ^

const d: ?number = 1;
>d : number | null
>  : ^^^^^^^^^^^^^
>1 : 1
>  : ^

let e: unknown?;
>e : unknown
>  : ^^^^^^^

let f: never?;
>f : null
>  : ^^^^

let g: void?;
>g : void | null
>  : ^^^^^^^^^^^

let h: undefined?;
>h : null | undefined
>  : ^^^^^^^^^^^^^^^^

