//// [tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.objectLiteralMethods.es2018.ts] ////

=== methodIsOk.ts ===
const o1 = {
>o1 : { f(): AsyncGenerator<never, void, unknown>; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
};
=== awaitMethodNameIsOk.ts ===
const o2 = {
>o2 : { await(): AsyncGenerator<never, void, unknown>; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * await() {    }} : { await(): AsyncGenerator<never, void, unknown>; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * await() {
>await : () => AsyncGenerator<never, void, unknown>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
};
=== yieldMethodNameIsOk.ts ===
const o3 = {
>o3 : { yield(): AsyncGenerator<never, void, unknown>; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * yield() {    }} : { yield(): AsyncGenerator<never, void, unknown>; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * yield() {
>yield : () => AsyncGenerator<never, void, unknown>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    }
};
=== awaitParameterIsError.ts ===
const o4 = {
>o4 : { f(await: any): AsyncGenerator<never, void, unknown>; }
>   : ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f(await) {    }} : { f(await: any): AsyncGenerator<never, void, unknown>; }
>                              : ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f(await) {
>f : (await: any) => AsyncGenerator<never, void, unknown>
>  : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>await : any
>      : ^^^
    }
};
=== yieldParameterIsError.ts ===
const o5 = {
>o5 : { f(yield: any): AsyncGenerator<never, void, unknown>; }
>   : ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f(yield) {    }} : { f(yield: any): AsyncGenerator<never, void, unknown>; }
>                              : ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f(yield) {
>f : (yield: any) => AsyncGenerator<never, void, unknown>
>  : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>yield : any
>      : ^^^
    }
};
=== awaitInParameterInitializerIsError.ts ===
const o6 = {
>o6 : { f(a?: number): AsyncGenerator<never, void, unknown>; }
>   : ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f(a = await 1) {    }} : { f(a?: number): AsyncGenerator<never, void, unknown>; }
>                                    : ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f(a = await 1) {
>f : (a?: number) => AsyncGenerator<never, void, unknown>
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>await 1 : 1
>        : ^
>1 : 1
>  : ^
    }
};
=== yieldInParameterInitializerIsError.ts ===
const o7 = {
>o7 : { f(a?: any): AsyncGenerator<never, void, unknown>; }
>   : ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f(a = yield) {    }} : { f(a?: any): AsyncGenerator<never, void, unknown>; }
>                                  : ^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f(a = yield) {
>f : (a?: any) => AsyncGenerator<never, void, unknown>
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : any
>  : ^^^
>yield : any
>      : ^^^
    }
};
=== nestedAsyncGeneratorIsOk.ts ===
const o8 = {
>o8 : { f(): AsyncGenerator<never, void, unknown>; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        async function * g() {        }    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        async function * g() {
>g : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        }
    }
};
=== nestedFunctionDeclarationNamedYieldIsError.ts ===
const o9 = {
>o9 : { f(): AsyncGenerator<never, void, unknown>; }
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        function yield() {        }    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        function yield() {
>yield : () => void
>      : ^^^^^^^^^^
        }
    }
};
=== nestedFunctionExpressionNamedYieldIsError.ts ===
const o10 = {
>o10 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        const x = function yield() {        };    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        const x = function yield() {
>x : () => void
>  : ^^^^^^^^^^
>function yield() {        } : () => void
>                            : ^^^^^^^^^^
>yield : () => void
>      : ^^^^^^^^^^

        };
    }
};
=== nestedFunctionDeclarationNamedAwaitIsError.ts ===
const o11 = {
>o11 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        function await() {        }    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        function await() {
>await : () => void
>      : ^^^^^^^^^^
        }
    }
};
=== nestedFunctionExpressionNamedAwaitIsError.ts ===
const o12 = {
>o12 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        const x = function await() {        };    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        const x = function await() {
>x : () => void
>  : ^^^^^^^^^^
>function await() {        } : () => void
>                            : ^^^^^^^^^^
>await : () => void
>      : ^^^^^^^^^^

        };
    }
};
=== yieldIsOk.ts ===
const o13 = {
>o13 : { f(): AsyncGenerator<any, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        yield;    }} : { f(): AsyncGenerator<any, void, unknown>; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<any, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        yield;
>yield : any
>      : ^^^
    }
};
=== yieldWithValueIsOk.ts ===
const o14 = {
>o14 : { f(): AsyncGenerator<number, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        yield 1;    }} : { f(): AsyncGenerator<number, void, unknown>; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<number, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        yield 1;
>yield 1 : any
>        : ^^^
>1 : 1
>  : ^
    }
};
=== yieldStarMissingValueIsError.ts ===
const o15 = {
>o15 : { f(): AsyncGenerator<any, void, any>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        yield *;    }} : { f(): AsyncGenerator<any, void, any>; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<any, void, any>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        yield *;
>yield * : any
>        : ^^^
> : any
> : ^^^
    }
};
=== yieldStarWithValueIsOk.ts ===
const o16 = {
>o16 : { f(): AsyncGenerator<any, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        yield * [];    }} : { f(): AsyncGenerator<any, void, unknown>; }
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<any, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        yield * [];
>yield * [] : any
>           : ^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
    }
};
=== awaitWithValueIsOk.ts ===
const o17 = {
>o17 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        await 1;    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        await 1;
>await 1 : 1
>        : ^
>1 : 1
>  : ^
    }
};
=== awaitMissingValueIsError.ts ===
const o18 = {
>o18 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        await;    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        await;
>await : any
>      : ^^^
> : any
> : ^^^
    }
};
=== awaitAsTypeIsOk.ts ===
interface await {}
const o19 = {
>o19 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        let x: await;    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        let x: await;
>x : await
>  : ^^^^^
    }
};
=== yieldAsTypeIsOk.ts ===
interface yield {}
const o20 = {
>o20 : { f(): AsyncGenerator<never, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        let x: yield;    }} : { f(): AsyncGenerator<never, void, unknown>; }
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        let x: yield;
>x : yield
>  : ^^^^^
    }
};
=== yieldInNestedComputedPropertyIsOk.ts ===
const o21 = {
>o21 : { f(): AsyncGenerator<any, void, unknown>; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * f() {        const x = { [yield]: 1 };    }} : { f(): AsyncGenerator<any, void, unknown>; }
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * f() {
>f : () => AsyncGenerator<any, void, unknown>
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        const x = { [yield]: 1 };
>x : { [x: number]: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^
>{ [yield]: 1 } : { [x: number]: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^
>[yield] : number
>        : ^^^^^^
>yield : any
>      : ^^^
>1 : 1
>  : ^
    }
};
=== asyncGeneratorGetAccessorIsError.ts ===
const o22 = {
>o22 : { get(): any; x(): number; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    async * get x() {        return 1;    }} : { get(): any; x(): number; }
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    async * get x() {
>get : () => any
>    : ^^^^^^^^^
>x : () => number
>  : ^^^^^^^^^^^^

        return 1;
>1 : 1
>  : ^
    }
};
=== asyncGeneratorSetAccessorIsError.ts ===
const o23 = {
>o23 : { set(): any; x(value: number): void; }
>    : ^^^^^^^^^^^^^^^^     ^^      ^^^^^^^^^^
>{    async * set x(value: number) {    }} : { set(): any; x(value: number): void; }
>                                          : ^^^^^^^^^^^^^^^^     ^^      ^^^^^^^^^^

    async * set x(value: number) {
>set : () => any
>    : ^^^^^^^^^
>x : (value: number) => void
>  : ^     ^^      ^^^^^^^^^
>value : number
>      : ^^^^^^
    }
};
=== asyncGeneratorPropertyIsError.ts ===
const o24 = {
>o24 : { x(): 1; }
>    : ^^^^^^^ ^^^
>{    async * x: 1;} : { x(): 1; }
>                    : ^^^^^^^ ^^^

    async * x: 1;
>x : () => 1
>  : ^^^^^^ 

};

