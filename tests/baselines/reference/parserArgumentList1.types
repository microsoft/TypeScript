//// [tests/cases/conformance/parser/ecmascript5/parserArgumentList1.ts] ////

=== parserArgumentList1.ts ===
export function removeClass (node:HTMLElement, className:string) {
>removeClass : (node: HTMLElement, className: string) => void
>            : ^    ^^           ^^         ^^      ^^^^^^^^^
>node : HTMLElement
>     : ^^^^^^^^^^^
>className : string
>          : ^^^^^^

	node.className = node.className.replace(_classNameRegexp(className), function (everything, leftDelimiter, name, rightDelimiter) {
>node.className = node.className.replace(_classNameRegexp(className), function (everything, leftDelimiter, name, rightDelimiter) {		return leftDelimiter.length + rightDelimiter.length === 2 ? ' ' : '';	}) : string
>                                                                                                                                                                                                            : ^^^^^^
>node.className : string
>               : ^^^^^^
>node : HTMLElement
>     : ^^^^^^^^^^^
>className : string
>          : ^^^^^^
>node.className.replace(_classNameRegexp(className), function (everything, leftDelimiter, name, rightDelimiter) {		return leftDelimiter.length + rightDelimiter.length === 2 ? ' ' : '';	}) : string
>                                                                                                                                                                                           : ^^^^^^
>node.className.replace : { (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; }
>                       : ^^^           ^^               ^^            ^^      ^^^      ^^^           ^^               ^^        ^^                                             ^^^      ^^^
>node.className : string
>               : ^^^^^^
>node : HTMLElement
>     : ^^^^^^^^^^^
>className : string
>          : ^^^^^^
>replace : { (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; }
>        : ^^^           ^^               ^^            ^^      ^^^      ^^^           ^^               ^^        ^^                                             ^^^      ^^^
>_classNameRegexp(className) : any
>                            : ^^^
>_classNameRegexp : any
>                 : ^^^
>className : string
>          : ^^^^^^
>function (everything, leftDelimiter, name, rightDelimiter) {		return leftDelimiter.length + rightDelimiter.length === 2 ? ' ' : '';	} : (everything: string, leftDelimiter: any, name: any, rightDelimiter: any) => " " | ""
>                                                                                                                                      : ^          ^^^^^^^^^^             ^^^^^^^    ^^^^^^^              ^^^^^^^^^^^^^^^^^^
>everything : string
>           : ^^^^^^
>leftDelimiter : any
>              : ^^^
>name : any
>     : ^^^
>rightDelimiter : any
>               : ^^^

		return leftDelimiter.length + rightDelimiter.length === 2 ? ' ' : '';
>leftDelimiter.length + rightDelimiter.length === 2 ? ' ' : '' : "" | " "
>                                                              : ^^^^^^^^
>leftDelimiter.length + rightDelimiter.length === 2 : boolean
>                                                   : ^^^^^^^
>leftDelimiter.length + rightDelimiter.length : any
>                                             : ^^^
>leftDelimiter.length : any
>                     : ^^^
>leftDelimiter : any
>              : ^^^
>length : any
>       : ^^^
>rightDelimiter.length : any
>                      : ^^^
>rightDelimiter : any
>               : ^^^
>length : any
>       : ^^^
>2 : 2
>  : ^
>' ' : " "
>    : ^^^
>'' : ""
>   : ^^

	});
}
