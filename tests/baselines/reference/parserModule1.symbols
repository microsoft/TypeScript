//// [tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModule1.ts] ////

=== parserModule1.ts ===
    export namespace CompilerDiagnostics {
>CompilerDiagnostics : Symbol(CompilerDiagnostics, Decl(parserModule1.ts, 0, 0))

        export var debug = false;
>debug : Symbol(debug, Decl(parserModule1.ts, 1, 18))

        export interface IDiagnosticWriter {
>IDiagnosticWriter : Symbol(IDiagnosticWriter, Decl(parserModule1.ts, 1, 33))

            Alert(output: string): void;
>Alert : Symbol(IDiagnosticWriter.Alert, Decl(parserModule1.ts, 2, 44))
>output : Symbol(output, Decl(parserModule1.ts, 3, 18))
        }

        export var diagnosticWriter: IDiagnosticWriter = null;
>diagnosticWriter : Symbol(diagnosticWriter, Decl(parserModule1.ts, 6, 18))
>IDiagnosticWriter : Symbol(IDiagnosticWriter, Decl(parserModule1.ts, 1, 33))

        export var analysisPass: number = 0;
>analysisPass : Symbol(analysisPass, Decl(parserModule1.ts, 8, 18))

        export function Alert(output: string) {
>Alert : Symbol(Alert, Decl(parserModule1.ts, 8, 44))
>output : Symbol(output, Decl(parserModule1.ts, 10, 30))

            if (diagnosticWriter) {
>diagnosticWriter : Symbol(diagnosticWriter, Decl(parserModule1.ts, 6, 18))

                diagnosticWriter.Alert(output);
>diagnosticWriter.Alert : Symbol(IDiagnosticWriter.Alert, Decl(parserModule1.ts, 2, 44))
>diagnosticWriter : Symbol(diagnosticWriter, Decl(parserModule1.ts, 6, 18))
>Alert : Symbol(IDiagnosticWriter.Alert, Decl(parserModule1.ts, 2, 44))
>output : Symbol(output, Decl(parserModule1.ts, 10, 30))
            }
        }

        export function debugPrint(s: string) {
>debugPrint : Symbol(debugPrint, Decl(parserModule1.ts, 14, 9))
>s : Symbol(s, Decl(parserModule1.ts, 16, 35))

            if (debug) {
>debug : Symbol(debug, Decl(parserModule1.ts, 1, 18))

                Alert(s);
>Alert : Symbol(Alert, Decl(parserModule1.ts, 8, 44))
>s : Symbol(s, Decl(parserModule1.ts, 16, 35))
            }
        }

        export function assert(condition: boolean, s: string) {
>assert : Symbol(assert, Decl(parserModule1.ts, 20, 9))
>condition : Symbol(condition, Decl(parserModule1.ts, 22, 31))
>s : Symbol(s, Decl(parserModule1.ts, 22, 50))

            if (debug) {
>debug : Symbol(debug, Decl(parserModule1.ts, 1, 18))

                if (!condition) {
>condition : Symbol(condition, Decl(parserModule1.ts, 22, 31))

                    Alert(s);
>Alert : Symbol(Alert, Decl(parserModule1.ts, 8, 44))
>s : Symbol(s, Decl(parserModule1.ts, 22, 50))
                }
            }
        }

    }
