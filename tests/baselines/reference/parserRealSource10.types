//// [tests/cases/conformance/parser/ecmascript5/parserRealSource10.ts] ////

=== parserRealSource10.ts ===
// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
// See LICENSE.txt in the project root for complete license information.

///<reference path='typescript.ts' />

module TypeScript {
>TypeScript : typeof TypeScript
>           : ^^^^^^^^^^^^^^^^^

    export enum TokenID {
>TokenID : TokenID
>        : ^^^^^^^

        // Keywords
        Any,
>Any : TokenID.Any
>    : ^^^^^^^^^^^

        Bool,
>Bool : TokenID.Bool
>     : ^^^^^^^^^^^^

        Break,
>Break : TokenID.Break
>      : ^^^^^^^^^^^^^

        Case,
>Case : TokenID.Case
>     : ^^^^^^^^^^^^

        Catch,
>Catch : TokenID.Catch
>      : ^^^^^^^^^^^^^

        Class,
>Class : TokenID.Class
>      : ^^^^^^^^^^^^^

        Const,
>Const : TokenID.Const
>      : ^^^^^^^^^^^^^

        Continue,
>Continue : TokenID.Continue
>         : ^^^^^^^^^^^^^^^^

        Debugger,
>Debugger : TokenID.Debugger
>         : ^^^^^^^^^^^^^^^^

        Default,
>Default : TokenID.Default
>        : ^^^^^^^^^^^^^^^

        Delete,
>Delete : TokenID.Delete
>       : ^^^^^^^^^^^^^^

        Do,
>Do : TokenID.Do
>   : ^^^^^^^^^^

        Else,
>Else : TokenID.Else
>     : ^^^^^^^^^^^^

        Enum,
>Enum : TokenID.Enum
>     : ^^^^^^^^^^^^

        Export,
>Export : TokenID.Export
>       : ^^^^^^^^^^^^^^

        Extends,
>Extends : TokenID.Extends
>        : ^^^^^^^^^^^^^^^

        Declare,
>Declare : TokenID.Declare
>        : ^^^^^^^^^^^^^^^

        False,
>False : TokenID.False
>      : ^^^^^^^^^^^^^

        Finally,
>Finally : TokenID.Finally
>        : ^^^^^^^^^^^^^^^

        For,
>For : TokenID.For
>    : ^^^^^^^^^^^

        Function,
>Function : TokenID.Function
>         : ^^^^^^^^^^^^^^^^

        Constructor,
>Constructor : TokenID.Constructor
>            : ^^^^^^^^^^^^^^^^^^^

        Get,
>Get : TokenID.Get
>    : ^^^^^^^^^^^

        If,
>If : TokenID.If
>   : ^^^^^^^^^^

        Implements,
>Implements : TokenID.Implements
>           : ^^^^^^^^^^^^^^^^^^

        Import,
>Import : TokenID.Import
>       : ^^^^^^^^^^^^^^

        In,
>In : TokenID.In
>   : ^^^^^^^^^^

        InstanceOf,
>InstanceOf : TokenID.InstanceOf
>           : ^^^^^^^^^^^^^^^^^^

        Interface,
>Interface : TokenID.Interface
>          : ^^^^^^^^^^^^^^^^^

        Let,
>Let : TokenID.Let
>    : ^^^^^^^^^^^

        Module,
>Module : TokenID.Module
>       : ^^^^^^^^^^^^^^

        New,
>New : TokenID.New
>    : ^^^^^^^^^^^

        Number,
>Number : TokenID.Number
>       : ^^^^^^^^^^^^^^

        Null,
>Null : TokenID.Null
>     : ^^^^^^^^^^^^

        Package,
>Package : TokenID.Package
>        : ^^^^^^^^^^^^^^^

        Private,
>Private : TokenID.Private
>        : ^^^^^^^^^^^^^^^

        Protected,
>Protected : TokenID.Protected
>          : ^^^^^^^^^^^^^^^^^

        Public,
>Public : TokenID.Public
>       : ^^^^^^^^^^^^^^

        Return,
>Return : TokenID.Return
>       : ^^^^^^^^^^^^^^

        Set,
>Set : TokenID.Set
>    : ^^^^^^^^^^^

        Static,
>Static : TokenID.Static
>       : ^^^^^^^^^^^^^^

        String,
>String : TokenID.String
>       : ^^^^^^^^^^^^^^

        Super,
>Super : TokenID.Super
>      : ^^^^^^^^^^^^^

        Switch,
>Switch : TokenID.Switch
>       : ^^^^^^^^^^^^^^

        This,
>This : TokenID.This
>     : ^^^^^^^^^^^^

        Throw,
>Throw : TokenID.Throw
>      : ^^^^^^^^^^^^^

        True,
>True : TokenID.True
>     : ^^^^^^^^^^^^

        Try,
>Try : TokenID.Try
>    : ^^^^^^^^^^^

        TypeOf,
>TypeOf : TokenID.TypeOf
>       : ^^^^^^^^^^^^^^

        Var,
>Var : TokenID.Var
>    : ^^^^^^^^^^^

        Void,
>Void : TokenID.Void
>     : ^^^^^^^^^^^^

        With,
>With : TokenID.With
>     : ^^^^^^^^^^^^

        While,
>While : TokenID.While
>      : ^^^^^^^^^^^^^

        Yield,
>Yield : TokenID.Yield
>      : ^^^^^^^^^^^^^

        // Punctuation
        Semicolon,
>Semicolon : TokenID.Semicolon
>          : ^^^^^^^^^^^^^^^^^

        OpenParen,
>OpenParen : TokenID.OpenParen
>          : ^^^^^^^^^^^^^^^^^

        CloseParen,
>CloseParen : TokenID.CloseParen
>           : ^^^^^^^^^^^^^^^^^^

        OpenBracket,
>OpenBracket : TokenID.OpenBracket
>            : ^^^^^^^^^^^^^^^^^^^

        CloseBracket,
>CloseBracket : TokenID.CloseBracket
>             : ^^^^^^^^^^^^^^^^^^^^

        OpenBrace,
>OpenBrace : TokenID.OpenBrace
>          : ^^^^^^^^^^^^^^^^^

        CloseBrace,
>CloseBrace : TokenID.CloseBrace
>           : ^^^^^^^^^^^^^^^^^^

        Comma,
>Comma : TokenID.Comma
>      : ^^^^^^^^^^^^^

        Equals,
>Equals : TokenID.Equals
>       : ^^^^^^^^^^^^^^

        PlusEquals,
>PlusEquals : TokenID.PlusEquals
>           : ^^^^^^^^^^^^^^^^^^

        MinusEquals,
>MinusEquals : TokenID.MinusEquals
>            : ^^^^^^^^^^^^^^^^^^^

        AsteriskEquals,
>AsteriskEquals : TokenID.AsteriskEquals
>               : ^^^^^^^^^^^^^^^^^^^^^^

        SlashEquals,
>SlashEquals : TokenID.SlashEquals
>            : ^^^^^^^^^^^^^^^^^^^

        PercentEquals,
>PercentEquals : TokenID.PercentEquals
>              : ^^^^^^^^^^^^^^^^^^^^^

        AmpersandEquals,
>AmpersandEquals : TokenID.AmpersandEquals
>                : ^^^^^^^^^^^^^^^^^^^^^^^

        CaretEquals,
>CaretEquals : TokenID.CaretEquals
>            : ^^^^^^^^^^^^^^^^^^^

        BarEquals,
>BarEquals : TokenID.BarEquals
>          : ^^^^^^^^^^^^^^^^^

        LessThanLessThanEquals,
>LessThanLessThanEquals : TokenID.LessThanLessThanEquals
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        GreaterThanGreaterThanEquals,
>GreaterThanGreaterThanEquals : TokenID.GreaterThanGreaterThanEquals
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        GreaterThanGreaterThanGreaterThanEquals,
>GreaterThanGreaterThanGreaterThanEquals : TokenID.GreaterThanGreaterThanGreaterThanEquals
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Question,
>Question : TokenID.Question
>         : ^^^^^^^^^^^^^^^^

        Colon,
>Colon : TokenID.Colon
>      : ^^^^^^^^^^^^^

        BarBar,
>BarBar : TokenID.BarBar
>       : ^^^^^^^^^^^^^^

        AmpersandAmpersand,
>AmpersandAmpersand : TokenID.AmpersandAmpersand
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^

        Bar,
>Bar : TokenID.Bar
>    : ^^^^^^^^^^^

        Caret,
>Caret : TokenID.Caret
>      : ^^^^^^^^^^^^^

        And,
>And : TokenID.And
>    : ^^^^^^^^^^^

        EqualsEquals,
>EqualsEquals : TokenID.EqualsEquals
>             : ^^^^^^^^^^^^^^^^^^^^

        ExclamationEquals,
>ExclamationEquals : TokenID.ExclamationEquals
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^

        EqualsEqualsEquals,
>EqualsEqualsEquals : TokenID.EqualsEqualsEquals
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^

        ExclamationEqualsEquals,
>ExclamationEqualsEquals : TokenID.ExclamationEqualsEquals
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        LessThan,
>LessThan : TokenID.LessThan
>         : ^^^^^^^^^^^^^^^^

        LessThanEquals,
>LessThanEquals : TokenID.LessThanEquals
>               : ^^^^^^^^^^^^^^^^^^^^^^

        GreaterThan,
>GreaterThan : TokenID.GreaterThan
>            : ^^^^^^^^^^^^^^^^^^^

        GreaterThanEquals,
>GreaterThanEquals : TokenID.GreaterThanEquals
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^

        LessThanLessThan,
>LessThanLessThan : TokenID.LessThanLessThan
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^

        GreaterThanGreaterThan,
>GreaterThanGreaterThan : TokenID.GreaterThanGreaterThan
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        GreaterThanGreaterThanGreaterThan,
>GreaterThanGreaterThanGreaterThan : TokenID.GreaterThanGreaterThanGreaterThan
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Plus,
>Plus : TokenID.Plus
>     : ^^^^^^^^^^^^

        Minus,
>Minus : TokenID.Minus
>      : ^^^^^^^^^^^^^

        Asterisk,
>Asterisk : TokenID.Asterisk
>         : ^^^^^^^^^^^^^^^^

        Slash,
>Slash : TokenID.Slash
>      : ^^^^^^^^^^^^^

        Percent,
>Percent : TokenID.Percent
>        : ^^^^^^^^^^^^^^^

        Tilde,
>Tilde : TokenID.Tilde
>      : ^^^^^^^^^^^^^

        Exclamation,
>Exclamation : TokenID.Exclamation
>            : ^^^^^^^^^^^^^^^^^^^

        PlusPlus,
>PlusPlus : TokenID.PlusPlus
>         : ^^^^^^^^^^^^^^^^

        MinusMinus,
>MinusMinus : TokenID.MinusMinus
>           : ^^^^^^^^^^^^^^^^^^

        Dot,
>Dot : TokenID.Dot
>    : ^^^^^^^^^^^

        DotDotDot,
>DotDotDot : TokenID.DotDotDot
>          : ^^^^^^^^^^^^^^^^^

        Error,
>Error : TokenID.Error
>      : ^^^^^^^^^^^^^

        EndOfFile,
>EndOfFile : TokenID.EndOfFile
>          : ^^^^^^^^^^^^^^^^^

        EqualsGreaterThan,
>EqualsGreaterThan : TokenID.EqualsGreaterThan
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^

        Identifier,
>Identifier : TokenID.Identifier
>           : ^^^^^^^^^^^^^^^^^^

        StringLiteral,
>StringLiteral : TokenID.StringLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^

        RegularExpressionLiteral,
>RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        NumberLiteral,
>NumberLiteral : TokenID.NumberLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^

        Whitespace,
>Whitespace : TokenID.Whitespace
>           : ^^^^^^^^^^^^^^^^^^

        Comment,
>Comment : TokenID.Comment
>        : ^^^^^^^^^^^^^^^

        Lim,
>Lim : TokenID.Lim
>    : ^^^^^^^^^^^

        LimFixed = EqualsGreaterThan,
>LimFixed : TokenID.EqualsGreaterThan
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>EqualsGreaterThan : TokenID.EqualsGreaterThan
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^

        LimKeyword = Yield,
>LimKeyword : TokenID.Yield
>           : ^^^^^^^^^^^^^
>Yield : TokenID.Yield
>      : ^^^^^^^^^^^^^
    }

    export var tokenTable = new TokenInfo[];
>tokenTable : any
>           : ^^^
>new TokenInfo[] : any
>                : ^^^
>TokenInfo[] : any
>            : ^^^
>TokenInfo : typeof TokenInfo
>          : ^^^^^^^^^^^^^^^^
> : any
> : ^^^

    export var nodeTypeTable = new string[];
>nodeTypeTable : any
>              : ^^^
>new string[] : any
>             : ^^^
>string[] : any
>         : ^^^
>string : any
>       : ^^^
> : any
> : ^^^

    export var nodeTypeToTokTable = new number[];
>nodeTypeToTokTable : any
>                   : ^^^
>new number[] : any
>             : ^^^
>number[] : any
>         : ^^^
>number : any
>       : ^^^
> : any
> : ^^^

    export var noRegexTable = new boolean[];
>noRegexTable : any
>             : ^^^
>new boolean[] : any
>              : ^^^
>boolean[] : any
>          : ^^^
>boolean : any
>        : ^^^
> : any
> : ^^^

    noRegexTable[TokenID.Identifier] = true;
>noRegexTable[TokenID.Identifier] = true : true
>                                        : ^^^^
>noRegexTable[TokenID.Identifier] : any
>                                 : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.Identifier : TokenID.Identifier
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Identifier : TokenID.Identifier
>           : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.StringLiteral] = true;
>noRegexTable[TokenID.StringLiteral] = true : true
>                                           : ^^^^
>noRegexTable[TokenID.StringLiteral] : any
>                                    : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.StringLiteral : TokenID.StringLiteral
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>StringLiteral : TokenID.StringLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.NumberLiteral] = true;
>noRegexTable[TokenID.NumberLiteral] = true : true
>                                           : ^^^^
>noRegexTable[TokenID.NumberLiteral] : any
>                                    : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.NumberLiteral : TokenID.NumberLiteral
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>NumberLiteral : TokenID.NumberLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.RegularExpressionLiteral] = true;
>noRegexTable[TokenID.RegularExpressionLiteral] = true : true
>                                                      : ^^^^
>noRegexTable[TokenID.RegularExpressionLiteral] : any
>                                               : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.This] = true;
>noRegexTable[TokenID.This] = true : true
>                                  : ^^^^
>noRegexTable[TokenID.This] : any
>                           : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.This : TokenID.This
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>This : TokenID.This
>     : ^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.PlusPlus] = true;
>noRegexTable[TokenID.PlusPlus] = true : true
>                                      : ^^^^
>noRegexTable[TokenID.PlusPlus] : any
>                               : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.PlusPlus : TokenID.PlusPlus
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>PlusPlus : TokenID.PlusPlus
>         : ^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.MinusMinus] = true;
>noRegexTable[TokenID.MinusMinus] = true : true
>                                        : ^^^^
>noRegexTable[TokenID.MinusMinus] : any
>                                 : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.MinusMinus : TokenID.MinusMinus
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>MinusMinus : TokenID.MinusMinus
>           : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.CloseParen] = true;
>noRegexTable[TokenID.CloseParen] = true : true
>                                        : ^^^^
>noRegexTable[TokenID.CloseParen] : any
>                                 : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.CloseParen : TokenID.CloseParen
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CloseParen : TokenID.CloseParen
>           : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.CloseBracket] = true;
>noRegexTable[TokenID.CloseBracket] = true : true
>                                          : ^^^^
>noRegexTable[TokenID.CloseBracket] : any
>                                   : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.CloseBracket : TokenID.CloseBracket
>                     : ^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CloseBracket : TokenID.CloseBracket
>             : ^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.CloseBrace] = true;
>noRegexTable[TokenID.CloseBrace] = true : true
>                                        : ^^^^
>noRegexTable[TokenID.CloseBrace] : any
>                                 : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.CloseBrace : TokenID.CloseBrace
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CloseBrace : TokenID.CloseBrace
>           : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.True] = true;
>noRegexTable[TokenID.True] = true : true
>                                  : ^^^^
>noRegexTable[TokenID.True] : any
>                           : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.True : TokenID.True
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>True : TokenID.True
>     : ^^^^^^^^^^^^
>true : true
>     : ^^^^

    noRegexTable[TokenID.False] = true;
>noRegexTable[TokenID.False] = true : true
>                                   : ^^^^
>noRegexTable[TokenID.False] : any
>                            : ^^^
>noRegexTable : any
>             : ^^^
>TokenID.False : TokenID.False
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>False : TokenID.False
>      : ^^^^^^^^^^^^^
>true : true
>     : ^^^^

    export enum OperatorPrecedence {
>OperatorPrecedence : OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^

        None,
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^

        Comma,
>Comma : OperatorPrecedence.Comma
>      : ^^^^^^^^^^^^^^^^^^^^^^^^

        Assignment,
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Conditional,
>Conditional : OperatorPrecedence.Conditional
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        LogicalOr,
>LogicalOr : OperatorPrecedence.LogicalOr
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        LogicalAnd,
>LogicalAnd : OperatorPrecedence.LogicalAnd
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        BitwiseOr,
>BitwiseOr : OperatorPrecedence.BitwiseOr
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        BitwiseExclusiveOr,
>BitwiseExclusiveOr : OperatorPrecedence.BitwiseExclusiveOr
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        BitwiseAnd,
>BitwiseAnd : OperatorPrecedence.BitwiseAnd
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Equality,
>Equality : OperatorPrecedence.Equality
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Relational,
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Shift,
>Shift : OperatorPrecedence.Shift
>      : ^^^^^^^^^^^^^^^^^^^^^^^^

        Additive,
>Additive : OperatorPrecedence.Additive
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Multiplicative,
>Multiplicative : OperatorPrecedence.Multiplicative
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        Unary,
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^

        Lim
>Lim : OperatorPrecedence.Lim
>    : ^^^^^^^^^^^^^^^^^^^^^^
    }

    export enum Reservation {
>Reservation : Reservation
>            : ^^^^^^^^^^^

        None = 0,
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>0 : 0
>  : ^

        Javascript = 1,
>Javascript : Reservation.Javascript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^

        JavascriptFuture = 2,
>JavascriptFuture : Reservation.JavascriptFuture
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^

        TypeScript = 4,
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>4 : 4
>  : ^

        JavascriptFutureStrict = 8,
>JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>8 : 8
>  : ^

        TypeScriptAndJS = Javascript | TypeScript,
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Javascript | TypeScript : number
>                        : ^^^^^^
>Javascript : Reservation.Javascript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^

        TypeScriptAndJSFuture = JavascriptFuture | TypeScript,
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>JavascriptFuture | TypeScript : number
>                              : ^^^^^^
>JavascriptFuture : Reservation.JavascriptFuture
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^

        TypeScriptAndJSFutureStrict = JavascriptFutureStrict | TypeScript,
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>JavascriptFutureStrict | TypeScript : number
>                                    : ^^^^^^
>JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
    }

    export class TokenInfo {
>TokenInfo : TokenInfo
>          : ^^^^^^^^^

        constructor (public tokenId: TokenID, public reservation: Reservation,
>tokenId : TokenID
>        : ^^^^^^^
>reservation : Reservation
>            : ^^^^^^^^^^^

                    public binopPrecedence: number, public binopNodeType: number,
>binopPrecedence : number
>                : ^^^^^^
>binopNodeType : number
>              : ^^^^^^

                    public unopPrecedence: number, public unopNodeType: number,
>unopPrecedence : number
>               : ^^^^^^
>unopNodeType : number
>             : ^^^^^^

                    public text: string, public ers: ErrorRecoverySet) { }
>text : string
>     : ^^^^^^
>ers : ErrorRecoverySet
>    : ^^^^^^^^^^^^^^^^
    }

    function setTokenInfo(tokenId: TokenID, reservation: number, binopPrecedence: number,
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>tokenId : TokenID
>        : ^^^^^^^
>reservation : number
>            : ^^^^^^
>binopPrecedence : number
>                : ^^^^^^

        binopNodeType: number, unopPrecedence: number, unopNodeType: number,
>binopNodeType : number
>              : ^^^^^^
>unopPrecedence : number
>               : ^^^^^^
>unopNodeType : number
>             : ^^^^^^

        text: string, ers: ErrorRecoverySet) {
>text : string
>     : ^^^^^^
>ers : ErrorRecoverySet
>    : ^^^^^^^^^^^^^^^^

        if (tokenId !== undefined) {
>tokenId !== undefined : boolean
>                      : ^^^^^^^
>tokenId : TokenID
>        : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

            tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence,
>tokenTable[tokenId] = new TokenInfo(tokenId, reservation, binopPrecedence,                                              binopNodeType, unopPrecedence, unopNodeType, text, ers) : TokenInfo
>                                                                                                                                                                                : ^^^^^^^^^
>tokenTable[tokenId] : any
>                    : ^^^
>tokenTable : any
>           : ^^^
>tokenId : TokenID
>        : ^^^^^^^
>new TokenInfo(tokenId, reservation, binopPrecedence,                                              binopNodeType, unopPrecedence, unopNodeType, text, ers) : TokenInfo
>                                                                                                                                                          : ^^^^^^^^^
>TokenInfo : typeof TokenInfo
>          : ^^^^^^^^^^^^^^^^
>tokenId : TokenID
>        : ^^^^^^^
>reservation : number
>            : ^^^^^^
>binopPrecedence : number
>                : ^^^^^^

                                              binopNodeType, unopPrecedence, unopNodeType, text, ers);
>binopNodeType : number
>              : ^^^^^^
>unopPrecedence : number
>               : ^^^^^^
>unopNodeType : number
>             : ^^^^^^
>text : string
>     : ^^^^^^
>ers : ErrorRecoverySet
>    : ^^^^^^^^^^^^^^^^

            if (binopNodeType != NodeType.None) {
>binopNodeType != NodeType.None : boolean
>                               : ^^^^^^^
>binopNodeType : number
>              : ^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^

                nodeTypeTable[binopNodeType] = text;
>nodeTypeTable[binopNodeType] = text : string
>                                    : ^^^^^^
>nodeTypeTable[binopNodeType] : any
>                             : ^^^
>nodeTypeTable : any
>              : ^^^
>binopNodeType : number
>              : ^^^^^^
>text : string
>     : ^^^^^^

                nodeTypeToTokTable[binopNodeType] = tokenId;
>nodeTypeToTokTable[binopNodeType] = tokenId : TokenID
>                                            : ^^^^^^^
>nodeTypeToTokTable[binopNodeType] : any
>                                  : ^^^
>nodeTypeToTokTable : any
>                   : ^^^
>binopNodeType : number
>              : ^^^^^^
>tokenId : TokenID
>        : ^^^^^^^
            }
            if (unopNodeType != NodeType.None) {
>unopNodeType != NodeType.None : boolean
>                              : ^^^^^^^
>unopNodeType : number
>             : ^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^

                nodeTypeTable[unopNodeType] = text;
>nodeTypeTable[unopNodeType] = text : string
>                                   : ^^^^^^
>nodeTypeTable[unopNodeType] : any
>                            : ^^^
>nodeTypeTable : any
>              : ^^^
>unopNodeType : number
>             : ^^^^^^
>text : string
>     : ^^^^^^
            }
        }
    }

    setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "any", ErrorRecoverySet.PrimType);
>setTokenInfo(TokenID.Any, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "any", ErrorRecoverySet.PrimType) : void
>                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Any : TokenID.Any
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Any : TokenID.Any
>    : ^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"any" : "any"
>      : ^^^^^
>ErrorRecoverySet.PrimType : any
>                          : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PrimType : any
>         : ^^^

    setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "boolean", ErrorRecoverySet.PrimType);
>setTokenInfo(TokenID.Bool, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "boolean", ErrorRecoverySet.PrimType) : void
>                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Bool : TokenID.Bool
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Bool : TokenID.Bool
>     : ^^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"boolean" : "boolean"
>          : ^^^^^^^^^
>ErrorRecoverySet.PrimType : any
>                          : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PrimType : any
>         : ^^^

    setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "break", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Break, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "break", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Break : TokenID.Break
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Break : TokenID.Break
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"break" : "break"
>        : ^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "case", ErrorRecoverySet.SCase);
>setTokenInfo(TokenID.Case, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "case", ErrorRecoverySet.SCase) : void
>                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Case : TokenID.Case
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Case : TokenID.Case
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"case" : "case"
>       : ^^^^^^
>ErrorRecoverySet.SCase : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>SCase : any
>      : ^^^

    setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "catch", ErrorRecoverySet.Catch);
>setTokenInfo(TokenID.Catch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "catch", ErrorRecoverySet.Catch) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Catch : TokenID.Catch
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Catch : TokenID.Catch
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"catch" : "catch"
>        : ^^^^^^^
>ErrorRecoverySet.Catch : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Catch : any
>      : ^^^

    setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "class", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Class, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "class", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                      : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Class : TokenID.Class
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Class : TokenID.Class
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"class" : "class"
>        : ^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.Const, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "const", ErrorRecoverySet.Var);
>setTokenInfo(TokenID.Const, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "const", ErrorRecoverySet.Var) : void
>                                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Const : TokenID.Const
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Const : TokenID.Const
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"const" : "const"
>        : ^^^^^^^
>ErrorRecoverySet.Var : any
>                     : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Var : any
>    : ^^^

    setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "continue", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Continue, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "continue", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                               : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Continue : TokenID.Continue
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Continue : TokenID.Continue
>         : ^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"continue" : "continue"
>           : ^^^^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, "debugger", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Debugger, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.Debugger, "debugger", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Debugger : TokenID.Debugger
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Debugger : TokenID.Debugger
>         : ^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Debugger : any
>                  : ^^^
>NodeType : any
>         : ^^^
>Debugger : any
>         : ^^^
>"debugger" : "debugger"
>           : ^^^^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "default", ErrorRecoverySet.SCase);
>setTokenInfo(TokenID.Default, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "default", ErrorRecoverySet.SCase) : void
>                                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Default : TokenID.Default
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Default : TokenID.Default
>        : ^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"default" : "default"
>          : ^^^^^^^^^
>ErrorRecoverySet.SCase : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>SCase : any
>      : ^^^

    setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, "delete", ErrorRecoverySet.Prefix);
>setTokenInfo(TokenID.Delete, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Delete, "delete", ErrorRecoverySet.Prefix) : void
>                                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Delete : TokenID.Delete
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Delete : TokenID.Delete
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Delete : any
>                : ^^^
>NodeType : any
>         : ^^^
>Delete : any
>       : ^^^
>"delete" : "delete"
>         : ^^^^^^^^
>ErrorRecoverySet.Prefix : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Prefix : any
>       : ^^^

    setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "do", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Do, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "do", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Do : TokenID.Do
>           : ^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Do : TokenID.Do
>   : ^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"do" : "do"
>     : ^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "else", ErrorRecoverySet.Else);
>setTokenInfo(TokenID.Else, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "else", ErrorRecoverySet.Else) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Else : TokenID.Else
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Else : TokenID.Else
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"else" : "else"
>       : ^^^^^^
>ErrorRecoverySet.Else : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Else : any
>     : ^^^

    setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "enum", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Enum, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "enum", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Enum : TokenID.Enum
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Enum : TokenID.Enum
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"enum" : "enum"
>       : ^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "export", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Export, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "export", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Export : TokenID.Export
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Export : TokenID.Export
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"export" : "export"
>         : ^^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "extends", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Extends, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "extends", ErrorRecoverySet.None) : void
>                                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Extends : TokenID.Extends
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Extends : TokenID.Extends
>        : ^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"extends" : "extends"
>          : ^^^^^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "declare", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Declare, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "declare", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Declare : TokenID.Declare
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Declare : TokenID.Declare
>        : ^^^^^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"declare" : "declare"
>          : ^^^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "false", ErrorRecoverySet.RLit);
>setTokenInfo(TokenID.False, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "false", ErrorRecoverySet.RLit) : void
>                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.False : TokenID.False
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>False : TokenID.False
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"false" : "false"
>        : ^^^^^^^
>ErrorRecoverySet.RLit : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RLit : any
>     : ^^^

    setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "finally", ErrorRecoverySet.Catch);
>setTokenInfo(TokenID.Finally, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "finally", ErrorRecoverySet.Catch) : void
>                                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Finally : TokenID.Finally
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Finally : TokenID.Finally
>        : ^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"finally" : "finally"
>          : ^^^^^^^^^
>ErrorRecoverySet.Catch : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Catch : any
>      : ^^^

    setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "for", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.For, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "for", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                     : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.For : TokenID.For
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>For : TokenID.For
>    : ^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"for" : "for"
>      : ^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "function", ErrorRecoverySet.Func);
>setTokenInfo(TokenID.Function, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "function", ErrorRecoverySet.Func) : void
>                                                                                                                                                                               : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Function : TokenID.Function
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Function : TokenID.Function
>         : ^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"function" : "function"
>           : ^^^^^^^^^^
>ErrorRecoverySet.Func : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Func : any
>     : ^^^

    setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "constructor", ErrorRecoverySet.Func);
>setTokenInfo(TokenID.Constructor, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "constructor", ErrorRecoverySet.Func) : void
>                                                                                                                                                                                                 : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Constructor : TokenID.Constructor
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Constructor : TokenID.Constructor
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"constructor" : "constructor"
>              : ^^^^^^^^^^^^^
>ErrorRecoverySet.Func : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Func : any
>     : ^^^

    setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "get", ErrorRecoverySet.Func);
>setTokenInfo(TokenID.Get, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "get", ErrorRecoverySet.Func) : void
>                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Get : TokenID.Get
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Get : TokenID.Get
>    : ^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"get" : "get"
>      : ^^^^^
>ErrorRecoverySet.Func : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Func : any
>     : ^^^

    setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "set", ErrorRecoverySet.Func);
>setTokenInfo(TokenID.Set, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "set", ErrorRecoverySet.Func) : void
>                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Set : TokenID.Set
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Set : TokenID.Set
>    : ^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"set" : "set"
>      : ^^^^^
>ErrorRecoverySet.Func : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Func : any
>     : ^^^

    setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "if", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.If, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "if", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.If : TokenID.If
>           : ^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>If : TokenID.If
>   : ^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"if" : "if"
>     : ^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "implements", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Implements, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "implements", ErrorRecoverySet.None) : void
>                                                                                                                                                                                               : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Implements : TokenID.Implements
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Implements : TokenID.Implements
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"implements" : "implements"
>             : ^^^^^^^^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "import", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Import, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "import", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Import : TokenID.Import
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Import : TokenID.Import
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"import" : "import"
>         : ^^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, "in", ErrorRecoverySet.None);
>setTokenInfo(TokenID.In, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.In, OperatorPrecedence.None, NodeType.None, "in", ErrorRecoverySet.None) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.In : TokenID.In
>           : ^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>In : TokenID.In
>   : ^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.Relational : OperatorPrecedence.Relational
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.In : any
>            : ^^^
>NodeType : any
>         : ^^^
>In : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"in" : "in"
>     : ^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, "instanceof", ErrorRecoverySet.BinOp);
>setTokenInfo(TokenID.InstanceOf, Reservation.TypeScriptAndJS, OperatorPrecedence.Relational, NodeType.InstOf, OperatorPrecedence.None, NodeType.None, "instanceof", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                            : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.InstanceOf : TokenID.InstanceOf
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>InstanceOf : TokenID.InstanceOf
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.Relational : OperatorPrecedence.Relational
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.InstOf : any
>                : ^^^
>NodeType : any
>         : ^^^
>InstOf : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"instanceof" : "instanceof"
>             : ^^^^^^^^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "interface", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Interface, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "interface", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Interface : TokenID.Interface
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Interface : TokenID.Interface
>          : ^^^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"interface" : "interface"
>            : ^^^^^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "let", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Let, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "let", ErrorRecoverySet.None) : void
>                                                                                                                                                                            : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Let : TokenID.Let
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Let : TokenID.Let
>    : ^^^^^^^^^^^
>Reservation.JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"let" : "let"
>      : ^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "module", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Module, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "module", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                             : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Module : TokenID.Module
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Module : TokenID.Module
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"module" : "module"
>         : ^^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "new", ErrorRecoverySet.PreOp);
>setTokenInfo(TokenID.New, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "new", ErrorRecoverySet.PreOp) : void
>                                                                                                                                                                      : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.New : TokenID.New
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>New : TokenID.New
>    : ^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"new" : "new"
>      : ^^^^^
>ErrorRecoverySet.PreOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PreOp : any
>      : ^^^

    setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "number", ErrorRecoverySet.PrimType);
>setTokenInfo(TokenID.Number, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "number", ErrorRecoverySet.PrimType) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Number : TokenID.Number
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Number : TokenID.Number
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"number" : "number"
>         : ^^^^^^^^
>ErrorRecoverySet.PrimType : any
>                          : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PrimType : any
>         : ^^^

    setTokenInfo(TokenID.Null, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "null", ErrorRecoverySet.RLit);
>setTokenInfo(TokenID.Null, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "null", ErrorRecoverySet.RLit) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Null : TokenID.Null
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Null : TokenID.Null
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"null" : "null"
>       : ^^^^^^
>ErrorRecoverySet.RLit : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RLit : any
>     : ^^^

    setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "package", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Package, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "package", ErrorRecoverySet.None) : void
>                                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Package : TokenID.Package
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Package : TokenID.Package
>        : ^^^^^^^^^^^^^^^
>Reservation.JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"package" : "package"
>          : ^^^^^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "private", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Private, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "private", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Private : TokenID.Private
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Private : TokenID.Private
>        : ^^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"private" : "private"
>          : ^^^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "protected", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Protected, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "protected", ErrorRecoverySet.None) : void
>                                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Protected : TokenID.Protected
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Protected : TokenID.Protected
>          : ^^^^^^^^^^^^^^^^^
>Reservation.JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"protected" : "protected"
>            : ^^^^^^^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "public", ErrorRecoverySet.TypeScriptS);
>setTokenInfo(TokenID.Public, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "public", ErrorRecoverySet.TypeScriptS) : void
>                                                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Public : TokenID.Public
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Public : TokenID.Public
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"public" : "public"
>         : ^^^^^^^^
>ErrorRecoverySet.TypeScriptS : any
>                             : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>TypeScriptS : any
>            : ^^^

    setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "return", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Return, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "return", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                           : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Return : TokenID.Return
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Return : TokenID.Return
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"return" : "return"
>         : ^^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "static", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Static, Reservation.TypeScriptAndJSFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "static", ErrorRecoverySet.None) : void
>                                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Static : TokenID.Static
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Static : TokenID.Static
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFutureStrict : Reservation.TypeScriptAndJSFutureStrict
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"static" : "static"
>         : ^^^^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "string", ErrorRecoverySet.PrimType);
>setTokenInfo(TokenID.String, Reservation.TypeScript, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "string", ErrorRecoverySet.PrimType) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.String : TokenID.String
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>String : TokenID.String
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScript : Reservation.TypeScript
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScript : Reservation.TypeScript
>           : ^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"string" : "string"
>         : ^^^^^^^^
>ErrorRecoverySet.PrimType : any
>                          : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PrimType : any
>         : ^^^

    setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "super", ErrorRecoverySet.RLit);
>setTokenInfo(TokenID.Super, Reservation.TypeScriptAndJSFuture, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "super", ErrorRecoverySet.RLit) : void
>                                                                                                                                                                               : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Super : TokenID.Super
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Super : TokenID.Super
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJSFuture : Reservation.TypeScriptAndJSFuture
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"super" : "super"
>        : ^^^^^^^
>ErrorRecoverySet.RLit : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RLit : any
>     : ^^^

    setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "switch", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Switch, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "switch", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                           : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Switch : TokenID.Switch
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Switch : TokenID.Switch
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"switch" : "switch"
>         : ^^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "this", ErrorRecoverySet.RLit);
>setTokenInfo(TokenID.This, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "this", ErrorRecoverySet.RLit) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.This : TokenID.This
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>This : TokenID.This
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"this" : "this"
>       : ^^^^^^
>ErrorRecoverySet.RLit : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RLit : any
>     : ^^^

    setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "throw", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Throw, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "throw", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Throw : TokenID.Throw
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Throw : TokenID.Throw
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"throw" : "throw"
>        : ^^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "true", ErrorRecoverySet.RLit);
>setTokenInfo(TokenID.True, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "true", ErrorRecoverySet.RLit) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.True : TokenID.True
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>True : TokenID.True
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"true" : "true"
>       : ^^^^^^
>ErrorRecoverySet.RLit : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RLit : any
>     : ^^^

    setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "try", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.Try, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "try", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                     : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Try : TokenID.Try
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Try : TokenID.Try
>    : ^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"try" : "try"
>      : ^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, "typeof", ErrorRecoverySet.Prefix);
>setTokenInfo(TokenID.TypeOf, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Typeof, "typeof", ErrorRecoverySet.Prefix) : void
>                                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.TypeOf : TokenID.TypeOf
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>TypeOf : TokenID.TypeOf
>       : ^^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Typeof : any
>                : ^^^
>NodeType : any
>         : ^^^
>Typeof : any
>       : ^^^
>"typeof" : "typeof"
>         : ^^^^^^^^
>ErrorRecoverySet.Prefix : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Prefix : any
>       : ^^^

    setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "var", ErrorRecoverySet.Var);
>setTokenInfo(TokenID.Var, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "var", ErrorRecoverySet.Var) : void
>                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Var : TokenID.Var
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Var : TokenID.Var
>    : ^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"var" : "var"
>      : ^^^^^
>ErrorRecoverySet.Var : any
>                     : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Var : any
>    : ^^^

    setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, "void", ErrorRecoverySet.Prefix);
>setTokenInfo(TokenID.Void, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Void, "void", ErrorRecoverySet.Prefix) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Void : TokenID.Void
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Void : TokenID.Void
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Void : any
>              : ^^^
>NodeType : any
>         : ^^^
>Void : any
>     : ^^^
>"void" : "void"
>       : ^^^^^^
>ErrorRecoverySet.Prefix : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Prefix : any
>       : ^^^

    setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.With, "with", ErrorRecoverySet.Stmt);
>setTokenInfo(TokenID.With, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.With, "with", ErrorRecoverySet.Stmt) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.With : TokenID.With
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>With : TokenID.With
>     : ^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.With : any
>              : ^^^
>NodeType : any
>         : ^^^
>With : any
>     : ^^^
>"with" : "with"
>       : ^^^^^^
>ErrorRecoverySet.Stmt : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Stmt : any
>     : ^^^

    setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "while", ErrorRecoverySet.While);
>setTokenInfo(TokenID.While, Reservation.TypeScriptAndJS, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "while", ErrorRecoverySet.While) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.While : TokenID.While
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>While : TokenID.While
>      : ^^^^^^^^^^^^^
>Reservation.TypeScriptAndJS : Reservation.TypeScriptAndJS
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>TypeScriptAndJS : Reservation.TypeScriptAndJS
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"while" : "while"
>        : ^^^^^^^
>ErrorRecoverySet.While : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>While : any
>      : ^^^

    setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "yield", ErrorRecoverySet.None);
>setTokenInfo(TokenID.Yield, Reservation.JavascriptFutureStrict, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "yield", ErrorRecoverySet.None) : void
>                                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Yield : TokenID.Yield
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Yield : TokenID.Yield
>      : ^^^^^^^^^^^^^
>Reservation.JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>JavascriptFutureStrict : Reservation.JavascriptFutureStrict
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"yield" : "yield"
>        : ^^^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "identifier", ErrorRecoverySet.ID);
>setTokenInfo(TokenID.Identifier, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "identifier", ErrorRecoverySet.ID) : void
>                                                                                                                                                                      : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Identifier : TokenID.Identifier
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Identifier : TokenID.Identifier
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"identifier" : "identifier"
>             : ^^^^^^^^^^^^
>ErrorRecoverySet.ID : any
>                    : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>ID : any
>   : ^^^

    setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "numberLiteral", ErrorRecoverySet.Literal);
>setTokenInfo(TokenID.NumberLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "numberLiteral", ErrorRecoverySet.Literal) : void
>                                                                                                                                                                                 : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.NumberLiteral : TokenID.NumberLiteral
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>NumberLiteral : TokenID.NumberLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"numberLiteral" : "numberLiteral"
>                : ^^^^^^^^^^^^^^^
>ErrorRecoverySet.Literal : any
>                         : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Literal : any
>        : ^^^

    setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "regex", ErrorRecoverySet.RegExp);
>setTokenInfo(TokenID.RegularExpressionLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "regex", ErrorRecoverySet.RegExp) : void
>                                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"regex" : "regex"
>        : ^^^^^^^
>ErrorRecoverySet.RegExp : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RegExp : any
>       : ^^^

    setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "qstring", ErrorRecoverySet.Literal);
>setTokenInfo(TokenID.StringLiteral, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "qstring", ErrorRecoverySet.Literal) : void
>                                                                                                                                                                           : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.StringLiteral : TokenID.StringLiteral
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>StringLiteral : TokenID.StringLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"qstring" : "qstring"
>          : ^^^^^^^^^
>ErrorRecoverySet.Literal : any
>                         : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Literal : any
>        : ^^^

    // Non-operator non-identifier tokens
    setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ";", ErrorRecoverySet.SColon); // ;
>setTokenInfo(TokenID.Semicolon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ";", ErrorRecoverySet.SColon) : void
>                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Semicolon : TokenID.Semicolon
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Semicolon : TokenID.Semicolon
>          : ^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>";" : ";"
>    : ^^^
>ErrorRecoverySet.SColon : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>SColon : any
>       : ^^^

    setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ")", ErrorRecoverySet.RParen); // )
>setTokenInfo(TokenID.CloseParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ")", ErrorRecoverySet.RParen) : void
>                                                                                                                                                                 : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.CloseParen : TokenID.CloseParen
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CloseParen : TokenID.CloseParen
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>")" : ")"
>    : ^^^
>ErrorRecoverySet.RParen : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RParen : any
>       : ^^^

    setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "]", ErrorRecoverySet.RBrack); // ]
>setTokenInfo(TokenID.CloseBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "]", ErrorRecoverySet.RBrack) : void
>                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.CloseBracket : TokenID.CloseBracket
>                     : ^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CloseBracket : TokenID.CloseBracket
>             : ^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"]" : "]"
>    : ^^^
>ErrorRecoverySet.RBrack : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RBrack : any
>       : ^^^

    setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "{", ErrorRecoverySet.LCurly); // {
>setTokenInfo(TokenID.OpenBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "{", ErrorRecoverySet.LCurly) : void
>                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.OpenBrace : TokenID.OpenBrace
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>OpenBrace : TokenID.OpenBrace
>          : ^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"{" : "{"
>    : ^^^
>ErrorRecoverySet.LCurly : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>LCurly : any
>       : ^^^

    setTokenInfo(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "}", ErrorRecoverySet.RCurly); // }
>setTokenInfo(TokenID.CloseBrace, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "}", ErrorRecoverySet.RCurly) : void
>                                                                                                                                                                 : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.CloseBrace : TokenID.CloseBrace
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CloseBrace : TokenID.CloseBrace
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"}" : "}"
>    : ^^^
>ErrorRecoverySet.RCurly : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>RCurly : any
>       : ^^^

    setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "...", ErrorRecoverySet.None); // ...
>setTokenInfo(TokenID.DotDotDot, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "...", ErrorRecoverySet.None) : void
>                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.DotDotDot : TokenID.DotDotDot
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>DotDotDot : TokenID.DotDotDot
>          : ^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"..." : "..."
>      : ^^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    // Operator non-identifier tokens
    setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, ",", ErrorRecoverySet.Comma); // ,
>setTokenInfo(TokenID.Comma, Reservation.None, OperatorPrecedence.Comma, NodeType.Comma, OperatorPrecedence.None, NodeType.None, ",", ErrorRecoverySet.Comma) : void
>                                                                                                                                                             : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Comma : TokenID.Comma
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Comma : TokenID.Comma
>      : ^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Comma : OperatorPrecedence.Comma
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Comma : OperatorPrecedence.Comma
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Comma : any
>               : ^^^
>NodeType : any
>         : ^^^
>Comma : any
>      : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"," : ","
>    : ^^^
>ErrorRecoverySet.Comma : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Comma : any
>      : ^^^

    setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, "=", ErrorRecoverySet.Asg); // =
>setTokenInfo(TokenID.Equals, Reservation.None, OperatorPrecedence.Assignment, NodeType.Asg, OperatorPrecedence.None, NodeType.None, "=", ErrorRecoverySet.Asg) : void
>                                                                                                                                                               : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Equals : TokenID.Equals
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Equals : TokenID.Equals
>       : ^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Asg : any
>             : ^^^
>NodeType : any
>         : ^^^
>Asg : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"=" : "="
>    : ^^^
>ErrorRecoverySet.Asg : any
>                     : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Asg : any
>    : ^^^

    setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, "+=", ErrorRecoverySet.BinOp); // +=
>setTokenInfo(TokenID.PlusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAdd, OperatorPrecedence.None, NodeType.None, "+=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.PlusEquals : TokenID.PlusEquals
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>PlusEquals : TokenID.PlusEquals
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgAdd : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgAdd : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"+=" : "+="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, "-=", ErrorRecoverySet.BinOp); // -=
>setTokenInfo(TokenID.MinusEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgSub, OperatorPrecedence.None, NodeType.None, "-=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.MinusEquals : TokenID.MinusEquals
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>MinusEquals : TokenID.MinusEquals
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgSub : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgSub : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"-=" : "-="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, "*=", ErrorRecoverySet.BinOp); // *=
>setTokenInfo(TokenID.AsteriskEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMul, OperatorPrecedence.None, NodeType.None, "*=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                             : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.AsteriskEquals : TokenID.AsteriskEquals
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>AsteriskEquals : TokenID.AsteriskEquals
>               : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgMul : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgMul : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"*=" : "*="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, "/=", ErrorRecoverySet.BinOp); // /=
>setTokenInfo(TokenID.SlashEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgDiv, OperatorPrecedence.None, NodeType.None, "/=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.SlashEquals : TokenID.SlashEquals
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>SlashEquals : TokenID.SlashEquals
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgDiv : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgDiv : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"/=" : "/="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, "%=", ErrorRecoverySet.BinOp); // %=
>setTokenInfo(TokenID.PercentEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgMod, OperatorPrecedence.None, NodeType.None, "%=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                            : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.PercentEquals : TokenID.PercentEquals
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>PercentEquals : TokenID.PercentEquals
>              : ^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgMod : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgMod : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"%=" : "%="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, "&=", ErrorRecoverySet.BinOp); // &=
>setTokenInfo(TokenID.AmpersandEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgAnd, OperatorPrecedence.None, NodeType.None, "&=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.AmpersandEquals : TokenID.AmpersandEquals
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>AmpersandEquals : TokenID.AmpersandEquals
>                : ^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgAnd : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgAnd : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"&=" : "&="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, "^=", ErrorRecoverySet.BinOp); // ^=
>setTokenInfo(TokenID.CaretEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgXor, OperatorPrecedence.None, NodeType.None, "^=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.CaretEquals : TokenID.CaretEquals
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>CaretEquals : TokenID.CaretEquals
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgXor : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgXor : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"^=" : "^="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, "|=", ErrorRecoverySet.BinOp); // |=
>setTokenInfo(TokenID.BarEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgOr, OperatorPrecedence.None, NodeType.None, "|=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.BarEquals : TokenID.BarEquals
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>BarEquals : TokenID.BarEquals
>          : ^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgOr : any
>               : ^^^
>NodeType : any
>         : ^^^
>AsgOr : any
>      : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"|=" : "|="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, "<<=", ErrorRecoverySet.BinOp); // <<=
>setTokenInfo(TokenID.LessThanLessThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgLsh, OperatorPrecedence.None, NodeType.None, "<<=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                      : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.LessThanLessThanEquals : TokenID.LessThanLessThanEquals
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>LessThanLessThanEquals : TokenID.LessThanLessThanEquals
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgLsh : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgLsh : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"<<=" : "<<="
>      : ^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, ">>=", ErrorRecoverySet.BinOp); // >>=
>setTokenInfo(TokenID.GreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRsh, OperatorPrecedence.None, NodeType.None, ">>=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                            : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.GreaterThanGreaterThanEquals : TokenID.GreaterThanGreaterThanEquals
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>GreaterThanGreaterThanEquals : TokenID.GreaterThanGreaterThanEquals
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgRsh : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgRsh : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>">>=" : ">>="
>      : ^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, ">>>=", ErrorRecoverySet.BinOp); // >>>=
>setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThanEquals, Reservation.None, OperatorPrecedence.Assignment, NodeType.AsgRs2, OperatorPrecedence.None, NodeType.None, ">>>=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.GreaterThanGreaterThanGreaterThanEquals : TokenID.GreaterThanGreaterThanGreaterThanEquals
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>GreaterThanGreaterThanGreaterThanEquals : TokenID.GreaterThanGreaterThanGreaterThanEquals
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Assignment : OperatorPrecedence.Assignment
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Assignment : OperatorPrecedence.Assignment
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.AsgRs2 : any
>                : ^^^
>NodeType : any
>         : ^^^
>AsgRs2 : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>">>>=" : ">>>="
>       : ^^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, "?", ErrorRecoverySet.BinOp); // ?
>setTokenInfo(TokenID.Question, Reservation.None, OperatorPrecedence.Conditional, NodeType.ConditionalExpression, OperatorPrecedence.None, NodeType.None, "?", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                      : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Question : TokenID.Question
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Question : TokenID.Question
>         : ^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Conditional : OperatorPrecedence.Conditional
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Conditional : OperatorPrecedence.Conditional
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.ConditionalExpression : any
>                               : ^^^
>NodeType : any
>         : ^^^
>ConditionalExpression : any
>                      : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"?" : "?"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ":", ErrorRecoverySet.Colon); // :
>setTokenInfo(TokenID.Colon, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, ":", ErrorRecoverySet.Colon) : void
>                                                                                                                                                           : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Colon : TokenID.Colon
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Colon : TokenID.Colon
>      : ^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>":" : ":"
>    : ^^^
>ErrorRecoverySet.Colon : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Colon : any
>      : ^^^

    setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, "||", ErrorRecoverySet.BinOp); // ||
>setTokenInfo(TokenID.BarBar, Reservation.None, OperatorPrecedence.LogicalOr, NodeType.LogOr, OperatorPrecedence.None, NodeType.None, "||", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.BarBar : TokenID.BarBar
>               : ^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>BarBar : TokenID.BarBar
>       : ^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.LogicalOr : OperatorPrecedence.LogicalOr
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>LogicalOr : OperatorPrecedence.LogicalOr
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.LogOr : any
>               : ^^^
>NodeType : any
>         : ^^^
>LogOr : any
>      : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"||" : "||"
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, "&&", ErrorRecoverySet.BinOp); // &&
>setTokenInfo(TokenID.AmpersandAmpersand, Reservation.None, OperatorPrecedence.LogicalAnd, NodeType.LogAnd, OperatorPrecedence.None, NodeType.None, "&&", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                 : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.AmpersandAmpersand : TokenID.AmpersandAmpersand
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>AmpersandAmpersand : TokenID.AmpersandAmpersand
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.LogicalAnd : OperatorPrecedence.LogicalAnd
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>LogicalAnd : OperatorPrecedence.LogicalAnd
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.LogAnd : any
>                : ^^^
>NodeType : any
>         : ^^^
>LogAnd : any
>       : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"&&" : "&&"
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, "|", ErrorRecoverySet.BinOp); // |
>setTokenInfo(TokenID.Bar, Reservation.None, OperatorPrecedence.BitwiseOr, NodeType.Or, OperatorPrecedence.None, NodeType.None, "|", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                            : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Bar : TokenID.Bar
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Bar : TokenID.Bar
>    : ^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.BitwiseOr : OperatorPrecedence.BitwiseOr
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>BitwiseOr : OperatorPrecedence.BitwiseOr
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Or : any
>            : ^^^
>NodeType : any
>         : ^^^
>Or : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"|" : "|"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, "^", ErrorRecoverySet.BinOp); // ^
>setTokenInfo(TokenID.Caret, Reservation.None, OperatorPrecedence.BitwiseExclusiveOr, NodeType.Xor, OperatorPrecedence.None, NodeType.None, "^", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Caret : TokenID.Caret
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Caret : TokenID.Caret
>      : ^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.BitwiseExclusiveOr : OperatorPrecedence.BitwiseExclusiveOr
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>BitwiseExclusiveOr : OperatorPrecedence.BitwiseExclusiveOr
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Xor : any
>             : ^^^
>NodeType : any
>         : ^^^
>Xor : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"^" : "^"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, "&", ErrorRecoverySet.BinOp); // &
>setTokenInfo(TokenID.And, Reservation.None, OperatorPrecedence.BitwiseAnd, NodeType.And, OperatorPrecedence.None, NodeType.None, "&", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.And : TokenID.And
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>And : TokenID.And
>    : ^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.BitwiseAnd : OperatorPrecedence.BitwiseAnd
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>BitwiseAnd : OperatorPrecedence.BitwiseAnd
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.And : any
>             : ^^^
>NodeType : any
>         : ^^^
>And : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"&" : "&"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, "==", ErrorRecoverySet.BinOp); // ==
>setTokenInfo(TokenID.EqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eq, OperatorPrecedence.None, NodeType.None, "==", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                     : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.EqualsEquals : TokenID.EqualsEquals
>                     : ^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>EqualsEquals : TokenID.EqualsEquals
>             : ^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Equality : OperatorPrecedence.Equality
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Equality : OperatorPrecedence.Equality
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Eq : any
>            : ^^^
>NodeType : any
>         : ^^^
>Eq : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"==" : "=="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, "!=", ErrorRecoverySet.BinOp); // !=
>setTokenInfo(TokenID.ExclamationEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Ne, OperatorPrecedence.None, NodeType.None, "!=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                          : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.ExclamationEquals : TokenID.ExclamationEquals
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>ExclamationEquals : TokenID.ExclamationEquals
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Equality : OperatorPrecedence.Equality
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Equality : OperatorPrecedence.Equality
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Ne : any
>            : ^^^
>NodeType : any
>         : ^^^
>Ne : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"!=" : "!="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, "===", ErrorRecoverySet.BinOp); // ===
>setTokenInfo(TokenID.EqualsEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.Eqv, OperatorPrecedence.None, NodeType.None, "===", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                             : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.EqualsEqualsEquals : TokenID.EqualsEqualsEquals
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>EqualsEqualsEquals : TokenID.EqualsEqualsEquals
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Equality : OperatorPrecedence.Equality
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Equality : OperatorPrecedence.Equality
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Eqv : any
>             : ^^^
>NodeType : any
>         : ^^^
>Eqv : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"===" : "==="
>      : ^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, "!==", ErrorRecoverySet.BinOp); // !==
>setTokenInfo(TokenID.ExclamationEqualsEquals, Reservation.None, OperatorPrecedence.Equality, NodeType.NEqv, OperatorPrecedence.None, NodeType.None, "!==", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                   : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.ExclamationEqualsEquals : TokenID.ExclamationEqualsEquals
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>ExclamationEqualsEquals : TokenID.ExclamationEqualsEquals
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Equality : OperatorPrecedence.Equality
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Equality : OperatorPrecedence.Equality
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.NEqv : any
>              : ^^^
>NodeType : any
>         : ^^^
>NEqv : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"!==" : "!=="
>      : ^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, "<", ErrorRecoverySet.BinOp); // <
>setTokenInfo(TokenID.LessThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Lt, OperatorPrecedence.None, NodeType.None, "<", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                  : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.LessThan : TokenID.LessThan
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>LessThan : TokenID.LessThan
>         : ^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Relational : OperatorPrecedence.Relational
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Lt : any
>            : ^^^
>NodeType : any
>         : ^^^
>Lt : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"<" : "<"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Le, OperatorPrecedence.None, NodeType.None, "<=", ErrorRecoverySet.BinOp); // <=
>setTokenInfo(TokenID.LessThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Le, OperatorPrecedence.None, NodeType.None, "<=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.LessThanEquals : TokenID.LessThanEquals
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>LessThanEquals : TokenID.LessThanEquals
>               : ^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Relational : OperatorPrecedence.Relational
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Le : any
>            : ^^^
>NodeType : any
>         : ^^^
>Le : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"<=" : "<="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, ">", ErrorRecoverySet.BinOp); // >
>setTokenInfo(TokenID.GreaterThan, Reservation.None, OperatorPrecedence.Relational, NodeType.Gt, OperatorPrecedence.None, NodeType.None, ">", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                     : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.GreaterThan : TokenID.GreaterThan
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>GreaterThan : TokenID.GreaterThan
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Relational : OperatorPrecedence.Relational
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Gt : any
>            : ^^^
>NodeType : any
>         : ^^^
>Gt : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>">" : ">"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, ">=", ErrorRecoverySet.BinOp); // >=
>setTokenInfo(TokenID.GreaterThanEquals, Reservation.None, OperatorPrecedence.Relational, NodeType.Ge, OperatorPrecedence.None, NodeType.None, ">=", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                            : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.GreaterThanEquals : TokenID.GreaterThanEquals
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>GreaterThanEquals : TokenID.GreaterThanEquals
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Relational : OperatorPrecedence.Relational
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Relational : OperatorPrecedence.Relational
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Ge : any
>            : ^^^
>NodeType : any
>         : ^^^
>Ge : any
>   : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>">=" : ">="
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, "<<", ErrorRecoverySet.BinOp); // <<
>setTokenInfo(TokenID.LessThanLessThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Lsh, OperatorPrecedence.None, NodeType.None, "<<", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.LessThanLessThan : TokenID.LessThanLessThan
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>LessThanLessThan : TokenID.LessThanLessThan
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Shift : OperatorPrecedence.Shift
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Shift : OperatorPrecedence.Shift
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Lsh : any
>             : ^^^
>NodeType : any
>         : ^^^
>Lsh : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"<<" : "<<"
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, ">>", ErrorRecoverySet.BinOp); // >>
>setTokenInfo(TokenID.GreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rsh, OperatorPrecedence.None, NodeType.None, ">>", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                             : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.GreaterThanGreaterThan : TokenID.GreaterThanGreaterThan
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>GreaterThanGreaterThan : TokenID.GreaterThanGreaterThan
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Shift : OperatorPrecedence.Shift
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Shift : OperatorPrecedence.Shift
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Rsh : any
>             : ^^^
>NodeType : any
>         : ^^^
>Rsh : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>">>" : ">>"
>     : ^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, ">>>", ErrorRecoverySet.BinOp); // >>>
>setTokenInfo(TokenID.GreaterThanGreaterThanGreaterThan, Reservation.None, OperatorPrecedence.Shift, NodeType.Rs2, OperatorPrecedence.None, NodeType.None, ">>>", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                                         : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.GreaterThanGreaterThanGreaterThan : TokenID.GreaterThanGreaterThanGreaterThan
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>GreaterThanGreaterThanGreaterThan : TokenID.GreaterThanGreaterThanGreaterThan
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Shift : OperatorPrecedence.Shift
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Shift : OperatorPrecedence.Shift
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Rs2 : any
>             : ^^^
>NodeType : any
>         : ^^^
>Rs2 : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>">>>" : ">>>"
>      : ^^^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, "+", ErrorRecoverySet.AddOp); // +
>setTokenInfo(TokenID.Plus, Reservation.None, OperatorPrecedence.Additive, NodeType.Add, OperatorPrecedence.Unary, NodeType.Pos, "+", ErrorRecoverySet.AddOp) : void
>                                                                                                                                                             : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Plus : TokenID.Plus
>             : ^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Plus : TokenID.Plus
>     : ^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Additive : OperatorPrecedence.Additive
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Additive : OperatorPrecedence.Additive
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Add : any
>             : ^^^
>NodeType : any
>         : ^^^
>Add : any
>    : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Pos : any
>             : ^^^
>NodeType : any
>         : ^^^
>Pos : any
>    : ^^^
>"+" : "+"
>    : ^^^
>ErrorRecoverySet.AddOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>AddOp : any
>      : ^^^

    setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, "-", ErrorRecoverySet.AddOp); // -
>setTokenInfo(TokenID.Minus, Reservation.None, OperatorPrecedence.Additive, NodeType.Sub, OperatorPrecedence.Unary, NodeType.Neg, "-", ErrorRecoverySet.AddOp) : void
>                                                                                                                                                              : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Minus : TokenID.Minus
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Minus : TokenID.Minus
>      : ^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Additive : OperatorPrecedence.Additive
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Additive : OperatorPrecedence.Additive
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Sub : any
>             : ^^^
>NodeType : any
>         : ^^^
>Sub : any
>    : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Neg : any
>             : ^^^
>NodeType : any
>         : ^^^
>Neg : any
>    : ^^^
>"-" : "-"
>    : ^^^
>ErrorRecoverySet.AddOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>AddOp : any
>      : ^^^

    setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, "*", ErrorRecoverySet.BinOp); // *
>setTokenInfo(TokenID.Asterisk, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mul, OperatorPrecedence.None, NodeType.None, "*", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Asterisk : TokenID.Asterisk
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Asterisk : TokenID.Asterisk
>         : ^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Multiplicative : OperatorPrecedence.Multiplicative
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Multiplicative : OperatorPrecedence.Multiplicative
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Mul : any
>             : ^^^
>NodeType : any
>         : ^^^
>Mul : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"*" : "*"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, "/", ErrorRecoverySet.BinOp); // /
>setTokenInfo(TokenID.Slash, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Div, OperatorPrecedence.None, NodeType.None, "/", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Slash : TokenID.Slash
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Slash : TokenID.Slash
>      : ^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Multiplicative : OperatorPrecedence.Multiplicative
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Multiplicative : OperatorPrecedence.Multiplicative
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Div : any
>             : ^^^
>NodeType : any
>         : ^^^
>Div : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"/" : "/"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, "%", ErrorRecoverySet.BinOp); // %
>setTokenInfo(TokenID.Percent, Reservation.None, OperatorPrecedence.Multiplicative, NodeType.Mod, OperatorPrecedence.None, NodeType.None, "%", ErrorRecoverySet.BinOp) : void
>                                                                                                                                                                      : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Percent : TokenID.Percent
>                : ^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Percent : TokenID.Percent
>        : ^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Multiplicative : OperatorPrecedence.Multiplicative
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Multiplicative : OperatorPrecedence.Multiplicative
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Mod : any
>             : ^^^
>NodeType : any
>         : ^^^
>Mod : any
>    : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"%" : "%"
>    : ^^^
>ErrorRecoverySet.BinOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>BinOp : any
>      : ^^^

    setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, "~", ErrorRecoverySet.PreOp); // ~
>setTokenInfo(TokenID.Tilde, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.Not, "~", ErrorRecoverySet.PreOp) : void
>                                                                                                                                                           : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Tilde : TokenID.Tilde
>              : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Tilde : TokenID.Tilde
>      : ^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.Not : any
>             : ^^^
>NodeType : any
>         : ^^^
>Not : any
>    : ^^^
>"~" : "~"
>    : ^^^
>ErrorRecoverySet.PreOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PreOp : any
>      : ^^^

    setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, "!", ErrorRecoverySet.PreOp); // !
>setTokenInfo(TokenID.Exclamation, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.LogNot, "!", ErrorRecoverySet.PreOp) : void
>                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Exclamation : TokenID.Exclamation
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Exclamation : TokenID.Exclamation
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.LogNot : any
>                : ^^^
>NodeType : any
>         : ^^^
>LogNot : any
>       : ^^^
>"!" : "!"
>    : ^^^
>ErrorRecoverySet.PreOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PreOp : any
>      : ^^^

    setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, "++", ErrorRecoverySet.PreOp); // ++
>setTokenInfo(TokenID.PlusPlus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.IncPre, "++", ErrorRecoverySet.PreOp) : void
>                                                                                                                                                                  : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.PlusPlus : TokenID.PlusPlus
>                 : ^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>PlusPlus : TokenID.PlusPlus
>         : ^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.IncPre : any
>                : ^^^
>NodeType : any
>         : ^^^
>IncPre : any
>       : ^^^
>"++" : "++"
>     : ^^^^
>ErrorRecoverySet.PreOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PreOp : any
>      : ^^^

    setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, "--", ErrorRecoverySet.PreOp); // --
>setTokenInfo(TokenID.MinusMinus, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.Unary, NodeType.DecPre, "--", ErrorRecoverySet.PreOp) : void
>                                                                                                                                                                    : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.MinusMinus : TokenID.MinusMinus
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>MinusMinus : TokenID.MinusMinus
>           : ^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.DecPre : any
>                : ^^^
>NodeType : any
>         : ^^^
>DecPre : any
>       : ^^^
>"--" : "--"
>     : ^^^^
>ErrorRecoverySet.PreOp : any
>                       : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>PreOp : any
>      : ^^^

    setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "(", ErrorRecoverySet.LParen); // (
>setTokenInfo(TokenID.OpenParen, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "(", ErrorRecoverySet.LParen) : void
>                                                                                                                                                                : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.OpenParen : TokenID.OpenParen
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>OpenParen : TokenID.OpenParen
>          : ^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"(" : "("
>    : ^^^
>ErrorRecoverySet.LParen : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>LParen : any
>       : ^^^

    setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "[", ErrorRecoverySet.LBrack); // [
>setTokenInfo(TokenID.OpenBracket, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "[", ErrorRecoverySet.LBrack) : void
>                                                                                                                                                                  : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.OpenBracket : TokenID.OpenBracket
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>OpenBracket : TokenID.OpenBracket
>            : ^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"[" : "["
>    : ^^^
>ErrorRecoverySet.LBrack : any
>                        : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>LBrack : any
>       : ^^^

    setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, ".", ErrorRecoverySet.Dot); // .
>setTokenInfo(TokenID.Dot, Reservation.None, OperatorPrecedence.Unary, NodeType.None, OperatorPrecedence.None, NodeType.None, ".", ErrorRecoverySet.Dot) : void
>                                                                                                                                                        : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.Dot : TokenID.Dot
>            : ^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Dot : TokenID.Dot
>    : ^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.Unary : OperatorPrecedence.Unary
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Unary : OperatorPrecedence.Unary
>      : ^^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"." : "."
>    : ^^^
>ErrorRecoverySet.Dot : any
>                     : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>Dot : any
>    : ^^^

    setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "<EOF>", ErrorRecoverySet.EOF); // EOF
>setTokenInfo(TokenID.EndOfFile, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "<EOF>", ErrorRecoverySet.EOF) : void
>                                                                                                                                                                 : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.EndOfFile : TokenID.EndOfFile
>                  : ^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>EndOfFile : TokenID.EndOfFile
>          : ^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"<EOF>" : "<EOF>"
>        : ^^^^^^^
>ErrorRecoverySet.EOF : any
>                     : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>EOF : any
>    : ^^^

    setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "=>", ErrorRecoverySet.None); // =>
>setTokenInfo(TokenID.EqualsGreaterThan, Reservation.None, OperatorPrecedence.None, NodeType.None, OperatorPrecedence.None, NodeType.None, "=>", ErrorRecoverySet.None) : void
>                                                                                                                                                                       : ^^^^
>setTokenInfo : (tokenId: TokenID, reservation: number, binopPrecedence: number, binopNodeType: number, unopPrecedence: number, unopNodeType: number, text: string, ers: ErrorRecoverySet) => void
>             : ^       ^^       ^^           ^^      ^^               ^^      ^^             ^^      ^^              ^^      ^^            ^^      ^^    ^^      ^^   ^^                ^^^^^^^^^
>TokenID.EqualsGreaterThan : TokenID.EqualsGreaterThan
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>EqualsGreaterThan : TokenID.EqualsGreaterThan
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Reservation.None : Reservation.None
>                 : ^^^^^^^^^^^^^^^^
>Reservation : typeof Reservation
>            : ^^^^^^^^^^^^^^^^^^
>None : Reservation.None
>     : ^^^^^^^^^^^^^^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>OperatorPrecedence.None : OperatorPrecedence.None
>                        : ^^^^^^^^^^^^^^^^^^^^^^^
>OperatorPrecedence : typeof OperatorPrecedence
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>None : OperatorPrecedence.None
>     : ^^^^^^^^^^^^^^^^^^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^
>"=>" : "=>"
>     : ^^^^
>ErrorRecoverySet.None : any
>                      : ^^^
>ErrorRecoverySet : any
>                 : ^^^
>None : any
>     : ^^^

    export function lookupToken(tokenId: TokenID): TokenInfo {
>lookupToken : (tokenId: TokenID) => TokenInfo
>            : ^       ^^       ^^^^^         
>tokenId : TokenID
>        : ^^^^^^^

        return tokenTable[tokenId];
>tokenTable[tokenId] : any
>                    : ^^^
>tokenTable : any
>           : ^^^
>tokenId : TokenID
>        : ^^^^^^^
    }

    export enum TokenClass {
>TokenClass : TokenClass
>           : ^^^^^^^^^^

        Punctuation,
>Punctuation : TokenClass.Punctuation
>            : ^^^^^^^^^^^^^^^^^^^^^^

        Keyword,
>Keyword : TokenClass.Keyword
>        : ^^^^^^^^^^^^^^^^^^

        Operator,
>Operator : TokenClass.Operator
>         : ^^^^^^^^^^^^^^^^^^^

        Comment,
>Comment : TokenClass.Comment
>        : ^^^^^^^^^^^^^^^^^^

        Whitespace,
>Whitespace : TokenClass.Whitespace
>           : ^^^^^^^^^^^^^^^^^^^^^

        Identifier,
>Identifier : TokenClass.Identifier
>           : ^^^^^^^^^^^^^^^^^^^^^

        Literal,
>Literal : TokenClass.Literal
>        : ^^^^^^^^^^^^^^^^^^
    }

    export class SavedToken {
>SavedToken : SavedToken
>           : ^^^^^^^^^^

        constructor (public tok: Token, public minChar: number, public limChar: number) { }
>tok : Token
>    : ^^^^^
>minChar : number
>        : ^^^^^^
>limChar : number
>        : ^^^^^^
    }

    export class Token {
>Token : Token
>      : ^^^^^

        constructor (public tokenId: TokenID) {
>tokenId : TokenID
>        : ^^^^^^^
        }

        public toString() {
>toString : () => string
>         : ^^^^^^^^^^^^

            return "token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] + ")";
>"token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] + ")" : string
>                                                                                                 : ^^^^^^
>"token: " + this.tokenId + " " + this.getText() + " (" + (<any>TokenID)._map[this.tokenId] : string
>                                                                                           : ^^^^^^
>"token: " + this.tokenId + " " + this.getText() + " (" : string
>                                                       : ^^^^^^
>"token: " + this.tokenId + " " + this.getText() : string
>                                                : ^^^^^^
>"token: " + this.tokenId + " " : string
>                               : ^^^^^^
>"token: " + this.tokenId : string
>                         : ^^^^^^
>"token: " : "token: "
>          : ^^^^^^^^^
>this.tokenId : TokenID
>             : ^^^^^^^
>this : this
>     : ^^^^
>tokenId : TokenID
>        : ^^^^^^^
>" " : " "
>    : ^^^
>this.getText() : string
>               : ^^^^^^
>this.getText : () => string
>             : ^^^^^^      
>this : this
>     : ^^^^
>getText : () => string
>        : ^^^^^^      
>" (" : " ("
>     : ^^^^
>(<any>TokenID)._map[this.tokenId] : any
>                                  : ^^^
>(<any>TokenID)._map : any
>                    : ^^^
>(<any>TokenID) : any
>               : ^^^
><any>TokenID : any
>             : ^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>_map : any
>     : ^^^
>this.tokenId : TokenID
>             : ^^^^^^^
>this : this
>     : ^^^^
>tokenId : TokenID
>        : ^^^^^^^
>")" : ")"
>    : ^^^
        }

        public print(line: number, outfile) {
>print : (line: number, outfile: any) => void
>      : ^    ^^      ^^       ^^^^^^^^^^^^^^
>line : number
>     : ^^^^^^
>outfile : any
>        : ^^^

            outfile.WriteLine(this.toString() + ",on line" + line);
>outfile.WriteLine(this.toString() + ",on line" + line) : any
>                                                       : ^^^
>outfile.WriteLine : any
>                  : ^^^
>outfile : any
>        : ^^^
>WriteLine : any
>          : ^^^
>this.toString() + ",on line" + line : string
>                                    : ^^^^^^
>this.toString() + ",on line" : string
>                             : ^^^^^^
>this.toString() : string
>                : ^^^^^^
>this.toString : () => string
>              : ^^^^^^^^^^^^
>this : this
>     : ^^^^
>toString : () => string
>         : ^^^^^^^^^^^^
>",on line" : ",on line"
>           : ^^^^^^^^^^
>line : number
>     : ^^^^^^
        }

        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return tokenTable[this.tokenId].text;
>tokenTable[this.tokenId].text : any
>                              : ^^^
>tokenTable[this.tokenId] : any
>                         : ^^^
>tokenTable : any
>           : ^^^
>this.tokenId : TokenID
>             : ^^^^^^^
>this : this
>     : ^^^^
>tokenId : TokenID
>        : ^^^^^^^
>text : any
>     : ^^^
        }

        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            if (this.tokenId <= TokenID.LimKeyword) {
>this.tokenId <= TokenID.LimKeyword : boolean
>                                   : ^^^^^^^
>this.tokenId : TokenID
>             : ^^^^^^^
>this : this
>     : ^^^^
>tokenId : TokenID
>        : ^^^^^^^
>TokenID.LimKeyword : TokenID.Yield
>                   : ^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>LimKeyword : TokenID.Yield
>           : ^^^^^^^^^^^^^

                return TokenClass.Keyword;
>TokenClass.Keyword : TokenClass.Keyword
>                   : ^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Keyword : TokenClass.Keyword
>        : ^^^^^^^^^^^^^^^^^^
            }
            else {
                var tokenInfo = lookupToken(this.tokenId);
>tokenInfo : TokenInfo
>          : ^^^^^^^^^
>lookupToken(this.tokenId) : TokenInfo
>                          : ^^^^^^^^^
>lookupToken : (tokenId: TokenID) => TokenInfo
>            : ^       ^^       ^^^^^         
>this.tokenId : TokenID
>             : ^^^^^^^
>this : this
>     : ^^^^
>tokenId : TokenID
>        : ^^^^^^^

                if (tokenInfo != undefined) {
>tokenInfo != undefined : boolean
>                       : ^^^^^^^
>tokenInfo : TokenInfo
>          : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

                    if ((tokenInfo.unopNodeType != NodeType.None) ||
>(tokenInfo.unopNodeType != NodeType.None) ||                        (tokenInfo.binopNodeType != NodeType.None) : boolean
>                                                                                                               : ^^^^^^^
>(tokenInfo.unopNodeType != NodeType.None) : boolean
>                                          : ^^^^^^^
>tokenInfo.unopNodeType != NodeType.None : boolean
>                                        : ^^^^^^^
>tokenInfo.unopNodeType : number
>                       : ^^^^^^
>tokenInfo : TokenInfo
>          : ^^^^^^^^^
>unopNodeType : number
>             : ^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^

                        (tokenInfo.binopNodeType != NodeType.None)) {
>(tokenInfo.binopNodeType != NodeType.None) : boolean
>                                           : ^^^^^^^
>tokenInfo.binopNodeType != NodeType.None : boolean
>                                         : ^^^^^^^
>tokenInfo.binopNodeType : number
>                        : ^^^^^^
>tokenInfo : TokenInfo
>          : ^^^^^^^^^
>binopNodeType : number
>              : ^^^^^^
>NodeType.None : any
>              : ^^^
>NodeType : any
>         : ^^^
>None : any
>     : ^^^

                        return TokenClass.Operator;
>TokenClass.Operator : TokenClass.Operator
>                    : ^^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Operator : TokenClass.Operator
>         : ^^^^^^^^^^^^^^^^^^^
                    }
                }
            }

            return TokenClass.Punctuation;
>TokenClass.Punctuation : TokenClass.Punctuation
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Punctuation : TokenClass.Punctuation
>            : ^^^^^^^^^^^^^^^^^^^^^^
        }
    }

    export class NumberLiteralToken extends Token {
>NumberLiteralToken : NumberLiteralToken
>                   : ^^^^^^^^^^^^^^^^^^
>Token : Token
>      : ^^^^^

        constructor (public value: number, public hasEmptyFraction?: boolean) {
>value : number
>      : ^^^^^^
>hasEmptyFraction : boolean
>                 : ^^^^^^^

            super(TokenID.NumberLiteral);
>super(TokenID.NumberLiteral) : void
>                             : ^^^^
>super : typeof Token
>      : ^^^^^^^^^^^^
>TokenID.NumberLiteral : TokenID.NumberLiteral
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>NumberLiteral : TokenID.NumberLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^
        }

        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();
>this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString() : string
>                                                                             : ^^^^^^
>this.hasEmptyFraction : boolean
>                      : ^^^^^^^
>this : this
>     : ^^^^
>hasEmptyFraction : boolean
>                 : ^^^^^^^
>this.value.toString() + ".0" : string
>                             : ^^^^^^
>this.value.toString() : string
>                      : ^^^^^^
>this.value.toString : (radix?: number) => string
>                    : ^     ^^^      ^^^^^      
>this.value : number
>           : ^^^^^^
>this : this
>     : ^^^^
>value : number
>      : ^^^^^^
>toString : (radix?: number) => string
>         : ^     ^^^      ^^^^^      
>".0" : ".0"
>     : ^^^^
>this.value.toString() : string
>                      : ^^^^^^
>this.value.toString : (radix?: number) => string
>                    : ^     ^^^      ^^^^^      
>this.value : number
>           : ^^^^^^
>this : this
>     : ^^^^
>value : number
>      : ^^^^^^
>toString : (radix?: number) => string
>         : ^     ^^^      ^^^^^      
        }

        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            return TokenClass.Literal;
>TokenClass.Literal : TokenClass.Literal
>                   : ^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Literal : TokenClass.Literal
>        : ^^^^^^^^^^^^^^^^^^
        }
    }

    export class StringLiteralToken extends Token {
>StringLiteralToken : StringLiteralToken
>                   : ^^^^^^^^^^^^^^^^^^
>Token : Token
>      : ^^^^^

        constructor (public value: string) {
>value : string
>      : ^^^^^^

            super(TokenID.StringLiteral);
>super(TokenID.StringLiteral) : void
>                             : ^^^^
>super : typeof Token
>      : ^^^^^^^^^^^^
>TokenID.StringLiteral : TokenID.StringLiteral
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>StringLiteral : TokenID.StringLiteral
>              : ^^^^^^^^^^^^^^^^^^^^^
        }

        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return this.value;
>this.value : string
>           : ^^^^^^
>this : this
>     : ^^^^
>value : string
>      : ^^^^^^
        }

        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            return TokenClass.Literal;
>TokenClass.Literal : TokenClass.Literal
>                   : ^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Literal : TokenClass.Literal
>        : ^^^^^^^^^^^^^^^^^^
        }
    }

    export class IdentifierToken extends Token {
>IdentifierToken : IdentifierToken
>                : ^^^^^^^^^^^^^^^
>Token : Token
>      : ^^^^^

        constructor (public value: string, public hasEscapeSequence : boolean) {
>value : string
>      : ^^^^^^
>hasEscapeSequence : boolean
>                  : ^^^^^^^

            super(TokenID.Identifier);
>super(TokenID.Identifier) : void
>                          : ^^^^
>super : typeof Token
>      : ^^^^^^^^^^^^
>TokenID.Identifier : TokenID.Identifier
>                   : ^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>Identifier : TokenID.Identifier
>           : ^^^^^^^^^^^^^^^^^^
        }
        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return this.value;
>this.value : string
>           : ^^^^^^
>this : this
>     : ^^^^
>value : string
>      : ^^^^^^
        }
        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            return TokenClass.Identifier;
>TokenClass.Identifier : TokenClass.Identifier
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Identifier : TokenClass.Identifier
>           : ^^^^^^^^^^^^^^^^^^^^^
        }
    }

    export class WhitespaceToken extends Token {
>WhitespaceToken : WhitespaceToken
>                : ^^^^^^^^^^^^^^^
>Token : Token
>      : ^^^^^

        constructor (tokenId: TokenID, public value: string) {
>tokenId : TokenID
>        : ^^^^^^^
>value : string
>      : ^^^^^^

            super(tokenId);
>super(tokenId) : void
>               : ^^^^
>super : typeof Token
>      : ^^^^^^^^^^^^
>tokenId : TokenID
>        : ^^^^^^^
        }

        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return this.value;
>this.value : string
>           : ^^^^^^
>this : this
>     : ^^^^
>value : string
>      : ^^^^^^
        }

        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            return TokenClass.Whitespace;
>TokenClass.Whitespace : TokenClass.Whitespace
>                      : ^^^^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Whitespace : TokenClass.Whitespace
>           : ^^^^^^^^^^^^^^^^^^^^^
        }
    }

    export class CommentToken extends Token {
>CommentToken : CommentToken
>             : ^^^^^^^^^^^^
>Token : Token
>      : ^^^^^

        constructor (tokenID: TokenID, public value: string, public isBlock: boolean, public startPos: number, public line: number, public endsLine: boolean) {
>tokenID : TokenID
>        : ^^^^^^^
>value : string
>      : ^^^^^^
>isBlock : boolean
>        : ^^^^^^^
>startPos : number
>         : ^^^^^^
>line : number
>     : ^^^^^^
>endsLine : boolean
>         : ^^^^^^^

            super(tokenID);
>super(tokenID) : void
>               : ^^^^
>super : typeof Token
>      : ^^^^^^^^^^^^
>tokenID : TokenID
>        : ^^^^^^^
        }

        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return this.value;
>this.value : string
>           : ^^^^^^
>this : this
>     : ^^^^
>value : string
>      : ^^^^^^
        }

        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            return TokenClass.Comment;
>TokenClass.Comment : TokenClass.Comment
>                   : ^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Comment : TokenClass.Comment
>        : ^^^^^^^^^^^^^^^^^^
        }
    }

    export class RegularExpressionLiteralToken extends Token {
>RegularExpressionLiteralToken : RegularExpressionLiteralToken
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Token : Token
>      : ^^^^^

        constructor(public regex) {
>regex : any
>      : ^^^

            super(TokenID.RegularExpressionLiteral);
>super(TokenID.RegularExpressionLiteral) : void
>                                        : ^^^^
>super : typeof Token
>      : ^^^^^^^^^^^^
>TokenID.RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>RegularExpressionLiteral : TokenID.RegularExpressionLiteral
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        }

        public getText(): string {
>getText : () => string
>        : ^^^^^^      

            return this.regex.toString();
>this.regex.toString() : any
>                      : ^^^
>this.regex.toString : any
>                    : ^^^
>this.regex : any
>           : ^^^
>this : this
>     : ^^^^
>regex : any
>      : ^^^
>toString : any
>         : ^^^
        }

        public classification(): TokenClass {
>classification : () => TokenClass
>               : ^^^^^^          

            return TokenClass.Literal;
>TokenClass.Literal : TokenClass.Literal
>                   : ^^^^^^^^^^^^^^^^^^
>TokenClass : typeof TokenClass
>           : ^^^^^^^^^^^^^^^^^
>Literal : TokenClass.Literal
>        : ^^^^^^^^^^^^^^^^^^
        }
    }

    // TODO: new with length TokenID.LimFixed
    export var staticTokens = new Token[];
>staticTokens : any
>             : ^^^
>new Token[] : any
>            : ^^^
>Token[] : any
>        : ^^^
>Token : typeof Token
>      : ^^^^^^^^^^^^
> : any
> : ^^^

    export function initializeStaticTokens() {
>initializeStaticTokens : () => void
>                       : ^^^^^^^^^^

        for (var i = 0; i <= TokenID.LimFixed; i++) {
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i <= TokenID.LimFixed : boolean
>                      : ^^^^^^^
>i : number
>  : ^^^^^^
>TokenID.LimFixed : TokenID.EqualsGreaterThan
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^
>TokenID : typeof TokenID
>        : ^^^^^^^^^^^^^^
>LimFixed : TokenID.EqualsGreaterThan
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

            staticTokens[i] = new Token(i);
>staticTokens[i] = new Token(i) : Token
>                               : ^^^^^
>staticTokens[i] : any
>                : ^^^
>staticTokens : any
>             : ^^^
>i : number
>  : ^^^^^^
>new Token(i) : Token
>             : ^^^^^
>Token : typeof Token
>      : ^^^^^^^^^^^^
>i : number
>  : ^^^^^^
        }
    }
}
