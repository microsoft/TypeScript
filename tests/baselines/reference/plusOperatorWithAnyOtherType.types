//// [tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithAnyOtherType.ts] ////

=== plusOperatorWithAnyOtherType.ts ===
// + operator on any type

var ANY: any;
>ANY : any
>    : ^^^

var ANY1;
>ANY1 : any
>     : ^^^

var ANY2: any[] = ["", ""];
>ANY2 : any[]
>     : ^^^^^
>["", ""] : string[]
>         : ^^^^^^^^
>"" : ""
>   : ^^
>"" : ""
>   : ^^

var obj: () => {}
>obj : () => {}
>    : ^^^^^^  

var obj1 = { x: (s: string) => { }, y: (s1) => { }};
>obj1 : { x: (s: string) => void; y: (s1: any) => void; }
>     : ^^^^^^ ^^      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
>{ x: (s: string) => { }, y: (s1) => { }} : { x: (s: string) => void; y: (s1: any) => void; }
>                                         : ^^^^^^ ^^      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
>x : (s: string) => void
>  : ^ ^^      ^^^^^^^^^
>(s: string) => { } : (s: string) => void
>                   : ^ ^^      ^^^^^^^^^
>s : string
>  : ^^^^^^
>y : (s1: any) => void
>  : ^  ^^^^^^^^^^^^^^
>(s1) => { } : (s1: any) => void
>            : ^  ^^^^^^^^^^^^^^
>s1 : any
>   : ^^^

function foo(): any {
>foo : () => any
>    : ^^^^^^   

    var a;
>a : any
>  : ^^^

    return a;
>a : any
>  : ^^^
}
class A {
>A : A
>  : ^

    public a: any;
>a : any
>  : ^^^

    static foo() {
>foo : () => any
>    : ^^^^^^^^^

        var a;
>a : any
>  : ^^^

        return a;
>a : any
>  : ^^^
    }
}
module M {
>M : typeof M
>  : ^^^^^^^^

    export var n: any;
>n : any
>  : ^^^
}
var objA = new A();
>objA : A
>     : ^
>new A() : A
>        : ^
>A : typeof A
>  : ^^^^^^^^

// any other type var
var ResultIsNumber1 = +ANY1;
>ResultIsNumber1 : number
>                : ^^^^^^
>+ANY1 : number
>      : ^^^^^^
>ANY1 : any
>     : ^^^

var ResultIsNumber2 = +ANY2;
>ResultIsNumber2 : number
>                : ^^^^^^
>+ANY2 : number
>      : ^^^^^^
>ANY2 : any[]
>     : ^^^^^

var ResultIsNumber3 = +A;
>ResultIsNumber3 : number
>                : ^^^^^^
>+A : number
>   : ^^^^^^
>A : typeof A
>  : ^^^^^^^^

var ResultIsNumber4 = +M;
>ResultIsNumber4 : number
>                : ^^^^^^
>+M : number
>   : ^^^^^^
>M : typeof M
>  : ^^^^^^^^

var ResultIsNumber5 = +obj;
>ResultIsNumber5 : number
>                : ^^^^^^
>+obj : number
>     : ^^^^^^
>obj : () => {}
>    : ^^^^^^  

var ResultIsNumber6 = +obj1;
>ResultIsNumber6 : number
>                : ^^^^^^
>+obj1 : number
>      : ^^^^^^
>obj1 : { x: (s: string) => void; y: (s1: any) => void; }
>     : ^^^^^^ ^^      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^

// any type literal
var ResultIsNumber7 = +undefined;
>ResultIsNumber7 : number
>                : ^^^^^^
>+undefined : number
>           : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var ResultIsNumber8 = +null;
>ResultIsNumber8 : number
>                : ^^^^^^
>+null : number
>      : ^^^^^^

// any type expressions
var ResultIsNumber9 = +ANY2[0];
>ResultIsNumber9 : number
>                : ^^^^^^
>+ANY2[0] : number
>         : ^^^^^^
>ANY2[0] : any
>        : ^^^
>ANY2 : any[]
>     : ^^^^^
>0 : 0
>  : ^

var ResultIsNumber10 = +obj1.x;
>ResultIsNumber10 : number
>                 : ^^^^^^
>+obj1.x : number
>        : ^^^^^^
>obj1.x : (s: string) => void
>       : ^ ^^      ^^^^^^^^^
>obj1 : { x: (s: string) => void; y: (s1: any) => void; }
>     : ^^^^^^ ^^      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
>x : (s: string) => void
>  : ^ ^^      ^^^^^^^^^

var ResultIsNumber11 = +obj1.y;
>ResultIsNumber11 : number
>                 : ^^^^^^
>+obj1.y : number
>        : ^^^^^^
>obj1.y : (s1: any) => void
>       : ^  ^^^^^^^^^^^^^^
>obj1 : { x: (s: string) => void; y: (s1: any) => void; }
>     : ^^^^^^ ^^      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
>y : (s1: any) => void
>  : ^  ^^^^^^^^^^^^^^

var ResultIsNumber12 = +objA.a;
>ResultIsNumber12 : number
>                 : ^^^^^^
>+objA.a : number
>        : ^^^^^^
>objA.a : any
>       : ^^^
>objA : A
>     : ^
>a : any
>  : ^^^

var ResultIsNumber13 = +M.n;
>ResultIsNumber13 : number
>                 : ^^^^^^
>+M.n : number
>     : ^^^^^^
>M.n : any
>    : ^^^
>M : typeof M
>  : ^^^^^^^^
>n : any
>  : ^^^

var ResultIsNumber14 = +foo();
>ResultIsNumber14 : number
>                 : ^^^^^^
>+foo() : number
>       : ^^^^^^
>foo() : any
>      : ^^^
>foo : () => any
>    : ^^^^^^   

var ResultIsNumber15 = +A.foo();
>ResultIsNumber15 : number
>                 : ^^^^^^
>+A.foo() : number
>         : ^^^^^^
>A.foo() : any
>        : ^^^
>A.foo : () => any
>      : ^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
>foo : () => any
>    : ^^^^^^^^^

var ResultIsNumber16 = +(ANY + ANY1);
>ResultIsNumber16 : number
>                 : ^^^^^^
>+(ANY + ANY1) : number
>              : ^^^^^^
>(ANY + ANY1) : any
>             : ^^^
>ANY + ANY1 : any
>           : ^^^
>ANY : any
>    : ^^^
>ANY1 : any
>     : ^^^

var ResultIsNumber17 = +(null + undefined);
>ResultIsNumber17 : number
>                 : ^^^^^^
>+(null + undefined) : number
>                    : ^^^^^^
>(null + undefined) : any
>                   : ^^^
>null + undefined : any
>                 : ^^^
>undefined : undefined
>          : ^^^^^^^^^

var ResultIsNumber18 = +(null + null);
>ResultIsNumber18 : number
>                 : ^^^^^^
>+(null + null) : number
>               : ^^^^^^
>(null + null) : any
>              : ^^^
>null + null : any
>            : ^^^

var ResultIsNumber19 = +(undefined + undefined);
>ResultIsNumber19 : number
>                 : ^^^^^^
>+(undefined + undefined) : number
>                         : ^^^^^^
>(undefined + undefined) : any
>                        : ^^^
>undefined + undefined : any
>                      : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

// miss assignment operators
+ANY;
>+ANY : number
>     : ^^^^^^
>ANY : any
>    : ^^^

+ANY1;
>+ANY1 : number
>      : ^^^^^^
>ANY1 : any
>     : ^^^

+ANY2[0];
>+ANY2[0] : number
>         : ^^^^^^
>ANY2[0] : any
>        : ^^^
>ANY2 : any[]
>     : ^^^^^
>0 : 0
>  : ^

+ANY, ANY1;
>+ANY, ANY1 : any
>           : ^^^
>+ANY : number
>     : ^^^^^^
>ANY : any
>    : ^^^
>ANY1 : any
>     : ^^^

+objA.a;
>+objA.a : number
>        : ^^^^^^
>objA.a : any
>       : ^^^
>objA : A
>     : ^
>a : any
>  : ^^^

+M.n;
>+M.n : number
>     : ^^^^^^
>M.n : any
>    : ^^^
>M : typeof M
>  : ^^^^^^^^
>n : any
>  : ^^^

