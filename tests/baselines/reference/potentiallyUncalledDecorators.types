//// [tests/cases/compiler/potentiallyUncalledDecorators.ts] ////

=== potentiallyUncalledDecorators.ts ===
// Angular-style Input/Output API:
declare function Input(bindingPropertyName?: string): any;
>Input : (bindingPropertyName?: string) => any
>      : ^                   ^^^      ^^^^^   
>bindingPropertyName : string
>                    : ^^^^^^

class FooComponent {
>FooComponent : FooComponent
>             : ^^^^^^^^^^^^

    @Input foo: string;
>Input : (bindingPropertyName?: string) => any
>      : ^                   ^^^      ^^^^^   
>foo : string
>    : ^^^^^^
}

// Glimmer-style tracked API:
declare const tracked: PropertyDecorator & { (...watchedProperties: string[]): any; }
>tracked : PropertyDecorator & ((...watchedProperties: string[]) => any)
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^        ^^^^^   ^
>watchedProperties : string[]
>                  : ^^^^^^^^

class Person {
>Person : Person
>       : ^^^^^^

    @tracked person; any;
>tracked : PropertyDecorator & ((...watchedProperties: string[]) => any)
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^        ^^^^^   ^
>person : any
>       : ^^^
>any : any
>    : ^^^
}

class MultiplyByTwo {
>MultiplyByTwo : MultiplyByTwo
>              : ^^^^^^^^^^^^^

    args: any;
>args : any
>     : ^^^

    @tracked('args')
>tracked('args') : any
>                : ^^^
>tracked : PropertyDecorator & ((...watchedProperties: string[]) => any)
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^        ^^^^^   ^
>'args' : "args"
>       : ^^^^^^

    get multiplied() {
>multiplied : number
>           : ^^^^^^

        return this.args.number * 2;
>this.args.number * 2 : number
>                     : ^^^^^^
>this.args.number : any
>                 : ^^^
>this.args : any
>          : ^^^
>this : this
>     : ^^^^
>args : any
>     : ^^^
>number : any
>       : ^^^
>2 : 2
>  : ^
    }
}

// Other fun stuff.

interface OmniDecorator extends MethodDecorator, ClassDecorator, PropertyDecorator {
}

declare function noArgs(): OmniDecorator;
>noArgs : () => OmniDecorator
>       : ^^^^^^             

declare function allRest(...args: any[]): OmniDecorator;
>allRest : (...args: any[]) => OmniDecorator
>        : ^^^^    ^^     ^^^^^             
>args : any[]
>     : ^^^^^

declare function oneOptional(x?: any): OmniDecorator;
>oneOptional : (x?: any) => OmniDecorator
>            : ^ ^^^   ^^^^^             
>x : any
>  : ^^^

declare function twoOptional(x?: any, y?: any): OmniDecorator;
>twoOptional : (x?: any, y?: any) => OmniDecorator
>            : ^ ^^^   ^^ ^^^   ^^^^^             
>x : any
>  : ^^^
>y : any
>  : ^^^

declare function threeOptional(x?: any, y?: any, z?: any): OmniDecorator;
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>              : ^ ^^^   ^^ ^^^   ^^ ^^^   ^^^^^             
>x : any
>  : ^^^
>y : any
>  : ^^^
>z : any
>  : ^^^

declare function oneOptionalWithRest(x?: any, ...args: any[]): OmniDecorator;
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>                    : ^ ^^^   ^^^^^    ^^     ^^^^^             
>x : any
>  : ^^^
>args : any[]
>     : ^^^^^

declare const anyDec: any;
>anyDec : any
>       : ^^^

@noArgs
>noArgs : () => OmniDecorator
>       : ^^^^^^             

class A {
>A : A
>  : ^

    @noArgs foo: any;
>noArgs : () => OmniDecorator
>       : ^^^^^^             
>foo : any
>    : ^^^

    @noArgs bar() { }
>noArgs : () => OmniDecorator
>       : ^^^^^^             
>bar : () => void
>    : ^^^^^^^^^^
}

@allRest
>allRest : (...args: any[]) => OmniDecorator
>        : ^^^^    ^^     ^^^^^             

class B {
>B : B
>  : ^

    @allRest foo: any;
>allRest : (...args: any[]) => OmniDecorator
>        : ^^^^    ^^     ^^^^^             
>foo : any
>    : ^^^

    @allRest bar() { }
>allRest : (...args: any[]) => OmniDecorator
>        : ^^^^    ^^     ^^^^^             
>bar : () => void
>    : ^^^^^^^^^^
}

@oneOptional
>oneOptional : (x?: any) => OmniDecorator
>            : ^ ^^^   ^^^^^             

class C {
>C : C
>  : ^

    @oneOptional foo: any;
>oneOptional : (x?: any) => OmniDecorator
>            : ^ ^^^   ^^^^^             
>foo : any
>    : ^^^

    @oneOptional bar() { }
>oneOptional : (x?: any) => OmniDecorator
>            : ^ ^^^   ^^^^^             
>bar : () => void
>    : ^^^^^^^^^^
}

@twoOptional
>twoOptional : (x?: any, y?: any) => OmniDecorator
>            : ^ ^^^   ^^ ^^^   ^^^^^             

class D {
>D : D
>  : ^

    @twoOptional foo: any;
>twoOptional : (x?: any, y?: any) => OmniDecorator
>            : ^ ^^^   ^^ ^^^   ^^^^^             
>foo : any
>    : ^^^

    @twoOptional bar() { }
>twoOptional : (x?: any, y?: any) => OmniDecorator
>            : ^ ^^^   ^^ ^^^   ^^^^^             
>bar : () => void
>    : ^^^^^^^^^^
}

@threeOptional
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>              : ^ ^^^   ^^ ^^^   ^^ ^^^   ^^^^^             

class E {
>E : E
>  : ^

    @threeOptional foo: any;
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>              : ^ ^^^   ^^ ^^^   ^^ ^^^   ^^^^^             
>foo : any
>    : ^^^

    @threeOptional bar() { }
>threeOptional : (x?: any, y?: any, z?: any) => OmniDecorator
>              : ^ ^^^   ^^ ^^^   ^^ ^^^   ^^^^^             
>bar : () => void
>    : ^^^^^^^^^^
}

@oneOptionalWithRest
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>                    : ^ ^^^   ^^^^^    ^^     ^^^^^             

class F {
>F : F
>  : ^

    @oneOptionalWithRest foo: any;
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>                    : ^ ^^^   ^^^^^    ^^     ^^^^^             
>foo : any
>    : ^^^

    @oneOptionalWithRest bar() { }
>oneOptionalWithRest : (x?: any, ...args: any[]) => OmniDecorator
>                    : ^ ^^^   ^^^^^    ^^     ^^^^^             
>bar : () => void
>    : ^^^^^^^^^^
}

@anyDec
>anyDec : any
>       : ^^^

class G {
>G : G
>  : ^

    @anyDec foo: any;
>anyDec : any
>       : ^^^
>foo : any
>    : ^^^

    @anyDec bar() { }
>anyDec : any
>       : ^^^
>bar : () => void
>    : ^^^^^^^^^^
}

export { };

