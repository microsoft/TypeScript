//// [tests/cases/compiler/predicateSemantics.ts] ////

=== predicateSemantics.ts ===
declare let opt: number | undefined;
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

// OK: One or other operand is possibly nullish
const test1 = (opt ? undefined : 32) ?? "possibly reached";
>test1 : Symbol(test1, Decl(predicateSemantics.ts, 3, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Not OK: Both operands nullish
const test2 = (opt ? undefined : null) ?? "always reached";
>test2 : Symbol(test2, Decl(predicateSemantics.ts, 6, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Not OK: Both operands non-nullish
const test3 = (opt ? 132 : 17) ?? "unreachable";
>test3 : Symbol(test3, Decl(predicateSemantics.ts, 9, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

// Parens
const test4 = (opt ? (undefined) : (17)) ?? 42;
>test4 : Symbol(test4, Decl(predicateSemantics.ts, 12, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

// Should be OK (special case)
if (!!true) {

}

// Should be OK (special cases)
while (0) { }
while (1) { }
while (true) { }
while (false) { }

const p01 = {} ?? null;
>p01 : Symbol(p01, Decl(predicateSemantics.ts, 25, 5))

const p02 = 0 > 1 ?? null;
>p02 : Symbol(p02, Decl(predicateSemantics.ts, 26, 5))

const p03 = null ?? 1;
>p03 : Symbol(p03, Decl(predicateSemantics.ts, 27, 5))

const p04 = null ?? null;
>p04 : Symbol(p04, Decl(predicateSemantics.ts, 28, 5))

const p05 = (class foo { }) && null;
>p05 : Symbol(p05, Decl(predicateSemantics.ts, 29, 5))
>foo : Symbol(foo, Decl(predicateSemantics.ts, 29, 13))

const p06 = (class foo { }) || null;
>p06 : Symbol(p06, Decl(predicateSemantics.ts, 30, 5))
>foo : Symbol(foo, Decl(predicateSemantics.ts, 30, 13))

const p07 = null ?? null ?? null;
>p07 : Symbol(p07, Decl(predicateSemantics.ts, 31, 5))

const p08 = null ?? opt ?? null;
>p08 : Symbol(p08, Decl(predicateSemantics.ts, 32, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p09 = null ?? (opt ? null : undefined) ?? null;
>p09 : Symbol(p09, Decl(predicateSemantics.ts, 33, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

const p10 = opt ?? null ?? 1;
>p10 : Symbol(p10, Decl(predicateSemantics.ts, 35, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p11 = opt ?? null ?? null;
>p11 : Symbol(p11, Decl(predicateSemantics.ts, 36, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p12 = opt ?? (null ?? 1);
>p12 : Symbol(p12, Decl(predicateSemantics.ts, 37, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p13 = opt ?? (null ?? null);
>p13 : Symbol(p13, Decl(predicateSemantics.ts, 38, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p14 = opt ?? (null ?? null ?? null);
>p14 : Symbol(p14, Decl(predicateSemantics.ts, 39, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p15 = opt ?? (opt ? null : undefined) ?? null;
>p15 : Symbol(p15, Decl(predicateSemantics.ts, 40, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>undefined : Symbol(undefined)

const p16 = opt ?? 1 ?? 2;
>p16 : Symbol(p16, Decl(predicateSemantics.ts, 41, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p17 = opt ?? (opt ? 1 : 2) ?? 3;
>p17 : Symbol(p17, Decl(predicateSemantics.ts, 42, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

const p21 = null ?? null ?? null ?? null;
>p21 : Symbol(p21, Decl(predicateSemantics.ts, 44, 5))

const p22 = null ?? 1 ?? 1;
>p22 : Symbol(p22, Decl(predicateSemantics.ts, 45, 5))

const p23 = null ?? (opt ? 1 : 2) ?? 1;
>p23 : Symbol(p23, Decl(predicateSemantics.ts, 46, 5))
>opt : Symbol(opt, Decl(predicateSemantics.ts, 0, 11))

// Outer expression tests
while ({} as any) { }
while ({} satisfies unknown) { }
while ((<any>({}))) { }
while ((({}))) { }

declare let cond: any;
>cond : Symbol(cond, Decl(predicateSemantics.ts, 54, 11))

// Should be OK
console.log((cond || undefined) && 1 / cond);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>cond : Symbol(cond, Decl(predicateSemantics.ts, 54, 11))
>undefined : Symbol(undefined)
>cond : Symbol(cond, Decl(predicateSemantics.ts, 54, 11))

function foo(this: Object | undefined) {
>foo : Symbol(foo, Decl(predicateSemantics.ts, 57, 45))
>this : Symbol(this, Decl(predicateSemantics.ts, 59, 13))
>Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    // Should be OK
    return this ?? 0;
>this : Symbol(this, Decl(predicateSemantics.ts, 59, 13))
}

// https://github.com/microsoft/TypeScript/issues/60401
{
  const maybe = null as true | null;
>maybe : Symbol(maybe, Decl(predicateSemantics.ts, 66, 7))

  let i = 0;
>i : Symbol(i, Decl(predicateSemantics.ts, 67, 5))

  const d = (i++, maybe) ?? true; // ok
>d : Symbol(d, Decl(predicateSemantics.ts, 68, 7))
>i : Symbol(i, Decl(predicateSemantics.ts, 67, 5))
>maybe : Symbol(maybe, Decl(predicateSemantics.ts, 66, 7))

  const e = (i++, i++) ?? true; // error
>e : Symbol(e, Decl(predicateSemantics.ts, 69, 7))
>i : Symbol(i, Decl(predicateSemantics.ts, 67, 5))
>i : Symbol(i, Decl(predicateSemantics.ts, 67, 5))

  const f = (maybe, i++) ?? true; // error
>f : Symbol(f, Decl(predicateSemantics.ts, 70, 7))
>maybe : Symbol(maybe, Decl(predicateSemantics.ts, 66, 7))
>i : Symbol(i, Decl(predicateSemantics.ts, 67, 5))
}

// https://github.com/microsoft/TypeScript/issues/60439
class X {
>X : Symbol(X, Decl(predicateSemantics.ts, 71, 1))

  constructor() {
    const p = new.target ?? 32;
>p : Symbol(p, Decl(predicateSemantics.ts, 76, 9))
>new.target : Symbol(X, Decl(predicateSemantics.ts, 71, 1))
>target : Symbol(X, Decl(predicateSemantics.ts, 71, 1))
  }
}

// https://github.com/microsoft/TypeScript/issues/60614
declare function tag<T>(
>tag : Symbol(tag, Decl(predicateSemantics.ts, 78, 1))
>T : Symbol(T, Decl(predicateSemantics.ts, 81, 21))

  strings: TemplateStringsArray,
>strings : Symbol(strings, Decl(predicateSemantics.ts, 81, 24))
>TemplateStringsArray : Symbol(TemplateStringsArray, Decl(lib.es5.d.ts, --, --))

  ...values: number[]
>values : Symbol(values, Decl(predicateSemantics.ts, 82, 32))

): T | null;
>T : Symbol(T, Decl(predicateSemantics.ts, 81, 21))

tag`foo${1}` ?? 32; // ok
>tag : Symbol(tag, Decl(predicateSemantics.ts, 78, 1))

`foo${1}` ?? 32; // error
`foo` ?? 32; // error

