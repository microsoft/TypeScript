//// [tests/cases/compiler/privacyCheckAnonymousFunctionParameter.ts] ////

=== privacyCheckAnonymousFunctionParameter.ts ===
export var x = 1;  // Makes this an external module
>x : Symbol(x, Decl(privacyCheckAnonymousFunctionParameter.ts, 0, 10))

interface Iterator<T> {
>Iterator : Symbol(Iterator, Decl(privacyCheckAnonymousFunctionParameter.ts, 0, 17))
>T : Symbol(T, Decl(privacyCheckAnonymousFunctionParameter.ts, 1, 19))
}

namespace Query {
>Query : Symbol(Query, Decl(privacyCheckAnonymousFunctionParameter.ts, 2, 1))

    export function fromDoWhile<T>(doWhile: (test: Iterator<T>) => boolean): Iterator<T> {
>fromDoWhile : Symbol(fromDoWhile, Decl(privacyCheckAnonymousFunctionParameter.ts, 4, 17))
>T : Symbol(T, Decl(privacyCheckAnonymousFunctionParameter.ts, 5, 32))
>doWhile : Symbol(doWhile, Decl(privacyCheckAnonymousFunctionParameter.ts, 5, 35))
>test : Symbol(test, Decl(privacyCheckAnonymousFunctionParameter.ts, 5, 45))
>Iterator : Symbol(Iterator, Decl(privacyCheckAnonymousFunctionParameter.ts, 0, 17))
>T : Symbol(T, Decl(privacyCheckAnonymousFunctionParameter.ts, 5, 32))
>Iterator : Symbol(Iterator, Decl(privacyCheckAnonymousFunctionParameter.ts, 0, 17))
>T : Symbol(T, Decl(privacyCheckAnonymousFunctionParameter.ts, 5, 32))

        return null;
    }

    function fromOrderBy() {
>fromOrderBy : Symbol(fromOrderBy, Decl(privacyCheckAnonymousFunctionParameter.ts, 7, 5))

        return fromDoWhile(test => {
>fromDoWhile : Symbol(fromDoWhile, Decl(privacyCheckAnonymousFunctionParameter.ts, 4, 17))
>test : Symbol(test, Decl(privacyCheckAnonymousFunctionParameter.ts, 10, 27))

            return true;
        });
    }
}

