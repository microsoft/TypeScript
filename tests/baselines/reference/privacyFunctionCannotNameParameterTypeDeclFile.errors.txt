privacyFunctionCannotNameParameterTypeDeclFile_GlobalWidgets.ts(7,19): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
privacyFunctionCannotNameParameterTypeDeclFile_Widgets.ts(8,15): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.


==== privacyFunctionCannotNameParameterTypeDeclFile_consumer.ts (0 errors) ====
    import exporter = require("./privacyFunctionCannotNameParameterTypeDeclFile_exporter");
    export class publicClassWithWithPrivateParmeterTypes {
        static myPublicStaticMethod(param = exporter.createExportedWidget1()) { // Error
        }
        private static myPrivateStaticMethod(param = exporter.createExportedWidget1()) {
        }
        myPublicMethod(param  = exporter.createExportedWidget1()) { // Error
        }
        private myPrivateMethod(param = exporter.createExportedWidget1()) {
        }
        constructor(param = exporter.createExportedWidget1(), private param1 = exporter.createExportedWidget1(), public param2 = exporter.createExportedWidget1()) { // Error
        }
    }
    export class publicClassWithWithPrivateParmeterTypes1 {
        static myPublicStaticMethod(param = exporter.createExportedWidget3()) { // Error
        }
        private static myPrivateStaticMethod(param = exporter.createExportedWidget3()) {
        }
        myPublicMethod(param  = exporter.createExportedWidget3()) { // Error
        }
        private myPrivateMethod(param = exporter.createExportedWidget3()) {
        }
        constructor(param = exporter.createExportedWidget3(), private param1 = exporter.createExportedWidget3(), public param2 = exporter.createExportedWidget3()) { // Error
        }
    }
    
    class privateClassWithWithPrivateParmeterTypes {
        static myPublicStaticMethod(param = exporter.createExportedWidget1()) {
        }
        private static myPrivateStaticMethod(param = exporter.createExportedWidget1()) {
        }
        myPublicMethod(param  = exporter.createExportedWidget1()) {
        }
        private myPrivateMethod(param = exporter.createExportedWidget1()) {
        }
        constructor(param = exporter.createExportedWidget1(), private param1 = exporter.createExportedWidget1(), public param2 = exporter.createExportedWidget1()) {
        }
    }
    class privateClassWithWithPrivateParmeterTypes2 {
        static myPublicStaticMethod(param = exporter.createExportedWidget3()) {
        }
        private static myPrivateStaticMethod(param = exporter.createExportedWidget3()) {
        }
        myPublicMethod(param  = exporter.createExportedWidget3()) {
        }
        private myPrivateMethod(param = exporter.createExportedWidget3()) {
        }
        constructor(param = exporter.createExportedWidget3(), private param1 = exporter.createExportedWidget3(), public param2 = exporter.createExportedWidget3()) {
        }
    }
    
    export function publicFunctionWithPrivateParmeterTypes(param = exporter.createExportedWidget1()) { // Error
    }
    function privateFunctionWithPrivateParmeterTypes(param = exporter.createExportedWidget1()) {
    }
    export function publicFunctionWithPrivateParmeterTypes1(param = exporter.createExportedWidget3()) { // Error
    }
    function privateFunctionWithPrivateParmeterTypes1(param = exporter.createExportedWidget3()) {
    }
    
    
    export class publicClassWithPrivateModuleParameterTypes {
        static myPublicStaticMethod(param= exporter.createExportedWidget2()) { // Error
        }
        myPublicMethod(param= exporter.createExportedWidget2()) { // Error
        }
        constructor(param= exporter.createExportedWidget2(), private param1= exporter.createExportedWidget2(), public param2= exporter.createExportedWidget2()) { // Error
        }
    }
    export class publicClassWithPrivateModuleParameterTypes2 {
        static myPublicStaticMethod(param= exporter.createExportedWidget4()) { // Error
        }
        myPublicMethod(param= exporter.createExportedWidget4()) { // Error
        }
        constructor(param= exporter.createExportedWidget4(), private param1= exporter.createExportedWidget4(), public param2= exporter.createExportedWidget4()) { // Error
        }
    }
    export function publicFunctionWithPrivateModuleParameterTypes(param= exporter.createExportedWidget2()) { // Error
    }
    export function publicFunctionWithPrivateModuleParameterTypes1(param= exporter.createExportedWidget4()) { // Error
    }
    
    
    class privateClassWithPrivateModuleParameterTypes {
        static myPublicStaticMethod(param= exporter.createExportedWidget2()) {
        }
        myPublicMethod(param= exporter.createExportedWidget2()) {
        }
        constructor(param= exporter.createExportedWidget2(), private param1= exporter.createExportedWidget2(), public param2= exporter.createExportedWidget2()) {
        }
    }
    class privateClassWithPrivateModuleParameterTypes1 {
        static myPublicStaticMethod(param= exporter.createExportedWidget4()) {
        }
        myPublicMethod(param= exporter.createExportedWidget4()) {
        }
        constructor(param= exporter.createExportedWidget4(), private param1= exporter.createExportedWidget4(), public param2= exporter.createExportedWidget4()) {
        }
    }
    function privateFunctionWithPrivateModuleParameterTypes(param= exporter.createExportedWidget2()) {
    }
    function privateFunctionWithPrivateModuleParameterTypes1(param= exporter.createExportedWidget4()) {
    }
==== privacyFunctionCannotNameParameterTypeDeclFile_GlobalWidgets.ts (1 errors) ====
    declare module "GlobalWidgets" {
        export class Widget3 {
            name: string;
        }
        export function createWidget3(): Widget3;
    
        export module SpecializedGlobalWidget {
                      ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
            export class Widget4 {
                name: string;
            }
            function createWidget4(): Widget4;
        }
    }
    
==== privacyFunctionCannotNameParameterTypeDeclFile_Widgets.ts (1 errors) ====
    export class Widget1 {
        name = 'one';
    }
    export function createWidget1() {
        return new Widget1();
    }
    
    export module SpecializedWidget {
                  ~~~~~~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        export class Widget2 {
            name = 'one';
        }
        export function createWidget2() {
            return new Widget2();
        }
    }
    
==== privacyFunctionCannotNameParameterTypeDeclFile_exporter.ts (0 errors) ====
    ///<reference path='privacyFunctionCannotNameParameterTypeDeclFile_GlobalWidgets.ts'/>
    import Widgets = require("./privacyFunctionCannotNameParameterTypeDeclFile_Widgets");
    import Widgets1 = require("GlobalWidgets");
    export function createExportedWidget1() {
        return Widgets.createWidget1();
    }
    export function createExportedWidget2() {
        return Widgets.SpecializedWidget.createWidget2();
    }
    export function createExportedWidget3() {
        return Widgets1.createWidget3();
    }
    export function createExportedWidget4() {
        return Widgets1.SpecializedGlobalWidget.createWidget4();
    }
    