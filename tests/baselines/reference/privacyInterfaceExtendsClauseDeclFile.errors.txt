privacyInterfaceExtendsClauseDeclFile_GlobalFile.ts(1,8): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
privacyInterfaceExtendsClauseDeclFile_externalModule.ts(1,15): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
privacyInterfaceExtendsClauseDeclFile_externalModule.ts(26,8): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.


==== privacyInterfaceExtendsClauseDeclFile_externalModule.ts (2 errors) ====
    export module publicModule {
                  ~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        export interface publicInterfaceInPublicModule {
        }
    
        interface privateInterfaceInPublicModule {
        }
    
        interface privateInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
        }
        interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule {
        }
        export interface publicInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
        }
        export interface publicInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule { // Should error
        }
    
        interface privateInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
        }
        export interface publicInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule { // Should error
        }
    
        export interface publicInterfaceImplementingPrivateAndPublicInterface extends privateInterfaceInPublicModule, publicInterfaceInPublicModule { // Should error
        }
    }
    
    module privateModule {
           ~~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        export interface publicInterfaceInPrivateModule {
    
        }
    
        interface privateInterfaceInPrivateModule {
        }
    
        interface privateInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPrivateModule {
        }
        interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPrivateModule {
        }
        export interface publicInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPrivateModule {
        }
        export interface publicInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPrivateModule {
        }
    
        interface privateInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
        }
        export interface publicInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
        }
    }
    
    export interface publicInterface {
    
    }
    
    interface privateInterface {
    }
    
    interface privateInterfaceImplementingPublicInterface extends publicInterface {
    }
    interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterface {
    }
    export interface publicInterfaceImplementingPublicInterface extends publicInterface {
    }
    export interface publicInterfaceImplementingPrivateInterface extends privateInterface { // Should error
    }
    
    interface privateInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
    }
    export interface publicInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule { // Should error
    }
    
==== privacyInterfaceExtendsClauseDeclFile_GlobalFile.ts (1 errors) ====
    module publicModuleInGlobal {
           ~~~~~~~~~~~~~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        export interface publicInterfaceInPublicModule {
        }
    
        interface privateInterfaceInPublicModule {
        }
    
        interface privateInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
        }
        interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule {
        }
        export interface publicInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
        }
        export interface publicInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule { // Should error
        }
    }
    interface publicInterfaceInGlobal {
    }
    interface publicInterfaceImplementingPublicInterfaceInGlobal extends publicInterfaceInGlobal {
    }
    