//// [tests/cases/compiler/privacyTypeParameterOfFunctionDeclFile.ts] ////

=== privacyTypeParameterOfFunctionDeclFile.ts ===
class privateClass {
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
}

export class publicClass {
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

export interface publicInterfaceWithPrivateTypeParameters {
>publicInterfaceWithPrivateTypeParameters : Symbol(publicInterfaceWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 4, 1))

    new <T extends privateClass>(): privateClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 7, 9))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))

    <T extends privateClass>(): privateClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 8, 5))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))

    myMethod<T extends privateClass>(): privateClass;  // Error
>myMethod : Symbol(publicInterfaceWithPrivateTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 8, 45))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 9, 13))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
}

export interface publicInterfaceWithPublicTypeParameters {
>publicInterfaceWithPublicTypeParameters : Symbol(publicInterfaceWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 10, 1))

    new <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 13, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 14, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    myMethod<T extends publicClass>(): publicClass;
>myMethod : Symbol(publicInterfaceWithPublicTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 14, 43))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 15, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

interface privateInterfaceWithPrivateTypeParameters {
>privateInterfaceWithPrivateTypeParameters : Symbol(privateInterfaceWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 16, 1))

    new <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 19, 9))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))

    <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 20, 5))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))

    myMethod<T extends privateClass>(): privateClass;
>myMethod : Symbol(privateInterfaceWithPrivateTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 20, 45))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 21, 13))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
}

interface privateInterfaceWithPublicTypeParameters {
>privateInterfaceWithPublicTypeParameters : Symbol(privateInterfaceWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 22, 1))

    new <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 25, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 26, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    myMethod<T extends publicClass>(): publicClass;
>myMethod : Symbol(privateInterfaceWithPublicTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 26, 43))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 27, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : Symbol(publicClassWithWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 28, 1))

    static myPublicStaticMethod<T extends privateClass>() {  // Error
>myPublicStaticMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 30, 55))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 31, 32))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
    private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 32, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 33, 41))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
    myPublicMethod<T extends privateClass>() {  // Error
>myPublicMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 34, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 35, 19))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
    private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 36, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 37, 28))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
}

export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : Symbol(publicClassWithWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 39, 1))

    static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : Symbol(publicClassWithWithPublicTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 41, 54))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 42, 32))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
    private static myPrivateStaticMethod<T extends publicClass>() { 
>myPrivateStaticMethod : Symbol(publicClassWithWithPublicTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 43, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 44, 41))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
    myPublicMethod<T extends publicClass>() {
>myPublicMethod : Symbol(publicClassWithWithPublicTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 45, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 46, 19))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
    private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : Symbol(publicClassWithWithPublicTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 47, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 48, 28))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
}

class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : Symbol(privateClassWithWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 50, 1))

    static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 52, 49))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 53, 32))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
    private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 54, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 55, 41))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
    myPublicMethod<T extends privateClass>() {
>myPublicMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 56, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 57, 19))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
    private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 58, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 59, 28))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
    }
}

class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : Symbol(privateClassWithWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 61, 1))

    static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPublicTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 63, 48))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 64, 32))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
    private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPublicTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 65, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 66, 41))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
    myPublicMethod<T extends publicClass>() {
>myPublicMethod : Symbol(privateClassWithWithPublicTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 67, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 68, 19))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
    private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : Symbol(privateClassWithWithPublicTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 69, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 70, 28))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
    }
}

export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
>publicFunctionWithPrivateTypeParameters : Symbol(publicFunctionWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 72, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 74, 56))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
}

export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : Symbol(publicFunctionWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 75, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 77, 55))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : Symbol(privateFunctionWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 78, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 80, 50))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 0, 0))
}

function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : Symbol(privateFunctionWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 81, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 83, 49))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
>publicInterfaceWithPublicTypeParametersWithoutExtends : Symbol(publicInterfaceWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 84, 1))

    new <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 87, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 88, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    myMethod<T>(): publicClass;
>myMethod : Symbol(publicInterfaceWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 88, 23))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 89, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

interface privateInterfaceWithPublicTypeParametersWithoutExtends {
>privateInterfaceWithPublicTypeParametersWithoutExtends : Symbol(privateInterfaceWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 90, 1))

    new <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 93, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 94, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))

    myMethod<T>(): publicClass;
>myMethod : Symbol(privateInterfaceWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 94, 23))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 95, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 1, 1))
}

export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 96, 1))

    static myPublicStaticMethod<T>() {
>myPublicStaticMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 98, 68))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 99, 32))
    }
    private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 100, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 101, 41))
    }
    myPublicMethod<T>() {
>myPublicMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 102, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 103, 19))
    }
    private myPrivateMethod<T>() {
>myPrivateMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 104, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 105, 28))
    }
}
class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 107, 1))

    static myPublicStaticMethod<T>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 108, 62))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 109, 32))
    }
    private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 110, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 111, 41))
    }
    myPublicMethod<T>() {
>myPublicMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 112, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 113, 19))
    }
    private myPrivateMethod<T>() {
>myPrivateMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 114, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 115, 28))
    }
}

export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : Symbol(publicFunctionWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 117, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 119, 69))
}

function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : Symbol(privateFunctionWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 120, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 122, 63))
}

export interface publicInterfaceWithPrivatModuleTypeParameters {
>publicInterfaceWithPrivatModuleTypeParameters : Symbol(publicInterfaceWithPrivatModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 123, 1))

    new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 126, 9))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

    <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 127, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>myMethod : Symbol(publicInterfaceWithPrivatModuleTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 127, 71))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 128, 13))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
}
export class publicClassWithWithPrivateModuleTypeParameters {
>publicClassWithWithPrivateModuleTypeParameters : Symbol(publicClassWithWithPrivateModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 129, 1))

    static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
>myPublicStaticMethod : Symbol(publicClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 130, 61))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 131, 32))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }
    myPublicMethod<T extends privateModule.publicClass>() {  // Error
>myPublicMethod : Symbol(publicClassWithWithPrivateModuleTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 132, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 133, 19))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }
}
export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
>publicFunctionWithPrivateMopduleTypeParameters : Symbol(publicFunctionWithPrivateMopduleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 135, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 136, 63))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
}


interface privateInterfaceWithPrivatModuleTypeParameters {
>privateInterfaceWithPrivatModuleTypeParameters : Symbol(privateInterfaceWithPrivatModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 137, 1))

    new <T extends privateModule.publicClass>(): privateModule.publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 141, 9))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

    <T extends privateModule.publicClass>(): privateModule.publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 142, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
>myMethod : Symbol(privateInterfaceWithPrivatModuleTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 142, 71))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 143, 13))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
}
class privateClassWithWithPrivateModuleTypeParameters {
>privateClassWithWithPrivateModuleTypeParameters : Symbol(privateClassWithWithPrivateModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 144, 1))

    static myPublicStaticMethod<T extends privateModule.publicClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 145, 55))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 146, 32))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }
    myPublicMethod<T extends privateModule.publicClass>() {
>myPublicMethod : Symbol(privateClassWithWithPrivateModuleTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 147, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 148, 19))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }
}
function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {
>privateFunctionWithPrivateMopduleTypeParameters : Symbol(privateFunctionWithPrivateMopduleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 150, 1))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 151, 57))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
}


export namespace publicModule {
>publicModule : Symbol(publicModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 152, 1))

    class privateClass {
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
    }

    export class publicClass {
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    export interface publicInterfaceWithPrivateTypeParameters {
>publicInterfaceWithPrivateTypeParameters : Symbol(publicInterfaceWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 160, 5))

        new <T extends privateClass>(): privateClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 163, 13))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))

        <T extends privateClass>(): privateClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 164, 9))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))

        myMethod<T extends privateClass>(): privateClass;  // Error
>myMethod : Symbol(publicInterfaceWithPrivateTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 164, 49))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 165, 17))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
    }

    export interface publicInterfaceWithPublicTypeParameters {
>publicInterfaceWithPublicTypeParameters : Symbol(publicInterfaceWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 166, 5))

        new <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 169, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 170, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        myMethod<T extends publicClass>(): publicClass;
>myMethod : Symbol(publicInterfaceWithPublicTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 170, 47))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 171, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    interface privateInterfaceWithPrivateTypeParameters {
>privateInterfaceWithPrivateTypeParameters : Symbol(privateInterfaceWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 172, 5))

        new <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 175, 13))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))

        <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 176, 9))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))

        myMethod<T extends privateClass>(): privateClass;
>myMethod : Symbol(privateInterfaceWithPrivateTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 176, 49))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 177, 17))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
    }

    interface privateInterfaceWithPublicTypeParameters {
>privateInterfaceWithPublicTypeParameters : Symbol(privateInterfaceWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 178, 5))

        new <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 181, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 182, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        myMethod<T extends publicClass>(): publicClass;
>myMethod : Symbol(privateInterfaceWithPublicTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 182, 47))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 183, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : Symbol(publicClassWithWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 184, 5))

        static myPublicStaticMethod<T extends privateClass>() {  // Error
>myPublicStaticMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 186, 59))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 187, 36))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 188, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 189, 45))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
        myPublicMethod<T extends privateClass>() {  // Error
>myPublicMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 190, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 191, 23))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 192, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 193, 32))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
    }

    export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : Symbol(publicClassWithWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 195, 5))

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : Symbol(publicClassWithWithPublicTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 197, 58))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 198, 36))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPublicTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 199, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 200, 45))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : Symbol(publicClassWithWithPublicTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 201, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 202, 23))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : Symbol(publicClassWithWithPublicTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 203, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 204, 32))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
    }

    class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : Symbol(privateClassWithWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 206, 5))

        static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 208, 53))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 209, 36))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 210, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 211, 45))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
        myPublicMethod<T extends privateClass>() {
>myPublicMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 212, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 213, 23))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 214, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 215, 32))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
        }
    }

    class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : Symbol(privateClassWithWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 217, 5))

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPublicTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 219, 52))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 220, 36))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPublicTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 221, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 222, 45))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : Symbol(privateClassWithWithPublicTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 223, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 224, 23))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : Symbol(privateClassWithWithPublicTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 225, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 226, 32))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
        }
    }

    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
>publicFunctionWithPrivateTypeParameters : Symbol(publicFunctionWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 228, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 230, 60))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
    }

    export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : Symbol(publicFunctionWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 231, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 233, 59))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : Symbol(privateFunctionWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 234, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 236, 54))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 155, 31))
    }

    function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : Symbol(privateFunctionWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 237, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 239, 53))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
>publicInterfaceWithPublicTypeParametersWithoutExtends : Symbol(publicInterfaceWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 240, 5))

        new <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 243, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 244, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        myMethod<T>(): publicClass;
>myMethod : Symbol(publicInterfaceWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 244, 27))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 245, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    interface privateInterfaceWithPublicTypeParametersWithoutExtends {
>privateInterfaceWithPublicTypeParametersWithoutExtends : Symbol(privateInterfaceWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 246, 5))

        new <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 249, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 250, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))

        myMethod<T>(): publicClass;
>myMethod : Symbol(privateInterfaceWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 250, 27))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 251, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 157, 5))
    }

    export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 252, 5))

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 254, 72))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 255, 36))
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 256, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 257, 45))
        }
        myPublicMethod<T>() {
>myPublicMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 258, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 259, 23))
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 260, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 261, 32))
        }
    }
    class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 263, 5))

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 264, 66))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 265, 36))
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 266, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 267, 45))
        }
        myPublicMethod<T>() {
>myPublicMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 268, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 269, 23))
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 270, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 271, 32))
        }
    }

    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : Symbol(publicFunctionWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 273, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 275, 73))
    }

    function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : Symbol(privateFunctionWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 276, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 278, 67))
    }

    export interface publicInterfaceWithPrivatModuleTypeParameters {
>publicInterfaceWithPrivatModuleTypeParameters : Symbol(publicInterfaceWithPrivatModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 279, 5))

        new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 282, 13))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 283, 9))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>myMethod : Symbol(publicInterfaceWithPrivatModuleTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 283, 75))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 284, 17))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }
    export class publicClassWithWithPrivateModuleTypeParameters {
>publicClassWithWithPrivateModuleTypeParameters : Symbol(publicClassWithWithPrivateModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 285, 5))

        static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
>myPublicStaticMethod : Symbol(publicClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 286, 65))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 287, 36))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        myPublicMethod<T extends privateModule.publicClass>() {  // Error
>myPublicMethod : Symbol(publicClassWithWithPrivateModuleTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 288, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 289, 23))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
    }
    export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
>publicFunctionWithPrivateMopduleTypeParameters : Symbol(publicFunctionWithPrivateMopduleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 291, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 292, 67))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }


    interface privateInterfaceWithPrivatModuleTypeParameters {
>privateInterfaceWithPrivatModuleTypeParameters : Symbol(privateInterfaceWithPrivatModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 293, 5))

        new <T extends privateModule.publicClass>(): privateModule.publicClass;  
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 297, 13))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        <T extends privateModule.publicClass>(): privateModule.publicClass;  
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 298, 9))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  
>myMethod : Symbol(privateInterfaceWithPrivatModuleTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 298, 75))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 299, 17))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }
    class privateClassWithWithPrivateModuleTypeParameters {
>privateClassWithWithPrivateModuleTypeParameters : Symbol(privateClassWithWithPrivateModuleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 300, 5))

        static myPublicStaticMethod<T extends privateModule.publicClass>() {  
>myPublicStaticMethod : Symbol(privateClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 301, 59))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 302, 36))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        myPublicMethod<T extends privateModule.publicClass>() { 
>myPublicMethod : Symbol(privateClassWithWithPrivateModuleTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 303, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 304, 23))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
    }
    function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() { 
>privateFunctionWithPrivateMopduleTypeParameters : Symbol(privateFunctionWithPrivateMopduleTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 306, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 307, 61))
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))
>publicClass : Symbol(privateModule.publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

}

namespace privateModule {
>privateModule : Symbol(privateModule, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 310, 1))

    class privateClass {
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
    }

    export class publicClass {
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    export interface publicInterfaceWithPrivateTypeParameters {
>publicInterfaceWithPrivateTypeParameters : Symbol(publicInterfaceWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 317, 5))

        new <T extends privateClass>(): privateClass; 
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 320, 13))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))

        <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 321, 9))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))

        myMethod<T extends privateClass>(): privateClass; 
>myMethod : Symbol(publicInterfaceWithPrivateTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 321, 49))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 322, 17))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
    }

    export interface publicInterfaceWithPublicTypeParameters {
>publicInterfaceWithPublicTypeParameters : Symbol(publicInterfaceWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 323, 5))

        new <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 326, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 327, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        myMethod<T extends publicClass>(): publicClass;
>myMethod : Symbol(publicInterfaceWithPublicTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 327, 47))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 328, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    interface privateInterfaceWithPrivateTypeParameters {
>privateInterfaceWithPrivateTypeParameters : Symbol(privateInterfaceWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 329, 5))

        new <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 332, 13))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))

        <T extends privateClass>(): privateClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 333, 9))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))

        myMethod<T extends privateClass>(): privateClass;
>myMethod : Symbol(privateInterfaceWithPrivateTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 333, 49))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 334, 17))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
    }

    interface privateInterfaceWithPublicTypeParameters {
>privateInterfaceWithPublicTypeParameters : Symbol(privateInterfaceWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 335, 5))

        new <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 338, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        <T extends publicClass>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 339, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        myMethod<T extends publicClass>(): publicClass;
>myMethod : Symbol(privateInterfaceWithPublicTypeParameters.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 339, 47))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 340, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : Symbol(publicClassWithWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 341, 5))

        static myPublicStaticMethod<T extends privateClass>() { 
>myPublicStaticMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 343, 59))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 344, 36))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 345, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 346, 45))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
        myPublicMethod<T extends privateClass>() {  
>myPublicMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 347, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 348, 23))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : Symbol(publicClassWithWithPrivateTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 349, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 350, 32))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
    }

    export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : Symbol(publicClassWithWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 352, 5))

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : Symbol(publicClassWithWithPublicTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 354, 58))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 355, 36))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPublicTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 356, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 357, 45))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : Symbol(publicClassWithWithPublicTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 358, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 359, 23))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : Symbol(publicClassWithWithPublicTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 360, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 361, 32))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
    }

    class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : Symbol(privateClassWithWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 363, 5))

        static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 365, 53))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 366, 36))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 367, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 368, 45))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
        myPublicMethod<T extends privateClass>() {
>myPublicMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 369, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 370, 23))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : Symbol(privateClassWithWithPrivateTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 371, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 372, 32))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
        }
    }

    class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : Symbol(privateClassWithWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 374, 5))

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPublicTypeParameters.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 376, 52))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 377, 36))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPublicTypeParameters.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 378, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 379, 45))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : Symbol(privateClassWithWithPublicTypeParameters.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 380, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 381, 23))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : Symbol(privateClassWithWithPublicTypeParameters.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 382, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 383, 32))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
        }
    }

    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() { 
>publicFunctionWithPrivateTypeParameters : Symbol(publicFunctionWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 385, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 387, 60))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
    }

    export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : Symbol(publicFunctionWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 388, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 390, 59))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : Symbol(privateFunctionWithPrivateTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 391, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 393, 54))
>privateClass : Symbol(privateClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 312, 25))
    }

    function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : Symbol(privateFunctionWithPublicTypeParameters, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 394, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 396, 53))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
>publicInterfaceWithPublicTypeParametersWithoutExtends : Symbol(publicInterfaceWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 397, 5))

        new <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 400, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 401, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        myMethod<T>(): publicClass;
>myMethod : Symbol(publicInterfaceWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 401, 27))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 402, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    interface privateInterfaceWithPublicTypeParametersWithoutExtends {
>privateInterfaceWithPublicTypeParametersWithoutExtends : Symbol(privateInterfaceWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 403, 5))

        new <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 406, 13))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        <T>(): publicClass;
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 407, 9))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))

        myMethod<T>(): publicClass;
>myMethod : Symbol(privateInterfaceWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 407, 27))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 408, 17))
>publicClass : Symbol(publicClass, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 314, 5))
    }

    export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 409, 5))

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 411, 72))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 412, 36))
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 413, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 414, 45))
        }
        myPublicMethod<T>() {
>myPublicMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 415, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 416, 23))
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : Symbol(publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 417, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 418, 32))
        }
    }
    class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 420, 5))

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 421, 66))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 422, 36))
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 423, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 424, 45))
        }
        myPublicMethod<T>() {
>myPublicMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPublicMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 425, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 426, 23))
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : Symbol(privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateMethod, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 427, 9))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 428, 32))
        }
    }

    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : Symbol(publicFunctionWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 430, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 432, 73))
    }

    function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : Symbol(privateFunctionWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 433, 5))
>T : Symbol(T, Decl(privacyTypeParameterOfFunctionDeclFile.ts, 435, 67))
    }
}
