//// [tests/cases/compiler/privacyTypeParameterOfFunctionDeclFile.ts] ////

=== privacyTypeParameterOfFunctionDeclFile.ts ===
class privateClass {
>privateClass : privateClass
>             : ^^^^^^^^^^^^
}

export class publicClass {
>publicClass : publicClass
>            : ^^^^^^^^^^^
}

export interface publicInterfaceWithPrivateTypeParameters {
    new <T extends privateClass>(): privateClass;  // Error
    <T extends privateClass>(): privateClass;  // Error
    myMethod<T extends privateClass>(): privateClass;  // Error
>myMethod : <T extends privateClass>() => privateClass
>         : ^ ^^^^^^^^^            ^^^^^^^            
}

export interface publicInterfaceWithPublicTypeParameters {
    new <T extends publicClass>(): publicClass;
    <T extends publicClass>(): publicClass;
    myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>         : ^ ^^^^^^^^^           ^^^^^^^           
}

interface privateInterfaceWithPrivateTypeParameters {
    new <T extends privateClass>(): privateClass;
    <T extends privateClass>(): privateClass;
    myMethod<T extends privateClass>(): privateClass;
>myMethod : <T extends privateClass>() => privateClass
>         : ^ ^^^^^^^^^            ^^^^^^^            
}

interface privateInterfaceWithPublicTypeParameters {
    new <T extends publicClass>(): publicClass;
    <T extends publicClass>(): publicClass;
    myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>         : ^ ^^^^^^^^^           ^^^^^^^           
}

export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : publicClassWithWithPrivateTypeParameters
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T extends privateClass>() {  // Error
>myPublicStaticMethod : <T extends privateClass>() => void
>                     : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
    private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>                      : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
    myPublicMethod<T extends privateClass>() {  // Error
>myPublicMethod : <T extends privateClass>() => void
>               : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
    private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>                : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
}

export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : publicClassWithWithPublicTypeParameters
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>                     : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
    private static myPrivateStaticMethod<T extends publicClass>() { 
>myPrivateStaticMethod : <T extends publicClass>() => void
>                      : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
    myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>               : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
    private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
}

class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : privateClassWithWithPrivateTypeParameters
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : <T extends privateClass>() => void
>                     : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
    private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>                      : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
    myPublicMethod<T extends privateClass>() {
>myPublicMethod : <T extends privateClass>() => void
>               : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
    private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>                : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }
}

class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : privateClassWithWithPublicTypeParameters
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>                     : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
    private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>                      : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
    myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>               : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
    private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }
}

export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
>publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>                                        : ^ ^^^^^^^^^            ^^^^^^^^^^^
}

export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>                                       : ^ ^^^^^^^^^           ^^^^^^^^^^^
}

function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>                                         : ^ ^^^^^^^^^            ^^^^^^^^^^^
}

function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>                                        : ^ ^^^^^^^^^           ^^^^^^^^^^^
}

export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
    new <T>(): publicClass;
    <T>(): publicClass;
    myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>         : ^ ^^^^^^^           
}

interface privateInterfaceWithPublicTypeParametersWithoutExtends {
    new <T>(): publicClass;
    <T>(): publicClass;
    myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>         : ^ ^^^^^^^           
}

export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : publicClassWithWithPublicTypeParametersWithoutExtends
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>                     : ^ ^^^^^^^^^^^
    }
    private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>                      : ^ ^^^^^^^^^^^
    }
    myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>               : ^ ^^^^^^^^^^^
    }
    private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>                : ^ ^^^^^^^^^^^
    }
}
class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : privateClassWithWithPublicTypeParametersWithoutExtends
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>                     : ^ ^^^^^^^^^^^
    }
    private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>                      : ^ ^^^^^^^^^^^
    }
    myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>               : ^ ^^^^^^^^^^^
    }
    private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>                : ^ ^^^^^^^^^^^
    }
}

export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>                                                     : ^ ^^^^^^^^^^^
}

function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>                                                      : ^ ^^^^^^^^^^^
}

export interface publicInterfaceWithPrivatModuleTypeParameters {
    new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

    <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
>         : ^ ^^^^^^^^^                         ^^^^^^^                         
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^
}
export class publicClassWithWithPrivateModuleTypeParameters {
>publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
>myPublicStaticMethod : <T extends privateModule.publicClass>() => void
>                     : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
    }
    myPublicMethod<T extends privateModule.publicClass>() {  // Error
>myPublicMethod : <T extends privateModule.publicClass>() => void
>               : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
    }
}
export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
>publicFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
>                                               : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
}


interface privateInterfaceWithPrivatModuleTypeParameters {
    new <T extends privateModule.publicClass>(): privateModule.publicClass;
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

    <T extends privateModule.publicClass>(): privateModule.publicClass;
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
>myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
>         : ^ ^^^^^^^^^                         ^^^^^^^                         
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^
}
class privateClassWithWithPrivateModuleTypeParameters {
>privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static myPublicStaticMethod<T extends privateModule.publicClass>() {
>myPublicStaticMethod : <T extends privateModule.publicClass>() => void
>                     : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
    }
    myPublicMethod<T extends privateModule.publicClass>() {
>myPublicMethod : <T extends privateModule.publicClass>() => void
>               : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
    }
}
function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {
>privateFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
>                                                : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
}


export module publicModule {
>publicModule : typeof publicModule
>             : ^^^^^^^^^^^^^^^^^^^

    class privateClass {
>privateClass : privateClass
>             : ^^^^^^^^^^^^
    }

    export class publicClass {
>publicClass : publicClass
>            : ^^^^^^^^^^^
    }

    export interface publicInterfaceWithPrivateTypeParameters {
        new <T extends privateClass>(): privateClass;  // Error
        <T extends privateClass>(): privateClass;  // Error
        myMethod<T extends privateClass>(): privateClass;  // Error
>myMethod : <T extends privateClass>() => privateClass
>         : ^ ^^^^^^^^^            ^^^^^^^            
    }

    export interface publicInterfaceWithPublicTypeParameters {
        new <T extends publicClass>(): publicClass;
        <T extends publicClass>(): publicClass;
        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>         : ^ ^^^^^^^^^           ^^^^^^^           
    }

    interface privateInterfaceWithPrivateTypeParameters {
        new <T extends privateClass>(): privateClass;
        <T extends privateClass>(): privateClass;
        myMethod<T extends privateClass>(): privateClass;
>myMethod : <T extends privateClass>() => privateClass
>         : ^ ^^^^^^^^^            ^^^^^^^            
    }

    interface privateInterfaceWithPublicTypeParameters {
        new <T extends publicClass>(): publicClass;
        <T extends publicClass>(): publicClass;
        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>         : ^ ^^^^^^^^^           ^^^^^^^           
    }

    export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : publicClassWithWithPrivateTypeParameters
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends privateClass>() {  // Error
>myPublicStaticMethod : <T extends privateClass>() => void
>                     : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>                      : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        myPublicMethod<T extends privateClass>() {  // Error
>myPublicMethod : <T extends privateClass>() => void
>               : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>                : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
    }

    export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : publicClassWithWithPublicTypeParameters
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>                     : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>                      : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>               : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
    }

    class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : privateClassWithWithPrivateTypeParameters
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : <T extends privateClass>() => void
>                     : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>                      : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        myPublicMethod<T extends privateClass>() {
>myPublicMethod : <T extends privateClass>() => void
>               : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>                : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
    }

    class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : privateClassWithWithPublicTypeParameters
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>                     : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>                      : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>               : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
    }

    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
>publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>                                        : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }

    export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>                                       : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }

    function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>                                         : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }

    function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>                                        : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }

    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
        new <T>(): publicClass;
        <T>(): publicClass;
        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>         : ^ ^^^^^^^           
    }

    interface privateInterfaceWithPublicTypeParametersWithoutExtends {
        new <T>(): publicClass;
        <T>(): publicClass;
        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>         : ^ ^^^^^^^           
    }

    export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : publicClassWithWithPublicTypeParametersWithoutExtends
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>                     : ^ ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>                      : ^ ^^^^^^^^^^^
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>               : ^ ^^^^^^^^^^^
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>                : ^ ^^^^^^^^^^^
        }
    }
    class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : privateClassWithWithPublicTypeParametersWithoutExtends
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>                     : ^ ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>                      : ^ ^^^^^^^^^^^
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>               : ^ ^^^^^^^^^^^
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>                : ^ ^^^^^^^^^^^
        }
    }

    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>                                                     : ^ ^^^^^^^^^^^
    }

    function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>                                                      : ^ ^^^^^^^^^^^
    }

    export interface publicInterfaceWithPrivatModuleTypeParameters {
        new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

        <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
>         : ^ ^^^^^^^^^                         ^^^^^^^                         
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^
    }
    export class publicClassWithWithPrivateModuleTypeParameters {
>publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
>myPublicStaticMethod : <T extends privateModule.publicClass>() => void
>                     : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
        }
        myPublicMethod<T extends privateModule.publicClass>() {  // Error
>myPublicMethod : <T extends privateModule.publicClass>() => void
>               : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
        }
    }
    export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
>publicFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
>                                               : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
    }


    interface privateInterfaceWithPrivatModuleTypeParameters {
        new <T extends privateModule.publicClass>(): privateModule.publicClass;  
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

        <T extends privateModule.publicClass>(): privateModule.publicClass;  
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^

        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  
>myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
>         : ^ ^^^^^^^^^                         ^^^^^^^                         
>privateModule : any
>              : ^^^
>privateModule : any
>              : ^^^
    }
    class privateClassWithWithPrivateModuleTypeParameters {
>privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends privateModule.publicClass>() {  
>myPublicStaticMethod : <T extends privateModule.publicClass>() => void
>                     : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
        }
        myPublicMethod<T extends privateModule.publicClass>() { 
>myPublicMethod : <T extends privateModule.publicClass>() => void
>               : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
        }
    }
    function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() { 
>privateFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
>                                                : ^ ^^^^^^^^^                         ^^^^^^^^^^^
>privateModule : any
>              : ^^^
    }

}

module privateModule {
>privateModule : typeof privateModule
>              : ^^^^^^^^^^^^^^^^^^^^

    class privateClass {
>privateClass : privateClass
>             : ^^^^^^^^^^^^
    }

    export class publicClass {
>publicClass : publicClass
>            : ^^^^^^^^^^^
    }

    export interface publicInterfaceWithPrivateTypeParameters {
        new <T extends privateClass>(): privateClass; 
        <T extends privateClass>(): privateClass;
        myMethod<T extends privateClass>(): privateClass; 
>myMethod : <T extends privateClass>() => privateClass
>         : ^ ^^^^^^^^^            ^^^^^^^            
    }

    export interface publicInterfaceWithPublicTypeParameters {
        new <T extends publicClass>(): publicClass;
        <T extends publicClass>(): publicClass;
        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>         : ^ ^^^^^^^^^           ^^^^^^^           
    }

    interface privateInterfaceWithPrivateTypeParameters {
        new <T extends privateClass>(): privateClass;
        <T extends privateClass>(): privateClass;
        myMethod<T extends privateClass>(): privateClass;
>myMethod : <T extends privateClass>() => privateClass
>         : ^ ^^^^^^^^^            ^^^^^^^            
    }

    interface privateInterfaceWithPublicTypeParameters {
        new <T extends publicClass>(): publicClass;
        <T extends publicClass>(): publicClass;
        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>         : ^ ^^^^^^^^^           ^^^^^^^           
    }

    export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : publicClassWithWithPrivateTypeParameters
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends privateClass>() { 
>myPublicStaticMethod : <T extends privateClass>() => void
>                     : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>                      : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        myPublicMethod<T extends privateClass>() {  
>myPublicMethod : <T extends privateClass>() => void
>               : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>                : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
    }

    export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : publicClassWithWithPublicTypeParameters
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>                     : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>                      : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>               : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
    }

    class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : privateClassWithWithPrivateTypeParameters
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : <T extends privateClass>() => void
>                     : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>                      : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        myPublicMethod<T extends privateClass>() {
>myPublicMethod : <T extends privateClass>() => void
>               : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>                : ^ ^^^^^^^^^            ^^^^^^^^^^^
        }
    }

    class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : privateClassWithWithPublicTypeParameters
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>                     : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>                      : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>               : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>                : ^ ^^^^^^^^^           ^^^^^^^^^^^
        }
    }

    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() { 
>publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>                                        : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }

    export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>                                       : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }

    function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>                                         : ^ ^^^^^^^^^            ^^^^^^^^^^^
    }

    function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>                                        : ^ ^^^^^^^^^           ^^^^^^^^^^^
    }

    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
        new <T>(): publicClass;
        <T>(): publicClass;
        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>         : ^ ^^^^^^^           
    }

    interface privateInterfaceWithPublicTypeParametersWithoutExtends {
        new <T>(): publicClass;
        <T>(): publicClass;
        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>         : ^ ^^^^^^^           
    }

    export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : publicClassWithWithPublicTypeParametersWithoutExtends
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>                     : ^ ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>                      : ^ ^^^^^^^^^^^
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>               : ^ ^^^^^^^^^^^
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>                : ^ ^^^^^^^^^^^
        }
    }
    class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : privateClassWithWithPublicTypeParametersWithoutExtends
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>                     : ^ ^^^^^^^^^^^
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>                      : ^ ^^^^^^^^^^^
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>               : ^ ^^^^^^^^^^^
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>                : ^ ^^^^^^^^^^^
        }
    }

    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>                                                     : ^ ^^^^^^^^^^^
    }

    function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>                                                      : ^ ^^^^^^^^^^^
    }
}
