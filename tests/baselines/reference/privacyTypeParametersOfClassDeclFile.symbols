//// [tests/cases/compiler/privacyTypeParametersOfClassDeclFile.ts] ////

=== privacyTypeParametersOfClassDeclFile.ts ===
class privateClass {
>privateClass : Symbol(privateClass, Decl(privacyTypeParametersOfClassDeclFile.ts, 0, 0))
}

export class publicClass {
>publicClass : Symbol(publicClass, Decl(privacyTypeParametersOfClassDeclFile.ts, 1, 1))
}

export class publicClassWithPrivateTypeParameters<T extends privateClass> { // Error
>publicClassWithPrivateTypeParameters : Symbol(publicClassWithPrivateTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 4, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 6, 50))
>privateClass : Symbol(privateClass, Decl(privacyTypeParametersOfClassDeclFile.ts, 0, 0))

    myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPrivateTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 6, 75))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 7, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 6, 50))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 6, 50))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 7, 13))
    }
}

export class publicClassWithPublicTypeParameters<T extends publicClass> {
>publicClassWithPublicTypeParameters : Symbol(publicClassWithPublicTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 10, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 12, 49))
>publicClass : Symbol(publicClass, Decl(privacyTypeParametersOfClassDeclFile.ts, 1, 1))

    myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPublicTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 12, 73))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 13, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 12, 49))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 12, 49))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 13, 13))
    }
}

class privateClassWithPrivateTypeParameters<T extends privateClass> {
>privateClassWithPrivateTypeParameters : Symbol(privateClassWithPrivateTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 16, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 18, 44))
>privateClass : Symbol(privateClass, Decl(privacyTypeParametersOfClassDeclFile.ts, 0, 0))

    myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPrivateTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 18, 69))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 19, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 18, 44))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 18, 44))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 19, 13))
    }
}

class privateClassWithPublicTypeParameters<T extends publicClass> {
>privateClassWithPublicTypeParameters : Symbol(privateClassWithPublicTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 22, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 24, 43))
>publicClass : Symbol(publicClass, Decl(privacyTypeParametersOfClassDeclFile.ts, 1, 1))

    myMethod(val: T): T { 
>myMethod : Symbol(privateClassWithPublicTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 24, 67))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 25, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 24, 43))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 24, 43))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 25, 13))
    }
}

export class publicClassWithPublicTypeParametersWithoutExtends<T> {
>publicClassWithPublicTypeParametersWithoutExtends : Symbol(publicClassWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParametersOfClassDeclFile.ts, 28, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 30, 63))

    myMethod(val: T): T { 
>myMethod : Symbol(publicClassWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 30, 67))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 31, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 30, 63))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 30, 63))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 31, 13))
    }
}

class privateClassWithPublicTypeParametersWithoutExtends<T> {
>privateClassWithPublicTypeParametersWithoutExtends : Symbol(privateClassWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParametersOfClassDeclFile.ts, 34, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 36, 57))

    myMethod(val: T): T { 
>myMethod : Symbol(privateClassWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 36, 61))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 37, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 36, 57))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 36, 57))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 37, 13))
    }
}

export class publicClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> { // Error
>publicClassWithTypeParametersFromPrivateModule : Symbol(publicClassWithTypeParametersFromPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 40, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 42, 60))
>privateModule : Symbol(privateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 108, 1))
>publicClassInPrivateModule : Symbol(privateModule.publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))

    myMethod(val: T): T {
>myMethod : Symbol(publicClassWithTypeParametersFromPrivateModule.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 42, 113))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 43, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 42, 60))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 42, 60))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 43, 13))
    }
}

class privateClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> {
>privateClassWithTypeParametersFromPrivateModule : Symbol(privateClassWithTypeParametersFromPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 46, 1))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 48, 54))
>privateModule : Symbol(privateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 108, 1))
>publicClassInPrivateModule : Symbol(privateModule.publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))

    myMethod(val: T): T {
>myMethod : Symbol(privateClassWithTypeParametersFromPrivateModule.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 48, 107))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 49, 13))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 48, 54))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 48, 54))

        return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 49, 13))
    }
}

export namespace publicModule {
>publicModule : Symbol(publicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 52, 1))

    class privateClassInPublicModule {
>privateClassInPublicModule : Symbol(privateClassInPublicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 54, 31))
    }

    export class publicClassInPublicModule {
>publicClassInPublicModule : Symbol(publicClassInPublicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 56, 5))
    }

    export class publicClassWithPrivateTypeParameters<T extends privateClassInPublicModule> { // Error
>publicClassWithPrivateTypeParameters : Symbol(publicClassWithPrivateTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 59, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 61, 54))
>privateClassInPublicModule : Symbol(privateClassInPublicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 54, 31))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPrivateTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 61, 93))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 62, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 61, 54))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 61, 54))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 62, 17))
        }
    }

    export class publicClassWithPublicTypeParameters<T extends publicClassInPublicModule> {
>publicClassWithPublicTypeParameters : Symbol(publicClassWithPublicTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 65, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 67, 53))
>publicClassInPublicModule : Symbol(publicClassInPublicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 56, 5))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPublicTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 67, 91))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 68, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 67, 53))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 67, 53))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 68, 17))
        }
    }

    class privateClassWithPrivateTypeParameters<T extends privateClassInPublicModule> {
>privateClassWithPrivateTypeParameters : Symbol(privateClassWithPrivateTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 71, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 73, 48))
>privateClassInPublicModule : Symbol(privateClassInPublicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 54, 31))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPrivateTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 73, 87))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 74, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 73, 48))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 73, 48))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 74, 17))
        }
    }

    class privateClassWithPublicTypeParameters<T extends publicClassInPublicModule> {
>privateClassWithPublicTypeParameters : Symbol(privateClassWithPublicTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 77, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 79, 47))
>publicClassInPublicModule : Symbol(publicClassInPublicModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 56, 5))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPublicTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 79, 85))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 80, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 79, 47))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 79, 47))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 80, 17))
        }
    }

    export class publicClassWithPublicTypeParametersWithoutExtends<T> {
>publicClassWithPublicTypeParametersWithoutExtends : Symbol(publicClassWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParametersOfClassDeclFile.ts, 83, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 85, 67))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 85, 71))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 86, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 85, 67))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 85, 67))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 86, 17))
        }
    }

    class privateClassWithPublicTypeParametersWithoutExtends<T> {
>privateClassWithPublicTypeParametersWithoutExtends : Symbol(privateClassWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParametersOfClassDeclFile.ts, 89, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 91, 61))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 91, 65))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 92, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 91, 61))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 91, 61))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 92, 17))
        }
    }

    export class publicClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> { // Error
>publicClassWithTypeParametersFromPrivateModule : Symbol(publicClassWithTypeParametersFromPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 95, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 97, 64))
>privateModule : Symbol(privateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 108, 1))
>publicClassInPrivateModule : Symbol(privateModule.publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithTypeParametersFromPrivateModule.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 97, 117))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 98, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 97, 64))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 97, 64))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 98, 17))
        }
    }

    class privateClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> {
>privateClassWithTypeParametersFromPrivateModule : Symbol(privateClassWithTypeParametersFromPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 101, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 103, 58))
>privateModule : Symbol(privateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 108, 1))
>publicClassInPrivateModule : Symbol(privateModule.publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithTypeParametersFromPrivateModule.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 103, 111))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 104, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 103, 58))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 103, 58))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 104, 17))
        }
    }
}

namespace privateModule {
>privateModule : Symbol(privateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 108, 1))

    class privateClassInPrivateModule {
>privateClassInPrivateModule : Symbol(privateClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 110, 25))
    }

    export class publicClassInPrivateModule {
>publicClassInPrivateModule : Symbol(publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))
    }

    export class publicClassWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
>publicClassWithPrivateTypeParameters : Symbol(publicClassWithPrivateTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 115, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 117, 54))
>privateClassInPrivateModule : Symbol(privateClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 110, 25))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPrivateTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 117, 94))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 118, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 117, 54))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 117, 54))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 118, 17))
        }
    }

    export class publicClassWithPublicTypeParameters<T extends publicClassInPrivateModule> {
>publicClassWithPublicTypeParameters : Symbol(publicClassWithPublicTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 121, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 123, 53))
>publicClassInPrivateModule : Symbol(publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPublicTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 123, 92))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 124, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 123, 53))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 123, 53))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 124, 17))
        }
    }

    class privateClassWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
>privateClassWithPrivateTypeParameters : Symbol(privateClassWithPrivateTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 127, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 129, 48))
>privateClassInPrivateModule : Symbol(privateClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 110, 25))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPrivateTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 129, 88))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 130, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 129, 48))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 129, 48))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 130, 17))
        }
    }

    class privateClassWithPublicTypeParameters<T extends publicClassInPrivateModule> {
>privateClassWithPublicTypeParameters : Symbol(privateClassWithPublicTypeParameters, Decl(privacyTypeParametersOfClassDeclFile.ts, 133, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 135, 47))
>publicClassInPrivateModule : Symbol(publicClassInPrivateModule, Decl(privacyTypeParametersOfClassDeclFile.ts, 112, 5))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPublicTypeParameters.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 135, 86))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 136, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 135, 47))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 135, 47))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 136, 17))
        }
    }

    export class publicClassWithPublicTypeParametersWithoutExtends<T> {
>publicClassWithPublicTypeParametersWithoutExtends : Symbol(publicClassWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParametersOfClassDeclFile.ts, 139, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 141, 67))

        myMethod(val: T): T {
>myMethod : Symbol(publicClassWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 141, 71))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 142, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 141, 67))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 141, 67))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 142, 17))
        }
    }

    class privateClassWithPublicTypeParametersWithoutExtends<T> {
>privateClassWithPublicTypeParametersWithoutExtends : Symbol(privateClassWithPublicTypeParametersWithoutExtends, Decl(privacyTypeParametersOfClassDeclFile.ts, 145, 5))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 147, 61))

        myMethod(val: T): T {
>myMethod : Symbol(privateClassWithPublicTypeParametersWithoutExtends.myMethod, Decl(privacyTypeParametersOfClassDeclFile.ts, 147, 65))
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 148, 17))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 147, 61))
>T : Symbol(T, Decl(privacyTypeParametersOfClassDeclFile.ts, 147, 61))

            return val;
>val : Symbol(val, Decl(privacyTypeParametersOfClassDeclFile.ts, 148, 17))
        }
    }
}

