//// [tests/cases/conformance/classes/members/accessibility/privateClassPropertyAccessibleWithinNestedClass.ts] ////

=== privateClassPropertyAccessibleWithinNestedClass.ts ===
// no errors

class C {
>C : C
>  : ^

    private x: string;
>x : string
>  : ^^^^^^

    private get y() { return this.x; }
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : this
>     : ^^^^
>x : string
>  : ^^^^^^

    private set y(x) { this.y = this.x; }
>y : string
>  : ^^^^^^
>x : string
>  : ^^^^^^
>this.y = this.x : string
>                : ^^^^^^
>this.y : string
>       : ^^^^^^
>this : this
>     : ^^^^
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : this
>     : ^^^^
>x : string
>  : ^^^^^^

    private foo() { return this.foo; }
>foo : () => any
>    : ^^^^^^^^^
>this.foo : () => any
>         : ^^^^^^^^^
>this : this
>     : ^^^^
>foo : () => any
>    : ^^^^^^^^^

    private static x: string;
>x : string
>  : ^^^^^^

    private static get y() { return this.x; }
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>x : string
>  : ^^^^^^

    private static set y(x) { this.y = this.x; }
>y : string
>  : ^^^^^^
>x : string
>  : ^^^^^^
>this.y = this.x : string
>                : ^^^^^^
>this.y : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>x : string
>  : ^^^^^^

    private static foo() { return this.foo; }
>foo : () => typeof C.foo
>    : ^^^^^^^^^^^^^^^^^^
>this.foo : () => typeof C.foo
>         : ^^^^^^^^^^^^^^^^^^
>this : typeof C
>     : ^^^^^^^^
>foo : () => typeof C.foo
>    : ^^^^^^^^^^^^^^^^^^

    private static bar() { this.foo(); }
>bar : () => void
>    : ^^^^^^^^^^
>this.foo() : () => typeof C.foo
>           : ^^^^^^^^^^^^^^^^^^
>this.foo : () => typeof C.foo
>         : ^^^^^^^^^^^^^^^^^^
>this : typeof C
>     : ^^^^^^^^
>foo : () => typeof C.foo
>    : ^^^^^^^^^^^^^^^^^^

    private bar() {
>bar : () => void
>    : ^^^^^^^^^^

        class C2 {
>C2 : C2
>   : ^^

            private foo() {
>foo : () => void
>    : ^^^^^^^^^^

                let x: C;
>x : C
>  : ^

                var x1 = x.foo;
>x1 : () => any
>   : ^^^^^^^^^
>x.foo : () => any
>      : ^^^^^^^^^
>x : C
>  : ^
>foo : () => any
>    : ^^^^^^^^^

                var x2 = x.bar;
>x2 : () => void
>   : ^^^^^^^^^^
>x.bar : () => void
>      : ^^^^^^^^^^
>x : C
>  : ^
>bar : () => void
>    : ^^^^^^^^^^

                var x3 = x.x;
>x3 : string
>   : ^^^^^^
>x.x : string
>    : ^^^^^^
>x : C
>  : ^
>x : string
>  : ^^^^^^

                var x4 = x.y;
>x4 : string
>   : ^^^^^^
>x.y : string
>    : ^^^^^^
>x : C
>  : ^
>y : string
>  : ^^^^^^

                var sx1 = C.x;
>sx1 : string
>    : ^^^^^^
>C.x : string
>    : ^^^^^^
>C : typeof C
>  : ^^^^^^^^
>x : string
>  : ^^^^^^

                var sx2 = C.y;
>sx2 : string
>    : ^^^^^^
>C.y : string
>    : ^^^^^^
>C : typeof C
>  : ^^^^^^^^
>y : string
>  : ^^^^^^

                var sx3 = C.bar;
>sx3 : () => void
>    : ^^^^^^^^^^
>C.bar : () => void
>      : ^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^
>bar : () => void
>    : ^^^^^^^^^^

                var sx4 = C.foo;
>sx4 : () => typeof C.foo
>    : ^^^^^^^^^^^^^^^^^^
>C.foo : () => typeof C.foo
>      : ^^^^^^^^^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^
>foo : () => typeof C.foo
>    : ^^^^^^^^^^^^^^^^^^

                let y = new C();
>y : C
>  : ^
>new C() : C
>        : ^
>C : typeof C
>  : ^^^^^^^^

                var y1 = y.foo;
>y1 : () => any
>   : ^^^^^^^^^
>y.foo : () => any
>      : ^^^^^^^^^
>y : C
>  : ^
>foo : () => any
>    : ^^^^^^^^^

                var y2 = y.bar;
>y2 : () => void
>   : ^^^^^^^^^^
>y.bar : () => void
>      : ^^^^^^^^^^
>y : C
>  : ^
>bar : () => void
>    : ^^^^^^^^^^

                var y3 = y.x;
>y3 : string
>   : ^^^^^^
>y.x : string
>    : ^^^^^^
>y : C
>  : ^
>x : string
>  : ^^^^^^

                var y4 = y.y;
>y4 : string
>   : ^^^^^^
>y.y : string
>    : ^^^^^^
>y : C
>  : ^
>y : string
>  : ^^^^^^
            }
        }
    }
}
