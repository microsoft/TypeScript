//// [tests/cases/conformance/classes/members/privateNames/privateNameAccessorsCallExpression.ts] ////

=== privateNameAccessorsCallExpression.ts ===
class A {
>A : A
>  : ^

    get #fieldFunc() {  return function() { this.x = 10; } }
>#fieldFunc : () => void
>           : ^^^^^^^^^^
>function() { this.x = 10; } : () => void
>                            : ^^^^^^^^^^
>this.x = 10 : 10
>            : ^^
>this.x : any
>this : any
>     : ^^^
>x : any
>  : ^^^
>10 : 10
>   : ^^

    get #fieldFunc2() { return  function(a, ...b) {}; }
>#fieldFunc2 : (a: any, ...b: any[]) => void
>            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>function(a, ...b) {} : (a: any, ...b: any[]) => void
>                     : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>a : any
>b : any[]
>  : ^^^^^

    x = 1;
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    test() {
>test : () => void
>     : ^^^^^^^^^^

        this.#fieldFunc();
>this.#fieldFunc() : void
>                  : ^^^^
>this.#fieldFunc : () => void
>                : ^^^^^^^^^^
>this : this
>     : ^^^^

        const func = this.#fieldFunc;
>func : () => void
>     : ^^^^^^^^^^
>this.#fieldFunc : () => void
>                : ^^^^^^^^^^
>this : this
>     : ^^^^

        func();
>func() : void
>       : ^^^^
>func : () => void
>     : ^^^^^^^^^^

        new this.#fieldFunc();
>new this.#fieldFunc() : any
>this.#fieldFunc : () => void
>                : ^^^^^^^^^^
>this : this
>     : ^^^^

        const arr = [ 1, 2 ];
>arr : number[]
>    : ^^^^^^^^
>[ 1, 2 ] : number[]
>         : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.#fieldFunc2(0, ...arr, 3);
>this.#fieldFunc2(0, ...arr, 3) : void
>                               : ^^^^
>this.#fieldFunc2 : (a: any, ...b: any[]) => void
>                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const b = new this.#fieldFunc2(0, ...arr, 3);
>b : any
>new this.#fieldFunc2(0, ...arr, 3) : any
>this.#fieldFunc2 : (a: any, ...b: any[]) => void
>                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const str = this.#fieldFunc2`head${1}middle${2}tail`;
>str : void
>    : ^^^^
>this.#fieldFunc2`head${1}middle${2}tail` : void
>                                         : ^^^^
>this.#fieldFunc2 : (a: any, ...b: any[]) => void
>                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>`head${1}middle${2}tail` : string
>                         : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.getInstance().#fieldFunc2`test${1}and${2}`;
>this.getInstance().#fieldFunc2`test${1}and${2}` : void
>                                                : ^^^^
>this.getInstance().#fieldFunc2 : (a: any, ...b: any[]) => void
>                               : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getInstance() : A
>                   : ^
>this.getInstance : () => A
>                 : ^^^^^^^
>this : this
>     : ^^^^
>getInstance : () => A
>            : ^^^^^^^
>`test${1}and${2}` : string
>                  : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
    }
    getInstance() { return new A(); }
>getInstance : () => A
>            : ^^^^^^^
>new A() : A
>        : ^
>A : typeof A
>  : ^^^^^^^^
}
