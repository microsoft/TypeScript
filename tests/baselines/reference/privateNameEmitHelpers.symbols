//// [tests/cases/conformance/classes/members/privateNames/privateNameEmitHelpers.ts] ////

=== main.ts ===
export class C {
>C : Symbol(C, Decl(main.ts, 0, 0))

    #a = 1;
>#a : Symbol(C.#a, Decl(main.ts, 0, 16))

    #b() { this.#c = 42; }
>#b : Symbol(C.#b, Decl(main.ts, 1, 11))
>this.#c : Symbol(C.#c, Decl(main.ts, 2, 26))
>this : Symbol(C, Decl(main.ts, 0, 0))

    set #c(v: number) { this.#a += v; }
>#c : Symbol(C.#c, Decl(main.ts, 2, 26))
>v : Symbol(v, Decl(main.ts, 3, 11))
>this.#a : Symbol(C.#a, Decl(main.ts, 0, 16))
>this : Symbol(C, Decl(main.ts, 0, 0))
>v : Symbol(v, Decl(main.ts, 3, 11))
}

=== node_modules/tslib/index.d.ts ===
// these are pre-TS4.3 versions of emit helpers, which only supported private instance fields
export declare function __classPrivateFieldGet<T extends object, V>(receiver: T, state: any): V;
>__classPrivateFieldGet : Symbol(__classPrivateFieldGet, Decl(index.d.ts, 0, 0))
>T : Symbol(T, Decl(index.d.ts, 1, 47))
>V : Symbol(V, Decl(index.d.ts, 1, 64))
>receiver : Symbol(receiver, Decl(index.d.ts, 1, 68))
>T : Symbol(T, Decl(index.d.ts, 1, 47))
>state : Symbol(state, Decl(index.d.ts, 1, 80))
>V : Symbol(V, Decl(index.d.ts, 1, 64))

export declare function __classPrivateFieldSet<T extends object, V>(receiver: T, state: any, value: V): V;
>__classPrivateFieldSet : Symbol(__classPrivateFieldSet, Decl(index.d.ts, 1, 96))
>T : Symbol(T, Decl(index.d.ts, 2, 47))
>V : Symbol(V, Decl(index.d.ts, 2, 64))
>receiver : Symbol(receiver, Decl(index.d.ts, 2, 68))
>T : Symbol(T, Decl(index.d.ts, 2, 47))
>state : Symbol(state, Decl(index.d.ts, 2, 80))
>value : Symbol(value, Decl(index.d.ts, 2, 92))
>V : Symbol(V, Decl(index.d.ts, 2, 64))
>V : Symbol(V, Decl(index.d.ts, 2, 64))

