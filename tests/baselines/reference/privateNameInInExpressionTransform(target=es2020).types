//// [tests/cases/conformance/classes/members/privateNames/privateNameInInExpressionTransform.ts] ////

=== privateNameInInExpressionTransform.ts ===
class Foo {
>Foo : Foo
>    : ^^^

    #field = 1;
>#field : number
>       : ^^^^^^
>1 : 1
>  : ^

    #method() {}
>#method : () => void
>        : ^^^^^^^^^^

    static #staticField= 2;
>#staticField : number
>             : ^^^^^^
>2 : 2
>  : ^

    static #staticMethod() {}
>#staticMethod : () => void
>              : ^^^^^^^^^^

    check(v: any) {
>check : (v: any) => void
>      : ^ ^^   ^^^^^^^^^
>v : any
>  : ^^^

        #field in v; // expect Foo's 'field' WeakMap
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : any
>  : ^^^

        #method in v; // expect Foo's 'instances' WeakSet
>#method in v : boolean
>             : ^^^^^^^
>#method : any
>        : ^^^
>v : any
>  : ^^^

        #staticField in v; // expect Foo's constructor
>#staticField in v : boolean
>                  : ^^^^^^^
>#staticField : any
>             : ^^^
>v : any
>  : ^^^

        #staticMethod in v; // expect Foo's constructor
>#staticMethod in v : boolean
>                   : ^^^^^^^
>#staticMethod : any
>              : ^^^
>v : any
>  : ^^^
    }
    precedence(v: any) {
>precedence : (v: any) => void
>           : ^ ^^   ^^^^^^^^^
>v : any
>  : ^^^

        // '==' and '||' have lower precedence than 'in'
        // 'in'  naturally has same precedence as 'in'
        // '<<' has higher precedence than 'in'

        v == #field in v || v; // Good precedence: (v == (#field in v)) || v
>v == #field in v || v : any
>                      : ^^^
>v == #field in v : boolean
>                 : ^^^^^^^
>v : any
>  : ^^^
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : any
>  : ^^^
>v : any
>  : ^^^

        v << #field in v << v; // Good precedence (SyntaxError): (v << #field) in (v << v)
>v << #field in v << v : boolean
>                      : ^^^^^^^
>v << #field : number
>            : ^^^^^^
>v : any
>  : ^^^
>v << v : number
>       : ^^^^^^
>v : any
>  : ^^^
>v : any
>  : ^^^

        v << #field in v == v; // Good precedence (SyntaxError): ((v << #field) in v) == v
>v << #field in v == v : boolean
>                      : ^^^^^^^
>v << #field in v : boolean
>                 : ^^^^^^^
>v << #field : number
>            : ^^^^^^
>v : any
>  : ^^^
>v : any
>  : ^^^
>v : any
>  : ^^^

        v == #field in v in v; // Good precedence: v == ((#field in v) in v)
>v == #field in v in v : boolean
>                      : ^^^^^^^
>v : any
>  : ^^^
>#field in v in v : boolean
>                 : ^^^^^^^
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : any
>  : ^^^
>v : any
>  : ^^^

        #field in v && #field in v; // Good precedence: (#field in v) && (#field in v)
>#field in v && #field in v : boolean
>                           : ^^^^^^^
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : any
>  : ^^^
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : Foo
>  : ^^^
    }
    invalidLHS(v: any) {
>invalidLHS : (v: any) => void
>           : ^ ^^   ^^^^^^^^^
>v : any
>  : ^^^

        'prop' in v = 10;
>'prop' in v : boolean
>            : ^^^^^^^
>'prop' : "prop"
>       : ^^^^^^
>v : any
>  : ^^^
>10 : 10
>   : ^^

        #field in v = 10;
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : any
>  : ^^^
>10 : 10
>   : ^^
    }
}

class Bar {
>Bar : Bar
>    : ^^^

    #field = 1;
>#field : number
>       : ^^^^^^
>1 : 1
>  : ^

    check(v: any) {
>check : (v: any) => void
>      : ^ ^^   ^^^^^^^^^
>v : any
>  : ^^^

        #field in v; // expect Bar's 'field' WeakMap
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : any
>  : ^^^
    }
}

function syntaxError(v: Foo) {
>syntaxError : (v: Foo) => boolean
>            : ^ ^^   ^^^^^^^^^^^^
>v : Foo
>  : ^^^

    return #field in v; // expect `return in v` so runtime will have a syntax error
>#field in v : boolean
>            : ^^^^^^^
>#field : any
>       : ^^^
>v : Foo
>  : ^^^
}

export { }

