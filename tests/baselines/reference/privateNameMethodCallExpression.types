//// [tests/cases/conformance/classes/members/privateNames/privateNameMethodCallExpression.ts] ////

=== privateNameMethodCallExpression.ts ===
class AA {
>AA : AA
>   : ^^

    #method() { this.x = 10; };
>#method : () => void
>        : ^^^^^^^^^^
>this.x = 10 : 10
>            : ^^
>this.x : number
>       : ^^^^^^
>this : this
>     : ^^^^
>x : number
>  : ^^^^^^
>10 : 10
>   : ^^

    #method2(a, ...b) {};
>#method2 : (a: any, ...b: any[]) => void
>         : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>a : any
>b : any[]
>  : ^^^^^

    x = 1;
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

    test() {
>test : () => void
>     : ^^^^^^^^^^

        this.#method();
>this.#method() : void
>               : ^^^^
>this.#method : () => void
>             : ^^^^^^^^^^
>this : this
>     : ^^^^

        const func = this.#method;
>func : () => void
>     : ^^^^^^^^^^
>this.#method : () => void
>             : ^^^^^^^^^^
>this : this
>     : ^^^^

        func();
>func() : void
>       : ^^^^
>func : () => void
>     : ^^^^^^^^^^

        new this.#method();
>new this.#method() : any
>this.#method : () => void
>             : ^^^^^^^^^^
>this : this
>     : ^^^^

        const arr = [ 1, 2 ];
>arr : number[]
>    : ^^^^^^^^
>[ 1, 2 ] : number[]
>         : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.#method2(0, ...arr, 3);
>this.#method2(0, ...arr, 3) : void
>                            : ^^^^
>this.#method2 : (a: any, ...b: any[]) => void
>              : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const b = new this.#method2(0, ...arr, 3); //Error 
>b : any
>new this.#method2(0, ...arr, 3) : any
>this.#method2 : (a: any, ...b: any[]) => void
>              : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const str = this.#method2`head${1}middle${2}tail`;
>str : void
>    : ^^^^
>this.#method2`head${1}middle${2}tail` : void
>                                      : ^^^^
>this.#method2 : (a: any, ...b: any[]) => void
>              : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>`head${1}middle${2}tail` : string
>                         : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.getInstance().#method2`test${1}and${2}`;
>this.getInstance().#method2`test${1}and${2}` : void
>                                             : ^^^^
>this.getInstance().#method2 : (a: any, ...b: any[]) => void
>                            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getInstance() : AA
>                   : ^^
>this.getInstance : () => AA
>                 : ^^^^^^^^
>this : this
>     : ^^^^
>getInstance : () => AA
>            : ^^^^^^^^
>`test${1}and${2}` : string
>                  : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.getInstance().#method2(0, ...arr, 3); 
>this.getInstance().#method2(0, ...arr, 3) : void
>                                          : ^^^^
>this.getInstance().#method2 : (a: any, ...b: any[]) => void
>                            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getInstance() : AA
>                   : ^^
>this.getInstance : () => AA
>                 : ^^^^^^^^
>this : this
>     : ^^^^
>getInstance : () => AA
>            : ^^^^^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const b2 = new (this.getInstance().#method2)(0, ...arr, 3); //Error 
>b2 : any
>new (this.getInstance().#method2)(0, ...arr, 3) : any
>(this.getInstance().#method2) : (a: any, ...b: any[]) => void
>                              : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getInstance().#method2 : (a: any, ...b: any[]) => void
>                            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getInstance() : AA
>                   : ^^
>this.getInstance : () => AA
>                 : ^^^^^^^^
>this : this
>     : ^^^^
>getInstance : () => AA
>            : ^^^^^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const str2 = this.getInstance().#method2`head${1}middle${2}tail`;
>str2 : void
>     : ^^^^
>this.getInstance().#method2`head${1}middle${2}tail` : void
>                                                    : ^^^^
>this.getInstance().#method2 : (a: any, ...b: any[]) => void
>                            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getInstance() : AA
>                   : ^^
>this.getInstance : () => AA
>                 : ^^^^^^^^
>this : this
>     : ^^^^
>getInstance : () => AA
>            : ^^^^^^^^
>`head${1}middle${2}tail` : string
>                         : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
    }
    getInstance() { return new AA(); }
>getInstance : () => AA
>            : ^^^^^^^^
>new AA() : AA
>         : ^^
>AA : typeof AA
>   : ^^^^^^^^^
}

