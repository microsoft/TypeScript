//// [tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsCallExpression.ts] ////

=== privateNameStaticAccessorsCallExpression.ts ===
class A {
>A : A
>  : ^

    static get #fieldFunc() {  return function() { A.#x = 10; } }
>#fieldFunc : () => void
>           : ^^^^^^^^^^
>function() { A.#x = 10; } : () => void
>                          : ^^^^^^^^^^
>A.#x = 10 : 10
>          : ^^
>A.#x : number
>     : ^^^^^^
>A : typeof A
>  : ^^^^^^^^
>10 : 10
>   : ^^

    static get #fieldFunc2() { return  function(a, ...b) {}; }
>#fieldFunc2 : (a: any, ...b: any[]) => void
>            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>function(a, ...b) {} : (a: any, ...b: any[]) => void
>                     : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>a : any
>b : any[]
>  : ^^^^^

    static #x = 1;
>#x : number
>   : ^^^^^^
>1 : 1
>  : ^

    static test() {
>test : () => void
>     : ^^^^^^^^^^

        this.#fieldFunc();
>this.#fieldFunc() : void
>                  : ^^^^
>this.#fieldFunc : () => void
>                : ^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^

        const func = this.#fieldFunc;
>func : () => void
>     : ^^^^^^^^^^
>this.#fieldFunc : () => void
>                : ^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^

        func();
>func() : void
>       : ^^^^
>func : () => void
>     : ^^^^^^^^^^

        new this.#fieldFunc();
>new this.#fieldFunc() : any
>this.#fieldFunc : () => void
>                : ^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^

        const arr = [ 1, 2 ];
>arr : number[]
>    : ^^^^^^^^
>[ 1, 2 ] : number[]
>         : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.#fieldFunc2(0, ...arr, 3);
>this.#fieldFunc2(0, ...arr, 3) : void
>                               : ^^^^
>this.#fieldFunc2 : (a: any, ...b: any[]) => void
>                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const b = new this.#fieldFunc2(0, ...arr, 3);
>b : any
>new this.#fieldFunc2(0, ...arr, 3) : any
>this.#fieldFunc2 : (a: any, ...b: any[]) => void
>                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^
>0 : 0
>  : ^
>...arr : number
>       : ^^^^^^
>arr : number[]
>    : ^^^^^^^^
>3 : 3
>  : ^

        const str = this.#fieldFunc2`head${1}middle${2}tail`;
>str : void
>    : ^^^^
>this.#fieldFunc2`head${1}middle${2}tail` : void
>                                         : ^^^^
>this.#fieldFunc2 : (a: any, ...b: any[]) => void
>                 : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^
>`head${1}middle${2}tail` : string
>                         : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

        this.getClass().#fieldFunc2`test${1}and${2}`;
>this.getClass().#fieldFunc2`test${1}and${2}` : void
>                                             : ^^^^
>this.getClass().#fieldFunc2 : (a: any, ...b: any[]) => void
>                            : ^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>this.getClass() : typeof A
>                : ^^^^^^^^
>this.getClass : () => typeof A
>              : ^^^^^^^^^^^^^^
>this : typeof A
>     : ^^^^^^^^
>getClass : () => typeof A
>         : ^^^^^^^^^^^^^^
>`test${1}and${2}` : string
>                  : ^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
    }
    static getClass() { return A; }
>getClass : () => typeof A
>         : ^^^^^^^^^^^^^^
>A : typeof A
>  : ^^^^^^^^
}
