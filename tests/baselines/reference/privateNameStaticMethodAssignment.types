//// [tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodAssignment.ts] ////

=== privateNameStaticMethodAssignment.ts ===
class A3 {
>A3 : A3
>   : ^^

    static #method() { };
>#method : () => void
>        : ^^^^^^^^^^

    constructor(a: typeof A3, b: any) {
>a : typeof A3
>  : ^^^^^^^^^
>A3 : typeof A3
>   : ^^^^^^^^^
>b : any
>  : ^^^

        A3.#method = () => {} // Error, not writable 
>A3.#method = () => {} : () => void
>                      : ^^^^^^^^^^
>A3.#method : () => void
>           : ^^^^^^^^^^
>A3 : typeof A3
>   : ^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

        a.#method = () => { }; // Error, not writable 
>a.#method = () => { } : () => void
>                      : ^^^^^^^^^^
>a.#method : () => void
>          : ^^^^^^^^^^
>a : typeof A3
>  : ^^^^^^^^^
>() => { } : () => void
>          : ^^^^^^^^^^

        b.#method =  () => { } //Error, not writable 
>b.#method =  () => { } : () => void
>                       : ^^^^^^^^^^
>b.#method : any
>          : ^^^
>b : any
>  : ^^^
>() => { } : () => void
>          : ^^^^^^^^^^

        ({ x: A3.#method } = { x: () => {}}); //Error, not writable 
>({ x: A3.#method } = { x: () => {}}) : { x: () => void; }
>                                     : ^^^^^^^^^^^^^^^^^^
>{ x: A3.#method } = { x: () => {}} : { x: () => void; }
>                                   : ^^^^^^^^^^^^^^^^^^
>{ x: A3.#method } : { x: () => void; }
>                  : ^^^^^^^^^^^^^^^^^^
>x : () => void
>  : ^^^^^^^^^^
>A3.#method : () => void
>           : ^^^^^^^^^^
>A3 : typeof A3
>   : ^^^^^^^^^
>{ x: () => {}} : { x: () => void; }
>               : ^^^^^^^^^^^^^^^^^^
>x : () => void
>  : ^^^^^^^^^^
>() => {} : () => void
>         : ^^^^^^^^^^

        let x = A3.#method;
>x : () => void
>  : ^^^^^^^^^^
>A3.#method : () => void
>           : ^^^^^^^^^^
>A3 : typeof A3
>   : ^^^^^^^^^

        b.#method++ //Error, not writable 
>b.#method++ : number
>            : ^^^^^^
>b.#method : any
>          : ^^^
>b : any
>  : ^^^
    }
}

