//// [tests/cases/conformance/classes/members/privateNames/privateNamesConstructorChain-2.ts] ////

=== privateNamesConstructorChain-2.ts ===
class Parent<T> {
>Parent : Parent<T>
>       : ^^^^^^^^^

    #foo = 3;
>#foo : number
>     : ^^^^^^
>3 : 3
>  : ^

    static #bar = 5;
>#bar : number
>     : ^^^^^^
>5 : 5
>  : ^

    accessChildProps() {
>accessChildProps : () => void
>                 : ^^^^^^^^^^

        new Child<string>().#foo; // OK (`#foo` was added when `Parent`'s constructor was called on `child`)
>new Child<string>().#foo : number
>                         : ^^^^^^
>new Child<string>() : Child<string>
>                    : ^^^^^^^^^^^^^
>Child : typeof Child
>      : ^^^^^^^^^^^^

        Child.#bar;       // Error: not found
>Child.#bar : any
>           : ^^^
>Child : typeof Child
>      : ^^^^^^^^^^^^
    }
}

class Child<T> extends Parent<T> {
>Child : Child<T>
>      : ^^^^^^^^
>Parent : Parent<T>
>       : ^^^^^^^^^

    #foo = "foo";       // OK (Child's #foo does not conflict, as `Parent`'s `#foo` is not accessible)
>#foo : string
>     : ^^^^^^
>"foo" : "foo"
>      : ^^^^^

    #bar = "bar";       // OK
>#bar : string
>     : ^^^^^^
>"bar" : "bar"
>      : ^^^^^
}

new Parent<number>().accessChildProps();
>new Parent<number>().accessChildProps() : void
>                                        : ^^^^
>new Parent<number>().accessChildProps : () => void
>                                      : ^^^^^^^^^^
>new Parent<number>() : Parent<number>
>                     : ^^^^^^^^^^^^^^
>Parent : typeof Parent
>       : ^^^^^^^^^^^^^
>accessChildProps : () => void
>                 : ^^^^^^^^^^

