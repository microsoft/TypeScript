//// [tests/cases/compiler/promisePermutations2.ts] ////

=== Performance Stats ===
Instantiation count: 2,500

=== promisePermutations2.ts ===
// same as promisePermutations but without the same overloads in Promise<T>

interface Promise<T> {
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
>then : { <TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^        ^^^^^^^^^^           ^^^                                                                   ^^          ^^^                                                                      ^^^                            ^^^ ^^       ^^^               ^^     ^^^                 ^^        ^^^                       ^^^          ^^^
>success : (value: T) => U
>        : ^     ^^ ^^^^^ 
>value : T
>      : ^
>error : (error: any) => U
>      : ^     ^^   ^^^^^ 
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^

    done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
>done : <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
>     : ^ ^^       ^^^                 ^^     ^^^                   ^^        ^^^                       ^^^^^    
>success : (value: T) => any
>        : ^     ^^ ^^^^^   
>value : T
>      : ^
>error : (error: any) => any
>      : ^     ^^   ^^^^^   
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^
}

interface IPromise<T> {
    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U_1>(success?: (value: T) => IPromise<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; }
>     : ^^^ ^^       ^^^                         ^^     ^^^                           ^^        ^^^                       ^^^           ^^^^^^^^       ^^^                           ^^     ^^^                   ^^        ^^^                       ^^^             ^^^^^^^^       ^^^                 ^^     ^^^                             ^^        ^^^                       ^^^             ^^^^^^^^       ^^^                 ^^     ^^^                   ^^        ^^^                       ^^^             ^^^
>success : (value: T) => IPromise<U>
>        : ^     ^^ ^^^^^           
>value : T
>      : ^
>error : (error: any) => IPromise<U>
>      : ^     ^^   ^^^^^           
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^

    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U_1>(success?: (value: T) => IPromise<U_1>, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; }

>success : (value: T) => IPromise<U>
>        : ^     ^^ ^^^^^           
>value : T
>      : ^
>error : (error: any) => U
>      : ^     ^^   ^^^^^ 
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^

    then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
>then : { <U_1>(success?: (value: T) => IPromise<U_1>, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: T) => IPromise<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; }
>     : ^^^^^^^^       ^^^                           ^^     ^^^                             ^^        ^^^                       ^^^             ^^^^^^^^       ^^^                           ^^     ^^^                   ^^        ^^^                       ^^^             ^^^ ^^       ^^^               ^^     ^^^                           ^^        ^^^                       ^^^           ^^^^^^^^       ^^^                 ^^     ^^^                   ^^        ^^^                       ^^^             ^^^
>success : (value: T) => U
>        : ^     ^^ ^^^^^ 
>value : T
>      : ^
>error : (error: any) => IPromise<U>
>      : ^     ^^   ^^^^^           
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^

    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
>then : { <U_1>(success?: (value: T) => IPromise<U_1>, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: T) => IPromise<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>success : (value: T) => U
>        : ^     ^^ ^^^^^ 
>value : T
>      : ^
>error : (error: any) => U
>      : ^     ^^   ^^^^^ 
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^

    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
>done : <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
>     : ^ ^^       ^^^                 ^^     ^^^                   ^^        ^^^                       ^^^^^    
>success : (value: T) => any
>        : ^     ^^ ^^^^^   
>value : T
>      : ^
>error : (error: any) => any
>      : ^     ^^   ^^^^^   
>error : any
>      : ^^^
>progress : (progress: any) => void
>         : ^        ^^   ^^^^^    
>progress : any
>         : ^^^
}

declare function testFunction(): IPromise<number>;
>testFunction : () => IPromise<number>
>             : ^^^^^^                

declare function testFunctionP(): Promise<number>;
>testFunctionP : () => Promise<number>
>              : ^^^^^^               

declare function testFunction2(): IPromise<{ x: number }>;
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>x : number
>  : ^^^^^^

declare function testFunction2P(): Promise<{ x: number }>;
>testFunction2P : () => Promise<{ x: number; }>
>               : ^^^^^^                       
>x : number
>  : ^^^^^^

declare function testFunction3(x: number): IPromise<number>;
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>x : number
>  : ^^^^^^

declare function testFunction3P(x: number): Promise<number>;
>testFunction3P : (x: number) => Promise<number>
>               : ^ ^^      ^^^^^               
>x : number
>  : ^^^^^^

declare function testFunction4(x: number, y?: string): IPromise<string>;
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^

declare function testFunction4P(x: number, y?: string): Promise<string>;
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^

declare function testFunction5(x: number, cb: (a: string) => string): IPromise<string>;
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                
>x : number
>  : ^^^^^^
>cb : (a: string) => string
>   : ^ ^^      ^^^^^      
>a : string
>  : ^^^^^^

declare function testFunction5P(x: number, cb: (a: string) => string): Promise<string>;
>testFunction5P : (x: number, cb: (a: string) => string) => Promise<string>
>               : ^ ^^      ^^  ^^                     ^^^^^               
>x : number
>  : ^^^^^^
>cb : (a: string) => string
>   : ^ ^^      ^^^^^      
>a : string
>  : ^^^^^^

declare function testFunction6(x: number, cb: <T>(a: T) => T): IPromise<string>;
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                
>x : number
>  : ^^^^^^
>cb : <T>(a: T) => T
>   : ^ ^^ ^^ ^^^^^ 
>a : T
>  : ^

declare function testFunction6P(x: number, cb: <T>(a: T) => T): Promise<string>;
>testFunction6P : (x: number, cb: <T>(a: T) => T) => Promise<string>
>               : ^ ^^      ^^  ^^              ^^^^^               
>x : number
>  : ^^^^^^
>cb : <T>(a: T) => T
>   : ^ ^^ ^^ ^^^^^ 
>a : T
>  : ^

declare function testFunction7(cb: <T>(a: T) => T): IPromise<string>;
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                
>cb : <T>(a: T) => T
>   : ^ ^^ ^^ ^^^^^ 
>a : T
>  : ^

declare function testFunction7P(cb: <T>(a: T) => T): Promise<string>;
>testFunction7P : (cb: <T>(a: T) => T) => Promise<string>
>               : ^  ^^              ^^^^^               
>cb : <T>(a: T) => T
>   : ^ ^^ ^^ ^^^^^ 
>a : T
>  : ^

declare function testFunction8<T>(x: T, cb: (a: T) => T): IPromise<T>;
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           
>x : T
>  : ^
>cb : (a: T) => T
>   : ^ ^^ ^^^^^ 
>a : T
>  : ^

declare function testFunction8P<T>(x: T, cb: (a: T) => T): Promise<T>;
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^           ^^^^^          
>x : T
>  : ^
>cb : (a: T) => T
>   : ^ ^^ ^^^^^ 
>a : T
>  : ^

declare function testFunction9<T>(x: T, cb: <U>(a: U) => U): IPromise<T>;
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           
>x : T
>  : ^
>cb : <U>(a: U) => U
>   : ^ ^^ ^^ ^^^^^ 
>a : U
>  : ^

declare function testFunction9P<T>(x: T, cb: <U>(a: U) => U): Promise<T>;
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^              ^^^^^          
>x : T
>  : ^
>cb : <U>(a: U) => U
>   : ^ ^^ ^^ ^^^^^ 
>a : U
>  : ^

declare function testFunction10<T>(cb: <U>(a: U) => U): IPromise<T>;
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>cb : <U>(a: U) => U
>   : ^ ^^ ^^ ^^^^^ 
>a : U
>  : ^

declare function testFunction10P<T>(cb: <U>(a: U) => U): Promise<T>;
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>                : ^ ^^  ^^              ^^^^^          
>cb : <U>(a: U) => U
>   : ^ ^^ ^^ ^^^^^ 
>a : U
>  : ^

declare function testFunction11(x: number): IPromise<number>;
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>x : number
>  : ^^^^^^

declare function testFunction11(x: string): IPromise<string>;
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>x : string
>  : ^^^^^^

declare function testFunction11P(x: number): Promise<number>;
>testFunction11P : { (x: number): Promise<number>; (x: string): Promise<string>; }
>                : ^^^ ^^      ^^^               ^^^ ^^      ^^^               ^^^
>x : number
>  : ^^^^^^

declare function testFunction11P(x: string): Promise<string>;
>testFunction11P : { (x: number): Promise<number>; (x: string): Promise<string>; }
>                : ^^^ ^^      ^^^               ^^^ ^^      ^^^               ^^^
>x : string
>  : ^^^^^^

declare function testFunction12<T>(x: T): IPromise<T>;
>testFunction12 : { <T>(x: T): IPromise<T>; <T_1>(x: T_1, y: T_1): IPromise<T_1>; }
>               : ^^^ ^^ ^^ ^^^           ^^^^^^^^ ^^   ^^ ^^   ^^^             ^^^
>x : T
>  : ^

declare function testFunction12<T>(x: T, y: T): IPromise<T>;
>testFunction12 : { <T_1>(x: T_1): IPromise<T_1>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^^^^^^ ^^   ^^^             ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>x : T
>  : ^
>y : T
>  : ^

declare function testFunction12P<T>(x: T): IPromise<T>;
>testFunction12P : { <T>(x: T): IPromise<T>; <T_1>(x: T_1, y: T_1): Promise<T_1>; }
>                : ^^^ ^^ ^^ ^^^           ^^^^^^^^ ^^   ^^ ^^   ^^^            ^^^
>x : T
>  : ^

declare function testFunction12P<T>(x: T, y: T): Promise<T>;
>testFunction12P : { <T_1>(x: T_1): IPromise<T_1>; <T>(x: T, y: T): Promise<T>; }
>                : ^^^^^^^^ ^^   ^^^             ^^^ ^^ ^^ ^^ ^^ ^^^          ^^^
>x : T
>  : ^
>y : T
>  : ^

var r1: IPromise<number>;
>r1 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^

var r1a = r1.then(testFunction, testFunction, testFunction);
>r1a : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r1.then(testFunction, testFunction, testFunction) : IPromise<number>
>                                                  : ^^^^^^^^^^^^^^^^
>r1.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r1 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                

var r1b = r1.then(testFunction, testFunction, testFunction).then(testFunction, testFunction, testFunction);
>r1b : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r1.then(testFunction, testFunction, testFunction).then(testFunction, testFunction, testFunction) : IPromise<number>
>                                                                                                 : ^^^^^^^^^^^^^^^^
>r1.then(testFunction, testFunction, testFunction).then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r1.then(testFunction, testFunction, testFunction) : IPromise<number>
>                                                  : ^^^^^^^^^^^^^^^^
>r1.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r1 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>     : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                

var r1c = r1.then(testFunctionP, testFunctionP, testFunctionP);
>r1c : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r1.then(testFunctionP, testFunctionP, testFunctionP) : IPromise<number>
>                                                     : ^^^^^^^^^^^^^^^^
>r1.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r1 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>testFunctionP : () => Promise<number>
>              : ^^^^^^               

var s1: Promise<number>;
>s1 : Promise<number>
>   : ^^^^^^^^^^^^^^^

var s1a = s1.then(testFunction, testFunction, testFunction);
>s1a : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then(testFunction, testFunction, testFunction) : Promise<IPromise<number>>
>                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s1 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                

var s1b = s1.then(testFunctionP, testFunctionP, testFunctionP);
>s1b : Promise<Promise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then(testFunctionP, testFunctionP, testFunctionP) : Promise<Promise<number>>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s1 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>testFunctionP : () => Promise<number>
>              : ^^^^^^               

var s1c = s1.then(testFunctionP, testFunction, testFunction);
>s1c : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then(testFunctionP, testFunction, testFunction) : Promise<IPromise<number>>
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s1 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                

var s1d = s1.then(testFunctionP, testFunction, testFunction).then(testFunction, testFunction, testFunction);
>s1d : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then(testFunctionP, testFunction, testFunction).then(testFunction, testFunction, testFunction) : Promise<IPromise<number>>
>                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then(testFunctionP, testFunction, testFunction).then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                                        : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s1.then(testFunctionP, testFunction, testFunction) : Promise<IPromise<number>>
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s1.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s1 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>testFunction : () => IPromise<number>
>             : ^^^^^^                

var r2: IPromise<{ x: number; }>;
>r2 : IPromise<{ x: number; }>
>   : ^^^^^^^^^^^^^^      ^^^^
>x : number
>  : ^^^^^^

var r2a = r2.then(testFunction2, testFunction2, testFunction2);
>r2a : IPromise<{ x: number; }>
>    : ^^^^^^^^^^^^^^      ^^^^
>r2.then(testFunction2, testFunction2, testFunction2) : IPromise<{ x: number; }>
>                                                     : ^^^^^^^^^^^^^^      ^^^^
>r2.then : { <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r2 : IPromise<{ x: number; }>
>   : ^^^^^^^^^^^^^^      ^^^^
>then : { <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        

var r2b = r2.then(testFunction2, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2);
>r2b : IPromise<{ x: number; }>
>    : ^^^^^^^^^^^^^^      ^^^^
>r2.then(testFunction2, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2) : IPromise<{ x: number; }>
>                                                                                                       : ^^^^^^^^^^^^^^      ^^^^
>r2.then(testFunction2, testFunction2, testFunction2).then : { <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r2.then(testFunction2, testFunction2, testFunction2) : IPromise<{ x: number; }>
>                                                     : ^^^^^^^^^^^^^^      ^^^^
>r2.then : { <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r2 : IPromise<{ x: number; }>
>   : ^^^^^^^^^^^^^^      ^^^^
>then : { <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>then : { <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        

var s2: Promise<{ x: number; }>;
>s2 : Promise<{ x: number; }>
>   : ^^^^^^^^^^^^^      ^^^^
>x : number
>  : ^^^^^^

var s2a = s2.then(testFunction2, testFunction2, testFunction2);
>s2a : Promise<IPromise<{ x: number; }>>
>    : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then(testFunction2, testFunction2, testFunction2) : Promise<IPromise<{ x: number; }>>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s2 : Promise<{ x: number; }>
>   : ^^^^^^^^^^^^^      ^^^^
>then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        

var s2b = s2.then(testFunction2P, testFunction2P, testFunction2P);
>s2b : Promise<Promise<{ x: number; }>>
>    : ^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then(testFunction2P, testFunction2P, testFunction2P) : Promise<Promise<{ x: number; }>>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s2 : Promise<{ x: number; }>
>   : ^^^^^^^^^^^^^      ^^^^
>then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction2P : () => Promise<{ x: number; }>
>               : ^^^^^^                       
>testFunction2P : () => Promise<{ x: number; }>
>               : ^^^^^^                       
>testFunction2P : () => Promise<{ x: number; }>
>               : ^^^^^^                       

var s2c = s2.then(testFunction2P, testFunction2, testFunction2);
>s2c : Promise<IPromise<{ x: number; }>>
>    : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then(testFunction2P, testFunction2, testFunction2) : Promise<IPromise<{ x: number; }>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s2 : Promise<{ x: number; }>
>   : ^^^^^^^^^^^^^      ^^^^
>then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction2P : () => Promise<{ x: number; }>
>               : ^^^^^^                       
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        

var s2d = s2.then(testFunction2P, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2);
>s2d : Promise<IPromise<{ x: number; }>>
>    : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then(testFunction2P, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2) : Promise<IPromise<{ x: number; }>>
>                                                                                                        : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then(testFunction2P, testFunction2, testFunction2).then : { <TResult1 = IPromise<{ x: number; }>, TResult2 = never>(onfulfilled?: (value: IPromise<{ x: number; }>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<{ x: number; }>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                                           : ^^^        ^^^^^^^^^^^^^^^^^      ^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s2.then(testFunction2P, testFunction2, testFunction2) : Promise<IPromise<{ x: number; }>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^
>s2.then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s2 : Promise<{ x: number; }>
>   : ^^^^^^^^^^^^^      ^^^^
>then : { <TResult1 = { x: number; }, TResult2 = never>(onfulfilled?: (value: { x: number; }) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: { x: number; }) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^      ^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^      ^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction2P : () => Promise<{ x: number; }>
>               : ^^^^^^                       
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>then : { <TResult1 = IPromise<{ x: number; }>, TResult2 = never>(onfulfilled?: (value: IPromise<{ x: number; }>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<{ x: number; }>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^      ^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        
>testFunction2 : () => IPromise<{ x: number; }>
>              : ^^^^^^                        

var r3: IPromise<number>;
>r3 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^

var r3a = r3.then(testFunction3, testFunction3, testFunction3);
>r3a : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r3.then(testFunction3, testFunction3, testFunction3) : IPromise<number>
>                                                     : ^^^^^^^^^^^^^^^^
>r3.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>        : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r3 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                

var r3b = r3.then(testFunction3, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3);
>r3b : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r3.then(testFunction3, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3) : IPromise<number>
>                                                                                                       : ^^^^^^^^^^^^^^^^
>r3.then(testFunction3, testFunction3, testFunction3).then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r3.then(testFunction3, testFunction3, testFunction3) : IPromise<number>
>                                                     : ^^^^^^^^^^^^^^^^
>r3.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r3 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                

var s3: Promise<number>;
>s3 : Promise<number>
>   : ^^^^^^^^^^^^^^^

var s3a = s3.then(testFunction3, testFunction3, testFunction3);
>s3a : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then(testFunction3, testFunction3, testFunction3) : Promise<IPromise<number>>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s3 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                

var s3b = s3.then(testFunction3P, testFunction3P, testFunction3P);
>s3b : Promise<Promise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then(testFunction3P, testFunction3P, testFunction3P) : Promise<Promise<number>>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s3 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction3P : (x: number) => Promise<number>
>               : ^ ^^      ^^^^^               
>testFunction3P : (x: number) => Promise<number>
>               : ^ ^^      ^^^^^               
>testFunction3P : (x: number) => Promise<number>
>               : ^ ^^      ^^^^^               

var s3c = s3.then(testFunction3P, testFunction3, testFunction3);
>s3c : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then(testFunction3P, testFunction3, testFunction3) : Promise<IPromise<number>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s3 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction3P : (x: number) => Promise<number>
>               : ^ ^^      ^^^^^               
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                

var s3d = s3.then(testFunction3P, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3); // Should error
>s3d : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then(testFunction3P, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3) : Promise<IPromise<number>>
>                                                                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then(testFunction3P, testFunction3, testFunction3).then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                                           : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s3.then(testFunction3P, testFunction3, testFunction3) : Promise<IPromise<number>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s3.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s3 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction3P : (x: number) => Promise<number>
>               : ^ ^^      ^^^^^               
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                
>testFunction3 : (x: number) => IPromise<number>
>              : ^ ^^      ^^^^^                

var r4: IPromise<string>;
>r4 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^

var sIPromise: (x: any) => IPromise<string>;
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>x : any
>  : ^^^

var sPromise: (x: any) => Promise<string>;
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>x : any
>  : ^^^

var r4a = r4.then(testFunction4, testFunction4, testFunction4); // error
>r4a : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r4.then(testFunction4, testFunction4, testFunction4) : IPromise<string>
>                                                     : ^^^^^^^^^^^^^^^^
>r4.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r4 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                

var r4b = r4.then(sIPromise, testFunction4, testFunction4).then(sIPromise, testFunction4, testFunction4); // ok
>r4b : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r4.then(sIPromise, testFunction4, testFunction4).then(sIPromise, testFunction4, testFunction4) : IPromise<string>
>                                                                                               : ^^^^^^^^^^^^^^^^
>r4.then(sIPromise, testFunction4, testFunction4).then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r4.then(sIPromise, testFunction4, testFunction4) : IPromise<string>
>                                                 : ^^^^^^^^^^^^^^^^
>r4.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r4 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                

var s4: Promise<string>;
>s4 : Promise<string>
>   : ^^^^^^^^^^^^^^^

var s4a = s4.then(testFunction4, testFunction4, testFunction4); // error
>s4a : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then(testFunction4, testFunction4, testFunction4) : Promise<IPromise<string>>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s4 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                

var s4b = s4.then(testFunction4P, testFunction4P, testFunction4P); // error 
>s4b : Promise<Promise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then(testFunction4P, testFunction4P, testFunction4P) : Promise<Promise<string>>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s4 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               

var s4c = s4.then(testFunction4P, testFunction4, testFunction4); // error
>s4c : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then(testFunction4P, testFunction4, testFunction4) : Promise<IPromise<string>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s4 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                

var s4d = s4.then(sIPromise, testFunction4P, testFunction4).then(sIPromise, testFunction4P, testFunction4);
>s4d : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then(sIPromise, testFunction4P, testFunction4).then(sIPromise, testFunction4P, testFunction4) : Promise<IPromise<string>>
>                                                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then(sIPromise, testFunction4P, testFunction4).then : { <TResult1 = IPromise<string>, TResult2 = never>(onfulfilled?: (value: IPromise<string>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<string>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                                       : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s4.then(sIPromise, testFunction4P, testFunction4) : Promise<IPromise<string>>
>                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s4.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s4 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                
>then : { <TResult1 = IPromise<string>, TResult2 = never>(onfulfilled?: (value: IPromise<string>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<string>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>testFunction4P : (x: number, y?: string) => Promise<string>
>               : ^ ^^      ^^ ^^^      ^^^^^               
>testFunction4 : (x: number, y?: string) => IPromise<string>
>              : ^ ^^      ^^ ^^^      ^^^^^                

var r5: IPromise<string>;
>r5 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^

var r5a = r5.then(testFunction5, testFunction5, testFunction5); // error
>r5a : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r5.then(testFunction5, testFunction5, testFunction5) : IPromise<string>
>                                                     : ^^^^^^^^^^^^^^^^
>r5.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r5 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                

var r5b = r5.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r5b : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r5.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                                                               : ^^^^^^^^^^^^^^^^
>r5.then(sIPromise, sIPromise, sIPromise).then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r5.then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                         : ^^^^^^^^^^^^^^^^
>r5.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r5 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var s5: Promise<string>;
>s5 : Promise<string>
>   : ^^^^^^^^^^^^^^^

var s5a = s5.then(testFunction5, testFunction5, testFunction5); // error
>s5a : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then(testFunction5, testFunction5, testFunction5) : Promise<IPromise<string>>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s5 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                

var s5b = s5.then(testFunction5P, testFunction5P, testFunction5P); // error
>s5b : Promise<Promise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then(testFunction5P, testFunction5P, testFunction5P) : Promise<Promise<string>>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s5 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction5P : (x: number, cb: (a: string) => string) => Promise<string>
>               : ^ ^^      ^^  ^^                     ^^^^^               
>testFunction5P : (x: number, cb: (a: string) => string) => Promise<string>
>               : ^ ^^      ^^  ^^                     ^^^^^               
>testFunction5P : (x: number, cb: (a: string) => string) => Promise<string>
>               : ^ ^^      ^^  ^^                     ^^^^^               

var s5c = s5.then(testFunction5P, testFunction5, testFunction5); // error
>s5c : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then(testFunction5P, testFunction5, testFunction5) : Promise<IPromise<string>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s5 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction5P : (x: number, cb: (a: string) => string) => Promise<string>
>               : ^ ^^      ^^  ^^                     ^^^^^               
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                
>testFunction5 : (x: number, cb: (a: string) => string) => IPromise<string>
>              : ^ ^^      ^^  ^^                     ^^^^^                

var s5d = s5.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise); // ok
>s5d : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise) : Promise<IPromise<string>>
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then(sPromise, sPromise, sPromise).then : { <TResult1 = Promise<string>, TResult2 = never>(onfulfilled?: (value: Promise<string>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: Promise<string>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                           : ^^^        ^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s5.then(sPromise, sPromise, sPromise) : Promise<Promise<string>>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>s5.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s5 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>then : { <TResult1 = Promise<string>, TResult2 = never>(onfulfilled?: (value: Promise<string>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: Promise<string>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var r6: IPromise<string>;
>r6 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^

var r6a = r6.then(testFunction6, testFunction6, testFunction6); // error
>r6a : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r6.then(testFunction6, testFunction6, testFunction6) : IPromise<string>
>                                                     : ^^^^^^^^^^^^^^^^
>r6.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r6 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                

var r6b = r6.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r6b : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r6.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                                                               : ^^^^^^^^^^^^^^^^
>r6.then(sIPromise, sIPromise, sIPromise).then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r6.then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                         : ^^^^^^^^^^^^^^^^
>r6.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r6 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var s6: Promise<string>;
>s6 : Promise<string>
>   : ^^^^^^^^^^^^^^^

var s6a = s6.then(testFunction6, testFunction6, testFunction6); // error
>s6a : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then(testFunction6, testFunction6, testFunction6) : Promise<IPromise<string>>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s6 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                

var s6b = s6.then(testFunction6P, testFunction6P, testFunction6P); // error
>s6b : Promise<Promise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then(testFunction6P, testFunction6P, testFunction6P) : Promise<Promise<string>>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s6 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction6P : (x: number, cb: <T>(a: T) => T) => Promise<string>
>               : ^ ^^      ^^  ^^              ^^^^^               
>testFunction6P : (x: number, cb: <T>(a: T) => T) => Promise<string>
>               : ^ ^^      ^^  ^^              ^^^^^               
>testFunction6P : (x: number, cb: <T>(a: T) => T) => Promise<string>
>               : ^ ^^      ^^  ^^              ^^^^^               

var s6c = s6.then(testFunction6P, testFunction6, testFunction6); // error
>s6c : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then(testFunction6P, testFunction6, testFunction6) : Promise<IPromise<string>>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s6 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction6P : (x: number, cb: <T>(a: T) => T) => Promise<string>
>               : ^ ^^      ^^  ^^              ^^^^^               
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                
>testFunction6 : (x: number, cb: <T>(a: T) => T) => IPromise<string>
>              : ^ ^^      ^^  ^^              ^^^^^                

var s6d = s6.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise); // ok
>s6d : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then(sPromise, sPromise, sPromise).then(sIPromise, sIPromise, sIPromise) : Promise<IPromise<string>>
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then(sPromise, sPromise, sPromise).then : { <TResult1 = Promise<string>, TResult2 = never>(onfulfilled?: (value: Promise<string>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: Promise<string>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                           : ^^^        ^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s6.then(sPromise, sPromise, sPromise) : Promise<Promise<string>>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>s6.then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s6 : Promise<string>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = string, TResult2 = never>(onfulfilled?: (value: string) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>then : { <TResult1 = Promise<string>, TResult2 = never>(onfulfilled?: (value: Promise<string>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: Promise<string>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var r7: IPromise<string>;
>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^

var r7a = r7.then(testFunction7, testFunction7, testFunction7); // error
>r7a : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r7.then(testFunction7, testFunction7, testFunction7) : IPromise<string>
>                                                     : ^^^^^^^^^^^^^^^^
>r7.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>     : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                

var r7b = r7.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r7b : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r7.then(sIPromise, sIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                                                               : ^^^^^^^^^^^^^^^^
>r7.then(sIPromise, sIPromise, sIPromise).then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7.then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                         : ^^^^^^^^^^^^^^^^
>r7.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>        : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var s7: Promise<string>;
>s7 : Promise<string>
>   : ^^^^^^^^^^^^^^^

var s7a = r7.then(testFunction7, testFunction7, testFunction7); // error
>s7a : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r7.then(testFunction7, testFunction7, testFunction7) : IPromise<string>
>                                                     : ^^^^^^^^^^^^^^^^
>r7.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                

var s7b = r7.then(testFunction7P, testFunction7P, testFunction7P); // error
>s7b : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r7.then(testFunction7P, testFunction7P, testFunction7P) : IPromise<string>
>                                                        : ^^^^^^^^^^^^^^^^
>r7.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction7P : (cb: <T>(a: T) => T) => Promise<string>
>               : ^  ^^              ^^^^^               
>testFunction7P : (cb: <T>(a: T) => T) => Promise<string>
>               : ^  ^^              ^^^^^               
>testFunction7P : (cb: <T>(a: T) => T) => Promise<string>
>               : ^  ^^              ^^^^^               

var s7c = r7.then(testFunction7P, testFunction7, testFunction7); // error
>s7c : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r7.then(testFunction7P, testFunction7, testFunction7) : IPromise<string>
>                                                      : ^^^^^^^^^^^^^^^^
>r7.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction7P : (cb: <T>(a: T) => T) => Promise<string>
>               : ^  ^^              ^^^^^               
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                
>testFunction7 : (cb: <T>(a: T) => T) => IPromise<string>
>              : ^  ^^              ^^^^^                

var s7d = r7.then(sPromise, sPromise, sPromise).then(sPromise, sPromise, sPromise); // ok?
>s7d : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r7.then(sPromise, sPromise, sPromise).then(sPromise, sPromise, sPromise) : IPromise<string>
>                                                                         : ^^^^^^^^^^^^^^^^
>r7.then(sPromise, sPromise, sPromise).then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7.then(sPromise, sPromise, sPromise) : IPromise<string>
>                                      : ^^^^^^^^^^^^^^^^
>r7.then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r7 : IPromise<string>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>then : { <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               

var r8: IPromise<number>;
>r8 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^

var nIPromise: (x: any) => IPromise<number>;
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>x : any
>  : ^^^

var nPromise: (x: any) => Promise<number>;
>nPromise : (x: any) => Promise<number>
>         : ^ ^^   ^^^^^               
>x : any
>  : ^^^

var r8a = r8.then(testFunction8, testFunction8, testFunction8); // error
>r8a : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>r8.then(testFunction8, testFunction8, testFunction8) : IPromise<unknown>
>                                                     : ^^^^^^^^^^^^^^^^^
>r8.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>        : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r8 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           

var r8b = r8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise); // ok
>r8b : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise) : IPromise<number>
>                                                                               : ^^^^^^^^^^^^^^^^
>r8.then(nIPromise, nIPromise, nIPromise).then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>                                              : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r8.then(nIPromise, nIPromise, nIPromise) : IPromise<number>
>                                         : ^^^^^^^^^^^^^^^^
>r8.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r8 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var s8: Promise<number>;
>s8 : Promise<number>
>   : ^^^^^^^^^^^^^^^

var s8a = s8.then(testFunction8, testFunction8, testFunction8); // error
>s8a : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>s8.then(testFunction8, testFunction8, testFunction8) : Promise<unknown>
>                                                     : ^^^^^^^^^^^^^^^^
>s8.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s8 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           

var s8b = s8.then(testFunction8P, testFunction8P, testFunction8P); // error
>s8b : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>s8.then(testFunction8P, testFunction8P, testFunction8P) : Promise<unknown>
>                                                        : ^^^^^^^^^^^^^^^^
>s8.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s8 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^           ^^^^^          
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^           ^^^^^          
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^           ^^^^^          

var s8c = s8.then(testFunction8P, testFunction8, testFunction8); // error
>s8c : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>s8.then(testFunction8P, testFunction8, testFunction8) : Promise<unknown>
>                                                      : ^^^^^^^^^^^^^^^^
>s8.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s8 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction8P : <T>(x: T, cb: (a: T) => T) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^           ^^^^^          
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           
>testFunction8 : <T>(x: T, cb: (a: T) => T) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^           ^^^^^           

var s8d = s8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise); // ok
>s8d : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise) : Promise<IPromise<number>>
>                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s8.then(nIPromise, nIPromise, nIPromise).then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                              : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s8.then(nIPromise, nIPromise, nIPromise) : Promise<IPromise<number>>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s8.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s8 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var r9: IPromise<number>;
>r9 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^

var r9a = r9.then(testFunction9, testFunction9, testFunction9); // error
>r9a : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>r9.then(testFunction9, testFunction9, testFunction9) : IPromise<unknown>
>                                                     : ^^^^^^^^^^^^^^^^^
>r9.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r9 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>     : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           

var r9b = r9.then(sIPromise, sIPromise, sIPromise); // ok
>r9b : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r9.then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                         : ^^^^^^^^^^^^^^^^
>r9.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r9 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var r9c = r9.then(nIPromise, nIPromise, nIPromise); // ok
>r9c : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r9.then(nIPromise, nIPromise, nIPromise) : IPromise<number>
>                                         : ^^^^^^^^^^^^^^^^
>r9.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r9 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var r9d = r9.then(testFunction, sIPromise, nIPromise); // error
>r9d : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>r9.then(testFunction, sIPromise, nIPromise) : IPromise<number>
>                                            : ^^^^^^^^^^^^^^^^
>r9.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>        : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r9 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction : () => IPromise<number>
>             : ^^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var r9e = r9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r9e : IPromise<string>
>    : ^^^^^^^^^^^^^^^^
>r9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                                                                  : ^^^^^^^^^^^^^^^^
>r9.then(testFunction, nIPromise, sIPromise).then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r9.then(testFunction, nIPromise, sIPromise) : IPromise<number>
>                                            : ^^^^^^^^^^^^^^^^
>r9.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r9 : IPromise<number>
>   : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction : () => IPromise<number>
>             : ^^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var s9: Promise<number>;
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^

var s9a = s9.then(testFunction9, testFunction9, testFunction9); // error
>s9a : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>s9.then(testFunction9, testFunction9, testFunction9) : Promise<unknown>
>                                                     : ^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           

var s9b = s9.then(testFunction9P, testFunction9P, testFunction9P); // error
>s9b : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>s9.then(testFunction9P, testFunction9P, testFunction9P) : Promise<unknown>
>                                                        : ^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^              ^^^^^          
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^              ^^^^^          
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^              ^^^^^          

var s9c = s9.then(testFunction9P, testFunction9, testFunction9); // error
>s9c : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>s9.then(testFunction9P, testFunction9, testFunction9) : Promise<unknown>
>                                                      : ^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction9P : <T>(x: T, cb: <U>(a: U) => U) => Promise<T>
>               : ^ ^^ ^^ ^^  ^^              ^^^^^          
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           
>testFunction9 : <T>(x: T, cb: <U>(a: U) => U) => IPromise<T>
>              : ^ ^^ ^^ ^^  ^^              ^^^^^           

var s9d = s9.then(sPromise, sPromise, sPromise); // ok
>s9d : Promise<Promise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then(sPromise, sPromise, sPromise) : Promise<Promise<string>>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               

var s9e = s9.then(nPromise, nPromise, nPromise); // ok
>s9e : Promise<Promise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then(nPromise, nPromise, nPromise) : Promise<Promise<number>>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>nPromise : (x: any) => Promise<number>
>         : ^ ^^   ^^^^^               
>nPromise : (x: any) => Promise<number>
>         : ^ ^^   ^^^^^               
>nPromise : (x: any) => Promise<number>
>         : ^ ^^   ^^^^^               

var s9f = s9.then(testFunction, sIPromise, nIPromise); // error
>s9f : Promise<IPromise<number>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then(testFunction, sIPromise, nIPromise) : Promise<IPromise<number>>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var s9g = s9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>s9g : Promise<IPromise<string>>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : Promise<IPromise<string>>
>                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then(testFunction, nIPromise, sIPromise).then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                                 : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9.then(testFunction, nIPromise, sIPromise) : Promise<IPromise<number>>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s9.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>        : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s9 : Promise<number>
>   : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction : () => IPromise<number>
>             : ^^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var r10 = testFunction10(x => x);
>r10 : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>testFunction10(x => x) : IPromise<unknown>
>                       : ^^^^^^^^^^^^^^^^^
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>x => x : <U>(x: U) => U
>       : ^ ^^ ^^^^^^^^^
>x : U
>  : ^
>x : U
>  : ^

var r10a = r10.then(testFunction10, testFunction10, testFunction10); // ok
>r10a : IPromise<unknown>
>     : ^^^^^^^^^^^^^^^^^
>r10.then(testFunction10, testFunction10, testFunction10) : IPromise<unknown>
>                                                         : ^^^^^^^^^^^^^^^^^
>r10.then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r10 : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           

var r10b = r10.then(sIPromise, sIPromise, sIPromise); // ok
>r10b : IPromise<string>
>     : ^^^^^^^^^^^^^^^^
>r10.then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                          : ^^^^^^^^^^^^^^^^
>r10.then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r10 : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var r10c = r10.then(nIPromise, nIPromise, nIPromise); // ok
>r10c : IPromise<number>
>     : ^^^^^^^^^^^^^^^^
>r10.then(nIPromise, nIPromise, nIPromise) : IPromise<number>
>                                          : ^^^^^^^^^^^^^^^^
>r10.then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r10 : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var r10d = r10.then(testFunction, sIPromise, nIPromise); // error
>r10d : IPromise<number>
>     : ^^^^^^^^^^^^^^^^
>r10.then(testFunction, sIPromise, nIPromise) : IPromise<number>
>                                             : ^^^^^^^^^^^^^^^^
>r10.then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>         : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r10 : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction : () => IPromise<number>
>             : ^^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var r10e = r10.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
>r10e : IPromise<string>
>     : ^^^^^^^^^^^^^^^^
>r10.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise) : IPromise<string>
>                                                                                   : ^^^^^^^^^^^^^^^^
>r10.then(testFunction, nIPromise, sIPromise).then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>                                                  : ^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>r10.then(testFunction, nIPromise, sIPromise) : IPromise<number>
>                                             : ^^^^^^^^^^^^^^^^
>r10.then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r10 : IPromise<unknown>
>    : ^^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction : () => IPromise<number>
>             : ^^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var s10 = testFunction10P(x => x);
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>testFunction10P(x => x) : Promise<unknown>
>                        : ^^^^^^^^^^^^^^^^
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>                : ^ ^^  ^^              ^^^^^          
>x => x : <U>(x: U) => U
>       : ^ ^^ ^^^^^^^^^
>x : U
>  : ^
>x : U
>  : ^

var s10a = s10.then(testFunction10, testFunction10, testFunction10); // ok
>s10a : Promise<IPromise<unknown>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(testFunction10, testFunction10, testFunction10) : Promise<IPromise<unknown>>
>                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           

var s10b = s10.then(testFunction10P, testFunction10P, testFunction10P); // ok
>s10b : Promise<Promise<unknown>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(testFunction10P, testFunction10P, testFunction10P) : Promise<Promise<unknown>>
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>                : ^ ^^  ^^              ^^^^^          
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>                : ^ ^^  ^^              ^^^^^          
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>                : ^ ^^  ^^              ^^^^^          

var s10c = s10.then(testFunction10P, testFunction10, testFunction10); // ok
>s10c : Promise<IPromise<unknown>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(testFunction10P, testFunction10, testFunction10) : Promise<IPromise<unknown>>
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction10P : <T>(cb: <U>(a: U) => U) => Promise<T>
>                : ^ ^^  ^^              ^^^^^          
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           
>testFunction10 : <T>(cb: <U>(a: U) => U) => IPromise<T>
>               : ^ ^^  ^^              ^^^^^           

var s10d = s10.then(sPromise, sPromise, sPromise); // ok
>s10d : Promise<Promise<string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(sPromise, sPromise, sPromise) : Promise<Promise<string>>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               

var s10e = s10.then(nIPromise, nPromise, nIPromise); // ok
>s10e : Promise<IPromise<number>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(nIPromise, nPromise, nIPromise) : Promise<IPromise<number>>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>nPromise : (x: any) => Promise<number>
>         : ^ ^^   ^^^^^               
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var s10f = s10.then(testFunctionP, sIPromise, nIPromise); // error
>s10f : Promise<Promise<number>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(testFunctionP, sIPromise, nIPromise) : Promise<Promise<number>>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                

var s10g = s10.then(testFunctionP, nIPromise, sIPromise).then(sPromise, sIPromise, sIPromise); // ok
>s10g : Promise<IPromise<string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(testFunctionP, nIPromise, sIPromise).then(sPromise, sIPromise, sIPromise) : Promise<IPromise<string>>
>                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then(testFunctionP, nIPromise, sIPromise).then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>                                                   : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10.then(testFunctionP, nIPromise, sIPromise) : Promise<IPromise<number>>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s10.then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s10 : Promise<unknown>
>    : ^^^^^^^^^^^^^^^^
>then : { <TResult1 = unknown, TResult2 = never>(onfulfilled?: (value: unknown) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: unknown) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunctionP : () => Promise<number>
>              : ^^^^^^               
>nIPromise : (x: any) => IPromise<number>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>then : { <TResult1 = IPromise<number>, TResult2 = never>(onfulfilled?: (value: IPromise<number>) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: IPromise<number>) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>sPromise : (x: any) => Promise<string>
>         : ^ ^^   ^^^^^               
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                
>sIPromise : (x: any) => IPromise<string>
>          : ^ ^^   ^^^^^                

var r11: IPromise<number>;
>r11 : IPromise<number>
>    : ^^^^^^^^^^^^^^^^

var r11a = r11.then(testFunction11, testFunction11, testFunction11); // error
>r11a : IPromise<string>
>     : ^^^^^^^^^^^^^^^^
>r11.then(testFunction11, testFunction11, testFunction11) : IPromise<string>
>                                                         : ^^^^^^^^^^^^^^^^
>r11.then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r11 : IPromise<number>
>    : ^^^^^^^^^^^^^^^^
>then : { <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^

var s11: Promise<number>;
>s11 : Promise<number>
>    : ^^^^^^^^^^^^^^^

var s11a = s11.then(testFunction11, testFunction11, testFunction11); // ok
>s11a : Promise<IPromise<string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s11.then(testFunction11, testFunction11, testFunction11) : Promise<IPromise<string>>
>                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s11.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s11 : Promise<number>
>    : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^

var s11b = s11.then(testFunction11P, testFunction11P, testFunction11P); // ok
>s11b : Promise<Promise<string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^
>s11.then(testFunction11P, testFunction11P, testFunction11P) : Promise<Promise<string>>
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^
>s11.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s11 : Promise<number>
>    : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction11P : { (x: number): Promise<number>; (x: string): Promise<string>; }
>                : ^^^ ^^      ^^^               ^^^ ^^      ^^^               ^^^
>testFunction11P : { (x: number): Promise<number>; (x: string): Promise<string>; }
>                : ^^^ ^^      ^^^               ^^^ ^^      ^^^               ^^^
>testFunction11P : { (x: number): Promise<number>; (x: string): Promise<string>; }
>                : ^^^ ^^      ^^^               ^^^ ^^      ^^^               ^^^

var s11c = s11.then(testFunction11P, testFunction11, testFunction11); // ok
>s11c : Promise<IPromise<string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s11.then(testFunction11P, testFunction11, testFunction11) : Promise<IPromise<string>>
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>s11.then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>         : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>s11 : Promise<number>
>    : ^^^^^^^^^^^^^^^
>then : { <TResult1 = number, TResult2 = never>(onfulfilled?: (value: number) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>; }
>     : ^^^        ^^^^^^^^^^^        ^^^^^^^^^^           ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^^        ^^   ^^^^^    ^^^^^^^^^^^^^^^^
>testFunction11P : { (x: number): Promise<number>; (x: string): Promise<string>; }
>                : ^^^ ^^      ^^^               ^^^ ^^      ^^^               ^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^
>testFunction11 : { (x: number): IPromise<number>; (x: string): IPromise<string>; }
>               : ^^^ ^^      ^^^                ^^^ ^^      ^^^                ^^^

var r12 = testFunction12(x => x);
>r12 : IPromise<(x: any) => any>
>    : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>testFunction12(x => x) : IPromise<(x: any) => any>
>                       : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>x => x : (x: any) => any
>       : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x : any
>  : ^^^

var r12a = r12.then(testFunction12, testFunction12, testFunction12); // ok
>r12a : IPromise<unknown>
>     : ^^^^^^^^^^^^^^^^^
>r12.then(testFunction12, testFunction12, testFunction12) : IPromise<unknown>
>                                                         : ^^^^^^^^^^^^^^^^^
>r12.then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>r12 : IPromise<(x: any) => any>
>    : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^

var s12 = testFunction12(x => x);
>s12 : IPromise<(x: any) => any>
>    : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>testFunction12(x => x) : IPromise<(x: any) => any>
>                       : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>x => x : (x: any) => any
>       : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x : any
>  : ^^^

var s12a = s12.then(testFunction12, testFunction12, testFunction12); // ok
>s12a : IPromise<unknown>
>     : ^^^^^^^^^^^^^^^^^
>s12.then(testFunction12, testFunction12, testFunction12) : IPromise<unknown>
>                                                         : ^^^^^^^^^^^^^^^^^
>s12.then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>s12 : IPromise<(x: any) => any>
>    : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^

var s12b = s12.then(testFunction12P, testFunction12P, testFunction12P); // ok
>s12b : IPromise<unknown>
>     : ^^^^^^^^^^^^^^^^^
>s12.then(testFunction12P, testFunction12P, testFunction12P) : IPromise<unknown>
>                                                            : ^^^^^^^^^^^^^^^^^
>s12.then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
>         : ^^^ ^^       ^^^^     ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^ ^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^^^^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^ ^^       ^^^^     ^^^ ^^^^^^^^^^^^^^^^^^^^^     ^^^^     ^^   ^^^^^^^^        ^^^                       ^^^^^^^^^^^^^^^^^
>s12 : IPromise<(x: any) => any>
>    : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>                : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^          ^^^
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>                : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^          ^^^
>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>                : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^          ^^^

var s12c = s12.then(testFunction12P, testFunction12, testFunction12); // ok
>s12c : IPromise<unknown>
>     : ^^^^^^^^^^^^^^^^^
>s12.then(testFunction12P, testFunction12, testFunction12) : IPromise<unknown>
>                                                          : ^^^^^^^^^^^^^^^^^
>s12.then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>s12 : IPromise<(x: any) => any>
>    : ^^^^^^^^^^ ^^^^^^^^^^^^^^
>then : { <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: (x: any) => any) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }

>testFunction12P : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): Promise<T>; }
>                : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^          ^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^
>testFunction12 : { <T>(x: T): IPromise<T>; <T>(x: T, y: T): IPromise<T>; }
>               : ^^^ ^^ ^^ ^^^           ^^^ ^^ ^^ ^^ ^^ ^^^           ^^^

