//// [tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinNestedSubclass.ts] ////

=== protectedClassPropertyAccessibleWithinNestedSubclass.ts ===
class B {
>B : B
>  : ^

    protected x: string;
>x : string
>  : ^^^^^^

    protected static x: string;
>x : string
>  : ^^^^^^
}

class C extends B {
>C : C
>  : ^
>B : B
>  : ^

    protected get y() { return this.x; }
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : this
>     : ^^^^
>x : string
>  : ^^^^^^

    protected set y(x) { this.y = this.x; }
>y : string
>  : ^^^^^^
>x : string
>  : ^^^^^^
>this.y = this.x : string
>                : ^^^^^^
>this.y : string
>       : ^^^^^^
>this : this
>     : ^^^^
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : this
>     : ^^^^
>x : string
>  : ^^^^^^

    protected foo() { return this.x; }
>foo : () => string
>    : ^^^^^^^^^^^^
>this.x : string
>       : ^^^^^^
>this : this
>     : ^^^^
>x : string
>  : ^^^^^^

    protected static get y() { return this.x; }
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>x : string
>  : ^^^^^^

    protected static set y(x) { this.y = this.x; }
>y : string
>  : ^^^^^^
>x : string
>  : ^^^^^^
>this.y = this.x : string
>                : ^^^^^^
>this.y : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>y : string
>  : ^^^^^^
>this.x : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>x : string
>  : ^^^^^^

    protected static foo() { return this.x; }
>foo : () => string
>    : ^^^^^^^^^^^^
>this.x : string
>       : ^^^^^^
>this : typeof C
>     : ^^^^^^^^
>x : string
>  : ^^^^^^

    protected static bar() { this.foo(); }
>bar : () => void
>    : ^^^^^^^^^^
>this.foo() : string
>           : ^^^^^^
>this.foo : () => string
>         : ^^^^^^^^^^^^
>this : typeof C
>     : ^^^^^^^^
>foo : () => string
>    : ^^^^^^^^^^^^
    
    protected bar() { 
>bar : () => void
>    : ^^^^^^^^^^

        class D {
>D : D
>  : ^

            protected foo() {
>foo : () => void
>    : ^^^^^^^^^^

                var c = new C();
>c : C
>  : ^
>new C() : C
>        : ^
>C : typeof C
>  : ^^^^^^^^

                var c1 = c.y;
>c1 : string
>   : ^^^^^^
>c.y : string
>    : ^^^^^^
>c : C
>  : ^
>y : string
>  : ^^^^^^

                var c2 = c.x;
>c2 : string
>   : ^^^^^^
>c.x : string
>    : ^^^^^^
>c : C
>  : ^
>x : string
>  : ^^^^^^

                var c3 = c.foo;
>c3 : () => string
>   : ^^^^^^^^^^^^
>c.foo : () => string
>      : ^^^^^^^^^^^^
>c : C
>  : ^
>foo : () => string
>    : ^^^^^^^^^^^^

                var c4 = c.bar;
>c4 : () => void
>   : ^^^^^^^^^^
>c.bar : () => void
>      : ^^^^^^^^^^
>c : C
>  : ^
>bar : () => void
>    : ^^^^^^^^^^

                var c5 = c.z; // error
>c5 : any
>   : ^^^
>c.z : any
>    : ^^^
>c : C
>  : ^
>z : any
>  : ^^^
                
                var sc1 = C.x;
>sc1 : string
>    : ^^^^^^
>C.x : string
>    : ^^^^^^
>C : typeof C
>  : ^^^^^^^^
>x : string
>  : ^^^^^^

                var sc2 = C.y;
>sc2 : string
>    : ^^^^^^
>C.y : string
>    : ^^^^^^
>C : typeof C
>  : ^^^^^^^^
>y : string
>  : ^^^^^^

                var sc3 = C.foo;
>sc3 : () => string
>    : ^^^^^^^^^^^^
>C.foo : () => string
>      : ^^^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^
>foo : () => string
>    : ^^^^^^^^^^^^

                var sc4 = C.bar;
>sc4 : () => void
>    : ^^^^^^^^^^
>C.bar : () => void
>      : ^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^
>bar : () => void
>    : ^^^^^^^^^^
            }
        }
    }
}

class E extends C {
>E : E
>  : ^
>C : C
>  : ^

    protected z: string;
>z : string
>  : ^^^^^^
}
