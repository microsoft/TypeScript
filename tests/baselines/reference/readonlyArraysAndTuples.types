//// [tests/cases/conformance/types/tuple/readonlyArraysAndTuples.ts] ////

=== readonlyArraysAndTuples.ts ===
type T10 = string[];
>T10 : T10
>    : ^^^

type T11 = Array<string>;
>T11 : T11
>    : ^^^

type T12 = readonly string[];
>T12 : T12
>    : ^^^

type T13 = ReadonlyArray<string>;
>T13 : T13
>    : ^^^

type T20 = [number, number];
>T20 : T20
>    : ^^^

type T21 = readonly [number, number];
>T21 : T21
>    : ^^^

type T30 = readonly string;  // Error
>T30 : string
>    : ^^^^^^

type T31<T> = readonly T;  // Error
>T31 : T
>    : ^

type T32 = readonly readonly string[];  // Error
>T32 : T32
>    : ^^^

type T33 = readonly Array<string>;  // Error
>T33 : T33
>    : ^^^

function f1(ma: string[], ra: readonly string[], mt: [string, string], rt: readonly [string, string]) {
>f1 : (ma: string[], ra: readonly string[], mt: [string, string], rt: readonly [string, string]) => void
>   : ^  ^^        ^^  ^^                 ^^  ^^                ^^  ^^                         ^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^

    ma = ra;  // Error
>ma = ra : readonly string[]
>        : ^^^^^^^^^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^

    ma = mt;
>ma = mt : [string, string]
>        : ^^^^^^^^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^

    ma = rt;  // Error
>ma = rt : readonly [string, string]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^

    ra = ma;
>ra = ma : string[]
>        : ^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^

    ra = mt;
>ra = mt : [string, string]
>        : ^^^^^^^^^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^

    ra = rt;
>ra = rt : readonly [string, string]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^

    mt = ma;  // Error
>mt = ma : string[]
>        : ^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^

    mt = ra;  // Error
>mt = ra : readonly string[]
>        : ^^^^^^^^^^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^

    mt = rt;  // Error
>mt = rt : readonly [string, string]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^

    rt = ma;  // Error
>rt = ma : string[]
>        : ^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>ma : string[]
>   : ^^^^^^^^

    rt = ra;  // Error
>rt = ra : readonly string[]
>        : ^^^^^^^^^^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>ra : readonly string[]
>   : ^^^^^^^^^^^^^^^^^

    rt = mt;
>rt = mt : [string, string]
>        : ^^^^^^^^^^^^^^^^
>rt : readonly [string, string]
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>mt : [string, string]
>   : ^^^^^^^^^^^^^^^^
}

declare var v: readonly[number, number, ...number[]];
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

v[0] = 1;        // Error
>v[0] = 1 : 1
>         : ^
>v[0] : any
>     : ^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^

v[1] = 1;        // Error
>v[1] = 1 : 1
>         : ^
>v[1] : any
>     : ^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

v[2] = 1;        // Error
>v[2] = 1 : 1
>         : ^
>v[2] : number
>     : ^^^^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>1 : 1
>  : ^

delete v[2];     // Error
>delete v[2] : boolean
>            : ^^^^^^^
>v[2] : number
>     : ^^^^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^

v[0 + 1] = 1;    // Error
>v[0 + 1] = 1 : 1
>             : ^
>v[0 + 1] : number
>         : ^^^^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 + 1 : number
>      : ^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^
>1 : 1
>  : ^

v[0 + 2] = 1;    // Error
>v[0 + 2] = 1 : 1
>             : ^
>v[0 + 2] : number
>         : ^^^^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 + 2 : number
>      : ^^^^^^
>0 : 0
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^

delete v[0 + 1]; // Error
>delete v[0 + 1] : boolean
>                : ^^^^^^^
>v[0 + 1] : number
>         : ^^^^^^
>v : readonly [number, number, ...number[]]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 + 1 : number
>      : ^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^

