//// [tests/cases/compiler/recursiveBaseCheck.ts] ////

=== recursiveBaseCheck.ts ===
declare namespace Module {
>Module : Symbol(Module, Decl(recursiveBaseCheck.ts, 0, 0))

    class C extends D {
>C : Symbol(C, Decl(recursiveBaseCheck.ts, 0, 26))
>D : Symbol(D, Decl(recursiveBaseCheck.ts, 8, 5))
    }
    export class B extends Module.C {
>B : Symbol(B, Decl(recursiveBaseCheck.ts, 2, 5))
>Module.C : Symbol(C, Decl(recursiveBaseCheck.ts, 0, 26))
>Module : Symbol(Module, Decl(recursiveBaseCheck.ts, 0, 0))
>C : Symbol(C, Decl(recursiveBaseCheck.ts, 0, 26))
    }
    export class A extends Module.B {
>A : Symbol(A, Decl(recursiveBaseCheck.ts, 4, 5))
>Module.B : Symbol(B, Decl(recursiveBaseCheck.ts, 2, 5))
>Module : Symbol(Module, Decl(recursiveBaseCheck.ts, 0, 0))
>B : Symbol(B, Decl(recursiveBaseCheck.ts, 2, 5))
    }
    export class AmChart extends Module.A {
>AmChart : Symbol(AmChart, Decl(recursiveBaseCheck.ts, 6, 5))
>Module.A : Symbol(A, Decl(recursiveBaseCheck.ts, 4, 5))
>Module : Symbol(Module, Decl(recursiveBaseCheck.ts, 0, 0))
>A : Symbol(A, Decl(recursiveBaseCheck.ts, 4, 5))
    }
    export class D extends AmChart {
>D : Symbol(D, Decl(recursiveBaseCheck.ts, 8, 5))
>AmChart : Symbol(AmChart, Decl(recursiveBaseCheck.ts, 6, 5))
    }
    export class E extends Module.D {
>E : Symbol(E, Decl(recursiveBaseCheck.ts, 10, 5))
>Module.D : Symbol(D, Decl(recursiveBaseCheck.ts, 8, 5))
>Module : Symbol(Module, Decl(recursiveBaseCheck.ts, 0, 0))
>D : Symbol(D, Decl(recursiveBaseCheck.ts, 8, 5))
    }
    export class F extends Module.E {
>F : Symbol(F, Decl(recursiveBaseCheck.ts, 12, 5))
>Module.E : Symbol(E, Decl(recursiveBaseCheck.ts, 10, 5))
>Module : Symbol(Module, Decl(recursiveBaseCheck.ts, 0, 0))
>E : Symbol(E, Decl(recursiveBaseCheck.ts, 10, 5))
    }
}

