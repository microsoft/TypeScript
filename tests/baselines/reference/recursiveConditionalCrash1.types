//// [tests/cases/compiler/recursiveConditionalCrash1.ts] ////

=== recursiveConditionalCrash1.ts ===
type C1<T> = [T extends string ? C1<T> : never][0];
>C1 : T extends string ? T extends infer T_1 ? T_1 extends T ? T_1 extends string ? T_1 extends infer T_2 ? T_2 extends T_1 ? T_2 extends string ? T_2 extends infer T_3 ? T_3 extends T_2 ? T_3 extends string ? T_3 extends infer T_4 ? T_4 extends T_3 ? T_4 extends string ? T_4 extends infer T_5 ? T_5 extends T_4 ? T_5 extends string ? T_5 extends infer T_6 ? T_6 extends T_5 ? T_6 extends string ? T_6 extends infer T_7 ? T_7 extends T_6 ? T_7 extends string ? T_7 extends infer T_8 ? T_8 extends T_7 ? T_8 extends string ? T_8 extends infer T_9 ? T_9 extends T_8 ? T_9 extends string ? T_9 extends infer T_10 ? T_10 extends T_9 ? T_10 extends string ? any : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never : never


type C2<T> = [T extends string ? [C2<T>] : never][0];
>C2 : T extends string ? [T extends infer T_1 ? T_1 extends T ? T_1 extends string ? [T_1 extends infer T_2 ? T_2 extends T_1 ? T_2 extends string ? [T_2 extends infer T_3 ? T_3 extends T_2 ? T_3 extends string ? [T_3 extends infer T_4 ? T_4 extends T_3 ? T_4 extends string ? [T_4 extends infer T_5 ? T_5 extends T_4 ? T_5 extends string ? [T_5 extends infer T_6 ? T_6 extends T_5 ? T_6 extends string ? [T_6 extends infer T_7 ? T_7 extends T_6 ? T_7 extends string ? [T_7 extends infer T_8 ? T_8 extends T_7 ? T_8 extends string ? [T_8 extends infer T_9 ? T_9 extends T_8 ? T_9 extends string ? [T_9 extends infer T_10 ? T_10 extends T_9 ? T_10 extends string ? [any] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never : never : never] : never


