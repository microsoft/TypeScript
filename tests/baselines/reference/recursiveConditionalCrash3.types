//// [tests/cases/compiler/recursiveConditionalCrash3.ts] ////

=== Performance Stats ===
Assignability cache: 100 -> 2,500
Type Count: 500 -> 25,000
Instantiation count: 1,000 -> 50,000

=== recursiveConditionalCrash3.ts ===
// #43529

export {}
/**
 *
 * Some helper Types and Interfaces..
 *
 */

export type CanBeExpanded<T extends object = object, D = string> = {
>CanBeExpanded : CanBeExpanded<T, D>
>              : ^^^^^^^^^^^^^^^^^^^

    value: T
>value : T
>      : ^

    default: D
>default : D
>        : ^
}

interface Base {

}

interface User extends Base {
    id: string,
>id : string
>   : ^^^^^^

    role: CanBeExpanded<Role>,
>role : CanBeExpanded<Role, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    note: string,
>note : string
>     : ^^^^^^
}

interface Role extends Base {
    id: string,
>id : string
>   : ^^^^^^

    user: CanBeExpanded<User>,
>user : CanBeExpanded<User, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    x: string
>x : string
>  : ^^^^^^
}

// This interface will be expanded in circular way.
interface X extends Base {
    id: string,
>id : string
>   : ^^^^^^

    name: string,
>name : string
>     : ^^^^^^

    user: CanBeExpanded<User>,
>user : CanBeExpanded<User, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    role: CanBeExpanded<Role>
>role : CanBeExpanded<Role, string>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    roles: CanBeExpanded<Role[]>
>roles : CanBeExpanded<Role[], string>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

type Join<K, P> = K extends string | number ?
>Join : Join<K, P>
>     : ^^^^^^^^^^

    P extends string | number ?
        `${K}${"" extends P ? "" : "."}${P}`
        : never : never;

type PrefixWith<P, S, C = '.'> = P extends '' ? `${string & S}` : `${string & P}${string & C}${string & S}`
>PrefixWith : PrefixWith<P, S, C>
>           : ^^^^^^^^^^^^^^^^^^^

type SplitWithAllPossibleCombinations<S extends string, D extends string> =
>SplitWithAllPossibleCombinations : SplitWithAllPossibleCombinations<S, D>
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    string extends S ? string :
        S extends '' ? '' :
            S extends `${infer T}${D}${infer U}` ?
                T | Join<T, SplitWithAllPossibleCombinations<U, D>>
                : S;


/**
 * This function will return all possibile keys that can be expanded on T, only to the N deep level
 */
type KeysCanBeExpanded_<T, N extends number, Depth extends number[]> = N extends Depth['length'] ? never :
>KeysCanBeExpanded_ : KeysCanBeExpanded_<T, N, Depth>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    T extends CanBeExpanded ?
        KeysCanBeExpanded_<T['value'], N, Depth> :
        T extends Array<infer U> ? KeysCanBeExpanded_<U, N, Depth> :

            T extends object ?
                {
                    [K in keyof T ] :
                    T[K] extends object ?
                        K extends string | number
                            ? `${K}` | Join<`${K}`, KeysCanBeExpanded_<T[K], N, [1, ...Depth]>>
                            : never
                        : never

                }[keyof T]
                :
                never

export type KeysCanBeExpanded<T, N extends number = 4> = KeysCanBeExpanded_<T, N, []>
>KeysCanBeExpanded : KeysCanBeExpanded<T, N>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^

/**
 * Expand keys on `O` based on `Keys` parameter.
 */
type Expand__<O, Keys, P extends string, N extends number , Depth extends unknown[] > =
>Expand__ : Expand__<O, Keys, P, N, Depth>
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    N extends Depth['length'] ?
        O extends CanBeExpanded ?
            O['default'] :
            O :
        O extends CanBeExpanded ?
            Expand__<O[P extends Keys ? 'value' : 'default'], Keys, P, N, Depth> :
            O extends Array<infer U> ?
                Expand__<U, Keys, P, N, Depth>[]
                : O extends object ?
                {
                    [K in keyof O]-?: Expand__<O[K], Keys, PrefixWith<P, K>, N, [1, ...Depth]>
                }
                : O



type SplitAC<K> = SplitWithAllPossibleCombinations<K extends string ? K : '', '.'> extends infer Ko ? Ko : ''
>SplitAC : SplitAC<K>
>        : ^^^^^^^^^^

type Expand_<T, K, N extends number = 4> = Expand__<T, SplitAC<K>, '', N, []>
>Expand_ : Expand_<T, K, N>
>        : ^^^^^^^^^^^^^^^^

type AllKeys<T, N extends number = 4> = KeysCanBeExpanded<T, N> extends infer R ? R : never
>AllKeys : AllKeys<T, N>
>        : ^^^^^^^^^^^^^



/**
 * If I open the popup, (pointing with the mouse on the Expand), the compiler shows the type Expand, expanded as expected.
 *
 * It's fast and it doesn't use additional memory
 *
 */
export type Expand<T extends object, K extends AllKeys<T, N> = never, N extends number = 4> = Expand_<T, K, N>
>Expand : Expand<T, K, N>
>       : ^^^^^^^^^^^^^^^

/**
 * These two functions work as charm, also they are superfast and as expected they don't use additional Memory
 */
let y1: Expand<X>
>y1 : { id: string; name: string; user: string; role: string; roles: string; }
>   : ^^^^^^      ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

let y2: Expand<X, 'user.role.user.role'>
>y2 : { id: string; name: string; user: { id: string; role: { id: string; user: { id: string; role: string; note: string; }; x: string; }; note: string; }; role: string; roles: string; }
>   : ^^^^^^      ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^      ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


/**
 *
 * ... nevertheless when I need to use the Expand in other Types, as the following examples, the popup show "loading..." and without show any information and
 * the Memory Heap grows to 1.2gb (in my case) every time... You can see it opening the Chrome DevTools and check the memory Tab.
 *
 * *******
 * I think this is causing "FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory"
 * on my project during the `yarn start`.
 * *******
 *
 */

type UseQueryOptions<T extends Base, K extends AllKeys<T, 4> > = Expand<T, K>
>UseQueryOptions : T extends CanBeExpanded<object, string> ? T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_2 ? T_2 extends T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_2 extends CanBeExpanded<object, string> ? T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_3 ? T_3 extends T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_3 extends CanBeExpanded<object, string> ? T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_11]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_2 in keyof T_10]-?: T_10[K_2] extends infer T_12 ? T_12 extends T_10[K_2] ? T_12 extends CanBeExpanded<object, string> ? any : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_4 in keyof T_12]-?: any; } : T_12 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_3 in keyof T_9]-?: T_9[K_3] extends infer T_12 ? T_12 extends T_9[K_3] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_3}` extends infer T_13 ? T_13 extends `${string & K_3}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_3}` extends infer T_13 ? T_13 extends `${string & K_3}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? any : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_5 in keyof T_14]-?: any; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_6 in keyof T_12]-?: T_12[K_6] extends infer T_15 ? T_15 extends T_12[K_6] ? T_15 extends CanBeExpanded<object, string> ? any : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_7 in keyof T_15]-?: any; } : T_15 : never : never; } : T_12 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_4 in keyof T_8]-?: T_8[K_4] extends infer T_12 ? T_12 extends T_8[K_4] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? any : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_6 in keyof T_15]-?: any; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_7 in keyof T_14]-?: T_14[K_7] extends infer T_16 ? T_16 extends T_14[K_7] ? T_16 extends CanBeExpanded<object, string> ? any : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_8 in keyof T_16]-?: any; } : T_16 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_8 in keyof T_12]-?: T_12[K_8] extends infer T_16 ? T_16 extends T_12[K_8] ? T_16 extends CanBeExpanded<object, string> ? T_16[PrefixWith<`${string & K_4}`, K_8, "."> extends infer T_17 ? T_17 extends PrefixWith<`${string & K_4}`, K_8, "."> ? T_17 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_16[PrefixWith<`${string & K_4}`, K_8, "."> extends infer T_17 ? T_17 extends PrefixWith<`${string & K_4}`, K_8, "."> ? T_17 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? any : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_9 in keyof T_18]-?: any; } : T_18 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_10 in keyof T_16]-?: T_16[K_10] extends infer T_19 ? T_19 extends T_16[K_10] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_11 in keyof T_19]-?: T_19[K_11] extends infer T_20 ? T_20 extends T_19[K_11] ? T_20 extends CanBeExpanded<object, string> ? T_20["default"] : T_20 : never : never; } : T_19 : never : never; } : T_16 : never : never; } : T_12 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_5 in keyof T_7]-?: T_7[K_5] extends infer T_12 ? T_12 extends T_7[K_5] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? any : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_7 in keyof T_16]-?: any; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_8 in keyof T_15]-?: T_15[K_8] extends infer T_17 ? T_17 extends T_15[K_8] ? T_17 extends CanBeExpanded<object, string> ? any : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_9 in keyof T_17]-?: any; } : T_17 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_9 in keyof T_14]-?: T_14[K_9] extends infer T_17 ? T_17 extends T_14[K_9] ? T_17 extends CanBeExpanded<object, string> ? T_17[PrefixWith<`${string & K_5}`, K_9, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_9, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_17[PrefixWith<`${string & K_5}`, K_9, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_9, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_10 in keyof T_19]-?: any; } : T_19 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_11 in keyof T_17]-?: T_17[K_11] extends infer T_20 ? T_20 extends T_17[K_11] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_12 in keyof T_20]-?: T_20[K_12] extends infer T_21 ? T_21 extends T_20[K_12] ? T_21 extends CanBeExpanded<object, string> ? T_21["default"] : T_21 : never : never; } : T_20 : never : never; } : T_17 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_10 in keyof T_12]-?: T_12[K_10] extends infer T_17 ? T_17 extends T_12[K_10] ? T_17 extends CanBeExpanded<object, string> ? T_17[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_17[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_11 in keyof T_20]-?: any; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_12 in keyof T_19]-?: T_19[K_12] extends infer T_21 ? T_21 extends T_19[K_12] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_13 in keyof T_21]-?: T_21[K_13] extends infer T_22 ? T_22 extends T_21[K_13] ? T_22 extends CanBeExpanded<object, string> ? T_22["default"] : T_22 : never : never; } : T_21 : never : never; } : T_19 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_13 in keyof T_17]-?: T_17[K_13] extends infer T_21 ? T_21 extends T_17[K_13] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: T_23[K_14] extends infer T_24 ? T_24 extends T_23[K_14] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_15 in keyof T_21]-?: T_21[K_15] extends infer T_24 ? T_24 extends T_21[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_21 : never : never; } : T_17 : never : never; } : T_12 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_6 in keyof T_6]-?: T_6[K_6] extends infer T_12 ? T_12 extends T_6[K_6] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? any : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_8 in keyof T_17]-?: any; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_9 in keyof T_16]-?: T_16[K_9] extends infer T_18 ? T_18 extends T_16[K_9] ? T_18 extends CanBeExpanded<object, string> ? any : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_10 in keyof T_18]-?: any; } : T_18 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_10 in keyof T_15]-?: T_15[K_10] extends infer T_18 ? T_18 extends T_15[K_10] ? T_18 extends CanBeExpanded<object, string> ? T_18[PrefixWith<`${string & K_6}`, K_10, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_10, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_18[PrefixWith<`${string & K_6}`, K_10, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_10, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_11 in keyof T_20]-?: any; } : T_20 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_12 in keyof T_18]-?: T_18[K_12] extends infer T_21 ? T_21 extends T_18[K_12] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_13 in keyof T_21]-?: T_21[K_13] extends infer T_22 ? T_22 extends T_21[K_13] ? T_22 extends CanBeExpanded<object, string> ? T_22["default"] : T_22 : never : never; } : T_21 : never : never; } : T_18 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_11 in keyof T_14]-?: T_14[K_11] extends infer T_18 ? T_18 extends T_14[K_11] ? T_18 extends CanBeExpanded<object, string> ? T_18[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_18[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_12 in keyof T_21]-?: any; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_13 in keyof T_20]-?: T_20[K_13] extends infer T_22 ? T_22 extends T_20[K_13] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_14 in keyof T_22]-?: T_22[K_14] extends infer T_23 ? T_23 extends T_22[K_14] ? T_23 extends CanBeExpanded<object, string> ? T_23["default"] : T_23 : never : never; } : T_22 : never : never; } : T_20 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_14 in keyof T_18]-?: T_18[K_14] extends infer T_22 ? T_22 extends T_18[K_14] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: T_24[K_15] extends infer T_25 ? T_25 extends T_24[K_15] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_16 in keyof T_22]-?: T_22[K_16] extends infer T_25 ? T_25 extends T_22[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_22 : never : never; } : T_18 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_12 in keyof T_12]-?: T_12[K_12] extends infer T_18 ? T_18 extends T_12[K_12] ? T_18 extends CanBeExpanded<object, string> ? T_18[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_18[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_14 in keyof T_21]-?: T_21[K_14] extends infer T_23 ? T_23 extends T_21[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: T_23[K_15] extends infer T_24 ? T_24 extends T_23[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_15 in keyof T_20]-?: T_20[K_15] extends infer T_23 ? T_23 extends T_20[K_15] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: T_25[K_16] extends infer T_26 ? T_26 extends T_25[K_16] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_17 in keyof T_23]-?: T_23[K_17] extends infer T_26 ? T_26 extends T_23[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_23 : never : never; } : T_20 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_16 in keyof T_18]-?: T_18[K_16] extends infer T_23 ? T_23 extends T_18[K_16] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: T_26[K_17] extends infer T_27 ? T_27 extends T_26[K_17] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_19 in keyof T_23]-?: T_23[K_19] extends infer T_27 ? T_27 extends T_23[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_23 : never : never; } : T_18 : never : never; } : T_12 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_7 in keyof T_5]-?: T_5[K_7] extends infer T_12 ? T_12 extends T_5[K_7] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? any : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_9 in keyof T_18]-?: any; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_10 in keyof T_17]-?: T_17[K_10] extends infer T_19 ? T_19 extends T_17[K_10] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_11 in keyof T_19]-?: any; } : T_19 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_11 in keyof T_16]-?: T_16[K_11] extends infer T_19 ? T_19 extends T_16[K_11] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_11, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_11, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_11, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_11, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_12 in keyof T_21]-?: any; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_13 in keyof T_19]-?: T_19[K_13] extends infer T_22 ? T_22 extends T_19[K_13] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_14 in keyof T_22]-?: T_22[K_14] extends infer T_23 ? T_23 extends T_22[K_14] ? T_23 extends CanBeExpanded<object, string> ? T_23["default"] : T_23 : never : never; } : T_22 : never : never; } : T_19 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_12 in keyof T_15]-?: T_15[K_12] extends infer T_19 ? T_19 extends T_15[K_12] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_14 in keyof T_21]-?: T_21[K_14] extends infer T_23 ? T_23 extends T_21[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: T_23[K_15] extends infer T_24 ? T_24 extends T_23[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_15 in keyof T_19]-?: T_19[K_15] extends infer T_23 ? T_23 extends T_19[K_15] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: T_25[K_16] extends infer T_26 ? T_26 extends T_25[K_16] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_17 in keyof T_23]-?: T_23[K_17] extends infer T_26 ? T_26 extends T_23[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_23 : never : never; } : T_19 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_13 in keyof T_14]-?: T_14[K_13] extends infer T_19 ? T_19 extends T_14[K_13] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: any; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_15 in keyof T_22]-?: T_22[K_15] extends infer T_24 ? T_24 extends T_22[K_15] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_16 in keyof T_24]-?: T_24[K_16] extends infer T_25 ? T_25 extends T_24[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_16 in keyof T_21]-?: T_21[K_16] extends infer T_24 ? T_24 extends T_21[K_16] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: T_26[K_17] extends infer T_27 ? T_27 extends T_26[K_17] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_18 in keyof T_24]-?: T_24[K_18] extends infer T_27 ? T_27 extends T_24[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_24 : never : never; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_17 in keyof T_19]-?: T_19[K_17] extends infer T_24 ? T_24 extends T_19[K_17] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_26 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_20 in keyof T_24]-?: T_24[K_20] extends infer T_28 ? T_28 extends T_24[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_24 : never : never; } : T_19 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_14 in keyof T_12]-?: T_12[K_14] extends infer T_19 ? T_19 extends T_12[K_14] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_16 in keyof T_23]-?: T_23[K_16] extends infer T_25 ? T_25 extends T_23[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_17 in keyof T_22]-?: T_22[K_17] extends infer T_25 ? T_25 extends T_22[K_17] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_19 in keyof T_25]-?: T_25[K_19] extends infer T_28 ? T_28 extends T_25[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_25 : never : never; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_18 in keyof T_21]-?: T_21[K_18] extends infer T_25 ? T_25 extends T_21[K_18] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_21 in keyof T_25]-?: T_25[K_21] extends infer T_29 ? T_29 extends T_25[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_25 : never : never; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_19 in keyof T_19]-?: T_19[K_19] extends infer T_25 ? T_25 extends T_19[K_19] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_22 in keyof T_27]-?: T_27[K_22] extends infer T_30 ? T_30 extends T_27[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_23 in keyof T_25]-?: T_25[K_23] extends infer T_30 ? T_30 extends T_25[K_23] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_25 : never : never; } : T_19 : never : never; } : T_12 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_8 in keyof T_4]-?: T_4[K_8] extends infer T_12 ? T_12 extends T_4[K_8] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_10 in keyof T_19]-?: any; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_11 in keyof T_18]-?: T_18[K_11] extends infer T_20 ? T_20 extends T_18[K_11] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_12 in keyof T_20]-?: any; } : T_20 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_12 in keyof T_17]-?: T_17[K_12] extends infer T_20 ? T_20 extends T_17[K_12] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_12, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_12, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_12, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_12, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_14 in keyof T_20]-?: T_20[K_14] extends infer T_23 ? T_23 extends T_20[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: T_23[K_15] extends infer T_24 ? T_24 extends T_23[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never; } : T_20 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_13 in keyof T_16]-?: T_16[K_13] extends infer T_20 ? T_20 extends T_16[K_13] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: any; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_15 in keyof T_22]-?: T_22[K_15] extends infer T_24 ? T_24 extends T_22[K_15] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_16 in keyof T_24]-?: T_24[K_16] extends infer T_25 ? T_25 extends T_24[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_16 in keyof T_20]-?: T_20[K_16] extends infer T_24 ? T_24 extends T_20[K_16] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_24[PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: T_26[K_17] extends infer T_27 ? T_27 extends T_26[K_17] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_18 in keyof T_24]-?: T_24[K_18] extends infer T_27 ? T_27 extends T_24[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_24 : never : never; } : T_20 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_14 in keyof T_15]-?: T_15[K_14] extends infer T_20 ? T_20 extends T_15[K_14] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_16 in keyof T_23]-?: T_23[K_16] extends infer T_25 ? T_25 extends T_23[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_17 in keyof T_22]-?: T_22[K_17] extends infer T_25 ? T_25 extends T_22[K_17] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_19 in keyof T_25]-?: T_25[K_19] extends infer T_28 ? T_28 extends T_25[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_25 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_18 in keyof T_20]-?: T_20[K_18] extends infer T_25 ? T_25 extends T_20[K_18] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_21 in keyof T_25]-?: T_25[K_21] extends infer T_29 ? T_29 extends T_25[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_25 : never : never; } : T_20 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_15 in keyof T_14]-?: T_14[K_15] extends infer T_20 ? T_20 extends T_14[K_15] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_17 in keyof T_24]-?: T_24[K_17] extends infer T_26 ? T_26 extends T_24[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_18 in keyof T_23]-?: T_23[K_18] extends infer T_26 ? T_26 extends T_23[K_18] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_20 in keyof T_26]-?: T_26[K_20] extends infer T_29 ? T_29 extends T_26[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_26 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_19 in keyof T_22]-?: T_22[K_19] extends infer T_26 ? T_26 extends T_22[K_19] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_22 in keyof T_26]-?: T_26[K_22] extends infer T_30 ? T_30 extends T_26[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_26 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_20 in keyof T_20]-?: T_20[K_20] extends infer T_26 ? T_26 extends T_20[K_20] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_23 in keyof T_28]-?: T_28[K_23] extends infer T_31 ? T_31 extends T_28[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_24 in keyof T_26]-?: T_26[K_24] extends infer T_31 ? T_31 extends T_26[K_24] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_26 : never : never; } : T_20 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_16 in keyof T_12]-?: T_12[K_16] extends infer T_20 ? T_20 extends T_12[K_16] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_19 in keyof T_24]-?: T_24[K_19] extends infer T_27 ? T_27 extends T_24[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_20 in keyof T_23]-?: T_23[K_20] extends infer T_27 ? T_27 extends T_23[K_20] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_23 in keyof T_27]-?: T_27[K_23] extends infer T_31 ? T_31 extends T_27[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_27 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_21 in keyof T_22]-?: T_22[K_21] extends infer T_27 ? T_27 extends T_22[K_21] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_24 in keyof T_29]-?: T_29[K_24] extends infer T_32 ? T_32 extends T_29[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_25 in keyof T_27]-?: T_27[K_25] extends infer T_32 ? T_32 extends T_27[K_25] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_27 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_22 in keyof T_20]-?: T_20[K_22] extends infer T_27 ? T_27 extends T_20[K_22] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_26 in keyof T_29]-?: T_29[K_26] extends infer T_33 ? T_33 extends T_29[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_27 in keyof T_27]-?: T_27[K_27] extends infer T_33 ? T_33 extends T_27[K_27] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_27 : never : never; } : T_20 : never : never; } : T_12 : never : never; } : T_4 : never : never : T_3 extends (infer U)[] ? any[] : T_3 extends object ? { [K_9 in keyof T_3]-?: T_3[K_9] extends infer T_12 ? T_12 extends T_3[K_9] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_11 in keyof T_20]-?: any; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_12 in keyof T_19]-?: T_19[K_12] extends infer T_21 ? T_21 extends T_19[K_12] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_13 in keyof T_21]-?: any; } : T_21 : never : never; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_13 in keyof T_18]-?: T_18[K_13] extends infer T_21 ? T_21 extends T_18[K_13] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: any; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_15 in keyof T_21]-?: T_21[K_15] extends infer T_24 ? T_24 extends T_21[K_15] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_16 in keyof T_24]-?: T_24[K_16] extends infer T_25 ? T_25 extends T_24[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never; } : T_21 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_14 in keyof T_17]-?: T_17[K_14] extends infer T_21 ? T_21 extends T_17[K_14] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_16 in keyof T_23]-?: T_23[K_16] extends infer T_25 ? T_25 extends T_23[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_17 in keyof T_21]-?: T_21[K_17] extends infer T_25 ? T_25 extends T_21[K_17] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_19 in keyof T_25]-?: T_25[K_19] extends infer T_28 ? T_28 extends T_25[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_25 : never : never; } : T_21 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_15 in keyof T_16]-?: T_16[K_15] extends infer T_21 ? T_21 extends T_16[K_15] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_17 in keyof T_24]-?: T_24[K_17] extends infer T_26 ? T_26 extends T_24[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_18 in keyof T_23]-?: T_23[K_18] extends infer T_26 ? T_26 extends T_23[K_18] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_20 in keyof T_26]-?: T_26[K_20] extends infer T_29 ? T_29 extends T_26[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_26 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_19 in keyof T_21]-?: T_21[K_19] extends infer T_26 ? T_26 extends T_21[K_19] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_22 in keyof T_26]-?: T_26[K_22] extends infer T_30 ? T_30 extends T_26[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_26 : never : never; } : T_21 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_16 in keyof T_15]-?: T_15[K_16] extends infer T_21 ? T_21 extends T_15[K_16] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_19 in keyof T_24]-?: T_24[K_19] extends infer T_27 ? T_27 extends T_24[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_20 in keyof T_23]-?: T_23[K_20] extends infer T_27 ? T_27 extends T_23[K_20] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_23 in keyof T_27]-?: T_27[K_23] extends infer T_31 ? T_31 extends T_27[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_27 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_21 in keyof T_21]-?: T_21[K_21] extends infer T_27 ? T_27 extends T_21[K_21] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_24 in keyof T_29]-?: T_29[K_24] extends infer T_32 ? T_32 extends T_29[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_25 in keyof T_27]-?: T_27[K_25] extends infer T_32 ? T_32 extends T_27[K_25] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_27 : never : never; } : T_21 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_17 in keyof T_14]-?: T_14[K_17] extends infer T_21 ? T_21 extends T_14[K_17] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: any; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_20 in keyof T_28]-?: T_28[K_20] extends infer T_29 ? T_29 extends T_28[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_20 in keyof T_25]-?: T_25[K_20] extends infer T_28 ? T_28 extends T_25[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_22 in keyof T_28]-?: T_28[K_22] extends infer T_31 ? T_31 extends T_28[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_21 in keyof T_24]-?: T_24[K_21] extends infer T_28 ? T_28 extends T_24[K_21] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_24 in keyof T_28]-?: T_28[K_24] extends infer T_32 ? T_32 extends T_28[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_28 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_22 in keyof T_23]-?: T_23[K_22] extends infer T_28 ? T_28 extends T_23[K_22] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_26 in keyof T_28]-?: T_28[K_26] extends infer T_33 ? T_33 extends T_28[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_28 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_23 in keyof T_21]-?: T_21[K_23] extends infer T_28 ? T_28 extends T_21[K_23] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_27 in keyof T_30]-?: T_30[K_27] extends infer T_34 ? T_34 extends T_30[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_28 in keyof T_28]-?: T_28[K_28] extends infer T_34 ? T_34 extends T_28[K_28] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_28 : never : never; } : T_21 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_18 in keyof T_12]-?: T_12[K_18] extends infer T_21 ? T_21 extends T_12[K_18] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: any; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_21 in keyof T_29]-?: T_29[K_21] extends infer T_30 ? T_30 extends T_29[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_21 in keyof T_26]-?: T_26[K_21] extends infer T_29 ? T_29 extends T_26[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_23 in keyof T_29]-?: T_29[K_23] extends infer T_32 ? T_32 extends T_29[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_22 in keyof T_25]-?: T_25[K_22] extends infer T_29 ? T_29 extends T_25[K_22] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_25 in keyof T_29]-?: T_29[K_25] extends infer T_33 ? T_33 extends T_29[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_23 in keyof T_24]-?: T_24[K_23] extends infer T_29 ? T_29 extends T_24[K_23] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_27 in keyof T_29]-?: T_29[K_27] extends infer T_34 ? T_34 extends T_29[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_29 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_24 in keyof T_23]-?: T_23[K_24] extends infer T_29 ? T_29 extends T_23[K_24] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_28 in keyof T_31]-?: T_31[K_28] extends infer T_35 ? T_35 extends T_31[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_29 in keyof T_29]-?: T_29[K_29] extends infer T_35 ? T_35 extends T_29[K_29] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_29 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_25 in keyof T_21]-?: T_21[K_25] extends infer T_29 ? T_29 extends T_21[K_25] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_29 in keyof T_32]-?: T_32[K_29] extends infer T_36 ? T_36 extends T_32[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_30 in keyof T_31]-?: T_31[K_30] extends infer T_36 ? T_36 extends T_31[K_30] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_31 in keyof T_29]-?: T_29[K_31] extends infer T_36 ? T_36 extends T_29[K_31] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_29 : never : never; } : T_21 : never : never; } : T_12 : never : never; } : T_3 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_10 in keyof T_2]-?: T_2[K_10] extends infer T_12 ? T_12 extends T_2[K_10] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_12 in keyof T_21]-?: any; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_13 in keyof T_20]-?: T_20[K_13] extends infer T_22 ? T_22 extends T_20[K_13] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_14 in keyof T_22]-?: any; } : T_22 : never : never; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_14 in keyof T_19]-?: T_19[K_14] extends infer T_22 ? T_22 extends T_19[K_14] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_16 in keyof T_22]-?: T_22[K_16] extends infer T_25 ? T_25 extends T_22[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_22 : never : never; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_15 in keyof T_18]-?: T_18[K_15] extends infer T_22 ? T_22 extends T_18[K_15] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_17 in keyof T_24]-?: T_24[K_17] extends infer T_26 ? T_26 extends T_24[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_18 in keyof T_22]-?: T_22[K_18] extends infer T_26 ? T_26 extends T_22[K_18] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_20 in keyof T_26]-?: T_26[K_20] extends infer T_29 ? T_29 extends T_26[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_26 : never : never; } : T_22 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_16 in keyof T_17]-?: T_17[K_16] extends infer T_22 ? T_22 extends T_17[K_16] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_19 in keyof T_24]-?: T_24[K_19] extends infer T_27 ? T_27 extends T_24[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_20 in keyof T_22]-?: T_22[K_20] extends infer T_27 ? T_27 extends T_22[K_20] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_23 in keyof T_27]-?: T_27[K_23] extends infer T_31 ? T_31 extends T_27[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_27 : never : never; } : T_22 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_17 in keyof T_16]-?: T_16[K_17] extends infer T_22 ? T_22 extends T_16[K_17] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: any; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_20 in keyof T_28]-?: T_28[K_20] extends infer T_29 ? T_29 extends T_28[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_20 in keyof T_25]-?: T_25[K_20] extends infer T_28 ? T_28 extends T_25[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_22 in keyof T_28]-?: T_28[K_22] extends infer T_31 ? T_31 extends T_28[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_21 in keyof T_24]-?: T_24[K_21] extends infer T_28 ? T_28 extends T_24[K_21] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_24 in keyof T_28]-?: T_28[K_24] extends infer T_32 ? T_32 extends T_28[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_28 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_22 in keyof T_22]-?: T_22[K_22] extends infer T_28 ? T_28 extends T_22[K_22] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_26 in keyof T_28]-?: T_28[K_26] extends infer T_33 ? T_33 extends T_28[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_28 : never : never; } : T_22 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_18 in keyof T_15]-?: T_15[K_18] extends infer T_22 ? T_22 extends T_15[K_18] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: any; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_21 in keyof T_29]-?: T_29[K_21] extends infer T_30 ? T_30 extends T_29[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_21 in keyof T_26]-?: T_26[K_21] extends infer T_29 ? T_29 extends T_26[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_23 in keyof T_29]-?: T_29[K_23] extends infer T_32 ? T_32 extends T_29[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_22 in keyof T_25]-?: T_25[K_22] extends infer T_29 ? T_29 extends T_25[K_22] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_25 in keyof T_29]-?: T_29[K_25] extends infer T_33 ? T_33 extends T_29[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_23 in keyof T_24]-?: T_24[K_23] extends infer T_29 ? T_29 extends T_24[K_23] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_27 in keyof T_29]-?: T_29[K_27] extends infer T_34 ? T_34 extends T_29[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_29 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_24 in keyof T_22]-?: T_22[K_24] extends infer T_29 ? T_29 extends T_22[K_24] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_28 in keyof T_31]-?: T_31[K_28] extends infer T_35 ? T_35 extends T_31[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_29 in keyof T_29]-?: T_29[K_29] extends infer T_35 ? T_35 extends T_29[K_29] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_29 : never : never; } : T_22 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_19 in keyof T_14]-?: T_14[K_19] extends infer T_22 ? T_22 extends T_14[K_19] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: any; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_22 in keyof T_30]-?: T_30[K_22] extends infer T_31 ? T_31 extends T_30[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_22 in keyof T_27]-?: T_27[K_22] extends infer T_30 ? T_30 extends T_27[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_24 in keyof T_30]-?: T_30[K_24] extends infer T_33 ? T_33 extends T_30[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_23 in keyof T_26]-?: T_26[K_23] extends infer T_30 ? T_30 extends T_26[K_23] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_26 in keyof T_30]-?: T_30[K_26] extends infer T_34 ? T_34 extends T_30[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_30 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_24 in keyof T_25]-?: T_25[K_24] extends infer T_30 ? T_30 extends T_25[K_24] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_28 in keyof T_30]-?: T_30[K_28] extends infer T_35 ? T_35 extends T_30[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_30 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_25 in keyof T_24]-?: T_24[K_25] extends infer T_30 ? T_30 extends T_24[K_25] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_29 in keyof T_32]-?: T_32[K_29] extends infer T_36 ? T_36 extends T_32[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_30 in keyof T_30]-?: T_30[K_30] extends infer T_36 ? T_36 extends T_30[K_30] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_30 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_26 in keyof T_22]-?: T_22[K_26] extends infer T_30 ? T_30 extends T_22[K_26] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_30 in keyof T_33]-?: T_33[K_30] extends infer T_37 ? T_37 extends T_33[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_31 in keyof T_32]-?: T_32[K_31] extends infer T_37 ? T_37 extends T_32[K_31] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_32 in keyof T_30]-?: T_30[K_32] extends infer T_37 ? T_37 extends T_30[K_32] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_30 : never : never; } : T_22 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_20 in keyof T_12]-?: T_12[K_20] extends infer T_22 ? T_22 extends T_12[K_20] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: any; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_23 in keyof T_31]-?: T_31[K_23] extends infer T_32 ? T_32 extends T_31[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_23 in keyof T_28]-?: T_28[K_23] extends infer T_31 ? T_31 extends T_28[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_25 in keyof T_31]-?: T_31[K_25] extends infer T_34 ? T_34 extends T_31[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_24 in keyof T_27]-?: T_27[K_24] extends infer T_31 ? T_31 extends T_27[K_24] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_27 in keyof T_31]-?: T_31[K_27] extends infer T_35 ? T_35 extends T_31[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_25 in keyof T_26]-?: T_26[K_25] extends infer T_31 ? T_31 extends T_26[K_25] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_29 in keyof T_31]-?: T_31[K_29] extends infer T_36 ? T_36 extends T_31[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_31 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_26 in keyof T_25]-?: T_25[K_26] extends infer T_31 ? T_31 extends T_25[K_26] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_30 in keyof T_33]-?: T_33[K_30] extends infer T_37 ? T_37 extends T_33[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_31 in keyof T_31]-?: T_31[K_31] extends infer T_37 ? T_37 extends T_31[K_31] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_31 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_27 in keyof T_24]-?: T_24[K_27] extends infer T_31 ? T_31 extends T_24[K_27] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_31 in keyof T_34]-?: T_34[K_31] extends infer T_38 ? T_38 extends T_34[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_32 in keyof T_33]-?: T_33[K_32] extends infer T_38 ? T_38 extends T_33[K_32] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_33 in keyof T_31]-?: T_31[K_33] extends infer T_38 ? T_38 extends T_31[K_33] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_31 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_28 in keyof T_22]-?: T_22[K_28] extends infer T_31 ? T_31 extends T_22[K_28] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? any : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_29 in keyof T_38]-?: T_38[K_29] extends infer T_39 ? T_39 extends T_38[K_29] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_30 in keyof T_37]-?: T_37[K_30] extends infer T_39 ? T_39 extends T_37[K_30] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_31 in keyof T_36]-?: T_36[K_31] extends infer T_39 ? T_39 extends T_36[K_31] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_32 in keyof T_35]-?: T_35[K_32] extends infer T_39 ? T_39 extends T_35[K_32] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_33 in keyof T_34]-?: T_34[K_33] extends infer T_39 ? T_39 extends T_34[K_33] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_34 in keyof T_33]-?: T_33[K_34] extends infer T_39 ? T_39 extends T_33[K_34] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_35 in keyof T_31]-?: T_31[K_35] extends infer T_39 ? T_39 extends T_31[K_35] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_31 : never : never; } : T_22 : never : never; } : T_12 : never : never; } : T_2 : never : never : T extends (infer U)[] ? any[] : T extends object ? { [K_11 in keyof T]-?: T[K_11] extends infer T_12 ? T_12 extends T[K_11] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_14 in keyof T_21]-?: T_21[K_14] extends infer T_23 ? T_23 extends T_21[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: any; } : T_23 : never : never; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_15 in keyof T_20]-?: T_20[K_15] extends infer T_23 ? T_23 extends T_20[K_15] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_17 in keyof T_23]-?: T_23[K_17] extends infer T_26 ? T_26 extends T_23[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_23 : never : never; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_16 in keyof T_19]-?: T_19[K_16] extends infer T_23 ? T_23 extends T_19[K_16] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_19 in keyof T_23]-?: T_23[K_19] extends infer T_27 ? T_27 extends T_23[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_23 : never : never; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_17 in keyof T_18]-?: T_18[K_17] extends infer T_23 ? T_23 extends T_18[K_17] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: any; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_20 in keyof T_28]-?: T_28[K_20] extends infer T_29 ? T_29 extends T_28[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_20 in keyof T_25]-?: T_25[K_20] extends infer T_28 ? T_28 extends T_25[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_22 in keyof T_28]-?: T_28[K_22] extends infer T_31 ? T_31 extends T_28[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_21 in keyof T_23]-?: T_23[K_21] extends infer T_28 ? T_28 extends T_23[K_21] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_24 in keyof T_28]-?: T_28[K_24] extends infer T_32 ? T_32 extends T_28[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_28 : never : never; } : T_23 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_18 in keyof T_17]-?: T_17[K_18] extends infer T_23 ? T_23 extends T_17[K_18] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: any; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_21 in keyof T_29]-?: T_29[K_21] extends infer T_30 ? T_30 extends T_29[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_21 in keyof T_26]-?: T_26[K_21] extends infer T_29 ? T_29 extends T_26[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_23 in keyof T_29]-?: T_29[K_23] extends infer T_32 ? T_32 extends T_29[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_22 in keyof T_25]-?: T_25[K_22] extends infer T_29 ? T_29 extends T_25[K_22] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_25 in keyof T_29]-?: T_29[K_25] extends infer T_33 ? T_33 extends T_29[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_23 in keyof T_23]-?: T_23[K_23] extends infer T_29 ? T_29 extends T_23[K_23] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_27 in keyof T_29]-?: T_29[K_27] extends infer T_34 ? T_34 extends T_29[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_29 : never : never; } : T_23 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_19 in keyof T_16]-?: T_16[K_19] extends infer T_23 ? T_23 extends T_16[K_19] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: any; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_22 in keyof T_30]-?: T_30[K_22] extends infer T_31 ? T_31 extends T_30[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_22 in keyof T_27]-?: T_27[K_22] extends infer T_30 ? T_30 extends T_27[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_24 in keyof T_30]-?: T_30[K_24] extends infer T_33 ? T_33 extends T_30[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_23 in keyof T_26]-?: T_26[K_23] extends infer T_30 ? T_30 extends T_26[K_23] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_26 in keyof T_30]-?: T_30[K_26] extends infer T_34 ? T_34 extends T_30[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_30 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_24 in keyof T_25]-?: T_25[K_24] extends infer T_30 ? T_30 extends T_25[K_24] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_28 in keyof T_30]-?: T_30[K_28] extends infer T_35 ? T_35 extends T_30[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_30 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_25 in keyof T_23]-?: T_23[K_25] extends infer T_30 ? T_30 extends T_23[K_25] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_29 in keyof T_32]-?: T_32[K_29] extends infer T_36 ? T_36 extends T_32[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_30 in keyof T_30]-?: T_30[K_30] extends infer T_36 ? T_36 extends T_30[K_30] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_30 : never : never; } : T_23 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_20 in keyof T_15]-?: T_15[K_20] extends infer T_23 ? T_23 extends T_15[K_20] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: any; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_23 in keyof T_31]-?: T_31[K_23] extends infer T_32 ? T_32 extends T_31[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_23 in keyof T_28]-?: T_28[K_23] extends infer T_31 ? T_31 extends T_28[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_25 in keyof T_31]-?: T_31[K_25] extends infer T_34 ? T_34 extends T_31[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_24 in keyof T_27]-?: T_27[K_24] extends infer T_31 ? T_31 extends T_27[K_24] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_27 in keyof T_31]-?: T_31[K_27] extends infer T_35 ? T_35 extends T_31[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_25 in keyof T_26]-?: T_26[K_25] extends infer T_31 ? T_31 extends T_26[K_25] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_29 in keyof T_31]-?: T_31[K_29] extends infer T_36 ? T_36 extends T_31[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_31 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_26 in keyof T_25]-?: T_25[K_26] extends infer T_31 ? T_31 extends T_25[K_26] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_30 in keyof T_33]-?: T_33[K_30] extends infer T_37 ? T_37 extends T_33[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_31 in keyof T_31]-?: T_31[K_31] extends infer T_37 ? T_37 extends T_31[K_31] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_31 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_27 in keyof T_23]-?: T_23[K_27] extends infer T_31 ? T_31 extends T_23[K_27] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_31 in keyof T_34]-?: T_34[K_31] extends infer T_38 ? T_38 extends T_34[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_32 in keyof T_33]-?: T_33[K_32] extends infer T_38 ? T_38 extends T_33[K_32] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_33 in keyof T_31]-?: T_31[K_33] extends infer T_38 ? T_38 extends T_31[K_33] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_31 : never : never; } : T_23 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_21 in keyof T_14]-?: T_14[K_21] extends infer T_23 ? T_23 extends T_14[K_21] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: any; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_24 in keyof T_32]-?: T_32[K_24] extends infer T_33 ? T_33 extends T_32[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_24 in keyof T_29]-?: T_29[K_24] extends infer T_32 ? T_32 extends T_29[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_26 in keyof T_32]-?: T_32[K_26] extends infer T_35 ? T_35 extends T_32[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_25 in keyof T_28]-?: T_28[K_25] extends infer T_32 ? T_32 extends T_28[K_25] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_28 in keyof T_32]-?: T_32[K_28] extends infer T_36 ? T_36 extends T_32[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_26 in keyof T_27]-?: T_27[K_26] extends infer T_32 ? T_32 extends T_27[K_26] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_30 in keyof T_32]-?: T_32[K_30] extends infer T_37 ? T_37 extends T_32[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_32 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_27 in keyof T_26]-?: T_26[K_27] extends infer T_32 ? T_32 extends T_26[K_27] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_31 in keyof T_34]-?: T_34[K_31] extends infer T_38 ? T_38 extends T_34[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_32 in keyof T_32]-?: T_32[K_32] extends infer T_38 ? T_38 extends T_32[K_32] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_32 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_28 in keyof T_25]-?: T_25[K_28] extends infer T_32 ? T_32 extends T_25[K_28] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? any : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_29 in keyof T_38]-?: T_38[K_29] extends infer T_39 ? T_39 extends T_38[K_29] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_30 in keyof T_37]-?: T_37[K_30] extends infer T_39 ? T_39 extends T_37[K_30] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_31 in keyof T_36]-?: T_36[K_31] extends infer T_39 ? T_39 extends T_36[K_31] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_32 in keyof T_35]-?: T_35[K_32] extends infer T_39 ? T_39 extends T_35[K_32] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_33 in keyof T_34]-?: T_34[K_33] extends infer T_39 ? T_39 extends T_34[K_33] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_34 in keyof T_32]-?: T_32[K_34] extends infer T_39 ? T_39 extends T_32[K_34] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_32 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_29 in keyof T_23]-?: T_23[K_29] extends infer T_32 ? T_32 extends T_23[K_29] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? any : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_30 in keyof T_39]-?: T_39[K_30] extends infer T_40 ? T_40 extends T_39[K_30] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_31 in keyof T_38]-?: T_38[K_31] extends infer T_40 ? T_40 extends T_38[K_31] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_32 in keyof T_37]-?: T_37[K_32] extends infer T_40 ? T_40 extends T_37[K_32] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_33 in keyof T_36]-?: T_36[K_33] extends infer T_40 ? T_40 extends T_36[K_33] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_34 in keyof T_35]-?: T_35[K_34] extends infer T_40 ? T_40 extends T_35[K_34] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_35 in keyof T_34]-?: T_34[K_35] extends infer T_40 ? T_40 extends T_34[K_35] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_36 in keyof T_32]-?: T_32[K_36] extends infer T_40 ? T_40 extends T_32[K_36] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_32 : never : never; } : T_23 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_22 in keyof T_12]-?: T_12[K_22] extends infer T_23 ? T_23 extends T_12[K_22] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: any; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_25 in keyof T_33]-?: T_33[K_25] extends infer T_34 ? T_34 extends T_33[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_27 in keyof T_33]-?: T_33[K_27] extends infer T_36 ? T_36 extends T_33[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_26 in keyof T_29]-?: T_29[K_26] extends infer T_33 ? T_33 extends T_29[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_29 in keyof T_33]-?: T_33[K_29] extends infer T_37 ? T_37 extends T_33[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_27 in keyof T_28]-?: T_28[K_27] extends infer T_33 ? T_33 extends T_28[K_27] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_31 in keyof T_33]-?: T_33[K_31] extends infer T_38 ? T_38 extends T_33[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_33 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_28 in keyof T_27]-?: T_27[K_28] extends infer T_33 ? T_33 extends T_27[K_28] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? any : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_29 in keyof T_38]-?: T_38[K_29] extends infer T_39 ? T_39 extends T_38[K_29] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_30 in keyof T_37]-?: T_37[K_30] extends infer T_39 ? T_39 extends T_37[K_30] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_31 in keyof T_36]-?: T_36[K_31] extends infer T_39 ? T_39 extends T_36[K_31] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_32 in keyof T_35]-?: T_35[K_32] extends infer T_39 ? T_39 extends T_35[K_32] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_33 in keyof T_33]-?: T_33[K_33] extends infer T_39 ? T_39 extends T_33[K_33] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_33 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_29 in keyof T_26]-?: T_26[K_29] extends infer T_33 ? T_33 extends T_26[K_29] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? any : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_30 in keyof T_39]-?: T_39[K_30] extends infer T_40 ? T_40 extends T_39[K_30] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_31 in keyof T_38]-?: T_38[K_31] extends infer T_40 ? T_40 extends T_38[K_31] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_32 in keyof T_37]-?: T_37[K_32] extends infer T_40 ? T_40 extends T_37[K_32] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_33 in keyof T_36]-?: T_36[K_33] extends infer T_40 ? T_40 extends T_36[K_33] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_34 in keyof T_35]-?: T_35[K_34] extends infer T_40 ? T_40 extends T_35[K_34] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_35 in keyof T_33]-?: T_33[K_35] extends infer T_40 ? T_40 extends T_33[K_35] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_33 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_30 in keyof T_25]-?: T_25[K_30] extends infer T_33 ? T_33 extends T_25[K_30] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_40 ? T_40 extends T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_40 extends CanBeExpanded<object, string> ? any : T_40 extends (infer U)[] ? any[] : T_40 extends object ? { [K_31 in keyof T_40]-?: T_40[K_31] extends infer T_41 ? T_41 extends T_40[K_31] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_40 : never : never : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_32 in keyof T_39]-?: T_39[K_32] extends infer T_41 ? T_41 extends T_39[K_32] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_33 in keyof T_38]-?: T_38[K_33] extends infer T_41 ? T_41 extends T_38[K_33] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_34 in keyof T_37]-?: T_37[K_34] extends infer T_41 ? T_41 extends T_37[K_34] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_35 in keyof T_36]-?: T_36[K_35] extends infer T_41 ? T_41 extends T_36[K_35] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_36 in keyof T_35]-?: T_35[K_36] extends infer T_41 ? T_41 extends T_35[K_36] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_37 in keyof T_33]-?: T_33[K_37] extends infer T_41 ? T_41 extends T_33[K_37] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_33 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_31 in keyof T_23]-?: T_23[K_31] extends infer T_33 ? T_33 extends T_23[K_31] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_40 ? T_40 extends T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_40 extends CanBeExpanded<object, string> ? T_40[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_41 ? T_41 extends T_40[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_41 extends CanBeExpanded<object, string> ? any : T_41 extends (infer U)[] ? any[] : T_41 extends object ? { [K_32 in keyof T_41]-?: T_41[K_32] extends infer T_42 ? T_42 extends T_41[K_32] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_41 : never : never : T_40 extends (infer U)[] ? any[] : T_40 extends object ? { [K_33 in keyof T_40]-?: T_40[K_33] extends infer T_42 ? T_42 extends T_40[K_33] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_40 : never : never : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_34 in keyof T_39]-?: T_39[K_34] extends infer T_42 ? T_42 extends T_39[K_34] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_35 in keyof T_38]-?: T_38[K_35] extends infer T_42 ? T_42 extends T_38[K_35] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_36 in keyof T_37]-?: T_37[K_36] extends infer T_42 ? T_42 extends T_37[K_36] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_37 in keyof T_36]-?: T_36[K_37] extends infer T_42 ? T_42 extends T_36[K_37] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_38 in keyof T_35]-?: T_35[K_38] extends infer T_42 ? T_42 extends T_35[K_38] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_39 in keyof T_33]-?: T_33[K_39] extends infer T_42 ? T_42 extends T_33[K_39] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_33 : never : never; } : T_23 : never : never; } : T_12 : never : never; } : T


type UseQueryOptions2<T , K  > = Expand_<T, K>
>UseQueryOptions2 : T extends CanBeExpanded<object, string> ? T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_2 ? T_2 extends T["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_2 extends CanBeExpanded<object, string> ? T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_3 ? T_3 extends T_2["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_3 extends CanBeExpanded<object, string> ? T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_4 ? T_4 extends T_3["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_4 extends CanBeExpanded<object, string> ? T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_5 ? T_5 extends T_4["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_5 extends CanBeExpanded<object, string> ? T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_6 ? T_6 extends T_5["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_6 extends CanBeExpanded<object, string> ? T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_7 ? T_7 extends T_6["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_7 extends CanBeExpanded<object, string> ? T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_8 ? T_8 extends T_7["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_8 extends CanBeExpanded<object, string> ? T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_9 ? T_9 extends T_8["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_9 extends CanBeExpanded<object, string> ? T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_10 ? T_10 extends T_9["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_10 extends CanBeExpanded<object, string> ? T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_11 ? T_11 extends T_10["" extends infer T_1 ? T_1 extends "" ? T_1 extends SplitAC<K> ? "value" : "default" : never : never] ? T_11 extends CanBeExpanded<object, string> ? any : T_11 extends (infer U)[] ? any[] : T_11 extends object ? { [K_1 in keyof T_11]-?: any; } : T_11 : never : never : T_10 extends (infer U)[] ? any[] : T_10 extends object ? { [K_2 in keyof T_10]-?: T_10[K_2] extends infer T_12 ? T_12 extends T_10[K_2] ? T_12 extends CanBeExpanded<object, string> ? any : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_4 in keyof T_12]-?: any; } : T_12 : never : never; } : T_10 : never : never : T_9 extends (infer U)[] ? any[] : T_9 extends object ? { [K_3 in keyof T_9]-?: T_9[K_3] extends infer T_12 ? T_12 extends T_9[K_3] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_3}` extends infer T_13 ? T_13 extends `${string & K_3}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_3}` extends infer T_13 ? T_13 extends `${string & K_3}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? any : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_5 in keyof T_14]-?: any; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_6 in keyof T_12]-?: T_12[K_6] extends infer T_15 ? T_15 extends T_12[K_6] ? T_15 extends CanBeExpanded<object, string> ? any : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_7 in keyof T_15]-?: any; } : T_15 : never : never; } : T_12 : never : never; } : T_9 : never : never : T_8 extends (infer U)[] ? any[] : T_8 extends object ? { [K_4 in keyof T_8]-?: T_8[K_4] extends infer T_12 ? T_12 extends T_8[K_4] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_4}` extends infer T_13 ? T_13 extends `${string & K_4}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? any : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_6 in keyof T_15]-?: any; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_7 in keyof T_14]-?: T_14[K_7] extends infer T_16 ? T_16 extends T_14[K_7] ? T_16 extends CanBeExpanded<object, string> ? any : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_8 in keyof T_16]-?: any; } : T_16 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_8 in keyof T_12]-?: T_12[K_8] extends infer T_16 ? T_16 extends T_12[K_8] ? T_16 extends CanBeExpanded<object, string> ? T_16[PrefixWith<`${string & K_4}`, K_8, "."> extends infer T_17 ? T_17 extends PrefixWith<`${string & K_4}`, K_8, "."> ? T_17 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_16[PrefixWith<`${string & K_4}`, K_8, "."> extends infer T_17 ? T_17 extends PrefixWith<`${string & K_4}`, K_8, "."> ? T_17 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? any : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_9 in keyof T_18]-?: any; } : T_18 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_10 in keyof T_16]-?: T_16[K_10] extends infer T_19 ? T_19 extends T_16[K_10] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_11 in keyof T_19]-?: T_19[K_11] extends infer T_20 ? T_20 extends T_19[K_11] ? T_20 extends CanBeExpanded<object, string> ? T_20["default"] : T_20 : never : never; } : T_19 : never : never; } : T_16 : never : never; } : T_12 : never : never; } : T_8 : never : never : T_7 extends (infer U)[] ? any[] : T_7 extends object ? { [K_5 in keyof T_7]-?: T_7[K_5] extends infer T_12 ? T_12 extends T_7[K_5] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_5}` extends infer T_13 ? T_13 extends `${string & K_5}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? any : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_7 in keyof T_16]-?: any; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_8 in keyof T_15]-?: T_15[K_8] extends infer T_17 ? T_17 extends T_15[K_8] ? T_17 extends CanBeExpanded<object, string> ? any : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_9 in keyof T_17]-?: any; } : T_17 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_9 in keyof T_14]-?: T_14[K_9] extends infer T_17 ? T_17 extends T_14[K_9] ? T_17 extends CanBeExpanded<object, string> ? T_17[PrefixWith<`${string & K_5}`, K_9, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_9, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_17[PrefixWith<`${string & K_5}`, K_9, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_9, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_10 in keyof T_19]-?: any; } : T_19 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_11 in keyof T_17]-?: T_17[K_11] extends infer T_20 ? T_20 extends T_17[K_11] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_12 in keyof T_20]-?: T_20[K_12] extends infer T_21 ? T_21 extends T_20[K_12] ? T_21 extends CanBeExpanded<object, string> ? T_21["default"] : T_21 : never : never; } : T_20 : never : never; } : T_17 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_10 in keyof T_12]-?: T_12[K_10] extends infer T_17 ? T_17 extends T_12[K_10] ? T_17 extends CanBeExpanded<object, string> ? T_17[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_17[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[PrefixWith<`${string & K_5}`, K_10, "."> extends infer T_18 ? T_18 extends PrefixWith<`${string & K_5}`, K_10, "."> ? T_18 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_11 in keyof T_20]-?: any; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_12 in keyof T_19]-?: T_19[K_12] extends infer T_21 ? T_21 extends T_19[K_12] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_13 in keyof T_21]-?: T_21[K_13] extends infer T_22 ? T_22 extends T_21[K_13] ? T_22 extends CanBeExpanded<object, string> ? T_22["default"] : T_22 : never : never; } : T_21 : never : never; } : T_19 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_13 in keyof T_17]-?: T_17[K_13] extends infer T_21 ? T_21 extends T_17[K_13] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<PrefixWith<`${string & K_5}`, K_10, ".">, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: T_23[K_14] extends infer T_24 ? T_24 extends T_23[K_14] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_15 in keyof T_21]-?: T_21[K_15] extends infer T_24 ? T_24 extends T_21[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_21 : never : never; } : T_17 : never : never; } : T_12 : never : never; } : T_7 : never : never : T_6 extends (infer U)[] ? any[] : T_6 extends object ? { [K_6 in keyof T_6]-?: T_6[K_6] extends infer T_12 ? T_12 extends T_6[K_6] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_6}` extends infer T_13 ? T_13 extends `${string & K_6}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? any : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_8 in keyof T_17]-?: any; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_9 in keyof T_16]-?: T_16[K_9] extends infer T_18 ? T_18 extends T_16[K_9] ? T_18 extends CanBeExpanded<object, string> ? any : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_10 in keyof T_18]-?: any; } : T_18 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_10 in keyof T_15]-?: T_15[K_10] extends infer T_18 ? T_18 extends T_15[K_10] ? T_18 extends CanBeExpanded<object, string> ? T_18[PrefixWith<`${string & K_6}`, K_10, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_10, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_18[PrefixWith<`${string & K_6}`, K_10, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_10, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_11 in keyof T_20]-?: any; } : T_20 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_12 in keyof T_18]-?: T_18[K_12] extends infer T_21 ? T_21 extends T_18[K_12] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_13 in keyof T_21]-?: T_21[K_13] extends infer T_22 ? T_22 extends T_21[K_13] ? T_22 extends CanBeExpanded<object, string> ? T_22["default"] : T_22 : never : never; } : T_21 : never : never; } : T_18 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_11 in keyof T_14]-?: T_14[K_11] extends infer T_18 ? T_18 extends T_14[K_11] ? T_18 extends CanBeExpanded<object, string> ? T_18[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_18[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[PrefixWith<`${string & K_6}`, K_11, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_11, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_12 in keyof T_21]-?: any; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_13 in keyof T_20]-?: T_20[K_13] extends infer T_22 ? T_22 extends T_20[K_13] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_14 in keyof T_22]-?: T_22[K_14] extends infer T_23 ? T_23 extends T_22[K_14] ? T_23 extends CanBeExpanded<object, string> ? T_23["default"] : T_23 : never : never; } : T_22 : never : never; } : T_20 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_14 in keyof T_18]-?: T_18[K_14] extends infer T_22 ? T_22 extends T_18[K_14] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<PrefixWith<`${string & K_6}`, K_11, ".">, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: T_24[K_15] extends infer T_25 ? T_25 extends T_24[K_15] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_16 in keyof T_22]-?: T_22[K_16] extends infer T_25 ? T_25 extends T_22[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_22 : never : never; } : T_18 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_12 in keyof T_12]-?: T_12[K_12] extends infer T_18 ? T_18 extends T_12[K_12] ? T_18 extends CanBeExpanded<object, string> ? T_18[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_18[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_6}`, K_12, "."> extends infer T_19 ? T_19 extends PrefixWith<`${string & K_6}`, K_12, "."> ? T_19 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_14 in keyof T_21]-?: T_21[K_14] extends infer T_23 ? T_23 extends T_21[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: T_23[K_15] extends infer T_24 ? T_24 extends T_23[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_15 in keyof T_20]-?: T_20[K_15] extends infer T_23 ? T_23 extends T_20[K_15] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: T_25[K_16] extends infer T_26 ? T_26 extends T_25[K_16] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_17 in keyof T_23]-?: T_23[K_17] extends infer T_26 ? T_26 extends T_23[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_23 : never : never; } : T_20 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_16 in keyof T_18]-?: T_18[K_16] extends infer T_23 ? T_23 extends T_18[K_16] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_6}`, K_12, ".">, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: T_26[K_17] extends infer T_27 ? T_27 extends T_26[K_17] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_19 in keyof T_23]-?: T_23[K_19] extends infer T_27 ? T_27 extends T_23[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_23 : never : never; } : T_18 : never : never; } : T_12 : never : never; } : T_6 : never : never : T_5 extends (infer U)[] ? any[] : T_5 extends object ? { [K_7 in keyof T_5]-?: T_5[K_7] extends infer T_12 ? T_12 extends T_5[K_7] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_7}` extends infer T_13 ? T_13 extends `${string & K_7}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? any : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_9 in keyof T_18]-?: any; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_10 in keyof T_17]-?: T_17[K_10] extends infer T_19 ? T_19 extends T_17[K_10] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_11 in keyof T_19]-?: any; } : T_19 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_11 in keyof T_16]-?: T_16[K_11] extends infer T_19 ? T_19 extends T_16[K_11] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_11, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_11, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_11, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_11, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_12 in keyof T_21]-?: any; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_13 in keyof T_19]-?: T_19[K_13] extends infer T_22 ? T_22 extends T_19[K_13] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_14 in keyof T_22]-?: T_22[K_14] extends infer T_23 ? T_23 extends T_22[K_14] ? T_23 extends CanBeExpanded<object, string> ? T_23["default"] : T_23 : never : never; } : T_22 : never : never; } : T_19 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_12 in keyof T_15]-?: T_15[K_12] extends infer T_19 ? T_19 extends T_15[K_12] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_7}`, K_12, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_12, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_14 in keyof T_21]-?: T_21[K_14] extends infer T_23 ? T_23 extends T_21[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: T_23[K_15] extends infer T_24 ? T_24 extends T_23[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_15 in keyof T_19]-?: T_19[K_15] extends infer T_23 ? T_23 extends T_19[K_15] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<PrefixWith<`${string & K_7}`, K_12, ".">, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: T_25[K_16] extends infer T_26 ? T_26 extends T_25[K_16] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_17 in keyof T_23]-?: T_23[K_17] extends infer T_26 ? T_26 extends T_23[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_23 : never : never; } : T_19 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_13 in keyof T_14]-?: T_14[K_13] extends infer T_19 ? T_19 extends T_14[K_13] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_7}`, K_13, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_13, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: any; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_15 in keyof T_22]-?: T_22[K_15] extends infer T_24 ? T_24 extends T_22[K_15] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_16 in keyof T_24]-?: T_24[K_16] extends infer T_25 ? T_25 extends T_24[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_16 in keyof T_21]-?: T_21[K_16] extends infer T_24 ? T_24 extends T_21[K_16] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: T_26[K_17] extends infer T_27 ? T_27 extends T_26[K_17] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_18 in keyof T_24]-?: T_24[K_18] extends infer T_27 ? T_27 extends T_24[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_24 : never : never; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_17 in keyof T_19]-?: T_19[K_17] extends infer T_24 ? T_24 extends T_19[K_17] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_24[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_7}`, K_13, ".">, K_17, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_26 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_20 in keyof T_24]-?: T_24[K_20] extends infer T_28 ? T_28 extends T_24[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_24 : never : never; } : T_19 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_14 in keyof T_12]-?: T_12[K_14] extends infer T_19 ? T_19 extends T_12[K_14] ? T_19 extends CanBeExpanded<object, string> ? T_19[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_19[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_7}`, K_14, "."> extends infer T_20 ? T_20 extends PrefixWith<`${string & K_7}`, K_14, "."> ? T_20 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_16 in keyof T_23]-?: T_23[K_16] extends infer T_25 ? T_25 extends T_23[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_17 in keyof T_22]-?: T_22[K_17] extends infer T_25 ? T_25 extends T_22[K_17] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_19 in keyof T_25]-?: T_25[K_19] extends infer T_28 ? T_28 extends T_25[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_25 : never : never; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_18 in keyof T_21]-?: T_21[K_18] extends infer T_25 ? T_25 extends T_21[K_18] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_21 in keyof T_25]-?: T_25[K_21] extends infer T_29 ? T_29 extends T_25[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_25 : never : never; } : T_21 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_19 in keyof T_19]-?: T_19[K_19] extends infer T_25 ? T_25 extends T_19[K_19] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_7}`, K_14, ".">, K_19, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_22 in keyof T_27]-?: T_27[K_22] extends infer T_30 ? T_30 extends T_27[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_23 in keyof T_25]-?: T_25[K_23] extends infer T_30 ? T_30 extends T_25[K_23] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_25 : never : never; } : T_19 : never : never; } : T_12 : never : never; } : T_5 : never : never : T_4 extends (infer U)[] ? any[] : T_4 extends object ? { [K_8 in keyof T_4]-?: T_4[K_8] extends infer T_12 ? T_12 extends T_4[K_8] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_8}` extends infer T_13 ? T_13 extends `${string & K_8}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? any : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_10 in keyof T_19]-?: any; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_11 in keyof T_18]-?: T_18[K_11] extends infer T_20 ? T_20 extends T_18[K_11] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_12 in keyof T_20]-?: any; } : T_20 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_12 in keyof T_17]-?: T_17[K_12] extends infer T_20 ? T_20 extends T_17[K_12] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_12, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_12, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_12, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_12, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_14 in keyof T_20]-?: T_20[K_14] extends infer T_23 ? T_23 extends T_20[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: T_23[K_15] extends infer T_24 ? T_24 extends T_23[K_15] ? T_24 extends CanBeExpanded<object, string> ? T_24["default"] : T_24 : never : never; } : T_23 : never : never; } : T_20 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_13 in keyof T_16]-?: T_16[K_13] extends infer T_20 ? T_20 extends T_16[K_13] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_13, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_13, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: any; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_15 in keyof T_22]-?: T_22[K_15] extends infer T_24 ? T_24 extends T_22[K_15] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_16 in keyof T_24]-?: T_24[K_16] extends infer T_25 ? T_25 extends T_24[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_16 in keyof T_20]-?: T_20[K_16] extends infer T_24 ? T_24 extends T_20[K_16] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_24[PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> extends infer T_25 ? T_25 extends PrefixWith<PrefixWith<`${string & K_8}`, K_13, ".">, K_16, "."> ? T_25 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: T_26[K_17] extends infer T_27 ? T_27 extends T_26[K_17] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_18 in keyof T_24]-?: T_24[K_18] extends infer T_27 ? T_27 extends T_24[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_24 : never : never; } : T_20 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_14 in keyof T_15]-?: T_15[K_14] extends infer T_20 ? T_20 extends T_15[K_14] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_8}`, K_14, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_14, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_16 in keyof T_23]-?: T_23[K_16] extends infer T_25 ? T_25 extends T_23[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_17 in keyof T_22]-?: T_22[K_17] extends infer T_25 ? T_25 extends T_22[K_17] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_19 in keyof T_25]-?: T_25[K_19] extends infer T_28 ? T_28 extends T_25[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_25 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_18 in keyof T_20]-?: T_20[K_18] extends infer T_25 ? T_25 extends T_20[K_18] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_8}`, K_14, ".">, K_18, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_21 in keyof T_25]-?: T_25[K_21] extends infer T_29 ? T_29 extends T_25[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_25 : never : never; } : T_20 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_15 in keyof T_14]-?: T_14[K_15] extends infer T_20 ? T_20 extends T_14[K_15] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_8}`, K_15, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_15, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_17 in keyof T_24]-?: T_24[K_17] extends infer T_26 ? T_26 extends T_24[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_18 in keyof T_23]-?: T_23[K_18] extends infer T_26 ? T_26 extends T_23[K_18] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_20 in keyof T_26]-?: T_26[K_20] extends infer T_29 ? T_29 extends T_26[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_26 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_19 in keyof T_22]-?: T_22[K_19] extends infer T_26 ? T_26 extends T_22[K_19] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_22 in keyof T_26]-?: T_26[K_22] extends infer T_30 ? T_30 extends T_26[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_26 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_20 in keyof T_20]-?: T_20[K_20] extends infer T_26 ? T_26 extends T_20[K_20] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_8}`, K_15, ".">, K_20, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_23 in keyof T_28]-?: T_28[K_23] extends infer T_31 ? T_31 extends T_28[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_24 in keyof T_26]-?: T_26[K_24] extends infer T_31 ? T_31 extends T_26[K_24] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_26 : never : never; } : T_20 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_16 in keyof T_12]-?: T_12[K_16] extends infer T_20 ? T_20 extends T_12[K_16] ? T_20 extends CanBeExpanded<object, string> ? T_20[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_20[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_22[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_8}`, K_16, "."> extends infer T_21 ? T_21 extends PrefixWith<`${string & K_8}`, K_16, "."> ? T_21 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_19 in keyof T_24]-?: T_24[K_19] extends infer T_27 ? T_27 extends T_24[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_20 in keyof T_23]-?: T_23[K_20] extends infer T_27 ? T_27 extends T_23[K_20] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_23 in keyof T_27]-?: T_27[K_23] extends infer T_31 ? T_31 extends T_27[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_27 : never : never; } : T_23 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_21 in keyof T_22]-?: T_22[K_21] extends infer T_27 ? T_27 extends T_22[K_21] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_24 in keyof T_29]-?: T_29[K_24] extends infer T_32 ? T_32 extends T_29[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_25 in keyof T_27]-?: T_27[K_25] extends infer T_32 ? T_32 extends T_27[K_25] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_27 : never : never; } : T_22 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_22 in keyof T_20]-?: T_20[K_22] extends infer T_27 ? T_27 extends T_20[K_22] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_8}`, K_16, ".">, K_22, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_26 in keyof T_29]-?: T_29[K_26] extends infer T_33 ? T_33 extends T_29[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_27 in keyof T_27]-?: T_27[K_27] extends infer T_33 ? T_33 extends T_27[K_27] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_27 : never : never; } : T_20 : never : never; } : T_12 : never : never; } : T_4 : never : never : T_3 extends (infer U)[] ? any[] : T_3 extends object ? { [K_9 in keyof T_3]-?: T_3[K_9] extends infer T_12 ? T_12 extends T_3[K_9] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[`${string & K_9}` extends infer T_13 ? T_13 extends `${string & K_9}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? any : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_11 in keyof T_20]-?: any; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_12 in keyof T_19]-?: T_19[K_12] extends infer T_21 ? T_21 extends T_19[K_12] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_13 in keyof T_21]-?: any; } : T_21 : never : never; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_13 in keyof T_18]-?: T_18[K_13] extends infer T_21 ? T_21 extends T_18[K_13] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_13, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_13, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_14 in keyof T_23]-?: any; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_15 in keyof T_21]-?: T_21[K_15] extends infer T_24 ? T_24 extends T_21[K_15] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_16 in keyof T_24]-?: T_24[K_16] extends infer T_25 ? T_25 extends T_24[K_16] ? T_25 extends CanBeExpanded<object, string> ? T_25["default"] : T_25 : never : never; } : T_24 : never : never; } : T_21 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_14 in keyof T_17]-?: T_17[K_14] extends infer T_21 ? T_21 extends T_17[K_14] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_14, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_14, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_16 in keyof T_23]-?: T_23[K_16] extends infer T_25 ? T_25 extends T_23[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_17 in keyof T_21]-?: T_21[K_17] extends infer T_25 ? T_25 extends T_21[K_17] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_25[PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> extends infer T_26 ? T_26 extends PrefixWith<PrefixWith<`${string & K_9}`, K_14, ".">, K_17, "."> ? T_26 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: T_27[K_18] extends infer T_28 ? T_28 extends T_27[K_18] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_19 in keyof T_25]-?: T_25[K_19] extends infer T_28 ? T_28 extends T_25[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_25 : never : never; } : T_21 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_15 in keyof T_16]-?: T_16[K_15] extends infer T_21 ? T_21 extends T_16[K_15] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_15, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_15, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_17 in keyof T_24]-?: T_24[K_17] extends infer T_26 ? T_26 extends T_24[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_18 in keyof T_23]-?: T_23[K_18] extends infer T_26 ? T_26 extends T_23[K_18] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_20 in keyof T_26]-?: T_26[K_20] extends infer T_29 ? T_29 extends T_26[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_26 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_19 in keyof T_21]-?: T_21[K_19] extends infer T_26 ? T_26 extends T_21[K_19] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_9}`, K_15, ".">, K_19, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_22 in keyof T_26]-?: T_26[K_22] extends infer T_30 ? T_30 extends T_26[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_26 : never : never; } : T_21 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_16 in keyof T_15]-?: T_15[K_16] extends infer T_21 ? T_21 extends T_15[K_16] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_9}`, K_16, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_16, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_19 in keyof T_24]-?: T_24[K_19] extends infer T_27 ? T_27 extends T_24[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_20 in keyof T_23]-?: T_23[K_20] extends infer T_27 ? T_27 extends T_23[K_20] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_23 in keyof T_27]-?: T_27[K_23] extends infer T_31 ? T_31 extends T_27[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_27 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_21 in keyof T_21]-?: T_21[K_21] extends infer T_27 ? T_27 extends T_21[K_21] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_9}`, K_16, ".">, K_21, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_24 in keyof T_29]-?: T_29[K_24] extends infer T_32 ? T_32 extends T_29[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_25 in keyof T_27]-?: T_27[K_25] extends infer T_32 ? T_32 extends T_27[K_25] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_27 : never : never; } : T_21 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_17 in keyof T_14]-?: T_14[K_17] extends infer T_21 ? T_21 extends T_14[K_17] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_9}`, K_17, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_17, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: any; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_20 in keyof T_28]-?: T_28[K_20] extends infer T_29 ? T_29 extends T_28[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_20 in keyof T_25]-?: T_25[K_20] extends infer T_28 ? T_28 extends T_25[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_22 in keyof T_28]-?: T_28[K_22] extends infer T_31 ? T_31 extends T_28[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_21 in keyof T_24]-?: T_24[K_21] extends infer T_28 ? T_28 extends T_24[K_21] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_24 in keyof T_28]-?: T_28[K_24] extends infer T_32 ? T_32 extends T_28[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_28 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_22 in keyof T_23]-?: T_23[K_22] extends infer T_28 ? T_28 extends T_23[K_22] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_26 in keyof T_28]-?: T_28[K_26] extends infer T_33 ? T_33 extends T_28[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_28 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_23 in keyof T_21]-?: T_21[K_23] extends infer T_28 ? T_28 extends T_21[K_23] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_9}`, K_17, ".">, K_23, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_27 in keyof T_30]-?: T_30[K_27] extends infer T_34 ? T_34 extends T_30[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_28 in keyof T_28]-?: T_28[K_28] extends infer T_34 ? T_34 extends T_28[K_28] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_28 : never : never; } : T_21 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_18 in keyof T_12]-?: T_12[K_18] extends infer T_21 ? T_21 extends T_12[K_18] ? T_21 extends CanBeExpanded<object, string> ? T_21[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_23 ? T_23 extends T_21[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_23[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_9}`, K_18, "."> extends infer T_22 ? T_22 extends PrefixWith<`${string & K_9}`, K_18, "."> ? T_22 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: any; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_21 in keyof T_29]-?: T_29[K_21] extends infer T_30 ? T_30 extends T_29[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_21 in keyof T_26]-?: T_26[K_21] extends infer T_29 ? T_29 extends T_26[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_23 in keyof T_29]-?: T_29[K_23] extends infer T_32 ? T_32 extends T_29[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_22 in keyof T_25]-?: T_25[K_22] extends infer T_29 ? T_29 extends T_25[K_22] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_25 in keyof T_29]-?: T_29[K_25] extends infer T_33 ? T_33 extends T_29[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_23 in keyof T_24]-?: T_24[K_23] extends infer T_29 ? T_29 extends T_24[K_23] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_27 in keyof T_29]-?: T_29[K_27] extends infer T_34 ? T_34 extends T_29[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_29 : never : never; } : T_24 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_24 in keyof T_23]-?: T_23[K_24] extends infer T_29 ? T_29 extends T_23[K_24] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_28 in keyof T_31]-?: T_31[K_28] extends infer T_35 ? T_35 extends T_31[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_29 in keyof T_29]-?: T_29[K_29] extends infer T_35 ? T_35 extends T_29[K_29] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_29 : never : never; } : T_23 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_25 in keyof T_21]-?: T_21[K_25] extends infer T_29 ? T_29 extends T_21[K_25] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_9}`, K_18, ".">, K_25, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_29 in keyof T_32]-?: T_32[K_29] extends infer T_36 ? T_36 extends T_32[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_30 in keyof T_31]-?: T_31[K_30] extends infer T_36 ? T_36 extends T_31[K_30] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_31 in keyof T_29]-?: T_29[K_31] extends infer T_36 ? T_36 extends T_29[K_31] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_29 : never : never; } : T_21 : never : never; } : T_12 : never : never; } : T_3 : never : never : T_2 extends (infer U)[] ? any[] : T_2 extends object ? { [K_10 in keyof T_2]-?: T_2[K_10] extends infer T_12 ? T_12 extends T_2[K_10] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[`${string & K_10}` extends infer T_13 ? T_13 extends `${string & K_10}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? any : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_12 in keyof T_21]-?: any; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_13 in keyof T_20]-?: T_20[K_13] extends infer T_22 ? T_22 extends T_20[K_13] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_14 in keyof T_22]-?: any; } : T_22 : never : never; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_14 in keyof T_19]-?: T_19[K_14] extends infer T_22 ? T_22 extends T_19[K_14] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_14, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_14, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? any : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_15 in keyof T_24]-?: any; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_16 in keyof T_22]-?: T_22[K_16] extends infer T_25 ? T_25 extends T_22[K_16] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_17 in keyof T_25]-?: T_25[K_17] extends infer T_26 ? T_26 extends T_25[K_17] ? T_26 extends CanBeExpanded<object, string> ? T_26["default"] : T_26 : never : never; } : T_25 : never : never; } : T_22 : never : never; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_15 in keyof T_18]-?: T_18[K_15] extends infer T_22 ? T_22 extends T_18[K_15] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_15, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_15, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_17 in keyof T_24]-?: T_24[K_17] extends infer T_26 ? T_26 extends T_24[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_18 in keyof T_22]-?: T_22[K_18] extends infer T_26 ? T_26 extends T_22[K_18] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_26[PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> extends infer T_27 ? T_27 extends PrefixWith<PrefixWith<`${string & K_10}`, K_15, ".">, K_18, "."> ? T_27 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: T_28[K_19] extends infer T_29 ? T_29 extends T_28[K_19] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_20 in keyof T_26]-?: T_26[K_20] extends infer T_29 ? T_29 extends T_26[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_26 : never : never; } : T_22 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_16 in keyof T_17]-?: T_17[K_16] extends infer T_22 ? T_22 extends T_17[K_16] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_16, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_16, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_19 in keyof T_24]-?: T_24[K_19] extends infer T_27 ? T_27 extends T_24[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_20 in keyof T_22]-?: T_22[K_20] extends infer T_27 ? T_27 extends T_22[K_20] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_10}`, K_16, ".">, K_20, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_23 in keyof T_27]-?: T_27[K_23] extends infer T_31 ? T_31 extends T_27[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_27 : never : never; } : T_22 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_17 in keyof T_16]-?: T_16[K_17] extends infer T_22 ? T_22 extends T_16[K_17] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_17, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_17, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: any; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_20 in keyof T_28]-?: T_28[K_20] extends infer T_29 ? T_29 extends T_28[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_20 in keyof T_25]-?: T_25[K_20] extends infer T_28 ? T_28 extends T_25[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_22 in keyof T_28]-?: T_28[K_22] extends infer T_31 ? T_31 extends T_28[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_21 in keyof T_24]-?: T_24[K_21] extends infer T_28 ? T_28 extends T_24[K_21] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_24 in keyof T_28]-?: T_28[K_24] extends infer T_32 ? T_32 extends T_28[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_28 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_22 in keyof T_22]-?: T_22[K_22] extends infer T_28 ? T_28 extends T_22[K_22] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_10}`, K_17, ".">, K_22, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_26 in keyof T_28]-?: T_28[K_26] extends infer T_33 ? T_33 extends T_28[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_28 : never : never; } : T_22 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_18 in keyof T_15]-?: T_15[K_18] extends infer T_22 ? T_22 extends T_15[K_18] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_10}`, K_18, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_18, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: any; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_21 in keyof T_29]-?: T_29[K_21] extends infer T_30 ? T_30 extends T_29[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_21 in keyof T_26]-?: T_26[K_21] extends infer T_29 ? T_29 extends T_26[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_23 in keyof T_29]-?: T_29[K_23] extends infer T_32 ? T_32 extends T_29[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_22 in keyof T_25]-?: T_25[K_22] extends infer T_29 ? T_29 extends T_25[K_22] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_25 in keyof T_29]-?: T_29[K_25] extends infer T_33 ? T_33 extends T_29[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_23 in keyof T_24]-?: T_24[K_23] extends infer T_29 ? T_29 extends T_24[K_23] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_27 in keyof T_29]-?: T_29[K_27] extends infer T_34 ? T_34 extends T_29[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_29 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_24 in keyof T_22]-?: T_22[K_24] extends infer T_29 ? T_29 extends T_22[K_24] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_10}`, K_18, ".">, K_24, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_28 in keyof T_31]-?: T_31[K_28] extends infer T_35 ? T_35 extends T_31[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_29 in keyof T_29]-?: T_29[K_29] extends infer T_35 ? T_35 extends T_29[K_29] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_29 : never : never; } : T_22 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_19 in keyof T_14]-?: T_14[K_19] extends infer T_22 ? T_22 extends T_14[K_19] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_10}`, K_19, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_19, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: any; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_22 in keyof T_30]-?: T_30[K_22] extends infer T_31 ? T_31 extends T_30[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_22 in keyof T_27]-?: T_27[K_22] extends infer T_30 ? T_30 extends T_27[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_24 in keyof T_30]-?: T_30[K_24] extends infer T_33 ? T_33 extends T_30[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_23 in keyof T_26]-?: T_26[K_23] extends infer T_30 ? T_30 extends T_26[K_23] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_26 in keyof T_30]-?: T_30[K_26] extends infer T_34 ? T_34 extends T_30[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_30 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_24 in keyof T_25]-?: T_25[K_24] extends infer T_30 ? T_30 extends T_25[K_24] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_28 in keyof T_30]-?: T_30[K_28] extends infer T_35 ? T_35 extends T_30[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_30 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_25 in keyof T_24]-?: T_24[K_25] extends infer T_30 ? T_30 extends T_24[K_25] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_29 in keyof T_32]-?: T_32[K_29] extends infer T_36 ? T_36 extends T_32[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_30 in keyof T_30]-?: T_30[K_30] extends infer T_36 ? T_36 extends T_30[K_30] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_30 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_26 in keyof T_22]-?: T_22[K_26] extends infer T_30 ? T_30 extends T_22[K_26] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_10}`, K_19, ".">, K_26, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_30 in keyof T_33]-?: T_33[K_30] extends infer T_37 ? T_37 extends T_33[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_31 in keyof T_32]-?: T_32[K_31] extends infer T_37 ? T_37 extends T_32[K_31] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_32 in keyof T_30]-?: T_30[K_32] extends infer T_37 ? T_37 extends T_30[K_32] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_30 : never : never; } : T_22 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_20 in keyof T_12]-?: T_12[K_20] extends infer T_22 ? T_22 extends T_12[K_20] ? T_22 extends CanBeExpanded<object, string> ? T_22[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_24 ? T_24 extends T_22[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_24 extends CanBeExpanded<object, string> ? T_24[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_24[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_10}`, K_20, "."> extends infer T_23 ? T_23 extends PrefixWith<`${string & K_10}`, K_20, "."> ? T_23 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: any; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_23 in keyof T_31]-?: T_31[K_23] extends infer T_32 ? T_32 extends T_31[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_23 in keyof T_28]-?: T_28[K_23] extends infer T_31 ? T_31 extends T_28[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_25 in keyof T_31]-?: T_31[K_25] extends infer T_34 ? T_34 extends T_31[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_24 in keyof T_27]-?: T_27[K_24] extends infer T_31 ? T_31 extends T_27[K_24] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_27 in keyof T_31]-?: T_31[K_27] extends infer T_35 ? T_35 extends T_31[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_25 in keyof T_26]-?: T_26[K_25] extends infer T_31 ? T_31 extends T_26[K_25] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_29 in keyof T_31]-?: T_31[K_29] extends infer T_36 ? T_36 extends T_31[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_31 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_26 in keyof T_25]-?: T_25[K_26] extends infer T_31 ? T_31 extends T_25[K_26] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_30 in keyof T_33]-?: T_33[K_30] extends infer T_37 ? T_37 extends T_33[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_31 in keyof T_31]-?: T_31[K_31] extends infer T_37 ? T_37 extends T_31[K_31] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_31 : never : never; } : T_25 : never : never : T_24 extends (infer U)[] ? any[] : T_24 extends object ? { [K_27 in keyof T_24]-?: T_24[K_27] extends infer T_31 ? T_31 extends T_24[K_27] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_31 in keyof T_34]-?: T_34[K_31] extends infer T_38 ? T_38 extends T_34[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_32 in keyof T_33]-?: T_33[K_32] extends infer T_38 ? T_38 extends T_33[K_32] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_33 in keyof T_31]-?: T_31[K_33] extends infer T_38 ? T_38 extends T_31[K_33] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_31 : never : never; } : T_24 : never : never : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_28 in keyof T_22]-?: T_22[K_28] extends infer T_31 ? T_31 extends T_22[K_28] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_10}`, K_20, ".">, K_28, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? any : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_29 in keyof T_38]-?: T_38[K_29] extends infer T_39 ? T_39 extends T_38[K_29] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_30 in keyof T_37]-?: T_37[K_30] extends infer T_39 ? T_39 extends T_37[K_30] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_31 in keyof T_36]-?: T_36[K_31] extends infer T_39 ? T_39 extends T_36[K_31] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_32 in keyof T_35]-?: T_35[K_32] extends infer T_39 ? T_39 extends T_35[K_32] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_33 in keyof T_34]-?: T_34[K_33] extends infer T_39 ? T_39 extends T_34[K_33] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_34 in keyof T_33]-?: T_33[K_34] extends infer T_39 ? T_39 extends T_33[K_34] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_35 in keyof T_31]-?: T_31[K_35] extends infer T_39 ? T_39 extends T_31[K_35] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_31 : never : never; } : T_22 : never : never; } : T_12 : never : never; } : T_2 : never : never : T extends (infer U)[] ? any[] : T extends object ? { [K_11 in keyof T]-?: T[K_11] extends infer T_12 ? T_12 extends T[K_11] ? T_12 extends CanBeExpanded<object, string> ? T_12[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_14 ? T_14 extends T_12[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_14 extends CanBeExpanded<object, string> ? T_14[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_15 ? T_15 extends T_14[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_15 extends CanBeExpanded<object, string> ? T_15[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_16 ? T_16 extends T_15[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_16 extends CanBeExpanded<object, string> ? T_16[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_17 ? T_17 extends T_16[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_17 extends CanBeExpanded<object, string> ? T_17[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_18 ? T_18 extends T_17[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_18 extends CanBeExpanded<object, string> ? T_18[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_19 ? T_19 extends T_18[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_19 extends CanBeExpanded<object, string> ? T_19[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_20 ? T_20 extends T_19[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_20 extends CanBeExpanded<object, string> ? T_20[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_21 ? T_21 extends T_20[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_21 extends CanBeExpanded<object, string> ? T_21[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_22 ? T_22 extends T_21[`${string & K_11}` extends infer T_13 ? T_13 extends `${string & K_11}` ? T_13 extends SplitAC<K> ? "value" : "default" : never : never] ? T_22 extends CanBeExpanded<object, string> ? any : T_22 extends (infer U)[] ? any[] : T_22 extends object ? { [K_13 in keyof T_22]-?: any; } : T_22 : never : never : T_21 extends (infer U)[] ? any[] : T_21 extends object ? { [K_14 in keyof T_21]-?: T_21[K_14] extends infer T_23 ? T_23 extends T_21[K_14] ? T_23 extends CanBeExpanded<object, string> ? any : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_15 in keyof T_23]-?: any; } : T_23 : never : never; } : T_21 : never : never : T_20 extends (infer U)[] ? any[] : T_20 extends object ? { [K_15 in keyof T_20]-?: T_20[K_15] extends infer T_23 ? T_23 extends T_20[K_15] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_15, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_15, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? any : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_16 in keyof T_25]-?: any; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_17 in keyof T_23]-?: T_23[K_17] extends infer T_26 ? T_26 extends T_23[K_17] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_18 in keyof T_26]-?: T_26[K_18] extends infer T_27 ? T_27 extends T_26[K_18] ? T_27 extends CanBeExpanded<object, string> ? T_27["default"] : T_27 : never : never; } : T_26 : never : never; } : T_23 : never : never; } : T_20 : never : never : T_19 extends (infer U)[] ? any[] : T_19 extends object ? { [K_16 in keyof T_19]-?: T_19[K_16] extends infer T_23 ? T_23 extends T_19[K_16] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_16, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_16, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? any : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_17 in keyof T_26]-?: any; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_18 in keyof T_25]-?: T_25[K_18] extends infer T_27 ? T_27 extends T_25[K_18] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_19 in keyof T_27]-?: T_27[K_19] extends infer T_28 ? T_28 extends T_27[K_19] ? T_28 extends CanBeExpanded<object, string> ? T_28["default"] : T_28 : never : never; } : T_27 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_19 in keyof T_23]-?: T_23[K_19] extends infer T_27 ? T_27 extends T_23[K_19] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_27[PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> extends infer T_28 ? T_28 extends PrefixWith<PrefixWith<`${string & K_11}`, K_16, ".">, K_19, "."> ? T_28 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: T_29[K_20] extends infer T_30 ? T_30 extends T_29[K_20] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_21 in keyof T_27]-?: T_27[K_21] extends infer T_30 ? T_30 extends T_27[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_27 : never : never; } : T_23 : never : never; } : T_19 : never : never : T_18 extends (infer U)[] ? any[] : T_18 extends object ? { [K_17 in keyof T_18]-?: T_18[K_17] extends infer T_23 ? T_23 extends T_18[K_17] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_17, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_17, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? any : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_18 in keyof T_27]-?: any; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_19 in keyof T_26]-?: T_26[K_19] extends infer T_28 ? T_28 extends T_26[K_19] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_20 in keyof T_28]-?: T_28[K_20] extends infer T_29 ? T_29 extends T_28[K_20] ? T_29 extends CanBeExpanded<object, string> ? T_29["default"] : T_29 : never : never; } : T_28 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_20 in keyof T_25]-?: T_25[K_20] extends infer T_28 ? T_28 extends T_25[K_20] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_20, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: T_30[K_21] extends infer T_31 ? T_31 extends T_30[K_21] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_22 in keyof T_28]-?: T_28[K_22] extends infer T_31 ? T_31 extends T_28[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_28 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_21 in keyof T_23]-?: T_23[K_21] extends infer T_28 ? T_28 extends T_23[K_21] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_28[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> extends infer T_29 ? T_29 extends PrefixWith<PrefixWith<`${string & K_11}`, K_17, ".">, K_21, "."> ? T_29 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_30 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_24 in keyof T_28]-?: T_28[K_24] extends infer T_32 ? T_32 extends T_28[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_28 : never : never; } : T_23 : never : never; } : T_18 : never : never : T_17 extends (infer U)[] ? any[] : T_17 extends object ? { [K_18 in keyof T_17]-?: T_17[K_18] extends infer T_23 ? T_23 extends T_17[K_18] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_18, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_18, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? any : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_19 in keyof T_28]-?: any; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_20 in keyof T_27]-?: T_27[K_20] extends infer T_29 ? T_29 extends T_27[K_20] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_21 in keyof T_29]-?: T_29[K_21] extends infer T_30 ? T_30 extends T_29[K_21] ? T_30 extends CanBeExpanded<object, string> ? T_30["default"] : T_30 : never : never; } : T_29 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_21 in keyof T_26]-?: T_26[K_21] extends infer T_29 ? T_29 extends T_26[K_21] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_21, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: T_31[K_22] extends infer T_32 ? T_32 extends T_31[K_22] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_23 in keyof T_29]-?: T_29[K_23] extends infer T_32 ? T_32 extends T_29[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_29 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_22 in keyof T_25]-?: T_25[K_22] extends infer T_29 ? T_29 extends T_25[K_22] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_22, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_25 in keyof T_29]-?: T_29[K_25] extends infer T_33 ? T_33 extends T_29[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_29 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_23 in keyof T_23]-?: T_23[K_23] extends infer T_29 ? T_29 extends T_23[K_23] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_29[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> extends infer T_30 ? T_30 extends PrefixWith<PrefixWith<`${string & K_11}`, K_18, ".">, K_23, "."> ? T_30 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_26 in keyof T_31]-?: T_31[K_26] extends infer T_34 ? T_34 extends T_31[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_27 in keyof T_29]-?: T_29[K_27] extends infer T_34 ? T_34 extends T_29[K_27] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_29 : never : never; } : T_23 : never : never; } : T_17 : never : never : T_16 extends (infer U)[] ? any[] : T_16 extends object ? { [K_19 in keyof T_16]-?: T_16[K_19] extends infer T_23 ? T_23 extends T_16[K_19] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_19, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_19, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? any : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_20 in keyof T_29]-?: any; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_21 in keyof T_28]-?: T_28[K_21] extends infer T_30 ? T_30 extends T_28[K_21] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_22 in keyof T_30]-?: T_30[K_22] extends infer T_31 ? T_31 extends T_30[K_22] ? T_31 extends CanBeExpanded<object, string> ? T_31["default"] : T_31 : never : never; } : T_30 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_22 in keyof T_27]-?: T_27[K_22] extends infer T_30 ? T_30 extends T_27[K_22] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_22, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: T_32[K_23] extends infer T_33 ? T_33 extends T_32[K_23] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_24 in keyof T_30]-?: T_30[K_24] extends infer T_33 ? T_33 extends T_30[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_30 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_23 in keyof T_26]-?: T_26[K_23] extends infer T_30 ? T_30 extends T_26[K_23] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_23, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_25 in keyof T_32]-?: T_32[K_25] extends infer T_34 ? T_34 extends T_32[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_26 in keyof T_30]-?: T_30[K_26] extends infer T_34 ? T_34 extends T_30[K_26] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_30 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_24 in keyof T_25]-?: T_25[K_24] extends infer T_30 ? T_30 extends T_25[K_24] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_24, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_27 in keyof T_32]-?: T_32[K_27] extends infer T_35 ? T_35 extends T_32[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_28 in keyof T_30]-?: T_30[K_28] extends infer T_35 ? T_35 extends T_30[K_28] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_30 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_25 in keyof T_23]-?: T_23[K_25] extends infer T_30 ? T_30 extends T_23[K_25] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_30[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> extends infer T_31 ? T_31 extends PrefixWith<PrefixWith<`${string & K_11}`, K_19, ".">, K_25, "."> ? T_31 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_29 in keyof T_32]-?: T_32[K_29] extends infer T_36 ? T_36 extends T_32[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_30 in keyof T_30]-?: T_30[K_30] extends infer T_36 ? T_36 extends T_30[K_30] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_30 : never : never; } : T_23 : never : never; } : T_16 : never : never : T_15 extends (infer U)[] ? any[] : T_15 extends object ? { [K_20 in keyof T_15]-?: T_15[K_20] extends infer T_23 ? T_23 extends T_15[K_20] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_11}`, K_20, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_20, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? any : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_21 in keyof T_30]-?: any; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_22 in keyof T_29]-?: T_29[K_22] extends infer T_31 ? T_31 extends T_29[K_22] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_23 in keyof T_31]-?: T_31[K_23] extends infer T_32 ? T_32 extends T_31[K_23] ? T_32 extends CanBeExpanded<object, string> ? T_32["default"] : T_32 : never : never; } : T_31 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_23 in keyof T_28]-?: T_28[K_23] extends infer T_31 ? T_31 extends T_28[K_23] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_23, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_24 in keyof T_33]-?: T_33[K_24] extends infer T_34 ? T_34 extends T_33[K_24] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_25 in keyof T_31]-?: T_31[K_25] extends infer T_34 ? T_34 extends T_31[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_31 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_24 in keyof T_27]-?: T_27[K_24] extends infer T_31 ? T_31 extends T_27[K_24] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_24, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_26 in keyof T_33]-?: T_33[K_26] extends infer T_35 ? T_35 extends T_33[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_27 in keyof T_31]-?: T_31[K_27] extends infer T_35 ? T_35 extends T_31[K_27] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_31 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_25 in keyof T_26]-?: T_26[K_25] extends infer T_31 ? T_31 extends T_26[K_25] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_25, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_28 in keyof T_33]-?: T_33[K_28] extends infer T_36 ? T_36 extends T_33[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_29 in keyof T_31]-?: T_31[K_29] extends infer T_36 ? T_36 extends T_31[K_29] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_31 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_26 in keyof T_25]-?: T_25[K_26] extends infer T_31 ? T_31 extends T_25[K_26] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_26, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_30 in keyof T_33]-?: T_33[K_30] extends infer T_37 ? T_37 extends T_33[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_31 in keyof T_31]-?: T_31[K_31] extends infer T_37 ? T_37 extends T_31[K_31] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_31 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_27 in keyof T_23]-?: T_23[K_27] extends infer T_31 ? T_31 extends T_23[K_27] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_33 ? T_33 extends T_31[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> extends infer T_32 ? T_32 extends PrefixWith<PrefixWith<`${string & K_11}`, K_20, ".">, K_27, "."> ? T_32 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_31 in keyof T_34]-?: T_34[K_31] extends infer T_38 ? T_38 extends T_34[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_34 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_32 in keyof T_33]-?: T_33[K_32] extends infer T_38 ? T_38 extends T_33[K_32] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_33 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_33 in keyof T_31]-?: T_31[K_33] extends infer T_38 ? T_38 extends T_31[K_33] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_31 : never : never; } : T_23 : never : never; } : T_15 : never : never : T_14 extends (infer U)[] ? any[] : T_14 extends object ? { [K_21 in keyof T_14]-?: T_14[K_21] extends infer T_23 ? T_23 extends T_14[K_21] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<`${string & K_11}`, K_21, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_21, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? any : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_22 in keyof T_31]-?: any; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_23 in keyof T_30]-?: T_30[K_23] extends infer T_32 ? T_32 extends T_30[K_23] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_24 in keyof T_32]-?: T_32[K_24] extends infer T_33 ? T_33 extends T_32[K_24] ? T_33 extends CanBeExpanded<object, string> ? T_33["default"] : T_33 : never : never; } : T_32 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_24 in keyof T_29]-?: T_29[K_24] extends infer T_32 ? T_32 extends T_29[K_24] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_24, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? any : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_25 in keyof T_34]-?: T_34[K_25] extends infer T_35 ? T_35 extends T_34[K_25] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_26 in keyof T_32]-?: T_32[K_26] extends infer T_35 ? T_35 extends T_32[K_26] ? T_35 extends CanBeExpanded<object, string> ? T_35["default"] : T_35 : never : never; } : T_32 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_25 in keyof T_28]-?: T_28[K_25] extends infer T_32 ? T_32 extends T_28[K_25] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_25, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_27 in keyof T_34]-?: T_34[K_27] extends infer T_36 ? T_36 extends T_34[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_28 in keyof T_32]-?: T_32[K_28] extends infer T_36 ? T_36 extends T_32[K_28] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_32 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_26 in keyof T_27]-?: T_27[K_26] extends infer T_32 ? T_32 extends T_27[K_26] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_26, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_29 in keyof T_34]-?: T_34[K_29] extends infer T_37 ? T_37 extends T_34[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_30 in keyof T_32]-?: T_32[K_30] extends infer T_37 ? T_37 extends T_32[K_30] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_32 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_27 in keyof T_26]-?: T_26[K_27] extends infer T_32 ? T_32 extends T_26[K_27] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_27, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_31 in keyof T_34]-?: T_34[K_31] extends infer T_38 ? T_38 extends T_34[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_32 in keyof T_32]-?: T_32[K_32] extends infer T_38 ? T_38 extends T_32[K_32] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_32 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_28 in keyof T_25]-?: T_25[K_28] extends infer T_32 ? T_32 extends T_25[K_28] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_28, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? any : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_29 in keyof T_38]-?: T_38[K_29] extends infer T_39 ? T_39 extends T_38[K_29] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_30 in keyof T_37]-?: T_37[K_30] extends infer T_39 ? T_39 extends T_37[K_30] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_31 in keyof T_36]-?: T_36[K_31] extends infer T_39 ? T_39 extends T_36[K_31] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_32 in keyof T_35]-?: T_35[K_32] extends infer T_39 ? T_39 extends T_35[K_32] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_33 in keyof T_34]-?: T_34[K_33] extends infer T_39 ? T_39 extends T_34[K_33] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_34 in keyof T_32]-?: T_32[K_34] extends infer T_39 ? T_39 extends T_32[K_34] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_32 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_29 in keyof T_23]-?: T_23[K_29] extends infer T_32 ? T_32 extends T_23[K_29] ? T_32 extends CanBeExpanded<object, string> ? T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_34 ? T_34 extends T_32[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_34 extends CanBeExpanded<object, string> ? T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_34[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> extends infer T_33 ? T_33 extends PrefixWith<PrefixWith<`${string & K_11}`, K_21, ".">, K_29, "."> ? T_33 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? any : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_30 in keyof T_39]-?: T_39[K_30] extends infer T_40 ? T_40 extends T_39[K_30] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_31 in keyof T_38]-?: T_38[K_31] extends infer T_40 ? T_40 extends T_38[K_31] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_32 in keyof T_37]-?: T_37[K_32] extends infer T_40 ? T_40 extends T_37[K_32] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_33 in keyof T_36]-?: T_36[K_33] extends infer T_40 ? T_40 extends T_36[K_33] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_34 in keyof T_35]-?: T_35[K_34] extends infer T_40 ? T_40 extends T_35[K_34] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_35 : never : never : T_34 extends (infer U)[] ? any[] : T_34 extends object ? { [K_35 in keyof T_34]-?: T_34[K_35] extends infer T_40 ? T_40 extends T_34[K_35] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_34 : never : never : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_36 in keyof T_32]-?: T_32[K_36] extends infer T_40 ? T_40 extends T_32[K_36] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_32 : never : never; } : T_23 : never : never; } : T_14 : never : never : T_12 extends (infer U)[] ? any[] : T_12 extends object ? { [K_22 in keyof T_12]-?: T_12[K_22] extends infer T_23 ? T_23 extends T_12[K_22] ? T_23 extends CanBeExpanded<object, string> ? T_23[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_25 ? T_25 extends T_23[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_25 extends CanBeExpanded<object, string> ? T_25[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_26 ? T_26 extends T_25[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_26 extends CanBeExpanded<object, string> ? T_26[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_27 ? T_27 extends T_26[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_27 extends CanBeExpanded<object, string> ? T_27[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_28 ? T_28 extends T_27[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_28 extends CanBeExpanded<object, string> ? T_28[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_29 ? T_29 extends T_28[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_29 extends CanBeExpanded<object, string> ? T_29[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_30 ? T_30 extends T_29[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_30 extends CanBeExpanded<object, string> ? T_30[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_31 ? T_31 extends T_30[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_31 extends CanBeExpanded<object, string> ? T_31[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_32 ? T_32 extends T_31[PrefixWith<`${string & K_11}`, K_22, "."> extends infer T_24 ? T_24 extends PrefixWith<`${string & K_11}`, K_22, "."> ? T_24 extends SplitAC<K> ? "value" : "default" : never : never] ? T_32 extends CanBeExpanded<object, string> ? any : T_32 extends (infer U)[] ? any[] : T_32 extends object ? { [K_23 in keyof T_32]-?: any; } : T_32 : never : never : T_31 extends (infer U)[] ? any[] : T_31 extends object ? { [K_24 in keyof T_31]-?: T_31[K_24] extends infer T_33 ? T_33 extends T_31[K_24] ? T_33 extends CanBeExpanded<object, string> ? any : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_25 in keyof T_33]-?: T_33[K_25] extends infer T_34 ? T_34 extends T_33[K_25] ? T_34 extends CanBeExpanded<object, string> ? T_34["default"] : T_34 : never : never; } : T_33 : never : never; } : T_31 : never : never : T_30 extends (infer U)[] ? any[] : T_30 extends object ? { [K_25 in keyof T_30]-?: T_30[K_25] extends infer T_33 ? T_33 extends T_30[K_25] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_25, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? any : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_26 in keyof T_35]-?: T_35[K_26] extends infer T_36 ? T_36 extends T_35[K_26] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_27 in keyof T_33]-?: T_33[K_27] extends infer T_36 ? T_36 extends T_33[K_27] ? T_36 extends CanBeExpanded<object, string> ? T_36["default"] : T_36 : never : never; } : T_33 : never : never; } : T_30 : never : never : T_29 extends (infer U)[] ? any[] : T_29 extends object ? { [K_26 in keyof T_29]-?: T_29[K_26] extends infer T_33 ? T_33 extends T_29[K_26] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_26, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? any : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_27 in keyof T_36]-?: T_36[K_27] extends infer T_37 ? T_37 extends T_36[K_27] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_28 in keyof T_35]-?: T_35[K_28] extends infer T_37 ? T_37 extends T_35[K_28] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_29 in keyof T_33]-?: T_33[K_29] extends infer T_37 ? T_37 extends T_33[K_29] ? T_37 extends CanBeExpanded<object, string> ? T_37["default"] : T_37 : never : never; } : T_33 : never : never; } : T_29 : never : never : T_28 extends (infer U)[] ? any[] : T_28 extends object ? { [K_27 in keyof T_28]-?: T_28[K_27] extends infer T_33 ? T_33 extends T_28[K_27] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_27, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? any : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_28 in keyof T_37]-?: T_37[K_28] extends infer T_38 ? T_38 extends T_37[K_28] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_29 in keyof T_36]-?: T_36[K_29] extends infer T_38 ? T_38 extends T_36[K_29] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_30 in keyof T_35]-?: T_35[K_30] extends infer T_38 ? T_38 extends T_35[K_30] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_31 in keyof T_33]-?: T_33[K_31] extends infer T_38 ? T_38 extends T_33[K_31] ? T_38 extends CanBeExpanded<object, string> ? T_38["default"] : T_38 : never : never; } : T_33 : never : never; } : T_28 : never : never : T_27 extends (infer U)[] ? any[] : T_27 extends object ? { [K_28 in keyof T_27]-?: T_27[K_28] extends infer T_33 ? T_33 extends T_27[K_28] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_28, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? any : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_29 in keyof T_38]-?: T_38[K_29] extends infer T_39 ? T_39 extends T_38[K_29] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_30 in keyof T_37]-?: T_37[K_30] extends infer T_39 ? T_39 extends T_37[K_30] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_31 in keyof T_36]-?: T_36[K_31] extends infer T_39 ? T_39 extends T_36[K_31] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_32 in keyof T_35]-?: T_35[K_32] extends infer T_39 ? T_39 extends T_35[K_32] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_33 in keyof T_33]-?: T_33[K_33] extends infer T_39 ? T_39 extends T_33[K_33] ? T_39 extends CanBeExpanded<object, string> ? T_39["default"] : T_39 : never : never; } : T_33 : never : never; } : T_27 : never : never : T_26 extends (infer U)[] ? any[] : T_26 extends object ? { [K_29 in keyof T_26]-?: T_26[K_29] extends infer T_33 ? T_33 extends T_26[K_29] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_29, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? any : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_30 in keyof T_39]-?: T_39[K_30] extends infer T_40 ? T_40 extends T_39[K_30] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_31 in keyof T_38]-?: T_38[K_31] extends infer T_40 ? T_40 extends T_38[K_31] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_32 in keyof T_37]-?: T_37[K_32] extends infer T_40 ? T_40 extends T_37[K_32] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_33 in keyof T_36]-?: T_36[K_33] extends infer T_40 ? T_40 extends T_36[K_33] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_34 in keyof T_35]-?: T_35[K_34] extends infer T_40 ? T_40 extends T_35[K_34] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_35 in keyof T_33]-?: T_33[K_35] extends infer T_40 ? T_40 extends T_33[K_35] ? T_40 extends CanBeExpanded<object, string> ? T_40["default"] : T_40 : never : never; } : T_33 : never : never; } : T_26 : never : never : T_25 extends (infer U)[] ? any[] : T_25 extends object ? { [K_30 in keyof T_25]-?: T_25[K_30] extends infer T_33 ? T_33 extends T_25[K_30] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_40 ? T_40 extends T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_30, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_40 extends CanBeExpanded<object, string> ? any : T_40 extends (infer U)[] ? any[] : T_40 extends object ? { [K_31 in keyof T_40]-?: T_40[K_31] extends infer T_41 ? T_41 extends T_40[K_31] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_40 : never : never : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_32 in keyof T_39]-?: T_39[K_32] extends infer T_41 ? T_41 extends T_39[K_32] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_33 in keyof T_38]-?: T_38[K_33] extends infer T_41 ? T_41 extends T_38[K_33] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_34 in keyof T_37]-?: T_37[K_34] extends infer T_41 ? T_41 extends T_37[K_34] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_35 in keyof T_36]-?: T_36[K_35] extends infer T_41 ? T_41 extends T_36[K_35] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_36 in keyof T_35]-?: T_35[K_36] extends infer T_41 ? T_41 extends T_35[K_36] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_37 in keyof T_33]-?: T_33[K_37] extends infer T_41 ? T_41 extends T_33[K_37] ? T_41 extends CanBeExpanded<object, string> ? T_41["default"] : T_41 : never : never; } : T_33 : never : never; } : T_25 : never : never : T_23 extends (infer U)[] ? any[] : T_23 extends object ? { [K_31 in keyof T_23]-?: T_23[K_31] extends infer T_33 ? T_33 extends T_23[K_31] ? T_33 extends CanBeExpanded<object, string> ? T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_35 ? T_35 extends T_33[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_35 extends CanBeExpanded<object, string> ? T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_36 ? T_36 extends T_35[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_36 extends CanBeExpanded<object, string> ? T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_37 ? T_37 extends T_36[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_37 extends CanBeExpanded<object, string> ? T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_38 ? T_38 extends T_37[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_38 extends CanBeExpanded<object, string> ? T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_39 ? T_39 extends T_38[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_39 extends CanBeExpanded<object, string> ? T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_40 ? T_40 extends T_39[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_40 extends CanBeExpanded<object, string> ? T_40[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] extends infer T_41 ? T_41 extends T_40[PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> extends infer T_34 ? T_34 extends PrefixWith<PrefixWith<`${string & K_11}`, K_22, ".">, K_31, "."> ? T_34 extends SplitAC<K> ? "value" : "default" : never : never] ? T_41 extends CanBeExpanded<object, string> ? any : T_41 extends (infer U)[] ? any[] : T_41 extends object ? { [K_32 in keyof T_41]-?: T_41[K_32] extends infer T_42 ? T_42 extends T_41[K_32] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_41 : never : never : T_40 extends (infer U)[] ? any[] : T_40 extends object ? { [K_33 in keyof T_40]-?: T_40[K_33] extends infer T_42 ? T_42 extends T_40[K_33] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_40 : never : never : T_39 extends (infer U)[] ? any[] : T_39 extends object ? { [K_34 in keyof T_39]-?: T_39[K_34] extends infer T_42 ? T_42 extends T_39[K_34] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_39 : never : never : T_38 extends (infer U)[] ? any[] : T_38 extends object ? { [K_35 in keyof T_38]-?: T_38[K_35] extends infer T_42 ? T_42 extends T_38[K_35] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_38 : never : never : T_37 extends (infer U)[] ? any[] : T_37 extends object ? { [K_36 in keyof T_37]-?: T_37[K_36] extends infer T_42 ? T_42 extends T_37[K_36] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_37 : never : never : T_36 extends (infer U)[] ? any[] : T_36 extends object ? { [K_37 in keyof T_36]-?: T_36[K_37] extends infer T_42 ? T_42 extends T_36[K_37] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_36 : never : never : T_35 extends (infer U)[] ? any[] : T_35 extends object ? { [K_38 in keyof T_35]-?: T_35[K_38] extends infer T_42 ? T_42 extends T_35[K_38] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_35 : never : never : T_33 extends (infer U)[] ? any[] : T_33 extends object ? { [K_39 in keyof T_33]-?: T_33[K_39] extends infer T_42 ? T_42 extends T_33[K_39] ? T_42 extends CanBeExpanded<object, string> ? T_42["default"] : T_42 : never : never; } : T_33 : never : never; } : T_23 : never : never; } : T_12 : never : never; } : T


type UseQueryOptions3<T , K  > = Expand_<T, K> extends infer O ? O : never
>UseQueryOptions3 : UseQueryOptions3<T, K>
>                 : ^^^^^^^^^^^^^^^^^^^^^^

type ExpandResult<T,K> = Expand_<T, K> extends infer O ? O : never
>ExpandResult : ExpandResult<T, K>
>             : ^^^^^^^^^^^^^^^^^^

type UseQueryOptions4<T , K  > = ExpandResult<T,K>
>UseQueryOptions4 : UseQueryOptions4<T, K>
>                 : ^^^^^^^^^^^^^^^^^^^^^^


/**
 * but as you can see here, the expansion of Interface X it's still working.
 *
 * If a memory is still high, it may need some seconds to show popup.
 *
 */
let t: UseQueryOptions<X, 'role.user.role'>
>t : { id: string; name: string; user: string; role: { id: string; user: { id: string; role: { id: string; user: string; x: string; }; note: string; }; x: string; }; roles: string; }
>  : ^^^^^^      ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^^^      ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^

