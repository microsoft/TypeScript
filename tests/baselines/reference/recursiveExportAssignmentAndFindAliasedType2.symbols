//// [tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType2.ts] ////

=== recursiveExportAssignmentAndFindAliasedType2_moduleA.ts ===
/// <reference path="recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts"/>
import moduleC = require("moduleC");
>moduleC : Symbol(moduleC, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleA.ts, 0, 0))

import ClassB = require("recursiveExportAssignmentAndFindAliasedType2_moduleB");
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleA.ts, 1, 36))

export var b: ClassB; // This should result in type ClassB
>b : Symbol(b, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleA.ts, 3, 10))
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleA.ts, 1, 36))

=== recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts ===
declare module "moduleC" {
>"moduleC" : Symbol("moduleC", Decl(recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts, 0, 0))

    import self = require("moduleD");
>self : Symbol(self, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts, 0, 26))

    export = self;
>self : Symbol(self, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts, 0, 26))
}
declare module "moduleD" {
>"moduleD" : Symbol("moduleD", Decl(recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts, 3, 1))

    import self = require("moduleC");
>self : Symbol(self, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts, 4, 26))

    export = self;
>self : Symbol(self, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts, 4, 26))
}

=== recursiveExportAssignmentAndFindAliasedType2_moduleB.ts ===
class ClassB { }
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleB.ts, 0, 0))

export = ClassB;
>ClassB : Symbol(ClassB, Decl(recursiveExportAssignmentAndFindAliasedType2_moduleB.ts, 0, 0))

