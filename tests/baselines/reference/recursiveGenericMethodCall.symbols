//// [tests/cases/compiler/recursiveGenericMethodCall.ts] ////

=== recursiveGenericMethodCall.ts ===
interface Generator<T> { (): T; }
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --), Decl(recursiveGenericMethodCall.ts, 0, 0))
>T : Symbol(T, Decl(lib.es2015.generator.d.ts, --, --), Decl(recursiveGenericMethodCall.ts, 0, 20))
>T : Symbol(T, Decl(lib.es2015.generator.d.ts, --, --), Decl(recursiveGenericMethodCall.ts, 0, 20))

function Generate<T>(func: Generator<T>): T {
>Generate : Symbol(Generate, Decl(recursiveGenericMethodCall.ts, 0, 33))
>T : Symbol(T, Decl(recursiveGenericMethodCall.ts, 2, 18))
>func : Symbol(func, Decl(recursiveGenericMethodCall.ts, 2, 21))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --), Decl(recursiveGenericMethodCall.ts, 0, 0))
>T : Symbol(T, Decl(recursiveGenericMethodCall.ts, 2, 18))
>T : Symbol(T, Decl(recursiveGenericMethodCall.ts, 2, 18))

    return Generate(func);
>Generate : Symbol(Generate, Decl(recursiveGenericMethodCall.ts, 0, 33))
>func : Symbol(func, Decl(recursiveGenericMethodCall.ts, 2, 21))
}

