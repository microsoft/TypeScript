//// [tests/cases/conformance/types/intersection/recursiveIntersectionTypes.ts] ////

=== recursiveIntersectionTypes.ts ===
type LinkedList<T> = T & { next: LinkedList<T> };
>LinkedList : LinkedList<T>
>           : ^^^^^^^^^^^^^
>next : LinkedList<T>
>     : ^^^^^^^^^^^^^

interface Entity {
    name: string;
>name : string
>     : ^^^^^^
}

interface Product extends Entity {
    price: number;
>price : number
>      : ^^^^^^
}

var entityList: LinkedList<Entity>;
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^

var s = entityList.name;
>s : string
>  : ^^^^^^
>entityList.name : string
>                : ^^^^^^
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

var s = entityList.next.name;
>s : string
>  : ^^^^^^
>entityList.next.name : string
>                     : ^^^^^^
>entityList.next : LinkedList<Entity>
>                : ^^^^^^^^^^^^^^^^^^
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^
>next : LinkedList<Entity>
>     : ^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

var s = entityList.next.next.name;
>s : string
>  : ^^^^^^
>entityList.next.next.name : string
>                          : ^^^^^^
>entityList.next.next : LinkedList<Entity>
>                     : ^^^^^^^^^^^^^^^^^^
>entityList.next : LinkedList<Entity>
>                : ^^^^^^^^^^^^^^^^^^
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^
>next : LinkedList<Entity>
>     : ^^^^^^^^^^^^^^^^^^
>next : LinkedList<Entity>
>     : ^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

var s = entityList.next.next.next.name;
>s : string
>  : ^^^^^^
>entityList.next.next.next.name : string
>                               : ^^^^^^
>entityList.next.next.next : LinkedList<Entity>
>                          : ^^^^^^^^^^^^^^^^^^
>entityList.next.next : LinkedList<Entity>
>                     : ^^^^^^^^^^^^^^^^^^
>entityList.next : LinkedList<Entity>
>                : ^^^^^^^^^^^^^^^^^^
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^
>next : LinkedList<Entity>
>     : ^^^^^^^^^^^^^^^^^^
>next : LinkedList<Entity>
>     : ^^^^^^^^^^^^^^^^^^
>next : LinkedList<Entity>
>     : ^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

var productList: LinkedList<Product>;
>productList : LinkedList<Product>
>            : ^^^^^^^^^^^^^^^^^^^

entityList = productList;
>entityList = productList : LinkedList<Product>
>                         : ^^^^^^^^^^^^^^^^^^^
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^
>productList : LinkedList<Product>
>            : ^^^^^^^^^^^^^^^^^^^

productList = entityList;  // Error
>productList = entityList : LinkedList<Entity>
>                         : ^^^^^^^^^^^^^^^^^^
>productList : LinkedList<Product>
>            : ^^^^^^^^^^^^^^^^^^^
>entityList : LinkedList<Entity>
>           : ^^^^^^^^^^^^^^^^^^

