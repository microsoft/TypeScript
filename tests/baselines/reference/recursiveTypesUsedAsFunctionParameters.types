//// [tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypesUsedAsFunctionParameters.ts] ////

=== recursiveTypesUsedAsFunctionParameters.ts ===
class List<T> {
>List : List<T>
>     : ^^^^^^^

    data: T;
>data : T
>     : ^

    next: List<List<T>>;
>next : List<List<T>>
>     : ^^^^^^^^^^^^^
}

class MyList<T> {
>MyList : MyList<T>
>       : ^^^^^^^^^

    data: T;
>data : T
>     : ^

    next: MyList<MyList<T>>;
>next : MyList<MyList<T>>
>     : ^^^^^^^^^^^^^^^^^
}

function foo<T>(x: List<T>);
>foo : { <T>(x: List<T>): any; <U>(x: List<U>): any; }
>    : ^^^ ^^ ^^       ^^^^^^^^^ ^^ ^^       ^^^^^^^^^
>x : List<T>
>  : ^^^^^^^

function foo<U>(x: List<U>); // error, duplicate
>foo : { <T>(x: List<T>): any; <U>(x: List<U>): any; }
>    : ^^^ ^^ ^^       ^^^^^^^^^ ^^ ^^       ^^^^^^^^^
>x : List<U>
>  : ^^^^^^^

function foo<T>(x: List<T>) {
>foo : { <T_1>(x: List<T_1>): any; <U>(x: List<U>): any; }
>    : ^^^^^^^^ ^^         ^^^^^^^^^ ^^ ^^       ^^^^^^^^^
>x : List<T>
>  : ^^^^^^^
}

function foo2<T>(x: List<T>);
>foo2 : { <T>(x: List<T>): any; <U>(x: MyList<U>): any; }
>     : ^^^ ^^ ^^       ^^^^^^^^^ ^^ ^^         ^^^^^^^^^
>x : List<T>
>  : ^^^^^^^

function foo2<U>(x: MyList<U>); // ok, nominally compared with first overload
>foo2 : { <T>(x: List<T>): any; <U>(x: MyList<U>): any; }
>     : ^^^ ^^ ^^       ^^^^^^^^^ ^^ ^^         ^^^^^^^^^
>x : MyList<U>
>  : ^^^^^^^^^

function foo2<T>(x: any) {
>foo2 : { <T_1>(x: List<T_1>): any; <U>(x: MyList<U>): any; }
>     : ^^^^^^^^ ^^         ^^^^^^^^^ ^^ ^^         ^^^^^^^^^
>x : any
}

function other<T extends List<U>, U>() {
>other : <T extends List<U>, U>() => void
>      : ^ ^^^^^^^^^       ^^ ^^^^^^^^^^^

    // error but wrong error
    // BUG 838247
    function foo3<V>(x: T);
>foo3 : <V>(x: T) => any
>     : ^ ^^ ^^ ^^^^^^^^
>x : T
>  : ^

    function foo3<V>(x: MyList<V>) { }
>foo3 : <V_1>(x: T) => any
>     : ^^^^^^ ^^ ^^^^^^^^
>x : MyList<V>
>  : ^^^^^^^^^

    // should be error
    // BUG 838247
    function foo4<V>(x: T);
>foo4 : <V>(x: T) => any
>     : ^ ^^ ^^ ^^^^^^^^
>x : T
>  : ^

    function foo4<V>(x: List<V>) { }
>foo4 : <V_1>(x: T) => any
>     : ^^^^^^ ^^ ^^^^^^^^
>x : List<V>
>  : ^^^^^^^

    // ok
    function foo5<V>(x: T): string;
>foo5 : { <V>(x: T): string; <V_1>(x: List<V_1>): number; <V_1>(x: MyList<V_1>): boolean; }
>     : ^^^ ^^ ^^ ^^^      ^^^^^^^^ ^^         ^^^      ^^^^^^^^ ^^           ^^^       ^^^
>x : T
>  : ^

    function foo5<V>(x: List<V>): number;
>foo5 : { <V_1>(x: T): string; <V>(x: List<V>): number; <V_1>(x: MyList<V_1>): boolean; }
>     : ^^^^^^^^ ^^ ^^^      ^^^ ^^ ^^       ^^^      ^^^^^^^^ ^^           ^^^       ^^^
>x : List<V>
>  : ^^^^^^^

    function foo5<V>(x: MyList<V>): boolean;
>foo5 : { <V_1>(x: T): string; <V_1>(x: List<V_1>): number; <V>(x: MyList<V>): boolean; }
>     : ^^^^^^^^ ^^ ^^^      ^^^^^^^^ ^^         ^^^      ^^^ ^^ ^^         ^^^       ^^^
>x : MyList<V>
>  : ^^^^^^^^^

    function foo5<V>(x: any): any { return null; }
>foo5 : { <V_1>(x: T): string; <V_1>(x: List<V_1>): number; <V_1>(x: MyList<V_1>): boolean; }
>     : ^^^^^^^^ ^^ ^^^      ^^^^^^^^ ^^         ^^^      ^^^^^^^^ ^^           ^^^       ^^^
>x : any

    var list: List<string>;
>list : List<string>
>     : ^^^^^^^^^^^^

    var myList: MyList<string>;
>myList : MyList<string>
>       : ^^^^^^^^^^^^^^

    var r = foo5(list);
>r : number
>  : ^^^^^^
>foo5(list) : number
>           : ^^^^^^
>foo5 : { <V>(x: T): string; <V>(x: List<V>): number; <V>(x: MyList<V>): boolean; }
>     : ^^^ ^^ ^^ ^^^      ^^^ ^^ ^^       ^^^      ^^^ ^^ ^^         ^^^       ^^^
>list : List<string>
>     : ^^^^^^^^^^^^

    var r2 = foo5(myList);
>r2 : number
>   : ^^^^^^
>foo5(myList) : number
>             : ^^^^^^
>foo5 : { <V>(x: T): string; <V>(x: List<V>): number; <V>(x: MyList<V>): boolean; }
>     : ^^^ ^^ ^^ ^^^      ^^^ ^^ ^^       ^^^      ^^^ ^^ ^^         ^^^       ^^^
>myList : MyList<string>
>       : ^^^^^^^^^^^^^^
}
