// === findAllReferences ===
// === /tests/cases/fourslash/referenceToClass_1.ts ===
// <|class /*FIND ALL REFS*/[|{| isWriteAccess: true, isDefinition: true |}foo|] {
//     public n: [|foo|];
//     public foo: number;
// }|>
// 
// class bar {
//     public n: [|foo|];
//     public k = new [|foo|]();
// }
// 
// namespace mod {
//     var k: [|foo|] = null;
// }

// === /tests/cases/fourslash/referenceToClass_2.ts ===
// var k: [|foo|];

  // === Definitions ===
  // === /tests/cases/fourslash/referenceToClass_1.ts ===
  // <|class /*FIND ALL REFS*/[|foo|] {
  //     public n: foo;
  //     public foo: number;
  // }|>
  // 
  // class bar {
  //     public n: foo;
  // --- (line: 8) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referenceToClass_1.ts ===
// <|class [|{| isWriteAccess: true |}foo|] {
//     public n: /*FIND ALL REFS*/[|foo|];
//     public foo: number;
// }|>
// 
// class bar {
//     public n: [|foo|];
//     public k = new [|foo|]();
// }
// 
// namespace mod {
//     var k: [|foo|] = null;
// }

// === /tests/cases/fourslash/referenceToClass_2.ts ===
// var k: [|foo|];

  // === Definitions ===
  // === /tests/cases/fourslash/referenceToClass_1.ts ===
  // <|class [|foo|] {
  //     public n: /*FIND ALL REFS*/foo;
  //     public foo: number;
  // }|>
  // 
  // class bar {
  //     public n: foo;
  // --- (line: 8) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referenceToClass_1.ts ===
// <|class [|{| isWriteAccess: true |}foo|] {
//     public n: [|foo|];
//     public foo: number;
// }|>
// 
// class bar {
//     public n: /*FIND ALL REFS*/[|foo|];
//     public k = new [|foo|]();
// }
// 
// namespace mod {
//     var k: [|foo|] = null;
// }

// === /tests/cases/fourslash/referenceToClass_2.ts ===
// var k: [|foo|];

  // === Definitions ===
  // === /tests/cases/fourslash/referenceToClass_1.ts ===
  // <|class [|foo|] {
  //     public n: foo;
  //     public foo: number;
  // }|>
  // 
  // class bar {
  //     public n: /*FIND ALL REFS*/foo;
  //     public k = new foo();
  // }
  // 
  // --- (line: 11) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referenceToClass_1.ts ===
// <|class [|{| isWriteAccess: true |}foo|] {
//     public n: [|foo|];
//     public foo: number;
// }|>
// 
// class bar {
//     public n: [|foo|];
//     public k = new /*FIND ALL REFS*/[|foo|]();
// }
// 
// namespace mod {
//     var k: [|foo|] = null;
// }

// === /tests/cases/fourslash/referenceToClass_2.ts ===
// var k: [|foo|];

  // === Definitions ===
  // === /tests/cases/fourslash/referenceToClass_1.ts ===
  // <|class [|foo|] {
  //     public n: foo;
  //     public foo: number;
  // }|>
  // 
  // class bar {
  //     public n: foo;
  //     public k = new /*FIND ALL REFS*/foo();
  // }
  // 
  // namespace mod {
  //     var k: foo = null;
  // }

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referenceToClass_1.ts ===
// <|class [|{| isWriteAccess: true |}foo|] {
//     public n: [|foo|];
//     public foo: number;
// }|>
// 
// class bar {
//     public n: [|foo|];
//     public k = new [|foo|]();
// }
// 
// namespace mod {
//     var k: /*FIND ALL REFS*/[|foo|] = null;
// }

// === /tests/cases/fourslash/referenceToClass_2.ts ===
// var k: [|foo|];

  // === Definitions ===
  // === /tests/cases/fourslash/referenceToClass_1.ts ===
  // <|class [|foo|] {
  //     public n: foo;
  //     public foo: number;
  // }|>
  // 
  // class bar {
  //     public n: foo;
  //     public k = new foo();
  // }
  // 
  // namespace mod {
  //     var k: /*FIND ALL REFS*/foo = null;
  // }

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referenceToClass_1.ts ===
// <|class [|{| isWriteAccess: true |}foo|] {
//     public n: [|foo|];
//     public foo: number;
// }|>
// 
// class bar {
//     public n: [|foo|];
//     public k = new [|foo|]();
// }
// 
// namespace mod {
//     var k: [|foo|] = null;
// }

// === /tests/cases/fourslash/referenceToClass_2.ts ===
// var k: /*FIND ALL REFS*/[|foo|];

  // === Definitions ===
  // === /tests/cases/fourslash/referenceToClass_1.ts ===
  // <|class [|foo|] {
  //     public n: foo;
  //     public foo: number;
  // }|>
  // 
  // class bar {
  //     public n: foo;
  // --- (line: 8) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class foo",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "foo",
      "kind": "className"
     }
    ]
   }
  ]