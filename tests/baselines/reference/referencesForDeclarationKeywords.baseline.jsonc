// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// /*FIND ALL REFS*/<|class [|{| isWriteAccess: true, isDefinition: true |}C1|] extends Base implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }|>
// interface I1 extends Base { }
// type T = { }
// enum E { }
// --- (line: 10) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // /*FIND ALL REFS*/<|class [|C1|] extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }|>
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // --- (line: 10) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class C1",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// <|class [|{| isWriteAccess: true |}Base|] {}|>
// interface Implemented1 {}
// class C1 /*FIND ALL REFS*/extends [|Base|] implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 extends [|Base|] { }
// type T = { }
// enum E { }
// namespace N { }
// --- (line: 11) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // <|class [|Base|] {}|>
  // interface Implemented1 {}
  // class C1 /*FIND ALL REFS*/extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class Base",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Base",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// class Base {}
// <|interface [|{| isWriteAccess: true |}Implemented1|] {}|>
// class C1 extends Base /*FIND ALL REFS*/implements [|Implemented1|] {
//     get e() { return 1; }
//     set e(v) {}
// }
// --- (line: 7) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // class Base {}
  // <|interface [|Implemented1|] {}|>
  // class C1 extends Base /*FIND ALL REFS*/implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // --- (line: 7) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "interface",
    "name": "interface Implemented1",
    "displayParts": [
     {
      "text": "interface",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Implemented1",
      "kind": "interfaceName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 14) skipped ---
// const z = 1;
// interface Implemented2 {}
// interface Implemented3 {}
// class C2 /*FIND ALL REFS*/implements Implemented2, Implemented3 {}
// interface I2 extends Implemented2, Implemented3 {}



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     /*FIND ALL REFS*/<|get [|{| isWriteAccess: true, isDefinition: true |}e|]() { return 1; }|>
//     <|set [|{| isWriteAccess: true, isDefinition: true |}e|](v) {}|>
// }
// interface I1 extends Base { }
// type T = { }
// --- (line: 9) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     /*FIND ALL REFS*/<|get [|e|]() { return 1; }|>
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // --- (line: 8) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.e: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "e",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// class Base {}
// interface Implemented1 {}
// class C1 extends Base implements Implemented1 {
//     <|get [|{| isWriteAccess: true, isDefinition: true |}e|]() { return 1; }|>
//     /*FIND ALL REFS*/<|set [|{| isWriteAccess: true, isDefinition: true |}e|](v) {}|>
// }
// interface I1 extends Base { }
// type T = { }
// --- (line: 9) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // class Base {}
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     <|get [|e|]() { return 1; }|>
  //     /*FIND ALL REFS*/set e(v) {}
  // }
  // interface I1 extends Base { }
  // type T = { }
  // --- (line: 9) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "property",
    "name": "(property) C1.e: number",
    "displayParts": [
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": "property",
      "kind": "text"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "C1",
      "kind": "className"
     },
     {
      "text": ".",
      "kind": "punctuation"
     },
     {
      "text": "e",
      "kind": "propertyName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "number",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 3) skipped ---
//     get e() { return 1; }
//     set e(v) {}
// }
// /*FIND ALL REFS*/<|interface [|{| isWriteAccess: true, isDefinition: true |}I1|] extends Base { }|>
// type T = { }
// enum E { }
// namespace N { }
// --- (line: 11) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 3) skipped ---
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // /*FIND ALL REFS*/<|interface [|I1|] extends Base { }|>
  // type T = { }
  // enum E { }
  // namespace N { }
  // --- (line: 11) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "interface",
    "name": "interface I1",
    "displayParts": [
     {
      "text": "interface",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "I1",
      "kind": "interfaceName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// <|class [|{| isWriteAccess: true |}Base|] {}|>
// interface Implemented1 {}
// class C1 extends [|Base|] implements Implemented1 {
//     get e() { return 1; }
//     set e(v) {}
// }
// interface I1 /*FIND ALL REFS*/extends [|Base|] { }
// type T = { }
// enum E { }
// namespace N { }
// --- (line: 11) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // <|class [|Base|] {}|>
  // interface Implemented1 {}
  // class C1 extends Base implements Implemented1 {
  //     get e() { return 1; }
  //     set e(v) {}
  // }
  // interface I1 /*FIND ALL REFS*/extends Base { }
  // type T = { }
  // enum E { }
  // namespace N { }
  // --- (line: 11) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "class",
    "name": "class Base",
    "displayParts": [
     {
      "text": "class",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "Base",
      "kind": "className"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 15) skipped ---
// interface Implemented2 {}
// interface Implemented3 {}
// class C2 implements Implemented2, Implemented3 {}
// interface I2 /*FIND ALL REFS*/extends Implemented2, Implemented3 {}



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 4) skipped ---
//     set e(v) {}
// }
// interface I1 extends Base { }
// /*FIND ALL REFS*/<|type [|{| isWriteAccess: true, isDefinition: true |}T|] = { }|>
// enum E { }
// namespace N { }
// namespace M { }
// --- (line: 12) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 4) skipped ---
  //     set e(v) {}
  // }
  // interface I1 extends Base { }
  // /*FIND ALL REFS*/<|type [|T|] = { }|>
  // enum E { }
  // namespace N { }
  // namespace M { }
  // --- (line: 12) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "type",
    "name": "type T = {}",
    "displayParts": [
     {
      "text": "type",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "T",
      "kind": "aliasName"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "=",
      "kind": "operator"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "{",
      "kind": "punctuation"
     },
     {
      "text": "}",
      "kind": "punctuation"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 5) skipped ---
// }
// interface I1 extends Base { }
// type T = { }
// /*FIND ALL REFS*/<|enum [|{| isWriteAccess: true, isDefinition: true |}E|] { }|>
// namespace N { }
// namespace M { }
// function fn() {}
// --- (line: 13) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 5) skipped ---
  // }
  // interface I1 extends Base { }
  // type T = { }
  // /*FIND ALL REFS*/<|enum [|E|] { }|>
  // namespace N { }
  // namespace M { }
  // function fn() {}
  // --- (line: 13) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "enum",
    "name": "enum E",
    "displayParts": [
     {
      "text": "enum",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "E",
      "kind": "enumName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 6) skipped ---
// interface I1 extends Base { }
// type T = { }
// enum E { }
// /*FIND ALL REFS*/<|namespace [|{| isWriteAccess: true, isDefinition: true |}N|] { }|>
// namespace M { }
// function fn() {}
// var x;
// --- (line: 14) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 6) skipped ---
  // interface I1 extends Base { }
  // type T = { }
  // enum E { }
  // /*FIND ALL REFS*/<|namespace [|N|] { }|>
  // namespace M { }
  // function fn() {}
  // var x;
  // --- (line: 14) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "module",
    "name": "namespace N",
    "displayParts": [
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "N",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 7) skipped ---
// type T = { }
// enum E { }
// namespace N { }
// /*FIND ALL REFS*/<|namespace [|{| isWriteAccess: true, isDefinition: true |}M|] { }|>
// function fn() {}
// var x;
// let y;
// --- (line: 15) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 7) skipped ---
  // type T = { }
  // enum E { }
  // namespace N { }
  // /*FIND ALL REFS*/<|namespace [|M|] { }|>
  // function fn() {}
  // var x;
  // let y;
  // --- (line: 15) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "module",
    "name": "namespace M",
    "displayParts": [
     {
      "text": "namespace",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "M",
      "kind": "moduleName"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 8) skipped ---
// enum E { }
// namespace N { }
// namespace M { }
// /*FIND ALL REFS*/<|function [|{| isWriteAccess: true, isDefinition: true |}fn|]() {}|>
// var x;
// let y;
// const z = 1;
// --- (line: 16) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 8) skipped ---
  // enum E { }
  // namespace N { }
  // namespace M { }
  // /*FIND ALL REFS*/<|function [|fn|]() {}|>
  // var x;
  // let y;
  // const z = 1;
  // --- (line: 16) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "function",
    "name": "function fn(): void",
    "displayParts": [
     {
      "text": "function",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "fn",
      "kind": "functionName"
     },
     {
      "text": "(",
      "kind": "punctuation"
     },
     {
      "text": ")",
      "kind": "punctuation"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "void",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 9) skipped ---
// namespace N { }
// namespace M { }
// function fn() {}
// /*FIND ALL REFS*/<|var [|{| isDefinition: true |}x|];|>
// let y;
// const z = 1;
// interface Implemented2 {}
// --- (line: 17) skipped ---

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 9) skipped ---
  // namespace N { }
  // namespace M { }
  // function fn() {}
  // /*FIND ALL REFS*/<|var [|x|];|>
  // let y;
  // const z = 1;
  // interface Implemented2 {}
  // --- (line: 17) skipped ---

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "var",
    "name": "var x: any",
    "displayParts": [
     {
      "text": "var",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "x",
      "kind": "localName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 10) skipped ---
// namespace M { }
// function fn() {}
// var x;
// /*FIND ALL REFS*/<|let [|{| isDefinition: true |}y|];|>
// const z = 1;
// interface Implemented2 {}
// interface Implemented3 {}
// class C2 implements Implemented2, Implemented3 {}
// interface I2 extends Implemented2, Implemented3 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 10) skipped ---
  // namespace M { }
  // function fn() {}
  // var x;
  // /*FIND ALL REFS*/<|let [|y|];|>
  // const z = 1;
  // interface Implemented2 {}
  // interface Implemented3 {}
  // class C2 implements Implemented2, Implemented3 {}
  // interface I2 extends Implemented2, Implemented3 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "let",
    "name": "let y: any",
    "displayParts": [
     {
      "text": "let",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "y",
      "kind": "localName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "any",
      "kind": "keyword"
     }
    ]
   }
  ]



// === findAllReferences ===
// === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
// --- (line: 11) skipped ---
// function fn() {}
// var x;
// let y;
// /*FIND ALL REFS*/<|const [|{| isWriteAccess: true, isDefinition: true |}z|] = 1;|>
// interface Implemented2 {}
// interface Implemented3 {}
// class C2 implements Implemented2, Implemented3 {}
// interface I2 extends Implemented2, Implemented3 {}

  // === Definitions ===
  // === /tests/cases/fourslash/referencesForDeclarationKeywords.ts ===
  // --- (line: 11) skipped ---
  // function fn() {}
  // var x;
  // let y;
  // /*FIND ALL REFS*/<|const [|z|] = 1;|>
  // interface Implemented2 {}
  // interface Implemented3 {}
  // class C2 implements Implemented2, Implemented3 {}
  // interface I2 extends Implemented2, Implemented3 {}

  // === Details ===
  [
   {
    "containerKind": "",
    "containerName": "",
    "kind": "const",
    "name": "const z: 1",
    "displayParts": [
     {
      "text": "const",
      "kind": "keyword"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "z",
      "kind": "localName"
     },
     {
      "text": ":",
      "kind": "punctuation"
     },
     {
      "text": " ",
      "kind": "space"
     },
     {
      "text": "1",
      "kind": "stringLiteral"
     }
    ]
   }
  ]