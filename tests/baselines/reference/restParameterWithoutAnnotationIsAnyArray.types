//// [tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts] ////

=== restParameterWithoutAnnotationIsAnyArray.ts ===
// Rest parameters without type annotations are 'any', errors only for the functions with 2 rest params

function foo(...x) { }
>foo : (...x: any[]) => void
>    : ^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^

var f = function foo(...x) { }
>f : (...x: any[]) => void
>  : ^^^^ ^^^^^^^^^^^^^^^^
>function foo(...x) { } : (...x: any[]) => void
>                       : ^^^^ ^^^^^^^^^^^^^^^^
>foo : (...x: any[]) => void
>    : ^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^

var f2 = (...x, ...y) => { }
>f2 : (...x: any[], ...y: any[]) => void
>   : ^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>(...x, ...y) => { } : (...x: any[], ...y: any[]) => void
>                    : ^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^
>y : any[]
>  : ^^^^^

class C {
>C : C
>  : ^

    foo(...x) { }
>foo : (...x: any[]) => void
>    : ^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^
}

interface I {
    (...x);
>x : any[]
>  : ^^^^^

    foo(...x, ...y);
>foo : (...x: any[], ...y: any[]) => any
>    : ^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^
>y : any[]
>  : ^^^^^
}

var a: {
>a : { (...x: any[]): any; foo(...x: any[]): any; }
>  : ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^

    (...x);
>x : any[]
>  : ^^^^^

    foo(...x);
>foo : (...x: any[]) => any
>    : ^^^^ ^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^
}

var b = {
>b : { foo(...x: any[]): void; a: (...x: any[], ...y: any[]) => void; b: (...x: any[]) => void; }
>  : ^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^
>{    foo(...x) { },    a: function foo(...x, ...y) { },    b: (...x) => { }} : { foo(...x: any[]): void; a: (...x: any[], ...y: any[]) => void; b: (...x: any[]) => void; }
>                                                                             : ^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^

    foo(...x) { },
>foo : (...x: any[]) => void
>    : ^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^

    a: function foo(...x, ...y) { },
>a : (...x: any[], ...y: any[]) => void
>  : ^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>function foo(...x, ...y) { } : (...x: any[], ...y: any[]) => void
>                             : ^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>foo : (...x: any[], ...y: any[]) => void
>    : ^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^
>y : any[]
>  : ^^^^^

    b: (...x) => { }
>b : (...x: any[]) => void
>  : ^^^^ ^^^^^^^^^^^^^^^^
>(...x) => { } : (...x: any[]) => void
>              : ^^^^ ^^^^^^^^^^^^^^^^
>x : any[]
>  : ^^^^^
}

