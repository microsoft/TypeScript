//// [tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts] ////

=== restParametersWithArrayTypeAnnotations.ts ===
// Rest parameters must be an array type if they have a type annotation, errors only for the functions with 2 rest params

function foo(...x: number[]) { }
>foo : (...x: number[]) => void
>    : ^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^

var f = function foo(...x: number[]) { }
>f : (...x: number[]) => void
>  : ^^^^ ^^        ^^^^^^^^^
>function foo(...x: number[]) { } : (...x: number[]) => void
>                                 : ^^^^ ^^        ^^^^^^^^^
>foo : (...x: number[]) => void
>    : ^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^

var f2 = (...x: number[], ...y: number[]) => { }
>f2 : (...x: number[], ...y: number[]) => void
>   : ^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^
>(...x: number[], ...y: number[]) => { } : (...x: number[], ...y: number[]) => void
>                                        : ^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^
>y : number[]
>  : ^^^^^^^^

class C {
>C : C
>  : ^

    foo(...x: number[]) { }
>foo : (...x: number[]) => void
>    : ^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^
}

interface I {
    (...x: number[]);
>x : number[]
>  : ^^^^^^^^

    foo(...x: number[], ...y: number[]);
>foo : (...x: number[], ...y: number[]) => any
>    : ^^^^ ^^        ^^^^^ ^^        ^^^^^^^^
>x : number[]
>  : ^^^^^^^^
>y : number[]
>  : ^^^^^^^^
}

var a: {
>a : { (...x: number[]): any; foo(...x: number[]): any; }
>  : ^^^^^^ ^^        ^^^^^^^^^^^^^^^ ^^        ^^^^^^^^^

    (...x: number[]);
>x : number[]
>  : ^^^^^^^^

    foo(...x: number[]);
>foo : (...x: number[]) => any
>    : ^^^^ ^^        ^^^^^^^^
>x : number[]
>  : ^^^^^^^^
}

var b = {
>b : { foo(...x: number[]): void; a: (...x: number[], ...y: number[]) => void; b: (...x: number[]) => void; }
>  : ^^^^^^^^^ ^^        ^^^^^^^^^^^^^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^^^^^^^^^^ ^^        ^^^^^^^^^^^^
>{    foo(...x: number[]) { },    a: function foo(...x: number[], ...y: number[]) { },    b: (...x: number[]) => { }} : { foo(...x: number[]): void; a: (...x: number[], ...y: number[]) => void; b: (...x: number[]) => void; }
>                                                                                                                     : ^^^^^^^^^ ^^        ^^^^^^^^^^^^^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^^^^^^^^^^ ^^        ^^^^^^^^^^^^

    foo(...x: number[]) { },
>foo : (...x: number[]) => void
>    : ^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^

    a: function foo(...x: number[], ...y: number[]) { },
>a : (...x: number[], ...y: number[]) => void
>  : ^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^
>function foo(...x: number[], ...y: number[]) { } : (...x: number[], ...y: number[]) => void
>                                                 : ^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^
>foo : (...x: number[], ...y: number[]) => void
>    : ^^^^ ^^        ^^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^
>y : number[]
>  : ^^^^^^^^

    b: (...x: number[]) => { }
>b : (...x: number[]) => void
>  : ^^^^ ^^        ^^^^^^^^^
>(...x: number[]) => { } : (...x: number[]) => void
>                        : ^^^^ ^^        ^^^^^^^^^
>x : number[]
>  : ^^^^^^^^
}




function foo2(...x: Array<string>) { }
>foo2 : (...x: Array<string>) => void
>     : ^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^

var f3 = function foo(...x: Array<string>) { }
>f3 : (...x: Array<string>) => void
>   : ^^^^ ^^             ^^^^^^^^^
>function foo(...x: Array<string>) { } : (...x: Array<string>) => void
>                                      : ^^^^ ^^             ^^^^^^^^^
>foo : (...x: Array<string>) => void
>    : ^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^

var f4 = (...x: Array<string>, ...y: Array<string>) => { }
>f4 : (...x: Array<string>, ...y: Array<string>) => void
>   : ^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^
>(...x: Array<string>, ...y: Array<string>) => { } : (...x: Array<string>, ...y: Array<string>) => void
>                                                  : ^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^
>y : string[]
>  : ^^^^^^^^

class C2 {
>C2 : C2
>   : ^^

    foo(...x: Array<string>) { }
>foo : (...x: Array<string>) => void
>    : ^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^
}

interface I2 {
    (...x: Array<string>);
>x : string[]
>  : ^^^^^^^^

    foo(...x: Array<string>, ...y: Array<string>);
>foo : (...x: Array<string>, ...y: Array<string>) => any
>    : ^^^^ ^^             ^^^^^ ^^             ^^^^^^^^
>x : string[]
>  : ^^^^^^^^
>y : string[]
>  : ^^^^^^^^
}

var a2: {
>a2 : { (...x: Array<string>): any; foo(...x: Array<string>): any; }
>   : ^^^^^^ ^^             ^^^^^^^^^^^^^^^ ^^             ^^^^^^^^^

    (...x: Array<string>);
>x : string[]
>  : ^^^^^^^^

    foo(...x: Array<string>);
>foo : (...x: Array<string>) => any
>    : ^^^^ ^^             ^^^^^^^^
>x : string[]
>  : ^^^^^^^^
}

var b2 = {
>b2 : { foo(...x: Array<string>): void; a: (...x: Array<string>, ...y: Array<string>) => void; b: (...x: Array<string>) => void; }
>   : ^^^^^^^^^ ^^             ^^^^^^^^^^^^^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^^^^^^^^^^ ^^             ^^^^^^^^^^^^
>{    foo(...x: Array<string>) { },    a: function foo(...x: Array<string>, ...y: Array<string>) { },    b: (...x: Array<string>) => { }} : { foo(...x: Array<string>): void; a: (...x: Array<string>, ...y: Array<string>) => void; b: (...x: Array<string>) => void; }
>                                                                                                                                         : ^^^^^^^^^ ^^             ^^^^^^^^^^^^^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^^^^^^^^^^ ^^             ^^^^^^^^^^^^

    foo(...x: Array<string>) { },
>foo : (...x: Array<string>) => void
>    : ^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^

    a: function foo(...x: Array<string>, ...y: Array<string>) { },
>a : (...x: Array<string>, ...y: Array<string>) => void
>  : ^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^
>function foo(...x: Array<string>, ...y: Array<string>) { } : (...x: Array<string>, ...y: Array<string>) => void
>                                                           : ^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^
>foo : (...x: Array<string>, ...y: Array<string>) => void
>    : ^^^^ ^^             ^^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^
>y : string[]
>  : ^^^^^^^^

    b: (...x: Array<string>) => { }
>b : (...x: Array<string>) => void
>  : ^^^^ ^^             ^^^^^^^^^
>(...x: Array<string>) => { } : (...x: Array<string>) => void
>                             : ^^^^ ^^             ^^^^^^^^^
>x : string[]
>  : ^^^^^^^^
}
