//// [tests/cases/conformance/es6/destructuring/restPropertyWithBindingPattern.ts] ////

=== restPropertyWithBindingPattern.ts ===
({...{}} = {});
>({...{}} = {}) : {}
>               : ^^
>{...{}} = {} : {}
>             : ^^
>{...{}} : {}
>        : ^^
>{} : {}
>   : ^^
>{} : {}
>   : ^^

({...({})} = {});
>({...({})} = {}) : {}
>                 : ^^
>{...({})} = {} : {}
>               : ^^
>{...({})} : {}
>          : ^^
>({}) : {}
>     : ^^
>{} : {}
>   : ^^
>{} : {}
>   : ^^

({...[]} = {});
>({...[]} = {}) : {}
>               : ^^
>{...[]} = {} : {}
>             : ^^
>{...[]} : { [n: number]: never; length: 0; toString(): string; toLocaleString(): string; toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; pop(): never; push(...items: never[]): number; concat(...items: ConcatArray<never>[]): never[]; concat(...items: ConcatArray<never>[]): never[]; join(separator?: string): string; reverse(): never[]; shift(): never; slice(start?: number, end?: number): never[]; sort(compareFn?: (a: never, b: never) => number): []; splice(start: number, deleteCount?: number): never[]; splice(start: number, deleteCount: number, ...items: never[]): never[]; unshift(...items: never[]): number; indexOf(searchElement: never, fromIndex?: number): number; lastIndexOf(searchElement: never, fromIndex?: number): number; every<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; some(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[]; filter<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[]; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduce<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduceRight<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; find<S extends never>(predicate: (value: never, index: number, obj: never[]) => value is S, thisArg?: any): S; find(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): never; findIndex(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): number; fill(value: never, start?: number, end?: number): []; copyWithin(target: number, start: number, end?: number): []; entries(): ArrayIterator<[number, never]>; keys(): ArrayIterator<number>; values(): ArrayIterator<never>; includes(searchElement: never, fromIndex?: number): boolean; flatMap<U, This = undefined>(callback: (this: This, value: never, index: number, array: never[]) => U | readonly U[], thisArg?: This): U[]; flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[]; at(index: number): never; findLast<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S; findLast(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never; findLastIndex(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): number; toReversed(): never[]; toSorted(compareFn?: (a: never, b: never) => number): never[]; toSpliced(start: number, deleteCount: number, ...items: never[]): never[]; toSpliced(start: number, deleteCount?: number): never[]; with(index: number, value: never): never[]; [Symbol.iterator](): ArrayIterator<never>; [Symbol.unscopables]: { [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; splice?: boolean; unshift?: boolean; indexOf?: boolean; lastIndexOf?: boolean; every?: boolean; some?: boolean; forEach?: boolean; map?: boolean; filter?: boolean; reduce?: boolean; reduceRight?: boolean; find?: boolean; findIndex?: boolean; fill?: boolean; copyWithin?: boolean; entries?: boolean; keys?: boolean; values?: boolean; includes?: boolean; flatMap?: boolean; flat?: boolean; at?: boolean; findLast?: boolean; findLastIndex?: boolean; toReversed?: boolean; toSorted?: boolean; toSpliced?: boolean; with?: boolean; [Symbol.iterator]?: boolean; readonly [Symbol.unscopables]?: boolean; }; }

>[] : []
>   : ^^
>{} : {}
>   : ^^

({...([])} = {});
>({...([])} = {}) : {}
>                 : ^^
>{...([])} = {} : {}
>               : ^^
>{...([])} : { [n: number]: never; length: 0; toString(): string; toLocaleString(): string; toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; pop(): never; push(...items: never[]): number; concat(...items: ConcatArray<never>[]): never[]; concat(...items: ConcatArray<never>[]): never[]; join(separator?: string): string; reverse(): never[]; shift(): never; slice(start?: number, end?: number): never[]; sort(compareFn?: (a: never, b: never) => number): []; splice(start: number, deleteCount?: number): never[]; splice(start: number, deleteCount: number, ...items: never[]): never[]; unshift(...items: never[]): number; indexOf(searchElement: never, fromIndex?: number): number; lastIndexOf(searchElement: never, fromIndex?: number): number; every<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; some(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[]; filter<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[]; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduce<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduceRight<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; find<S extends never>(predicate: (value: never, index: number, obj: never[]) => value is S, thisArg?: any): S; find(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): never; findIndex(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): number; fill(value: never, start?: number, end?: number): []; copyWithin(target: number, start: number, end?: number): []; entries(): ArrayIterator<[number, never]>; keys(): ArrayIterator<number>; values(): ArrayIterator<never>; includes(searchElement: never, fromIndex?: number): boolean; flatMap<U, This = undefined>(callback: (this: This, value: never, index: number, array: never[]) => U | readonly U[], thisArg?: This): U[]; flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[]; at(index: number): never; findLast<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S; findLast(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never; findLastIndex(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): number; toReversed(): never[]; toSorted(compareFn?: (a: never, b: never) => number): never[]; toSpliced(start: number, deleteCount: number, ...items: never[]): never[]; toSpliced(start: number, deleteCount?: number): never[]; with(index: number, value: never): never[]; [Symbol.iterator](): ArrayIterator<never>; [Symbol.unscopables]: { [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; splice?: boolean; unshift?: boolean; indexOf?: boolean; lastIndexOf?: boolean; every?: boolean; some?: boolean; forEach?: boolean; map?: boolean; filter?: boolean; reduce?: boolean; reduceRight?: boolean; find?: boolean; findIndex?: boolean; fill?: boolean; copyWithin?: boolean; entries?: boolean; keys?: boolean; values?: boolean; includes?: boolean; flatMap?: boolean; flat?: boolean; at?: boolean; findLast?: boolean; findLastIndex?: boolean; toReversed?: boolean; toSorted?: boolean; toSpliced?: boolean; with?: boolean; [Symbol.iterator]?: boolean; readonly [Symbol.unscopables]?: boolean; }; }

>([]) : []
>     : ^^
>[] : []
>   : ^^
>{} : {}
>   : ^^

