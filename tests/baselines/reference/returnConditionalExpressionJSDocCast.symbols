//// [tests/cases/compiler/returnConditionalExpressionJSDocCast.ts] ////

=== file.js ===
// Don't peek into conditional return expression if it's wrapped in a cast
/** @type {Map<string, string>} */
const sources = new Map();
>sources : Symbol(sources, Decl(file.js, 2, 5))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

/**

 * @param {string=} type the type of source that should be generated
 * @returns {String}
 */
function source(type = "javascript") {
>source : Symbol(source, Decl(file.js, 2, 26))
>type : Symbol(type, Decl(file.js, 8, 16))

    return /** @type {String} */ (
        type
>type : Symbol(type, Decl(file.js, 8, 16))

            ? sources.get(type)
>sources.get : Symbol(Map.get, Decl(lib.es2015.collection.d.ts, --, --))
>sources : Symbol(sources, Decl(file.js, 2, 5))
>get : Symbol(Map.get, Decl(lib.es2015.collection.d.ts, --, --))
>type : Symbol(type, Decl(file.js, 8, 16))

            : sources.get("some other thing")
>sources.get : Symbol(Map.get, Decl(lib.es2015.collection.d.ts, --, --))
>sources : Symbol(sources, Decl(file.js, 2, 5))
>get : Symbol(Map.get, Decl(lib.es2015.collection.d.ts, --, --))

    );
}
