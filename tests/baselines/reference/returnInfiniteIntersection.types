//// [tests/cases/compiler/returnInfiniteIntersection.ts] ////

=== returnInfiniteIntersection.ts ===
function recursive() {
>recursive : () => (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>          : ^^^^^^^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^        ^^^   

    let x = <T>(subkey: T) => recursive();
>x : <T>(subkey: T) => any & { p: any; }
>  : ^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^
><T>(subkey: T) => recursive() : <T>(subkey: T) => any & { p: any; }
>                              : ^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^
>subkey : T
>       : ^
>recursive() : (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>            : ^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>recursive : () => (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>          : ^^^^^^^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^        ^^^   

    return x as typeof x & { p };
>x as typeof x & { p } : (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>                      : ^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : <T>(subkey: T) => any & { p: any; }
>  : ^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^
>x : <T>(subkey: T) => any & { p: any; }
>  : ^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^
>p : any
}

let result = recursive()(1)
>result : (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>       : ^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>recursive()(1) : (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>               : ^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>recursive() : (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>            : ^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>recursive : () => (<T>(subkey: T) => any & { p: any; }) & { p: any; }
>          : ^^^^^^^^ ^^      ^^ ^^^^^^^^^^^^^^^^^^^^^^^        ^^^   
>1 : 1
>  : ^

