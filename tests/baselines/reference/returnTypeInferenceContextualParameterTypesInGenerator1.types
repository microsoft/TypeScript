//// [tests/cases/compiler/returnTypeInferenceContextualParameterTypesInGenerator1.ts] ////

=== Performance Stats ===
Type Count: 1,000
Instantiation count: 2,500

=== returnTypeInferenceContextualParameterTypesInGenerator1.ts ===
interface Effect<out A> {
  readonly _A: A;
>_A : A
>   : ^
}

declare function gen<Eff extends Effect<any>, AEff>(
>gen : <Eff extends Effect<any>, AEff>(f: () => Generator<Eff, AEff>) => Effect<AEff>
>    : ^   ^^^^^^^^^           ^^    ^^ ^^                          ^^^^^            

  f: () => Generator<Eff, AEff>
>f : () => Generator<Eff, AEff>
>  : ^^^^^^                    

): Effect<AEff>;

interface Rpc<
  in out Tag extends string,
  out Payload = unknown,
  out Success = unknown
> {
  readonly _tag: Tag;
>_tag : Tag
>     : ^^^

  readonly payloadSchema: Payload;
>payloadSchema : Payload
>              : ^^^^^^^

  readonly successSchema: Success;
>successSchema : Success
>              : ^^^^^^^
}

interface RpcAny {
  readonly _tag: string;
>_tag : string
>     : ^^^^^^
}

type Payload<R> = R extends Rpc<infer _Tag, infer _Payload, infer _Success>
>Payload : Payload<R>
>        : ^^^^^^^^^^

  ? _Payload
  : never;

type ResultFrom<R extends RpcAny> = R extends Rpc<
>ResultFrom : ResultFrom<R>
>           : ^^^^^^^^^^^^^

  infer _Tag,
  infer _Payload,
  infer _Success
>
  ? _Success
  : never;

type ToHandlerFn<Current extends RpcAny> = (
>ToHandlerFn : ToHandlerFn<Current>
>            : ^^^^^^^^^^^^^^^^^^^^

  payload: Payload<Current>
>payload : Payload<Current>
>        : ^^^^^^^^^^^^^^^^

) => ResultFrom<Current>;

type HandlersFrom<Rpc extends RpcAny> = {
>HandlersFrom : HandlersFrom<Rpc>
>             : ^^^^^^^^^^^^^^^^^

  readonly [Current in Rpc as Current["_tag"]]: ToHandlerFn<Current>;
};

interface RpcGroup<in out R extends RpcAny> {
  toLayer<Handlers extends HandlersFrom<R>>(build: Effect<Handlers>): unknown;
>toLayer : <Handlers extends HandlersFrom<R>>(build: Effect<Handlers>) => unknown
>        : ^        ^^^^^^^^^               ^^     ^^                ^^^^^       
>build : Effect<Handlers>
>      : ^^^^^^^^^^^^^^^^
}

declare const Rpcs: RpcGroup<Rpc<"Register", number, string>>;
>Rpcs : RpcGroup<Rpc<"Register", number, string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

export const layerServerHandlers = Rpcs.toLayer(
>layerServerHandlers : unknown
>                    : ^^^^^^^
>Rpcs.toLayer(  gen(function* () {    return {      Register: (id) => String(id),    };  })) : unknown
>                                                                                            : ^^^^^^^
>Rpcs.toLayer : <Handlers extends HandlersFrom<Rpc<"Register", number, string>>>(build: Effect<Handlers>) => unknown
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^       
>Rpcs : RpcGroup<Rpc<"Register", number, string>>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toLayer : <Handlers extends HandlersFrom<Rpc<"Register", number, string>>>(build: Effect<Handlers>) => unknown
>        : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^       

  gen(function* () {
>gen(function* () {    return {      Register: (id) => String(id),    };  }) : Effect<{ Register: (id: number) => string; }>
>                                                                            : ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^
>gen : <Eff extends Effect<any>, AEff>(f: () => Generator<Eff, AEff>) => Effect<AEff>
>    : ^   ^^^^^^^^^           ^^    ^^ ^^                          ^^^^^            
>function* () {    return {      Register: (id) => String(id),    };  } : () => Generator<never, { Register: (id: number) => string; }, any>
>                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return {
>{      Register: (id) => String(id),    } : { Register: (id: number) => string; }
>                                          : ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^

      Register: (id) => String(id),
>Register : (id: number) => string
>         : ^  ^^^^^^^^^^^^^^^^^^^
>(id) => String(id) : (id: number) => string
>                   : ^  ^^^^^^^^^^^^^^^^^^^
>id : number
>   : ^^^^^^
>String(id) : string
>           : ^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^
>id : number
>   : ^^^^^^

    };
  })
);

