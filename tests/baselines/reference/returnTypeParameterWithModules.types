//// [tests/cases/compiler/returnTypeParameterWithModules.ts] ////

=== returnTypeParameterWithModules.ts ===
module M1 {
>M1 : typeof M1
>   : ^^^^^^^^^

    export function reduce<A>(ar, f, e?): Array<A> {
>reduce : <A>(ar: any, f: any, e?: any) => Array<A>
>       : ^ ^^  ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^        
>ar : any
>f : any
>e : any

        return Array.prototype.reduce.apply(ar, e ? [f, e] : [f]);
>Array.prototype.reduce.apply(ar, e ? [f, e] : [f]) : any
>Array.prototype.reduce.apply : (this: Function, thisArg: any, argArray?: any) => any
>                             : ^    ^^        ^^       ^^   ^^        ^^^   ^^^^^   
>Array.prototype.reduce : { (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any; (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U; }
>                       : ^^^          ^^^             ^^^^^^^            ^^^^^^^            ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^          ^^^             ^^^^^^^            ^^^^^^^            ^^      ^^     ^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^ ^^          ^^^             ^^^^^            ^^^^^^^            ^^      ^^     ^^^^^^^^^^^^^^^            ^^^^^^^^^^
>Array.prototype : any[]
>                : ^^^^^
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^
>prototype : any[]
>          : ^^^^^
>reduce : { (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any): any; (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U; }
>       : ^^^          ^^^             ^^^^^^^            ^^^^^^^            ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^          ^^^             ^^^^^^^            ^^^^^^^            ^^      ^^     ^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^ ^^          ^^^             ^^^^^            ^^^^^^^            ^^      ^^     ^^^^^^^^^^^^^^^            ^^^^^^^^^^
>apply : (this: Function, thisArg: any, argArray?: any) => any
>      : ^    ^^        ^^       ^^   ^^        ^^^   ^^^^^   
>ar : any
>e ? [f, e] : [f] : any[]
>                 : ^^^^^
>e : any
>[f, e] : any[]
>       : ^^^^^
>f : any
>e : any
>[f] : any[]
>    : ^^^^^
>f : any

    };
};
module M2 {
>M2 : typeof M2
>   : ^^^^^^^^^

  import A = M1
>A : typeof A
>  : ^^^^^^^^
>M1 : typeof A
>   : ^^^^^^^^

  export function compose() {
>compose : () => void
>        : ^^^^^^^^^^

        A.reduce(arguments, compose2);
>A.reduce(arguments, compose2) : unknown[]
>                              : ^^^^^^^^^
>A.reduce : <A>(ar: any, f: any, e?: any) => Array<A>
>         : ^ ^^  ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^        
>A : typeof A
>  : ^^^^^^^^
>reduce : <A>(ar: any, f: any, e?: any) => Array<A>
>       : ^ ^^  ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^        
>arguments : IArguments
>          : ^^^^^^^^^^
>compose2 : <B, C, D>(g: (x: B) => C, f: (x: D) => B) => (x: D) => C
>         : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^           

    };
    export function compose2<B, C, D>(g: (x: B) => C, f: (x: D) => B): (x: D) => C {
>compose2 : <B, C, D>(g: (x: B) => C, f: (x: D) => B) => (x: D) => C
>         : ^ ^^ ^^ ^^ ^^           ^^ ^^           ^^^^^           
>g : (x: B) => C
>  : ^ ^^ ^^^^^ 
>x : B
>  : ^
>f : (x: D) => B
>  : ^ ^^ ^^^^^ 
>x : D
>  : ^
>x : D
>  : ^

    return function (x) { return g(f(x)); }
>function (x) { return g(f(x)); } : (x: D) => C
>                                 : ^ ^^^^^^^^^
>x : D
>  : ^
>g(f(x)) : C
>        : ^
>g : (x: B) => C
>  : ^ ^^ ^^^^^ 
>f(x) : B
>     : ^
>f : (x: D) => B
>  : ^ ^^ ^^^^^ 
>x : D
>  : ^

  };
};
