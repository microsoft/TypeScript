reverseMappedTypeInferFromFilteringNameType2.ts(18,7): error TS2322: Type '"bar"' is not assignable to type '"foo"'.
reverseMappedTypeInferFromFilteringNameType2.ts(30,3): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ entry: "foo"; states: { a: { entry: "foo"; }; }; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(40,3): error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: number; y: "y"; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(53,5): error TS2322: Type '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is not assignable to type 'T'.
  '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Stuff'.
reverseMappedTypeInferFromFilteringNameType2.ts(56,64): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ field: 1; anotherField: "a"; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(63,5): error TS2322: Type '{ [K in keyof T as K & keyof Stuff]: T[K]; }[]' is not assignable to type 'T[]'.
  Type '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is not assignable to type 'T'.
    '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Stuff'.
reverseMappedTypeInferFromFilteringNameType2.ts(66,68): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ field: 1; anotherField: "a"; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(75,26): error TS2353: Object literal may only specify known properties, and 'y' does not exist in type '{ x: 1; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(83,26): error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: 1; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(85,36): error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: 1; y: "foo"; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(96,68): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ prop: "foo"; nested: { prop: string; }; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(139,3): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ readonly types: { actors: { src: "str"; logic: () => Promise<string>; }; }; readonly invoke: { readonly src: "str"; }; }'.
reverseMappedTypeInferFromFilteringNameType2.ts(145,3): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ readonly invoke: { readonly src: "whatever"; }; }'.


==== reverseMappedTypeInferFromFilteringNameType2.ts (13 errors) ====
    type StateConfig<TAction extends string> = {
      entry?: TAction;
      states?: Record<string, StateConfig<TAction>>;
    };
    declare function createMachine<
      TConfig extends StateConfig<TAction>,
      TAction extends string = TConfig["entry"] extends string
        ? TConfig["entry"]
        : string,
    >(config: { [K in keyof TConfig as K & keyof StateConfig<any>]: TConfig[K] }): [
      TAction,
      TConfig,
    ];
    const inferredParams1 = createMachine({
      entry: "foo",
      states: {
        a: {
          entry: "bar",
          ~~~~~
!!! error TS2322: Type '"bar"' is not assignable to type '"foo"'.
!!! related TS6500 reverseMappedTypeInferFromFilteringNameType2.ts:2:3: The expected type comes from property 'entry' which is declared here on type 'StateConfig<"foo">'
        },
      },
      extra: 12,
    });
    const inferredParams2 = createMachine({
      entry: "foo",
      states: {
        a: {
          entry: "foo",
        },
      },
      extra: 12,
      ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ entry: "foo"; states: { a: { entry: "foo"; }; }; }'.
    });
    
    const checkType =
      <T,>() =>
      <U extends T>(value: { [K in keyof U as K & keyof T]: U[K] }) =>
        value;
    const checked = checkType<{ x: number; y: string }>()({
      x: 1 as number,
      y: "y",
      z: "z", // undesirable property z is *not* allowed
      ~
!!! error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: number; y: "y"; }'.
    });
    
    interface Stuff {
      field: number;
      anotherField: string;
    }
    function doStuffWithStuff<T extends Stuff>(s: {
      [K in keyof T as K & keyof Stuff]: T[K];
    }): T {
      if (Math.random() > 0.5) {
        return s as T;
      } else {
        return s;
        ~~~~~~
!!! error TS2322: Type '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is not assignable to type 'T'.
!!! error TS2322:   '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Stuff'.
      }
    }
    const stuff1 = doStuffWithStuff({ field: 1, anotherField: "a", extra: 123 });
                                                                   ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ field: 1; anotherField: "a"; }'.
    function doStuffWithStuffArr<T extends Stuff>(
      arr: { [K in keyof T as K & keyof Stuff]: T[K] }[],
    ): T[] {
      if (Math.random() > 0.5) {
        return arr as T[];
      } else {
        return arr;
        ~~~~~~
!!! error TS2322: Type '{ [K in keyof T as K & keyof Stuff]: T[K]; }[]' is not assignable to type 'T[]'.
!!! error TS2322:   Type '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is not assignable to type 'T'.
!!! error TS2322:     '{ [K in keyof T as K & keyof Stuff]: T[K]; }' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Stuff'.
      }
    }
    const stuff2 = doStuffWithStuffArr([{ field: 1, anotherField: "a", extra: 123 }]);
                                                                       ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ field: 1; anotherField: "a"; }'.
    
    type XNumber = { x: number };
    declare function foo<T extends XNumber>(props: {
      [K in keyof T as K & keyof XNumber]: T[K];
    }): T;
    function bar(props: { x: number; y: string }) {
      return foo(props); // no error because lack of excess property check by design
    }
    const foo1 = foo({ x: 1, y: "foo" });
                             ~
!!! error TS2353: Object literal may only specify known properties, and 'y' does not exist in type '{ x: 1; }'.
    const foo2 = foo({ ...{ x: 1, y: "foo" } }); // no error because lack of excess property check by design
    
    type NoErrWithOptProps = { x: number; y?: string };
    declare function baz<T extends NoErrWithOptProps>(props: {
      [K in keyof T as K & keyof NoErrWithOptProps]: T[K];
    }): T;
    const baz1 = baz({ x: 1 });
    const baz2 = baz({ x: 1, z: 123 });
                             ~
!!! error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: 1; }'.
    const baz3 = baz({ x: 1, y: "foo" });
    const baz4 = baz({ x: 1, y: "foo", z: 123 });
                                       ~
!!! error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: 1; y: "foo"; }'.
    
    interface WithNestedProp {
      prop: string;
      nested: {
        prop: string;
      };
    }
    declare function withNestedProp<T extends WithNestedProp>(props: {
      [K in keyof T as K & keyof WithNestedProp]: T[K];
    }): T;
    const wnp = withNestedProp({ prop: "foo", nested: { prop: "bar" }, extra: 10 });
                                                                       ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ prop: "foo"; nested: { prop: string; }; }'.
    
    type IsLiteralString<T extends string> = string extends T ? false : true;
    interface ProvidedActor {
      src: string;
      logic: () => Promise<unknown>;
    }
    type DistributeActors<TActor> = TActor extends { src: infer TSrc }
      ? {
          src: TSrc;
        }
      : never;
    interface MachineConfig<TActor extends ProvidedActor> {
      types?: {
        actors?: TActor;
      };
      invoke: IsLiteralString<TActor["src"]> extends true
        ? DistributeActors<TActor>
        : {
            src: string;
          };
    }
    declare function createXMachine<
      const TConfig extends MachineConfig<TActor>,
      TActor extends ProvidedActor = TConfig extends {
        types: { actors: ProvidedActor };
      }
        ? TConfig["types"]["actors"]
        : ProvidedActor,
    >(config: {
      [K in keyof TConfig as K & keyof MachineConfig<any>]: TConfig[K];
    }): TConfig;
    const child = () => Promise.resolve("foo");
    const config = createXMachine({
      types: {} as {
        actors: {
          src: "str";
          logic: typeof child;
        };
      },
      invoke: {
        src: "str",
      },
      extra: 10,
      ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ readonly types: { actors: { src: "str"; logic: () => Promise<string>; }; }; readonly invoke: { readonly src: "str"; }; }'.
    });
    const config2 = createXMachine({
      invoke: {
        src: "whatever",
      },
      extra: 10,
      ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ readonly invoke: { readonly src: "whatever"; }; }'.
    });
    