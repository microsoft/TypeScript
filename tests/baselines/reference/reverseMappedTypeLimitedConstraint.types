//// [tests/cases/compiler/reverseMappedTypeLimitedConstraint.ts] ////

=== reverseMappedTypeLimitedConstraint.ts ===
type XNumber_ = { x: number }
>XNumber_ : XNumber_
>         : ^^^^^^^^
>x : number
>  : ^^^^^^

declare function foo_<T extends XNumber_>(props: {[K in keyof T & keyof XNumber_]: T[K]}): T;
>foo_ : <T extends XNumber_>(props: { [K in keyof T & keyof XNumber_]: T[K]; }) => T
>     : ^ ^^^^^^^^^        ^^     ^^                                          ^^^^^ 
>props : { [K in keyof T & "x"]: T[K]; }
>      : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^

foo_({x: 1, y: 'foo'});
>foo_({x: 1, y: 'foo'}) : { x: 1; }
>                       : ^^^^^^^^^
>foo_ : <T extends XNumber_>(props: { [K in keyof T & keyof XNumber_]: T[K]; }) => T
>     : ^ ^^^^^^^^^        ^^     ^^                                          ^^^^^ 
>{x: 1, y: 'foo'} : { x: 1; y: string; }
>                 : ^^^^^^^^^^^^^^^^^^^^
>x : 1
>  : ^
>1 : 1
>  : ^
>y : string
>  : ^^^^^^
>'foo' : "foo"
>      : ^^^^^

// -----------------------------------------------------------------------------------------

const checkType_ = <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value;
>checkType_ : <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
>           : ^ ^^^^^^^^           ^^                                          ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value : <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
>                                                                           : ^ ^^^^^^^^           ^^                                          ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value : <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
>                                                                  : ^ ^^^^^^^^^ ^^     ^^                                   ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value : { [K in keyof U & keyof T]: U[K]; }
>      : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value : { [K in keyof U & keyof T]: U[K]; }
>      : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

const checked_ = checkType_<{x: number, y: string}>()({
>checked_ : { x: number; y: "y"; }
>         : ^^^^^^^^^^^^^^^^^^^^^^
>checkType_<{x: number, y: string}>()({  x: 1 as number,  y: "y",  z: "z",}) : { x: number; y: "y"; }
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^
>checkType_<{x: number, y: string}>() : <U extends { x: number; y: string; }>(value: { [K in keyof U & ("x" | "y")]: U[K]; }) => { [K in keyof U & ("x" | "y")]: U[K]; }
>                                     : ^ ^^^^^^^^^^^^^^      ^^^^^      ^^^^^     ^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>checkType_ : <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]; }) => { [K in keyof U & keyof T]: U[K]; }
>           : ^ ^^^^^^^^           ^^                                          ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>{  x: 1 as number,  y: "y",  z: "z",} : { x: number; y: "y"; z: string; }
>                                      : ^^^^^      ^^^^^^^^^^^^^^^^^^^^^^

  x: 1 as number,
>x : number
>  : ^^^^^^
>1 as number : number
>            : ^^^^^^
>1 : 1
>  : ^

  y: "y",
>y : "y"
>  : ^^^
>"y" : "y"
>    : ^^^

  z: "z",
>z : string
>  : ^^^^^^
>"z" : "z"
>    : ^^^

});
