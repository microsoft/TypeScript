//// [tests/cases/compiler/reverseMappedTypeRecursiveInference.ts] ////

=== reverseMappedTypeRecursiveInference.ts ===
type Foo<V> = {
>Foo : Foo<V>
>    : ^^^^^^

    [K in keyof V]: Foo<V[K]>;
}

type Bar<V> = {
>Bar : Bar<V>
>    : ^^^^^^

    [K in keyof V]: V[K] extends object ? Bar<V[K]> : string;
}

function test<V>(value: Foo<V>): V {
>test : <V>(value: Foo<V>) => V
>     : ^ ^^     ^^      ^^^^^ 
>value : Foo<V>
>      : ^^^^^^

  console.log(value);
>console.log(value) : void
>                   : ^^^^
>console.log : (...data: any[]) => void
>            : ^^^^    ^^     ^^^^^    
>console : Console
>        : ^^^^^^^
>log : (...data: any[]) => void
>    : ^^^^    ^^     ^^^^^    
>value : Foo<V>
>      : ^^^^^^

  return undefined as any;
>undefined as any : any
>undefined : undefined
>          : ^^^^^^^^^
}

const bar: Bar<any> = {};
>bar : Bar<any>
>    : ^^^^^^^^
>{} : {}
>   : ^^

test(bar);
>test(bar) : { [x: string]: any; }
>          : ^^^^^^^^^^^^^^^^^^^^^
>test : <V>(value: Foo<V>) => V
>     : ^ ^^     ^^      ^^^^^ 
>bar : Bar<any>
>    : ^^^^^^^^

