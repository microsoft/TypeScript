//// [tests/cases/compiler/signatureCombiningRestParameters1.ts] ////

=== signatureCombiningRestParameters1.ts ===
// https://github.com/microsoft/TypeScript/issues/58371

type T1 = "A" | "B";
>T1 : T1
>   : ^^

type T2 = {
>T2 : T2
>   : ^^

  C: [string];
>C : [string]
>  : ^^^^^^^^

  D: [number];
>D : [number]
>  : ^^^^^^^^

};

declare const map: {
>map : { A: () => unknown; B: () => unknown; C: (args_0: string) => unknown; D: (args_0: number) => unknown; }
>    : ^^^^^^^^^^^       ^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^

  [K in T1 | keyof T2]: (...args: K extends keyof T2 ? T2[K] : []) => unknown;
>args : K extends keyof T2 ? T2[K] : []
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

};

declare const args: any;
>args : any
>     : ^^^

for (const [key, fn] of Object.entries(map)) {
>key : string
>    : ^^^^^^
>fn : (() => unknown) | (() => unknown) | ((args_0: string) => unknown) | ((args_0: number) => unknown)
>   : ^^^^^^^       ^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^
>Object.entries(map) : [string, (() => unknown) | (() => unknown) | ((args_0: string) => unknown) | ((args_0: number) => unknown)][]
>                    : ^^^^^^^^^^^^^^^^       ^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^
>Object.entries : { <T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][]; (o: {}): [string, any][]; }
>               : ^^^ ^^ ^^                                  ^^^             ^^^ ^^  ^^^               ^^^
>Object : ObjectConstructor
>       : ^^^^^^^^^^^^^^^^^
>entries : { <T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][]; (o: {}): [string, any][]; }
>        : ^^^ ^^ ^^                                  ^^^             ^^^ ^^  ^^^               ^^^
>map : { A: () => unknown; B: () => unknown; C: (args_0: string) => unknown; D: (args_0: number) => unknown; }
>    : ^^^^^^^^^^^       ^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^

  fn(...args);
>fn(...args) : unknown
>            : ^^^^^^^
>fn : (() => unknown) | (() => unknown) | ((args_0: string) => unknown) | ((args_0: number) => unknown)
>   : ^^^^^^^       ^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^       ^
>...args : any
>        : ^^^
>args : any
>     : ^^^
}

const test2: ((a: number, ...args: []) => void) &
>test2 : ((a: number) => void) & ((b: string) => void) & ((c: boolean) => void)
>      : ^^ ^^      ^^^^^    ^^^^^^ ^^      ^^^^^    ^^^^^^ ^^       ^^^^^    ^
>a : number
>  : ^^^^^^
>args : []
>     : ^^

  ((b: string) => void) &
>b : string
>  : ^^^^^^

  ((c: boolean) => void) = (arg) => {};
>c : boolean
>  : ^^^^^^^
>(arg) => {} : (arg: string | number | boolean) => void
>            : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>arg : string | number | boolean
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^

