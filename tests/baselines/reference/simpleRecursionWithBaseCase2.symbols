//// [tests/cases/compiler/simpleRecursionWithBaseCase2.ts] ////

=== simpleRecursionWithBaseCase2.ts ===
async function rec1() {
>rec1 : Symbol(rec1, Decl(simpleRecursionWithBaseCase2.ts, 0, 0))

  if (Math.random() < 0.5) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.float16.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return rec1();
>rec1 : Symbol(rec1, Decl(simpleRecursionWithBaseCase2.ts, 0, 0))

  } else {
    return "hello";
  }
}

async function rec2() {
>rec2 : Symbol(rec2, Decl(simpleRecursionWithBaseCase2.ts, 6, 1))

  if (Math.random() < 0.5) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.float16.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return await rec2();
>rec2 : Symbol(rec2, Decl(simpleRecursionWithBaseCase2.ts, 6, 1))

  } else {
    return "hello";
  }
}

async function rec3() {
>rec3 : Symbol(rec3, Decl(simpleRecursionWithBaseCase2.ts, 14, 1))

  return rec3();
>rec3 : Symbol(rec3, Decl(simpleRecursionWithBaseCase2.ts, 14, 1))
}

async function rec4() {
>rec4 : Symbol(rec4, Decl(simpleRecursionWithBaseCase2.ts, 18, 1))

  return await rec4();
>rec4 : Symbol(rec4, Decl(simpleRecursionWithBaseCase2.ts, 18, 1))
}

async function rec5() {
>rec5 : Symbol(rec5, Decl(simpleRecursionWithBaseCase2.ts, 22, 1))

  if (Math.random() < 0.5) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.float16.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return ((rec1()));
>rec1 : Symbol(rec1, Decl(simpleRecursionWithBaseCase2.ts, 0, 0))

  } else {
    return "hello";
  }
}

async function rec6() {
>rec6 : Symbol(rec6, Decl(simpleRecursionWithBaseCase2.ts, 30, 1))

  if (Math.random() < 0.5) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.float16.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return await ((rec1()));
>rec1 : Symbol(rec1, Decl(simpleRecursionWithBaseCase2.ts, 0, 0))

  } else {
    return "hello";
  }
}

declare const ps: Promise<string> | number;
>ps : Symbol(ps, Decl(simpleRecursionWithBaseCase2.ts, 40, 13))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

async function foo1() {
>foo1 : Symbol(foo1, Decl(simpleRecursionWithBaseCase2.ts, 40, 43))

  if (Math.random() > 0.5) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.float16.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return ps;
>ps : Symbol(ps, Decl(simpleRecursionWithBaseCase2.ts, 40, 13))

  } else {
    return await foo1();
>foo1 : Symbol(foo1, Decl(simpleRecursionWithBaseCase2.ts, 40, 43))
  }
}

async function foo2() {
>foo2 : Symbol(foo2, Decl(simpleRecursionWithBaseCase2.ts, 48, 1))

  if (Math.random() > 0.5) {
>Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.float16.d.ts, --, --))
>random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

    return ps;
>ps : Symbol(ps, Decl(simpleRecursionWithBaseCase2.ts, 40, 13))

  } else {
    return foo2();
>foo2 : Symbol(foo2, Decl(simpleRecursionWithBaseCase2.ts, 48, 1))
  }
}

