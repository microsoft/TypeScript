//// [tests/cases/compiler/singletonLabeledTuple.ts] ////

=== singletonLabeledTuple.ts ===
type AliasOptional = [p?: number]
>AliasOptional : AliasOptional
>              : ^^^^^^^^^^^^^

// literal type vs type alias
type Literal = [p?: number] extends [unknown] ? true : false // Expect `Literal` to be `false`
>Literal : false
>        : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

type Alias = AliasOptional extends [unknown] ? true : false     // Expect `Alias` to be `false`
>Alias : false
>      : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

// labeled tuple vs normal tuple
type Labeled = [p?: number] extends [unknown] ? true : false   // Expect `Labeled` to be `false`
>Labeled : false
>        : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

type Normal = [number?] extends [unknown] ? true : false       // Expect `Normal` to be `false`
>Normal : false
>       : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^


type AliasRest = [...p: number[]];
>AliasRest : AliasRest
>          : ^^^^^^^^^

type LiteralRest = [...p: number[]] extends [unknown] ? true : false; // Expect `LiteralRest` to be `false`
>LiteralRest : false
>            : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

type AliasedRest = AliasRest extends [unknown] ? true : false; // Expect `AliasedRest` to be `false`
>AliasedRest : false
>            : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

type NormalRest = [...number[]] extends [unknown] ? true : false; // Expect `NormalRest` to be `false`
>NormalRest : false
>           : ^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

