//// [tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern2.ts] ////

=== sourceMapValidationDestructuringForArrayBindingPattern2.ts ===
declare var console: {
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^

    log(msg: any): void;
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>msg : any
}
type Robot = [number, string, string];
>Robot : Robot
>      : ^^^^^

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : MultiSkilledRobot
>                  : ^^^^^^^^^^^^^^^^^

let robotA: Robot = [1, "mower", "mowing"];
>robotA : Robot
>       : ^^^^^
>[1, "mower", "mowing"] : [number, string, string]
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"mower" : "mower"
>        : ^^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^

function getRobot() {
>getRobot : () => Robot
>         : ^^^^^^^^^^^

    return robotA;
>robotA : Robot
>       : ^^^^^
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>["mower", ["mowing", ""]] : [string, [string, string]]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"mower" : "mower"
>        : ^^^^^^^
>["mowing", ""] : [string, string]
>               : ^^^^^^^^^^^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^
>"" : ""
>   : ^^

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^

function getMultiRobot() {
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    return multiRobotA;
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
}

let nameA: string, primarySkillA: string, secondarySkillA: string;
>nameA : string
>      : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^

let numberB: number, nameB: string;
>numberB : number
>        : ^^^^^^
>nameB : string
>      : ^^^^^^

let numberA2: number, nameA2: string, skillA2: string, nameMA: string;
>numberA2 : number
>         : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>nameMA : string
>       : ^^^^^^

let numberA3: number, robotAInfo: (number | string)[], multiRobotAInfo: (string | [string, string])[];
>numberA3 : number
>         : ^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

let i: number;
>i : number
>  : ^^^^^^

for ([, nameA] = robotA, i = 0; i < 1; i++) {
>[, nameA] = robotA, i = 0 : 0
>                          : ^
>[, nameA] = robotA : Robot
>                   : ^^^^^
>[, nameA] : [undefined, string]
>          : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA : string
>      : ^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, nameA] = getRobot(), i = 0; i < 1; i++) {
>[, nameA] = getRobot(), i = 0 : 0
>                              : ^
>[, nameA] = getRobot() : Robot
>                       : ^^^^^
>[, nameA] : [undefined, string]
>          : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA : string
>      : ^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, nameA] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[, nameA] = [2, "trimmer", "trimming"], i = 0 : 0
>                                              : ^
>[, nameA] = [2, "trimmer", "trimming"] : [number, string, string]
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>[, nameA] : [undefined, string]
>          : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA : string
>      : ^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
>[, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0 : 0
>                                                          : ^
>[, [primarySkillA, secondarySkillA]] = multiRobotA : MultiSkilledRobot
>                                                   : ^^^^^^^^^^^^^^^^^
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[primarySkillA, secondarySkillA] : [string, string]
>                                 : ^^^^^^^^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}
for ([, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
>[, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0 : 0
>                                                              : ^
>[, [primarySkillA, secondarySkillA]] = getMultiRobot() : MultiSkilledRobot
>                                                       : ^^^^^^^^^^^^^^^^^
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[primarySkillA, secondarySkillA] : [string, string]
>                                 : ^^^^^^^^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}
for ([, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                                                  : ^
>[, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[primarySkillA, secondarySkillA] : [string, string]
>                                 : ^^^^^^^^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}

for ([numberB] = robotA, i = 0; i < 1; i++) {
>[numberB] = robotA, i = 0 : 0
>                          : ^
>[numberB] = robotA : Robot
>                   : ^^^^^
>[numberB] : [number]
>          : ^^^^^^^^
>numberB : number
>        : ^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([numberB] = getRobot(), i = 0; i < 1; i++) {
>[numberB] = getRobot(), i = 0 : 0
>                              : ^
>[numberB] = getRobot() : Robot
>                       : ^^^^^
>[numberB] : [number]
>          : ^^^^^^^^
>numberB : number
>        : ^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([numberB] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberB] = [2, "trimmer", "trimming"], i = 0 : 0
>                                              : ^
>[numberB] = [2, "trimmer", "trimming"] : [number, string, string]
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>[numberB] : [number]
>          : ^^^^^^^^
>numberB : number
>        : ^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([nameB] = multiRobotA, i = 0; i < 1; i++) {
>[nameB] = multiRobotA, i = 0 : 0
>                             : ^
>[nameB] = multiRobotA : MultiSkilledRobot
>                      : ^^^^^^^^^^^^^^^^^
>[nameB] : [string]
>        : ^^^^^^^^
>nameB : string
>      : ^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}
for ([nameB] = getMultiRobot(), i = 0; i < 1; i++) {
>[nameB] = getMultiRobot(), i = 0 : 0
>                                 : ^
>[nameB] = getMultiRobot() : MultiSkilledRobot
>                          : ^^^^^^^^^^^^^^^^^
>[nameB] : [string]
>        : ^^^^^^^^
>nameB : string
>      : ^^^^^^
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}
for ([nameB] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[nameB] = ["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                     : ^
>[nameB] = ["trimmer", ["trimming", "edging"]] : [string, string[]]
>                                              : ^^^^^^^^^^^^^^^^^^
>[nameB] : [string]
>        : ^^^^^^^^
>nameB : string
>      : ^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, string[]]
>                                    : ^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : string[]
>                       : ^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}

for ([numberA2, nameA2, skillA2] = robotA, i = 0; i < 1; i++) {
>[numberA2, nameA2, skillA2] = robotA, i = 0 : 0
>                                            : ^
>[numberA2, nameA2, skillA2] = robotA : Robot
>                                     : ^^^^^
>[numberA2, nameA2, skillA2] : [number, string, string]
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 : number
>         : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([numberA2, nameA2, skillA2] = getRobot(), i = 0; i < 1; i++) {
>[numberA2, nameA2, skillA2] = getRobot(), i = 0 : 0
>                                                : ^
>[numberA2, nameA2, skillA2] = getRobot() : Robot
>                                         : ^^^^^
>[numberA2, nameA2, skillA2] : [number, string, string]
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 : number
>         : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0 : 0
>                                                                : ^
>[numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"] : [number, string, string]
>                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>[numberA2, nameA2, skillA2] : [number, string, string]
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 : number
>         : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
>[nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0 : 0
>                                                                : ^
>[nameMA, [primarySkillA, secondarySkillA]] = multiRobotA : MultiSkilledRobot
>                                                         : ^^^^^^^^^^^^^^^^^
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA : string
>       : ^^^^^^
>[primarySkillA, secondarySkillA] : [string, string]
>                                 : ^^^^^^^^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}
for ([nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
>[nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0 : 0
>                                                                    : ^
>[nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot() : MultiSkilledRobot
>                                                             : ^^^^^^^^^^^^^^^^^
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA : string
>       : ^^^^^^
>[primarySkillA, secondarySkillA] : [string, string]
>                                 : ^^^^^^^^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}
for ([nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                                                        : ^
>[nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA : string
>       : ^^^^^^
>[primarySkillA, secondarySkillA] : [string, string]
>                                 : ^^^^^^^^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}

for ([numberA3, ...robotAInfo] = robotA, i = 0; i < 1; i++) {
>[numberA3, ...robotAInfo] = robotA, i = 0 : 0
>                                          : ^
>[numberA3, ...robotAInfo] = robotA : Robot
>                                   : ^^^^^
>[numberA3, ...robotAInfo] : [number, ...(string | number)[]]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 : number
>         : ^^^^^^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([numberA3, ...robotAInfo] = getRobot(), i = 0; i < 1; i++) {
>[numberA3, ...robotAInfo] = getRobot(), i = 0 : 0
>                                              : ^
>[numberA3, ...robotAInfo] = getRobot() : Robot
>                                       : ^^^^^
>[numberA3, ...robotAInfo] : [number, ...(string | number)[]]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 : number
>         : ^^^^^^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([numberA3, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberA3, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"], i = 0 : 0
>                                                                     : ^
>[numberA3, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"] : Robot
>                                                              : ^^^^^
>[numberA3, ...robotAInfo] : [number, ...(string | number)[]]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 : number
>         : ^^^^^^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
><Robot>[2, "trimmer", "trimming"] : Robot
>                                  : ^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([...multiRobotAInfo] = multiRobotA, i = 0; i < 1; i++) {
>[...multiRobotAInfo] = multiRobotA, i = 0 : 0
>                                          : ^
>[...multiRobotAInfo] = multiRobotA : MultiSkilledRobot
>                                   : ^^^^^^^^^^^^^^^^^
>[...multiRobotAInfo] : (string | [string, string])[]
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>...multiRobotAInfo : string | [string, string]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>                             : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
for ([...multiRobotAInfo] = getMultiRobot(), i = 0; i < 1; i++) {
>[...multiRobotAInfo] = getMultiRobot(), i = 0 : 0
>                                              : ^
>[...multiRobotAInfo] = getMultiRobot() : MultiSkilledRobot
>                                       : ^^^^^^^^^^^^^^^^^
>[...multiRobotAInfo] : (string | [string, string])[]
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>...multiRobotAInfo : string | [string, string]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>                             : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
for ([...multiRobotAInfo] = <MultiSkilledRobot>["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[...multiRobotAInfo] = <MultiSkilledRobot>["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                                                     : ^
>[...multiRobotAInfo] = <MultiSkilledRobot>["trimmer", ["trimming", "edging"]] : MultiSkilledRobot
>                                                                              : ^^^^^^^^^^^^^^^^^
>[...multiRobotAInfo] : (string | [string, string])[]
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>...multiRobotAInfo : string | [string, string]
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><MultiSkilledRobot>["trimmer", ["trimming", "edging"]] : MultiSkilledRobot
>                                                       : ^^^^^^^^^^^^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>                             : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
