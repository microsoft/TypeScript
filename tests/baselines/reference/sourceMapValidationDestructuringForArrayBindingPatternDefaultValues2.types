//// [tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.ts] ////

=== sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.ts ===
declare var console: {
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^

    log(msg: any): void;
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>msg : any
}
type Robot = [number, string, string];
>Robot : Robot
>      : ^^^^^

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : MultiSkilledRobot
>                  : ^^^^^^^^^^^^^^^^^

let robotA: Robot = [1, "mower", "mowing"];
>robotA : Robot
>       : ^^^^^
>[1, "mower", "mowing"] : [number, string, string]
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"mower" : "mower"
>        : ^^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^

function getRobot() {
>getRobot : () => Robot
>         : ^^^^^^^^^^^

    return robotA;
>robotA : Robot
>       : ^^^^^
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>["mower", ["mowing", ""]] : [string, [string, string]]
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"mower" : "mower"
>        : ^^^^^^^
>["mowing", ""] : [string, string]
>               : ^^^^^^^^^^^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^
>"" : ""
>   : ^^

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^

function getMultiRobot() {
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    return multiRobotA;
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
}

let nameA: string, primarySkillA: string, secondarySkillA: string;
>nameA : string
>      : ^^^^^^
>primarySkillA : string
>              : ^^^^^^
>secondarySkillA : string
>                : ^^^^^^

let numberB: number, nameB: string;
>numberB : number
>        : ^^^^^^
>nameB : string
>      : ^^^^^^

let numberA2: number, nameA2: string, skillA2: string, nameMA: string;
>numberA2 : number
>         : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>nameMA : string
>       : ^^^^^^

let numberA3: number, robotAInfo: (number | string)[], multiRobotAInfo: (string | [string, string])[];
>numberA3 : number
>         : ^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>multiRobotAInfo : (string | [string, string])[]
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

let i: number;
>i : number
>  : ^^^^^^

for ([, nameA = "name"] = robotA, i = 0; i < 1; i++) {
>[, nameA = "name"] = robotA, i = 0 : 0
>                                   : ^
>[, nameA = "name"] = robotA : Robot
>                            : ^^^^^
>[, nameA = "name"] : [undefined, string]
>                   : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA = "name" : "name"
>               : ^^^^^^
>nameA : string
>      : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, nameA = "name"] = getRobot(), i = 0; i < 1; i++) {
>[, nameA = "name"] = getRobot(), i = 0 : 0
>                                       : ^
>[, nameA = "name"] = getRobot() : Robot
>                                : ^^^^^
>[, nameA = "name"] : [undefined, string]
>                   : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA = "name" : "name"
>               : ^^^^^^
>nameA : string
>      : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, nameA = "name"] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[, nameA = "name"] = [2, "trimmer", "trimming"], i = 0 : 0
>                                                       : ^
>[, nameA = "name"] = [2, "trimmer", "trimming"] : [number, string, string]
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^
>[, nameA = "name"] : [undefined, string]
>                   : ^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA = "name" : "name"
>               : ^^^^^^
>nameA : string
>      : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for ([, [
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] = multiRobotA, i = 0 : 0
>                                                                                                              : ^
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] = multiRobotA : MultiSkilledRobot
>                                                                                                       : ^^^^^^^^^^^^^^^^^
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] : [undefined, [string, string]]
>                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"] : [string, string]
>                                                                                     : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : "primary"
>                          : ^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : "secondary"
>                              : ^^^^^^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

] = ["none", "none"]] = multiRobotA, i = 0; i < 1; i++) {
>["none", "none"] : [string, string]
>                 : ^^^^^^^^^^^^^^^^
>"none" : "none"
>       : ^^^^^^
>"none" : "none"
>       : ^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}
for ([, [
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] = getMultiRobot(), i = 0 : 0
>                                                                                                                  : ^
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] = getMultiRobot() : MultiSkilledRobot
>                                                                                                           : ^^^^^^^^^^^^^^^^^
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] : [undefined, [string, string]]
>                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"] : [string, string]
>                                                                                     : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : "primary"
>                          : ^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : "secondary"
>                              : ^^^^^^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

] = ["none", "none"]] = getMultiRobot(), i = 0; i < 1; i++) {
>["none", "none"] : [string, string]
>                 : ^^^^^^^^^^^^^^^^
>"none" : "none"
>       : ^^^^^^
>"none" : "none"
>       : ^^^^^^
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}
for ([, [
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] = ["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                                                                                                      : ^
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] = ["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>[, [    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"]] : [undefined, [string, string]]
>                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] = ["none", "none"] : [string, string]
>                                                                                     : ^^^^^^^^^^^^^^^^
>[    primarySkillA = "primary",    secondarySkillA = "secondary"] : [string, string]
>                                                                  : ^^^^^^^^^^^^^^^^

    primarySkillA = "primary",
>primarySkillA = "primary" : "primary"
>                          : ^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

    secondarySkillA = "secondary"
>secondarySkillA = "secondary" : "secondary"
>                              : ^^^^^^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

] = ["none", "none"]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>["none", "none"] : [string, string]
>                 : ^^^^^^^^^^^^^^^^
>"none" : "none"
>       : ^^^^^^
>"none" : "none"
>       : ^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>                           : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primarySkillA : string
>              : ^^^^^^
}

for ([numberB = -1] = robotA, i = 0; i < 1; i++) {
>[numberB = -1] = robotA, i = 0 : 0
>                               : ^
>[numberB = -1] = robotA : Robot
>                        : ^^^^^
>[numberB = -1] : [number]
>               : ^^^^^^^^
>numberB = -1 : -1
>             : ^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([numberB = -1] = getRobot(), i = 0; i < 1; i++) {
>[numberB = -1] = getRobot(), i = 0 : 0
>                                   : ^
>[numberB = -1] = getRobot() : Robot
>                            : ^^^^^
>[numberB = -1] : [number]
>               : ^^^^^^^^
>numberB = -1 : -1
>             : ^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([numberB = -1] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberB = -1] = [2, "trimmer", "trimming"], i = 0 : 0
>                                                   : ^
>[numberB = -1] = [2, "trimmer", "trimming"] : [number, string, string]
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^
>[numberB = -1] : [number]
>               : ^^^^^^^^
>numberB = -1 : -1
>             : ^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}
for ([nameB = "name"] = multiRobotA, i = 0; i < 1; i++) {
>[nameB = "name"] = multiRobotA, i = 0 : 0
>                                      : ^
>[nameB = "name"] = multiRobotA : MultiSkilledRobot
>                               : ^^^^^^^^^^^^^^^^^
>[nameB = "name"] : [string]
>                 : ^^^^^^^^
>nameB = "name" : "name"
>               : ^^^^^^
>nameB : string
>      : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}
for ([nameB = "name"] = getMultiRobot(), i = 0; i < 1; i++) {
>[nameB = "name"] = getMultiRobot(), i = 0 : 0
>                                          : ^
>[nameB = "name"] = getMultiRobot() : MultiSkilledRobot
>                                   : ^^^^^^^^^^^^^^^^^
>[nameB = "name"] : [string]
>                 : ^^^^^^^^
>nameB = "name" : "name"
>               : ^^^^^^
>nameB : string
>      : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}
for ([nameB = "name"] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[nameB = "name"] = ["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                              : ^
>[nameB = "name"] = ["trimmer", ["trimming", "edging"]] : [string, string[]]
>                                                       : ^^^^^^^^^^^^^^^^^^
>[nameB = "name"] : [string]
>                 : ^^^^^^^^
>nameB = "name" : "name"
>               : ^^^^^^
>nameB : string
>      : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>["trimmer", ["trimming", "edging"]] : [string, string[]]
>                                    : ^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : string[]
>                       : ^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameB : string
>      : ^^^^^^
}

for ([numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = robotA, i = 0; i < 1; i++) {
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = robotA, i = 0 : 0
>                                                                    : ^
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = robotA : Robot
>                                                             : ^^^^^
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] : [number, string, string]
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 = -1 : -1
>              : ^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 = "name" : "name"
>                : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>skillA2 = "skill" : "skill"
>                  : ^^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = getRobot(), i = 0; i < 1; i++) {
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = getRobot(), i = 0 : 0
>                                                                        : ^
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = getRobot() : Robot
>                                                                 : ^^^^^
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] : [number, string, string]
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 = -1 : -1
>              : ^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 = "name" : "name"
>                : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>skillA2 = "skill" : "skill"
>                  : ^^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for ([numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = [2, "trimmer", "trimming"], i = 0 : 0
>                                                                                        : ^
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = [2, "trimmer", "trimming"] : [number, string, string]
>                                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^
>[numberA2 = -1, nameA2 = "name", skillA2 = "skill"] : [number, string, string]
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^
>numberA2 = -1 : -1
>              : ^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 = "name" : "name"
>                : ^^^^^^
>nameA2 : string
>       : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>skillA2 = "skill" : "skill"
>                  : ^^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}
for (let
    [nameMA = "noName",
>nameMA : string
>       : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^

        [
            primarySkillA = "primary",
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

            secondarySkillA = "secondary"
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

        ] = ["none", "none"]
>["none", "none"] : [string, string]
>                 : ^^^^^^^^^^^^^^^^
>"none" : "none"
>       : ^^^^^^
>"none" : "none"
>       : ^^^^^^

    ] = multiRobotA, i = 0; i < 1; i++) {
>multiRobotA : MultiSkilledRobot
>            : ^^^^^^^^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}
for ([nameMA = "noName",
>[nameMA = "noName",    [        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"]] = getMultiRobot(), i = 0 : 0
>                                                                                                                                                  : ^
>[nameMA = "noName",    [        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"]] = getMultiRobot() : MultiSkilledRobot
>                                                                                                                                           : ^^^^^^^^^^^^^^^^^
>[nameMA = "noName",    [        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"]] : [string, [string, string]]
>                                                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA = "noName" : "noName"
>                  : ^^^^^^^^
>nameMA : string
>       : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^

    [
>[        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"] : [string, string]
>                                                                                                 : ^^^^^^^^^^^^^^^^
>[        primarySkillA = "primary",        secondarySkillA = "secondary"    ] : [string, string]
>                                                                              : ^^^^^^^^^^^^^^^^

        primarySkillA = "primary",
>primarySkillA = "primary" : "primary"
>                          : ^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

        secondarySkillA = "secondary"
>secondarySkillA = "secondary" : "secondary"
>                              : ^^^^^^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

    ] = ["none", "none"]
>["none", "none"] : [string, string]
>                 : ^^^^^^^^^^^^^^^^
>"none" : "none"
>       : ^^^^^^
>"none" : "none"
>       : ^^^^^^

] = getMultiRobot(), i = 0; i < 1; i++) {
>getMultiRobot() : MultiSkilledRobot
>                : ^^^^^^^^^^^^^^^^^
>getMultiRobot : () => MultiSkilledRobot
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}
for ([nameMA = "noName",
>[nameMA = "noName",    [        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"]] = ["trimmer", ["trimming", "edging"]], i = 0 : 0
>                                                                                                                                                                      : ^
>[nameMA = "noName",    [        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"]] = ["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>[nameMA = "noName",    [        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"]] : [string, [string, string]]
>                                                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>nameMA = "noName" : "noName"
>                  : ^^^^^^^^
>nameMA : string
>       : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^

    [
>[        primarySkillA = "primary",        secondarySkillA = "secondary"    ] = ["none", "none"] : [string, string]
>                                                                                                 : ^^^^^^^^^^^^^^^^
>[        primarySkillA = "primary",        secondarySkillA = "secondary"    ] : [string, string]
>                                                                              : ^^^^^^^^^^^^^^^^

        primarySkillA = "primary",
>primarySkillA = "primary" : "primary"
>                          : ^^^^^^^^^
>primarySkillA : string
>              : ^^^^^^
>"primary" : "primary"
>          : ^^^^^^^^^

        secondarySkillA = "secondary"
>secondarySkillA = "secondary" : "secondary"
>                              : ^^^^^^^^^^^
>secondarySkillA : string
>                : ^^^^^^
>"secondary" : "secondary"
>            : ^^^^^^^^^^^

    ] = ["none", "none"]
>["none", "none"] : [string, string]
>                 : ^^^^^^^^^^^^^^^^
>"none" : "none"
>       : ^^^^^^
>"none" : "none"
>       : ^^^^^^

] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>["trimming", "edging"] : [string, string]
>                       : ^^^^^^^^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameMA);
>console.log(nameMA) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameMA : string
>       : ^^^^^^
}

for ([numberA3 = -1, ...robotAInfo] = robotA, i = 0; i < 1; i++) {
>[numberA3 = -1, ...robotAInfo] = robotA, i = 0 : 0
>                                               : ^
>[numberA3 = -1, ...robotAInfo] = robotA : Robot
>                                        : ^^^^^
>[numberA3 = -1, ...robotAInfo] : [number, ...(string | number)[]]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 = -1 : -1
>              : ^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>robotA : Robot
>       : ^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([numberA3 = -1, ...robotAInfo] = getRobot(), i = 0; i < 1; i++) {
>[numberA3 = -1, ...robotAInfo] = getRobot(), i = 0 : 0
>                                                   : ^
>[numberA3 = -1, ...robotAInfo] = getRobot() : Robot
>                                            : ^^^^^
>[numberA3 = -1, ...robotAInfo] : [number, ...(string | number)[]]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 = -1 : -1
>              : ^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
for ([numberA3 = -1, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberA3 = -1, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"], i = 0 : 0
>                                                                          : ^
>[numberA3 = -1, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"] : Robot
>                                                                   : ^^^^^
>[numberA3 = -1, ...robotAInfo] : [number, ...(string | number)[]]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numberA3 = -1 : -1
>              : ^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>...robotAInfo : string | number
>              : ^^^^^^^^^^^^^^^
>robotAInfo : (string | number)[]
>           : ^^^^^^^^^^^^^^^^^^^
><Robot>[2, "trimmer", "trimming"] : Robot
>                                  : ^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i = 0 : 0
>      : ^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(numberA3);
>console.log(numberA3) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberA3 : number
>         : ^^^^^^
}
