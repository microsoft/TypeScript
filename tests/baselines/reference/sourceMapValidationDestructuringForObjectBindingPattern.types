//// [tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPattern.ts] ////

=== sourceMapValidationDestructuringForObjectBindingPattern.ts ===
declare var console: {
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^

    log(msg: any): void;
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>msg : any
}
interface Robot {
    name: string;
>name : string
>     : ^^^^^^

    skill: string;
>skill : string
>      : ^^^^^^
}

interface MultiRobot {
    name: string;
>name : string
>     : ^^^^^^

    skills: {
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^      ^^^^^^^^^^^^^      ^^^

        primary: string;
>primary : string
>        : ^^^^^^

        secondary: string;
>secondary : string
>          : ^^^^^^

    };
}

let robot: Robot = { name: "mower", skill: "mowing" };
>robot : Robot
>      : ^^^^^
>{ name: "mower", skill: "mowing" } : { name: string; skill: string; }
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"mower" : "mower"
>        : ^^^^^^^
>skill : string
>      : ^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^

let multiRobot: MultiRobot = { name: "mower", skills: { primary: "mowing", secondary: "none" } };
>multiRobot : MultiRobot
>           : ^^^^^^^^^^
>{ name: "mower", skills: { primary: "mowing", secondary: "none" } } : { name: string; skills: { primary: string; secondary: string; }; }
>                                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"mower" : "mower"
>        : ^^^^^^^
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ primary: "mowing", secondary: "none" } : { primary: string; secondary: string; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>primary : string
>        : ^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^
>secondary : string
>          : ^^^^^^
>"none" : "none"
>       : ^^^^^^

function getRobot() {
>getRobot : () => Robot
>         : ^^^^^^^^^^^

    return robot;
>robot : Robot
>      : ^^^^^
}
function getMultiRobot() {
>getMultiRobot : () => MultiRobot
>              : ^^^^^^^^^^^^^^^^

    return multiRobot;
>multiRobot : MultiRobot
>           : ^^^^^^^^^^
}

for (let {name: nameA } = robot, i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>robot : Robot
>      : ^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for (let {name: nameA } = getRobot(), i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for (let {name: nameA } = <Robot>{ name: "trimmer", skill: "trimming" }, i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
><Robot>{ name: "trimmer", skill: "trimming" } : Robot
>                                              : ^^^^^
>{ name: "trimmer", skill: "trimming" } : { name: string; skill: string; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>skill : string
>      : ^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for (let { skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^
>multiRobot : MultiRobot
>           : ^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primaryA);
>console.log(primaryA) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primaryA : string
>         : ^^^^^^
}
for (let { skills: { primary: primaryA, secondary: secondaryA } } = getMultiRobot(), i = 0; i < 1; i++) {
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^
>getMultiRobot() : MultiRobot
>                : ^^^^^^^^^^
>getMultiRobot : () => MultiRobot
>              : ^^^^^^^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primaryA);
>console.log(primaryA) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primaryA : string
>         : ^^^^^^
}
for (let { skills: { primary: primaryA, secondary: secondaryA } } =
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^

    <MultiRobot>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } },
><MultiRobot>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : MultiRobot
>                                                                                      : ^^^^^^^^^^
>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : { name: string; skills: { primary: string; secondary: string; }; }
>                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ primary: "trimming", secondary: "edging" } : { primary: string; secondary: string; }
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>primary : string
>        : ^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>secondary : string
>          : ^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^

    i = 0; i < 1; i++) {
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primaryA);
>console.log(primaryA) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primaryA : string
>         : ^^^^^^
}

for (let {name: nameA, skill: skillA } = robot, i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>skill : any
>      : ^^^
>skillA : string
>       : ^^^^^^
>robot : Robot
>      : ^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for (let {name: nameA, skill: skillA } = getRobot(), i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>skill : any
>      : ^^^
>skillA : string
>       : ^^^^^^
>getRobot() : Robot
>           : ^^^^^
>getRobot : () => Robot
>         : ^^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for (let {name: nameA, skill: skillA } = <Robot>{ name: "trimmer", skill: "trimming" }, i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>skill : any
>      : ^^^
>skillA : string
>       : ^^^^^^
><Robot>{ name: "trimmer", skill: "trimming" } : Robot
>                                              : ^^^^^
>{ name: "trimmer", skill: "trimming" } : { name: string; skill: string; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>skill : string
>      : ^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}
for (let {name: nameA, skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^
>multiRobot : MultiRobot
>           : ^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primaryA);
>console.log(primaryA) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primaryA : string
>         : ^^^^^^
}
for (let {name: nameA, skills: { primary: primaryA, secondary: secondaryA } } = getMultiRobot(), i = 0; i < 1; i++) {
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^
>getMultiRobot() : MultiRobot
>                : ^^^^^^^^^^
>getMultiRobot : () => MultiRobot
>              : ^^^^^^^^^^^^^^^^
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primaryA);
>console.log(primaryA) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primaryA : string
>         : ^^^^^^
}
for (let {name: nameA, skills: { primary: primaryA, secondary: secondaryA } } =
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^

    <MultiRobot>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } },
><MultiRobot>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : MultiRobot
>                                                                                      : ^^^^^^^^^^
>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : { name: string; skills: { primary: string; secondary: string; }; }
>                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ primary: "trimming", secondary: "edging" } : { primary: string; secondary: string; }
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>primary : string
>        : ^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>secondary : string
>          : ^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^

    i = 0; i < 1; i++) {
>i : number
>  : ^^^^^^
>0 : 0
>  : ^
>i < 1 : boolean
>      : ^^^^^^^
>i : number
>  : ^^^^^^
>1 : 1
>  : ^
>i++ : number
>    : ^^^^^^
>i : number
>  : ^^^^^^

    console.log(primaryA);
>console.log(primaryA) : void
>                      : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>primaryA : string
>         : ^^^^^^
}
