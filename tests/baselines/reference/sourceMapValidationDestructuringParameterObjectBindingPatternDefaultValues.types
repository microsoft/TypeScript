//// [tests/cases/compiler/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.ts] ////

=== sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.ts ===
interface Robot {
    name?: string;
>name : string
>     : ^^^^^^

    skill?: string;
>skill : string
>      : ^^^^^^
}
declare var console: {
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^

    log(msg: string): void;
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>msg : string
>    : ^^^^^^
}
var hello = "hello";
>hello : string
>      : ^^^^^^
>"hello" : "hello"
>        : ^^^^^^^

var robotA: Robot = { name: "mower", skill: "mowing" };
>robotA : Robot
>       : ^^^^^
>{ name: "mower", skill: "mowing" } : { name: string; skill: string; }
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"mower" : "mower"
>        : ^^^^^^^
>skill : string
>      : ^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^

function foo1({ name: nameA = "<NoName>" }: Robot = { }) {
>foo1 : ({ name: nameA }?: Robot) => void
>     : ^               ^^^     ^^^^^^^^^
>name : any
>     : ^^^
>nameA : string
>      : ^^^^^^
>"<NoName>" : "<NoName>"
>           : ^^^^^^^^^^
>{ } : {}
>    : ^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: string) => void
>            : ^   ^^      ^^^^^    
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>nameA : string
>      : ^^^^^^
}
function foo2({ name: nameB = "<NoName>", skill: skillB = "noSkill" }: Robot = {}) {
>foo2 : ({ name: nameB, skill: skillB }?: Robot) => void
>     : ^                              ^^^     ^^^^^^^^^
>name : any
>     : ^^^
>nameB : string
>      : ^^^^^^
>"<NoName>" : "<NoName>"
>           : ^^^^^^^^^^
>skill : any
>      : ^^^
>skillB : string
>       : ^^^^^^
>"noSkill" : "noSkill"
>          : ^^^^^^^^^
>{} : {}
>   : ^^

    console.log(nameB);
>console.log(nameB) : void
>                   : ^^^^
>console.log : (msg: string) => void
>            : ^   ^^      ^^^^^    
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>nameB : string
>      : ^^^^^^
}
function foo3({ name = "<NoName>" }: Robot = {}) {
>foo3 : ({ name }?: Robot) => void
>     : ^        ^^^     ^^^^^^^^^
>name : string
>     : ^^^^^^
>"<NoName>" : "<NoName>"
>           : ^^^^^^^^^^
>{} : {}
>   : ^^

    console.log(name);
>console.log(name) : void
>                  : ^^^^
>console.log : (msg: string) => void
>            : ^   ^^      ^^^^^    
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>name : string
>     : ^^^^^^
}

foo1(robotA);
>foo1(robotA) : void
>             : ^^^^
>foo1 : ({ name: nameA }?: Robot) => void
>     : ^               ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo1({ name: "Edger", skill: "cutting edges" });
>foo1({ name: "Edger", skill: "cutting edges" }) : void
>                                                : ^^^^
>foo1 : ({ name: nameA }?: Robot) => void
>     : ^               ^^^     ^^^^^^^^^
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"Edger" : "Edger"
>        : ^^^^^^^
>skill : string
>      : ^^^^^^
>"cutting edges" : "cutting edges"
>                : ^^^^^^^^^^^^^^^

foo2(robotA);
>foo2(robotA) : void
>             : ^^^^
>foo2 : ({ name: nameB, skill: skillB }?: Robot) => void
>     : ^                              ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo2({ name: "Edger", skill: "cutting edges" });
>foo2({ name: "Edger", skill: "cutting edges" }) : void
>                                                : ^^^^
>foo2 : ({ name: nameB, skill: skillB }?: Robot) => void
>     : ^                              ^^^     ^^^^^^^^^
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"Edger" : "Edger"
>        : ^^^^^^^
>skill : string
>      : ^^^^^^
>"cutting edges" : "cutting edges"
>                : ^^^^^^^^^^^^^^^

foo3(robotA);
>foo3(robotA) : void
>             : ^^^^
>foo3 : ({ name }?: Robot) => void
>     : ^        ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo3({ name: "Edger", skill: "cutting edges" });
>foo3({ name: "Edger", skill: "cutting edges" }) : void
>                                                : ^^^^
>foo3 : ({ name }?: Robot) => void
>     : ^        ^^^     ^^^^^^^^^
>{ name: "Edger", skill: "cutting edges" } : { name: string; skill: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"Edger" : "Edger"
>        : ^^^^^^^
>skill : string
>      : ^^^^^^
>"cutting edges" : "cutting edges"
>                : ^^^^^^^^^^^^^^^

