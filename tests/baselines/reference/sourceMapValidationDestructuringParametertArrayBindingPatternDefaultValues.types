//// [tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues.ts] ////

=== sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues.ts ===
declare var console: {
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^

    log(msg: any): void;
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>msg : any
}
type Robot = [number, string, string];
>Robot : Robot
>      : ^^^^^

var robotA: Robot = [1, "mower", "mowing"];
>robotA : Robot
>       : ^^^^^
>[1, "mower", "mowing"] : [number, string, string]
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"mower" : "mower"
>        : ^^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^

function foo1([, nameA = "noName"]: Robot = [-1, "name", "skill"]) {
>foo1 : ([, nameA]?: Robot) => void
>     : ^         ^^^     ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>nameA : string
>      : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^
>[-1, "name", "skill"] : [number, string, string]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>"name" : "name"
>       : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^

    console.log(nameA);
>console.log(nameA) : void
>                   : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA : string
>      : ^^^^^^
}

function foo2([numberB = -1]: Robot = [-1, "name", "skill"]) {
>foo2 : ([numberB]?: Robot) => void
>     : ^         ^^^     ^^^^^^^^^
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>[-1, "name", "skill"] : [number, string, string]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>"name" : "name"
>       : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^

    console.log(numberB);
>console.log(numberB) : void
>                     : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>numberB : number
>        : ^^^^^^
}

function foo3([numberA2 = -1, nameA2 = "name", skillA2 = "skill"]: Robot = [-1, "name", "skill"]) {
>foo3 : ([numberA2, nameA2, skillA2]?: Robot) => void
>     : ^                           ^^^     ^^^^^^^^^
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 : string
>       : ^^^^^^
>"name" : "name"
>       : ^^^^^^
>skillA2 : string
>        : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^
>[-1, "name", "skill"] : [number, string, string]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>"name" : "name"
>       : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^

    console.log(nameA2);
>console.log(nameA2) : void
>                    : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>nameA2 : string
>       : ^^^^^^
}

function foo4([numberA3 = -1, ...robotAInfo]: Robot = [-1, "name", "skill"]) {
>foo4 : ([numberA3, ...robotAInfo]?: Robot) => void
>     : ^                         ^^^     ^^^^^^^^^
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>robotAInfo : [string, string]
>           : ^^^^^^^^^^^^^^^^
>[-1, "name", "skill"] : [number, string, string]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>"name" : "name"
>       : ^^^^^^
>"skill" : "skill"
>        : ^^^^^^^

    console.log(robotAInfo);
>console.log(robotAInfo) : void
>                        : ^^^^
>console.log : (msg: any) => void
>            : ^   ^^   ^^^^^    
>console : { log(msg: any): void; }
>        : ^^^^^^   ^^   ^^^    ^^^
>log : (msg: any) => void
>    : ^   ^^   ^^^^^    
>robotAInfo : [string, string]
>           : ^^^^^^^^^^^^^^^^
}

foo1(robotA);
>foo1(robotA) : void
>             : ^^^^
>foo1 : ([, nameA]?: Robot) => void
>     : ^         ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo1([2, "trimmer", "trimming"]);
>foo1([2, "trimmer", "trimming"]) : void
>                                 : ^^^^
>foo1 : ([, nameA]?: Robot) => void
>     : ^         ^^^     ^^^^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^

foo2(robotA);
>foo2(robotA) : void
>             : ^^^^
>foo2 : ([numberB]?: Robot) => void
>     : ^         ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo2([2, "trimmer", "trimming"]);
>foo2([2, "trimmer", "trimming"]) : void
>                                 : ^^^^
>foo2 : ([numberB]?: Robot) => void
>     : ^         ^^^     ^^^^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^

foo3(robotA);
>foo3(robotA) : void
>             : ^^^^
>foo3 : ([numberA2, nameA2, skillA2]?: Robot) => void
>     : ^                           ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo3([2, "trimmer", "trimming"]);
>foo3([2, "trimmer", "trimming"]) : void
>                                 : ^^^^
>foo3 : ([numberA2, nameA2, skillA2]?: Robot) => void
>     : ^                           ^^^     ^^^^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^

foo4(robotA);
>foo4(robotA) : void
>             : ^^^^
>foo4 : ([numberA3, ...robotAInfo]?: Robot) => void
>     : ^                         ^^^     ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

foo4([2, "trimmer", "trimming"]);
>foo4([2, "trimmer", "trimming"]) : void
>                                 : ^^^^
>foo4 : ([numberA3, ...robotAInfo]?: Robot) => void
>     : ^                         ^^^     ^^^^^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^

