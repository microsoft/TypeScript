//// [tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.ts] ////

=== sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.ts ===
declare var console: {
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^

    log(msg: string): void;
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>msg : string
>    : ^^^^^^
}
type Robot = [number, string, string];
>Robot : Robot
>      : ^^^^^

var robotA: Robot = [1, "mower", "mowing"];
>robotA : Robot
>       : ^^^^^
>[1, "mower", "mowing"] : [number, string, string]
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>"mower" : "mower"
>        : ^^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^

var robotB: Robot = [2, "trimmer", "trimming"];
>robotB : Robot
>       : ^^^^^
>[2, "trimmer", "trimming"] : [number, string, string]
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^
>2 : 2
>  : ^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^

let [, nameA = "noName"] = robotA;
> : undefined
> : ^^^^^^^^^
>nameA : string
>      : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^
>robotA : Robot
>       : ^^^^^

let [numberB = -1] = robotB;
>numberB : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>robotB : Robot
>       : ^^^^^

let [numberA2 = -1, nameA2 = "noName", skillA2 = "noSkill"] = robotA;
>numberA2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameA2 : string
>       : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^
>skillA2 : string
>        : ^^^^^^
>"noSkill" : "noSkill"
>          : ^^^^^^^^^
>robotA : Robot
>       : ^^^^^

let [numberC2 = -1] = [3, "edging", "Trimming edges"];
>numberC2 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>[3, "edging", "Trimming edges"] : [number, string, string]
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^
>3 : 3
>  : ^
>"edging" : "edging"
>         : ^^^^^^^^
>"Trimming edges" : "Trimming edges"
>                 : ^^^^^^^^^^^^^^^^

let [numberC = -1, nameC = "noName", skillC = "noSkill"] = [3, "edging", "Trimming edges"];
>numberC : number
>        : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>nameC : string
>      : ^^^^^^
>"noName" : "noName"
>         : ^^^^^^^^
>skillC : string
>       : ^^^^^^
>"noSkill" : "noSkill"
>          : ^^^^^^^^^
>[3, "edging", "Trimming edges"] : [number, string, string]
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^
>3 : 3
>  : ^
>"edging" : "edging"
>         : ^^^^^^^^
>"Trimming edges" : "Trimming edges"
>                 : ^^^^^^^^^^^^^^^^

let [numberA3 = -1, ...robotAInfo] = robotA;
>numberA3 : number
>         : ^^^^^^
>-1 : -1
>   : ^^
>1 : 1
>  : ^
>robotAInfo : [string, string]
>           : ^^^^^^^^^^^^^^^^
>robotA : Robot
>       : ^^^^^

if (nameA == nameA2) {
>nameA == nameA2 : boolean
>                : ^^^^^^^
>nameA : string
>      : ^^^^^^
>nameA2 : string
>       : ^^^^^^

    console.log(skillA2);
>console.log(skillA2) : void
>                     : ^^^^
>console.log : (msg: string) => void
>            : ^   ^^      ^^^^^    
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>skillA2 : string
>        : ^^^^^^
}
