//// [tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.ts] ////

=== sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.ts ===
declare var console: {
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^

    log(msg: string): void;
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>msg : string
>    : ^^^^^^
}
interface Robot {
    name: string;
>name : string
>     : ^^^^^^

    skills: {
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^      ^^^^^^^^^^^^^      ^^^

        primary: string;
>primary : string
>        : ^^^^^^

        secondary: string;
>secondary : string
>          : ^^^^^^

    };
}
var robotA: Robot = { name: "mower", skills: { primary: "mowing", secondary: "none" } };
>robotA : Robot
>       : ^^^^^
>{ name: "mower", skills: { primary: "mowing", secondary: "none" } } : { name: string; skills: { primary: string; secondary: string; }; }
>                                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"mower" : "mower"
>        : ^^^^^^^
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ primary: "mowing", secondary: "none" } : { primary: string; secondary: string; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>primary : string
>        : ^^^^^^
>"mowing" : "mowing"
>         : ^^^^^^^^
>secondary : string
>          : ^^^^^^
>"none" : "none"
>       : ^^^^^^

var robotB: Robot = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } };
>robotB : Robot
>       : ^^^^^
>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : { name: string; skills: { primary: string; secondary: string; }; }
>                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"trimmer" : "trimmer"
>          : ^^^^^^^^^
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ primary: "trimming", secondary: "edging" } : { primary: string; secondary: string; }
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>primary : string
>        : ^^^^^^
>"trimming" : "trimming"
>           : ^^^^^^^^^^
>secondary : string
>          : ^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^

var { skills: { primary: primaryA, secondary: secondaryA } } = robotA;
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryA : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryA : string
>           : ^^^^^^
>robotA : Robot
>       : ^^^^^

var { name: nameB, skills: { primary: primaryB, secondary: secondaryB } } = robotB;
>name : any
>     : ^^^
>nameB : string
>      : ^^^^^^
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryB : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryB : string
>           : ^^^^^^
>robotB : Robot
>       : ^^^^^

var { name: nameC, skills: { primary: primaryB, secondary: secondaryB } } = { name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } };
>name : any
>     : ^^^
>nameC : string
>      : ^^^^^^
>skills : any
>       : ^^^
>primary : any
>        : ^^^
>primaryB : string
>         : ^^^^^^
>secondary : any
>          : ^^^
>secondaryB : string
>           : ^^^^^^
>{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
>                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"Edger" : "Edger"
>        : ^^^^^^^
>skills : { primary: string; secondary: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ primary: "edging", secondary: "branch trimming" } : { primary: string; secondary: string; }
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>primary : string
>        : ^^^^^^
>"edging" : "edging"
>         : ^^^^^^^^
>secondary : string
>          : ^^^^^^
>"branch trimming" : "branch trimming"
>                  : ^^^^^^^^^^^^^^^^^

if (nameB == nameB) {
>nameB == nameB : boolean
>               : ^^^^^^^
>nameB : string
>      : ^^^^^^
>nameB : string
>      : ^^^^^^

    console.log(nameC);
>console.log(nameC) : void
>                   : ^^^^
>console.log : (msg: string) => void
>            : ^   ^^      ^^^^^    
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>nameC : string
>      : ^^^^^^
}
else {
    console.log(nameC);
>console.log(nameC) : void
>                   : ^^^^
>console.log : (msg: string) => void
>            : ^   ^^      ^^^^^    
>console : { log(msg: string): void; }
>        : ^^^^^^   ^^      ^^^    ^^^
>log : (msg: string) => void
>    : ^   ^^      ^^^^^    
>nameC : string
>      : ^^^^^^
}
