//// [tests/cases/compiler/sourceMapValidationForIn.ts] ////

=== sourceMapValidationForIn.ts ===
for (var x in String) {
>x : string
>  : ^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^

    WScript.Echo(x);
>WScript.Echo(x) : void
>                : ^^^^
>WScript.Echo : (s: any) => void
>             : ^ ^^   ^^^^^    
>WScript : { Echo(s: any): void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item(n: number): string; }; ScriptFullName: string; Quit(exitCode?: number): number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject(objEventSource: any, strPrefix: string): void; CreateObject(strProgID: string, strPrefix?: string): any; DisconnectObject(obj: any): void; GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any; Sleep(intTime: number): void; }

>Echo : (s: any) => void
>     : ^ ^^   ^^^^^    
>x : string
>  : ^^^^^^
}
for (x in String) {
>x : string
>  : ^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^

    WScript.Echo(x);
>WScript.Echo(x) : void
>                : ^^^^
>WScript.Echo : (s: any) => void
>             : ^ ^^   ^^^^^    
>WScript : { Echo(s: any): void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item(n: number): string; }; ScriptFullName: string; Quit(exitCode?: number): number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject(objEventSource: any, strPrefix: string): void; CreateObject(strProgID: string, strPrefix?: string): any; DisconnectObject(obj: any): void; GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any; Sleep(intTime: number): void; }
>        : ^^^^^^^ ^^   ^^^    ^^^^^^^^^^                ^^^^^^^^^^                ^^^^^^^^^^^^^                                            ^^^^^^^^^^^^^^^^^^      ^^^^^^^        ^^^      ^^^      ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^      ^^^^^^^^^^^^^^^       ^^^^^^^^      ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^                ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^              ^^   ^^         ^^      ^^^    ^^^^^^^^^^^^^^^         ^^      ^^         ^^^      ^^^   ^^^^^^^^^^^^^^^^^^^   ^^   ^^^    ^^^^^^^^^^^^           ^^      ^^         ^^^      ^^         ^^^      ^^^   ^^^^^^^^       ^^      ^^^    ^^^
>Echo : (s: any) => void
>     : ^ ^^   ^^^^^    
>x : string
>  : ^^^^^^
}
for (var x2 in String)
>x2 : string
>   : ^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^
{
    WScript.Echo(x2);
>WScript.Echo(x2) : void
>                 : ^^^^
>WScript.Echo : (s: any) => void
>             : ^ ^^   ^^^^^    
>WScript : { Echo(s: any): void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item(n: number): string; }; ScriptFullName: string; Quit(exitCode?: number): number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject(objEventSource: any, strPrefix: string): void; CreateObject(strProgID: string, strPrefix?: string): any; DisconnectObject(obj: any): void; GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any; Sleep(intTime: number): void; }
>        : ^^^^^^^ ^^   ^^^    ^^^^^^^^^^                ^^^^^^^^^^                ^^^^^^^^^^^^^                                            ^^^^^^^^^^^^^^^^^^      ^^^^^^^        ^^^      ^^^      ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^      ^^^^^^^^^^^^^^^       ^^^^^^^^      ^^^^^^^^      ^^^^^^^^^^^^^^      ^^^^^^^^^                ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^              ^^   ^^         ^^      ^^^    ^^^^^^^^^^^^^^^         ^^      ^^         ^^^      ^^^   ^^^^^^^^^^^^^^^^^^^   ^^   ^^^    ^^^^^^^^^^^^           ^^      ^^         ^^^      ^^         ^^^      ^^^   ^^^^^^^^       ^^      ^^^    ^^^
>Echo : (s: any) => void
>     : ^ ^^   ^^^^^    
>x2 : string
>   : ^^^^^^
}
for (x in String)
>x : string
>  : ^^^^^^
>String : StringConstructor
>       : ^^^^^^^^^^^^^^^^^
{
    WScript.Echo(x);
>WScript.Echo(x) : void
>                : ^^^^
>WScript.Echo : (s: any) => void
>             : ^ ^^   ^^^^^    
>WScript : { Echo(s: any): void; StdErr: TextStreamWriter; StdOut: TextStreamWriter; Arguments: { length: number; Item(n: number): string; }; ScriptFullName: string; Quit(exitCode?: number): number; BuildVersion: number; FullName: string; Interactive: boolean; Name: string; Path: string; ScriptName: string; StdIn: TextStreamReader; Version: string; ConnectObject(objEventSource: any, strPrefix: string): void; CreateObject(strProgID: string, strPrefix?: string): any; DisconnectObject(obj: any): void; GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any; Sleep(intTime: number): void; }

>Echo : (s: any) => void
>     : ^ ^^   ^^^^^    
>x : string
>  : ^^^^^^
}
