//// [tests/cases/compiler/spreadExpressionContextualTypeWithNamespace.ts] ////

=== spreadExpressionContextualTypeWithNamespace_0.ts ===
// Repro from #44179 with some modification

function func() {}
>func : () => void
>     : ^^^^^^^^^^

class klass {}
>klass : klass
>      : ^^^^^

const obj = { x: true };
>obj : { x: boolean; }
>    : ^^^^^^^^^^^^^^^
>{ x: true } : { x: boolean; }
>            : ^^^^^^^^^^^^^^^
>x : boolean
>  : ^^^^^^^
>true : true
>     : ^^^^

export { func, klass, obj };
>func : () => void
>     : ^^^^^^^^^^
>klass : typeof klass
>      : ^^^^^^^^^^^^
>obj : { x: boolean; }
>    : ^^^^^^^^^^^^^^^

export function exportedDirectly() {}
>exportedDirectly : () => void
>                 : ^^^^^^^^^^

=== spreadExpressionContextualTypeWithNamespace_1.ts ===
import * as stuff from "./spreadExpressionContextualTypeWithNamespace_0";
>stuff : typeof stuff
>      : ^^^^^^^^^^^^

stuff.func;
>stuff.func : () => void
>           : ^^^^^^^^^^
>stuff : typeof stuff
>      : ^^^^^^^^^^^^
>func : () => void
>     : ^^^^^^^^^^

stuff.klass;
>stuff.klass : typeof stuff.klass
>            : ^^^^^^^^^^^^^^^^^^
>stuff : typeof stuff
>      : ^^^^^^^^^^^^
>klass : typeof stuff.klass
>      : ^^^^^^^^^^^^^^^^^^

stuff.obj;
>stuff.obj : { x: boolean; }
>          : ^^^^^^^^^^^^^^^
>stuff : typeof stuff
>      : ^^^^^^^^^^^^
>obj : { x: boolean; }
>    : ^^^^^^^^^^^^^^^

stuff.exportedDirectly;
>stuff.exportedDirectly : () => void
>                       : ^^^^^^^^^^
>stuff : typeof stuff
>      : ^^^^^^^^^^^^
>exportedDirectly : () => void
>                 : ^^^^^^^^^^

function getStuff<T>() {
>getStuff : <T>() => { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  const thing = { ...stuff };
>thing : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ ...stuff } : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>stuff : typeof stuff
>      : ^^^^^^^^^^^^

  thing.func;
>thing.func : () => void
>           : ^^^^^^^^^^
>thing : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>func : () => void
>     : ^^^^^^^^^^

  thing.klass;
>thing.klass : typeof stuff.klass
>            : ^^^^^^^^^^^^^^^^^^
>thing : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>klass : typeof stuff.klass
>      : ^^^^^^^^^^^^^^^^^^

  thing.obj;
>thing.obj : { x: boolean; }
>          : ^^^^^^^^^^^^^^^
>thing : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : { x: boolean; }
>    : ^^^^^^^^^^^^^^^

  thing.exportedDirectly;
>thing.exportedDirectly : () => void
>                       : ^^^^^^^^^^
>thing : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>exportedDirectly : () => void
>                 : ^^^^^^^^^^

  return thing;
>thing : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

getStuff().func;
>getStuff().func : () => void
>                : ^^^^^^^^^^
>getStuff() : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>getStuff : <T>() => { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>func : () => void
>     : ^^^^^^^^^^

getStuff().klass;
>getStuff().klass : typeof stuff.klass
>                 : ^^^^^^^^^^^^^^^^^^
>getStuff() : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>getStuff : <T>() => { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>klass : typeof stuff.klass
>      : ^^^^^^^^^^^^^^^^^^

getStuff().obj;
>getStuff().obj : { x: boolean; }
>               : ^^^^^^^^^^^^^^^
>getStuff() : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>getStuff : <T>() => { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : { x: boolean; }
>    : ^^^^^^^^^^^^^^^

getStuff().exportedDirectly;
>getStuff().exportedDirectly : () => void
>                            : ^^^^^^^^^^
>getStuff() : { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>getStuff : <T>() => { func: () => void; klass: typeof stuff.klass; obj: { x: boolean; }; exportedDirectly(): void; }
>         : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>exportedDirectly : () => void
>                 : ^^^^^^^^^^

