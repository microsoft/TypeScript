//// [tests/cases/conformance/types/spread/spreadOverwritesPropertyStrict.ts] ////

=== spreadOverwritesPropertyStrict.ts ===
declare var ab: { a: number, b: number };
>ab : { a: number; b: number; }
>   : ^^^^^      ^^^^^      ^^^
>a : number
>  : ^^^^^^
>b : number
>  : ^^^^^^

declare var abq: { a: number, b?: number };
>abq : { a: number; b?: number; }
>    : ^^^^^      ^^^^^^      ^^^
>a : number
>  : ^^^^^^
>b : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

var unused1 = { b: 1, ...ab } // error
>unused1 : { a: number; b: number; }
>        : ^^^^^      ^^^^^      ^^^
>{ b: 1, ...ab } : { a: number; b: number; }
>                : ^^^^^      ^^^^^      ^^^
>b : number
>  : ^^^^^^
>1 : 1
>  : ^
>ab : { a: number; b: number; }
>   : ^^^^^      ^^^^^      ^^^

var unused2 = { ...ab, ...ab } // ok, overwritten error doesn't apply to spreads
>unused2 : { a: number; b: number; }
>        : ^^^^^      ^^^^^      ^^^
>{ ...ab, ...ab } : { a: number; b: number; }
>                 : ^^^^^      ^^^^^      ^^^
>ab : { a: number; b: number; }
>   : ^^^^^      ^^^^^      ^^^
>ab : { a: number; b: number; }
>   : ^^^^^      ^^^^^      ^^^

var unused3 = { b: 1, ...abq } // ok, abq might have b: undefined
>unused3 : { a: number; b: number; }
>        : ^^^^^      ^^^^^      ^^^
>{ b: 1, ...abq } : { a: number; b: number; }
>                 : ^^^^^      ^^^^^      ^^^
>b : number
>  : ^^^^^^
>1 : 1
>  : ^
>abq : { a: number; b?: number; }
>    : ^^^^^      ^^^^^^      ^^^

var unused4 = { ...ab, b: 1 } // ok, we don't care that b in ab is overwritten
>unused4 : { b: number; a: number; }
>        : ^^^^^^^^^^^^^^^^      ^^^
>{ ...ab, b: 1 } : { b: number; a: number; }
>                : ^^^^^^^^^^^^^^^^      ^^^
>ab : { a: number; b: number; }
>   : ^^^^^      ^^^^^      ^^^
>b : number
>  : ^^^^^^
>1 : 1
>  : ^

var unused5 = { ...abq, b: 1 } // ok
>unused5 : { b: number; a: number; }
>        : ^^^^^^^^^^^^^^^^      ^^^
>{ ...abq, b: 1 } : { b: number; a: number; }
>                 : ^^^^^^^^^^^^^^^^      ^^^
>abq : { a: number; b?: number; }
>    : ^^^^^      ^^^^^^      ^^^
>b : number
>  : ^^^^^^
>1 : 1
>  : ^

function g(obj: { x: number | undefined }) {
>g : (obj: { x: number | undefined; }) => { x: number | undefined; }
>  : ^   ^^                          ^^^^^^^^^^                  ^^^
>obj : { x: number | undefined; }
>    : ^^^^^                  ^^^
>x : number | undefined
>  : ^^^^^^^^^^^^^^^^^^

    return { x: 1, ...obj }; // ok, obj might have x: undefined
>{ x: 1, ...obj } : { x: number | undefined; }
>                 : ^^^^^                  ^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>obj : { x: number | undefined; }
>    : ^^^^^                  ^^^
}
function f(obj: { x: number } | undefined) {
>f : (obj: { x: number; } | undefined) => { x: number; }
>  : ^   ^^                          ^^^^^^^^^^      ^^^
>obj : { x: number; } | undefined
>    : ^^^^^      ^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^

    return { x: 1, ...obj }; // ok, obj might be undefined
>{ x: 1, ...obj } : { x: number; }
>                 : ^^^^^      ^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>obj : { x: number; } | undefined
>    : ^^^^^      ^^^^^^^^^^^^^^^
}
function h(obj: { x: number } | { x: string }) {
>h : (obj: { x: number; } | { x: string; }) => { x: number; } | { x: string; }
>  : ^   ^^                               ^^^^^^^^^^      ^^^^^^^^^^^      ^^^
>obj : { x: number; } | { x: string; }
>    : ^^^^^      ^^^^^^^^^^^      ^^^
>x : number
>  : ^^^^^^
>x : string
>  : ^^^^^^

    return { x: 1, ...obj } // error
>{ x: 1, ...obj } : { x: number; } | { x: string; }
>                 : ^^^^^      ^^^^^^^^^^^      ^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>obj : { x: number; } | { x: string; }
>    : ^^^^^      ^^^^^^^^^^^      ^^^
}
function i(b: boolean, t: { command: string, ok: string }) {
>i : (b: boolean, t: { command: string; ok: string; }) => { command: string; ok?: string | undefined; }
>  : ^ ^^       ^^ ^^                                ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : boolean
>  : ^^^^^^^
>t : { command: string; ok: string; }
>  : ^^^^^^^^^^^      ^^^^^^      ^^^
>command : string
>        : ^^^^^^
>ok : string
>   : ^^^^^^

    return { command: "hi", ...(b ? t : {}) } // ok
>{ command: "hi", ...(b ? t : {}) } : { command: string; ok?: string | undefined; }
>                                   : ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>command : string
>        : ^^^^^^
>"hi" : "hi"
>     : ^^^^
>(b ? t : {}) : { command: string; ok: string; } | {}
>             : ^^^^^^^^^^^      ^^^^^^      ^^^^^^^^
>b ? t : {} : { command: string; ok: string; } | {}
>           : ^^^^^^^^^^^      ^^^^^^      ^^^^^^^^
>b : boolean
>  : ^^^^^^^
>t : { command: string; ok: string; }
>  : ^^^^^^^^^^^      ^^^^^^      ^^^
>{} : {}
>   : ^^
}
function j() {
>j : () => { command: string; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    return { ...{ command: "hi" } , ...{ command: "bye" } } // ok
>{ ...{ command: "hi" } , ...{ command: "bye" } } : { command: string; }
>                                                 : ^^^^^^^^^^^^^^^^^^^^
>{ command: "hi" } : { command: string; }
>                  : ^^^^^^^^^^^^^^^^^^^^
>command : string
>        : ^^^^^^
>"hi" : "hi"
>     : ^^^^
>{ command: "bye" } : { command: string; }
>                   : ^^^^^^^^^^^^^^^^^^^^
>command : string
>        : ^^^^^^
>"bye" : "bye"
>      : ^^^^^
}
function k(t: { command: string, ok: string }) {
>k : (t: { command: string; ok: string; }) => { command: string; ok: string; spoiler2: boolean; spoiler: boolean; }
>  : ^ ^^                                ^^^^^^^^^^^^^^^^      ^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>t : { command: string; ok: string; }
>  : ^^^^^^^^^^^      ^^^^^^      ^^^
>command : string
>        : ^^^^^^
>ok : string
>   : ^^^^^^

    return { command: "hi", ...{ spoiler: true }, spoiler2: true, ...t } // error
>{ command: "hi", ...{ spoiler: true }, spoiler2: true, ...t } : { command: string; ok: string; spoiler2: boolean; spoiler: boolean; }
>                                                              : ^^^^^^^^^^^      ^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>command : string
>        : ^^^^^^
>"hi" : "hi"
>     : ^^^^
>{ spoiler: true } : { spoiler: boolean; }
>                  : ^^^^^^^^^^^^^^^^^^^^^
>spoiler : boolean
>        : ^^^^^^^
>true : true
>     : ^^^^
>spoiler2 : boolean
>         : ^^^^^^^
>true : true
>     : ^^^^
>t : { command: string; ok: string; }
>  : ^^^^^^^^^^^      ^^^^^^      ^^^
}

function l(anyrequired: { a: any }) {
>l : (anyrequired: { a: any; }) => { a: any; }
>  : ^           ^^           ^^^^^^^^^^   ^^^
>anyrequired : { a: any; }
>            : ^^^^^   ^^^
>a : any
>  : ^^^

    return { a: 'zzz', ...anyrequired } // error
>{ a: 'zzz', ...anyrequired } : { a: any; }
>                             : ^^^^^   ^^^
>a : string
>  : ^^^^^^
>'zzz' : "zzz"
>      : ^^^^^
>anyrequired : { a: any; }
>            : ^^^^^   ^^^
}
function m(anyoptional: { a?: any }) {
>m : (anyoptional: { a?: any; }) => { a: any; }
>  : ^           ^^            ^^^^^^^^^^   ^^^
>anyoptional : { a?: any; }
>            : ^^^^^^   ^^^
>a : any
>  : ^^^

    return { a: 'zzz', ...anyoptional } // ok
>{ a: 'zzz', ...anyoptional } : { a: any; }
>                             : ^^^^^   ^^^
>a : string
>  : ^^^^^^
>'zzz' : "zzz"
>      : ^^^^^
>anyoptional : { a?: any; }
>            : ^^^^^^   ^^^
}


