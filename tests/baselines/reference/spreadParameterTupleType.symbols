//// [tests/cases/compiler/spreadParameterTupleType.ts] ////

=== spreadParameterTupleType.ts ===
function f1() {
>f1 : Symbol(f1, Decl(spreadParameterTupleType.ts, 0, 0))

    type A = [s: string];
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 0, 15))

    type C = [...A, ...A];
>C : Symbol(C, Decl(spreadParameterTupleType.ts, 1, 25))
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 0, 15))
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 0, 15))

    return function fn(...args: C) { } satisfies any
>fn : Symbol(fn, Decl(spreadParameterTupleType.ts, 4, 10))
>args : Symbol(args, Decl(spreadParameterTupleType.ts, 4, 23))
>C : Symbol(C, Decl(spreadParameterTupleType.ts, 1, 25))
}

function f2() {
>f2 : Symbol(f2, Decl(spreadParameterTupleType.ts, 5, 1))

    type A = [a: string];
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 7, 15))

    type B = [b: string];
>B : Symbol(B, Decl(spreadParameterTupleType.ts, 8, 25))

    type C = [c: string];
>C : Symbol(C, Decl(spreadParameterTupleType.ts, 9, 25))

    type D = [...A, ...A, ...B, ...A, ...B, ...B, ...A, ...C];
>D : Symbol(D, Decl(spreadParameterTupleType.ts, 10, 25))
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 7, 15))
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 7, 15))
>B : Symbol(B, Decl(spreadParameterTupleType.ts, 8, 25))
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 7, 15))
>B : Symbol(B, Decl(spreadParameterTupleType.ts, 8, 25))
>B : Symbol(B, Decl(spreadParameterTupleType.ts, 8, 25))
>A : Symbol(A, Decl(spreadParameterTupleType.ts, 7, 15))
>C : Symbol(C, Decl(spreadParameterTupleType.ts, 9, 25))

    return function fn(...args: D) { } satisfies any;
>fn : Symbol(fn, Decl(spreadParameterTupleType.ts, 13, 10))
>args : Symbol(args, Decl(spreadParameterTupleType.ts, 13, 23))
>D : Symbol(D, Decl(spreadParameterTupleType.ts, 10, 25))
}

