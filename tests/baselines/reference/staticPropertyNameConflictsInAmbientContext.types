//// [tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflictsInAmbientContext.ts] ////

=== decl.d.ts ===
// name
declare class StaticName {
>StaticName : StaticName
>           : ^^^^^^^^^^

    static name: number; // ok
>name : number
>     : ^^^^^^

    name: string; // ok
>name : string
>     : ^^^^^^
}

declare class StaticNameFn {
>StaticNameFn : StaticNameFn
>             : ^^^^^^^^^^^^

    static name(): string; // ok
>name : () => string
>     : ^^^^^^      

    name(): string; // ok
>name : () => string
>     : ^^^^^^      
}

// length
declare class StaticLength {
>StaticLength : StaticLength
>             : ^^^^^^^^^^^^

    static length: number; // ok
>length : number
>       : ^^^^^^

    length: string; // ok
>length : string
>       : ^^^^^^
}

declare class StaticLengthFn {
>StaticLengthFn : StaticLengthFn
>               : ^^^^^^^^^^^^^^

    static length(): number; // ok
>length : () => number
>       : ^^^^^^      

    length(): number; // ok
>length : () => number
>       : ^^^^^^      
}

// prototype
declare class StaticPrototype {
>StaticPrototype : StaticPrototype
>                : ^^^^^^^^^^^^^^^

    static prototype: number; // ok
>prototype : StaticPrototype
>          : ^^^^^^^^^^^^^^^

    prototype: string; // ok
>prototype : string
>          : ^^^^^^
}

declare class StaticPrototypeFn {
>StaticPrototypeFn : StaticPrototypeFn
>                  : ^^^^^^^^^^^^^^^^^

    static prototype: any; // ok
>prototype : StaticPrototypeFn
>          : ^^^^^^^^^^^^^^^^^

    prototype(): any; // ok
>prototype : () => any
>          : ^^^^^^   
}

// caller
declare class StaticCaller {
>StaticCaller : StaticCaller
>             : ^^^^^^^^^^^^

    static caller: number; // ok
>caller : number
>       : ^^^^^^

    caller: string; // ok
>caller : string
>       : ^^^^^^
}

declare class StaticCallerFn {
>StaticCallerFn : StaticCallerFn
>               : ^^^^^^^^^^^^^^

    static caller(): any; // ok
>caller : () => any
>       : ^^^^^^   

    caller(): any; // ok
>caller : () => any
>       : ^^^^^^   
}

// arguments
declare class StaticArguments {
>StaticArguments : StaticArguments
>                : ^^^^^^^^^^^^^^^

    static arguments: number; // ok
>arguments : number
>          : ^^^^^^

    arguments: string; // ok
>arguments : string
>          : ^^^^^^
}

declare class StaticArgumentsFn {
>StaticArgumentsFn : StaticArgumentsFn
>                  : ^^^^^^^^^^^^^^^^^

    static arguments(): any; // ok
>arguments : () => any
>          : ^^^^^^   

    arguments(): any; // ok
>arguments : () => any
>          : ^^^^^^   
}

