//// [tests/cases/compiler/strictFunctionTypesErrors.ts] ////

=== strictFunctionTypesErrors.ts ===
export {}


declare let f1: (x: Object) => Object;
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      
>x : Object
>  : ^^^^^^

declare let f2: (x: Object) => string;
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      
>x : Object
>  : ^^^^^^

declare let f3: (x: string) => Object;
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      
>x : string
>  : ^^^^^^

declare let f4: (x: string) => string;
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      
>x : string
>  : ^^^^^^

f1 = f2;  // Ok
>f1 = f2 : (x: Object) => string
>        : ^ ^^      ^^^^^      
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      

f1 = f3;  // Error
>f1 = f3 : (x: string) => Object
>        : ^ ^^      ^^^^^      
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      

f1 = f4;  // Error
>f1 = f4 : (x: string) => string
>        : ^ ^^      ^^^^^      
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      

f2 = f1;  // Error
>f2 = f1 : (x: Object) => Object
>        : ^ ^^      ^^^^^      
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      

f2 = f3;  // Error
>f2 = f3 : (x: string) => Object
>        : ^ ^^      ^^^^^      
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      

f2 = f4;  // Error
>f2 = f4 : (x: string) => string
>        : ^ ^^      ^^^^^      
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      

f3 = f1;  // Ok
>f3 = f1 : (x: Object) => Object
>        : ^ ^^      ^^^^^      
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      

f3 = f2;  // Ok
>f3 = f2 : (x: Object) => string
>        : ^ ^^      ^^^^^      
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      

f3 = f4;  // Ok
>f3 = f4 : (x: string) => string
>        : ^ ^^      ^^^^^      
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      

f4 = f1;  // Error
>f4 = f1 : (x: Object) => Object
>        : ^ ^^      ^^^^^      
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      
>f1 : (x: Object) => Object
>   : ^ ^^      ^^^^^      

f4 = f2;  // Ok
>f4 = f2 : (x: Object) => string
>        : ^ ^^      ^^^^^      
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      
>f2 : (x: Object) => string
>   : ^ ^^      ^^^^^      

f4 = f3;  // Error
>f4 = f3 : (x: string) => Object
>        : ^ ^^      ^^^^^      
>f4 : (x: string) => string
>   : ^ ^^      ^^^^^      
>f3 : (x: string) => Object
>   : ^ ^^      ^^^^^      

type Func<T, U> = (x: T) => U;
>Func : Func<T, U>
>     : ^^^^^^^^^^
>x : T
>  : ^

declare let g1: Func<Object, Object>;
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

declare let g2: Func<Object, string>;
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^

declare let g3: Func<string, Object>;
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

declare let g4: Func<string, string>;
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g1 = g2;  // Ok
>g1 = g2 : Func<Object, string>
>        : ^^^^^^^^^^^^^^^^^^^^
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g1 = g3;  // Error
>g1 = g3 : Func<string, Object>
>        : ^^^^^^^^^^^^^^^^^^^^
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

g1 = g4;  // Error
>g1 = g4 : Func<string, string>
>        : ^^^^^^^^^^^^^^^^^^^^
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g2 = g1;  // Error
>g2 = g1 : Func<Object, Object>
>        : ^^^^^^^^^^^^^^^^^^^^
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

g2 = g3;  // Error
>g2 = g3 : Func<string, Object>
>        : ^^^^^^^^^^^^^^^^^^^^
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

g2 = g4;  // Error
>g2 = g4 : Func<string, string>
>        : ^^^^^^^^^^^^^^^^^^^^
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g3 = g1;  // Ok
>g3 = g1 : Func<Object, Object>
>        : ^^^^^^^^^^^^^^^^^^^^
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

g3 = g2;  // Ok
>g3 = g2 : Func<Object, string>
>        : ^^^^^^^^^^^^^^^^^^^^
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g3 = g4;  // Ok
>g3 = g4 : Func<string, string>
>        : ^^^^^^^^^^^^^^^^^^^^
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g4 = g1;  // Error
>g4 = g1 : Func<Object, Object>
>        : ^^^^^^^^^^^^^^^^^^^^
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^
>g1 : Func<Object, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

g4 = g2;  // Ok
>g4 = g2 : Func<Object, string>
>        : ^^^^^^^^^^^^^^^^^^^^
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^
>g2 : Func<Object, string>
>   : ^^^^^^^^^^^^^^^^^^^^

g4 = g3;  // Error
>g4 = g3 : Func<string, Object>
>        : ^^^^^^^^^^^^^^^^^^^^
>g4 : Func<string, string>
>   : ^^^^^^^^^^^^^^^^^^^^
>g3 : Func<string, Object>
>   : ^^^^^^^^^^^^^^^^^^^^

declare let h1: Func<Func<Object, void>, Object>;
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let h2: Func<Func<Object, void>, string>;
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let h3: Func<Func<string, void>, Object>;
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let h4: Func<Func<string, void>, string>;
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h1 = h2;  // Ok
>h1 = h2 : Func<Func<Object, void>, string>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h1 = h3;  // Ok
>h1 = h3 : Func<Func<string, void>, Object>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h1 = h4;  // Ok
>h1 = h4 : Func<Func<string, void>, string>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h2 = h1;  // Error
>h2 = h1 : Func<Func<Object, void>, Object>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h2 = h3;  // Error
>h2 = h3 : Func<Func<string, void>, Object>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h2 = h4;  // Ok
>h2 = h4 : Func<Func<string, void>, string>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h3 = h1;  // Error
>h3 = h1 : Func<Func<Object, void>, Object>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h3 = h2;  // Error
>h3 = h2 : Func<Func<Object, void>, string>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h3 = h4;  // Ok
>h3 = h4 : Func<Func<string, void>, string>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h4 = h1;  // Error
>h4 = h1 : Func<Func<Object, void>, Object>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h1 : Func<Func<Object, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h4 = h2;  // Error
>h4 = h2 : Func<Func<Object, void>, string>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h2 : Func<Func<Object, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

h4 = h3;  // Error
>h4 = h3 : Func<Func<string, void>, Object>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h4 : Func<Func<string, void>, string>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>h3 : Func<Func<string, void>, Object>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let i1: Func<Object, Func<Object, void>>;
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let i2: Func<Object, Func<string, void>>;
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let i3: Func<string, Func<Object, void>>;
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare let i4: Func<string, Func<string, void>>;
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i1 = i2;  // Error
>i1 = i2 : Func<Object, Func<string, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i1 = i3;  // Error
>i1 = i3 : Func<string, Func<Object, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i1 = i4;  // Error
>i1 = i4 : Func<string, Func<string, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i2 = i1;  // Ok
>i2 = i1 : Func<Object, Func<Object, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i2 = i3;  // Error
>i2 = i3 : Func<string, Func<Object, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i2 = i4;  // Error
>i2 = i4 : Func<string, Func<string, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i3 = i1;  // Ok
>i3 = i1 : Func<Object, Func<Object, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i3 = i2;  // Error
>i3 = i2 : Func<Object, Func<string, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i3 = i4;  // Error
>i3 = i4 : Func<string, Func<string, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i4 = i1;  // Ok
>i4 = i1 : Func<Object, Func<Object, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i1 : Func<Object, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i4 = i2;  // Ok
>i4 = i2 : Func<Object, Func<string, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i2 : Func<Object, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

i4 = i3;  // Ok
>i4 = i3 : Func<string, Func<Object, void>>
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i4 : Func<string, Func<string, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>i3 : Func<string, Func<Object, void>>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

interface Animal { animal: void }
>animal : void
>       : ^^^^

interface Dog extends Animal { dog: void }
>dog : void
>    : ^^^^

interface Cat extends Animal { cat: void }
>cat : void
>    : ^^^^

interface Comparer1<T> {
    compare(a: T, b: T): number;
>compare : (a: T, b: T) => number
>        : ^ ^^ ^^ ^^ ^^^^^      
>a : T
>  : ^
>b : T
>  : ^
}

declare let animalComparer1: Comparer1<Animal>;
>animalComparer1 : Comparer1<Animal>
>                : ^^^^^^^^^^^^^^^^^

declare let dogComparer1: Comparer1<Dog>;
>dogComparer1 : Comparer1<Dog>
>             : ^^^^^^^^^^^^^^

animalComparer1 = dogComparer1;  // Ok
>animalComparer1 = dogComparer1 : Comparer1<Dog>
>                               : ^^^^^^^^^^^^^^
>animalComparer1 : Comparer1<Animal>
>                : ^^^^^^^^^^^^^^^^^
>dogComparer1 : Comparer1<Dog>
>             : ^^^^^^^^^^^^^^

dogComparer1 = animalComparer1;  // Ok
>dogComparer1 = animalComparer1 : Comparer1<Animal>
>                               : ^^^^^^^^^^^^^^^^^
>dogComparer1 : Comparer1<Dog>
>             : ^^^^^^^^^^^^^^
>animalComparer1 : Comparer1<Animal>
>                : ^^^^^^^^^^^^^^^^^

interface Comparer2<T> {
    compare: (a: T, b: T) => number;
>compare : (a: T, b: T) => number
>        : ^ ^^ ^^ ^^ ^^^^^      
>a : T
>  : ^
>b : T
>  : ^
}

declare let animalComparer2: Comparer2<Animal>;
>animalComparer2 : Comparer2<Animal>
>                : ^^^^^^^^^^^^^^^^^

declare let dogComparer2: Comparer2<Dog>;
>dogComparer2 : Comparer2<Dog>
>             : ^^^^^^^^^^^^^^

animalComparer2 = dogComparer2;  // Error
>animalComparer2 = dogComparer2 : Comparer2<Dog>
>                               : ^^^^^^^^^^^^^^
>animalComparer2 : Comparer2<Animal>
>                : ^^^^^^^^^^^^^^^^^
>dogComparer2 : Comparer2<Dog>
>             : ^^^^^^^^^^^^^^

dogComparer2 = animalComparer2;  // Ok
>dogComparer2 = animalComparer2 : Comparer2<Animal>
>                               : ^^^^^^^^^^^^^^^^^
>dogComparer2 : Comparer2<Dog>
>             : ^^^^^^^^^^^^^^
>animalComparer2 : Comparer2<Animal>
>                : ^^^^^^^^^^^^^^^^^

// Crate<T> is invariant in --strictFunctionTypes mode

interface Crate<T> {
    item: T;
>item : T
>     : ^

    onSetItem: (item: T) => void;
>onSetItem : (item: T) => void
>          : ^    ^^ ^^^^^    
>item : T
>     : ^
}

declare let animalCrate: Crate<Animal>;
>animalCrate : Crate<Animal>
>            : ^^^^^^^^^^^^^

declare let dogCrate: Crate<Dog>;
>dogCrate : Crate<Dog>
>         : ^^^^^^^^^^

// Errors below should elaborate the reason for invariance

animalCrate = dogCrate;  // Error
>animalCrate = dogCrate : Crate<Dog>
>                       : ^^^^^^^^^^
>animalCrate : Crate<Animal>
>            : ^^^^^^^^^^^^^
>dogCrate : Crate<Dog>
>         : ^^^^^^^^^^

dogCrate = animalCrate;  // Error
>dogCrate = animalCrate : Crate<Animal>
>                       : ^^^^^^^^^^^^^
>dogCrate : Crate<Dog>
>         : ^^^^^^^^^^
>animalCrate : Crate<Animal>
>            : ^^^^^^^^^^^^^

// Verify that callback parameters are strictly checked

declare let fc1: (f: (x: Animal) => Animal) => void;
>fc1 : (f: (x: Animal) => Animal) => void
>    : ^ ^^                     ^^^^^    
>f : (x: Animal) => Animal
>  : ^ ^^      ^^^^^      
>x : Animal
>  : ^^^^^^

declare let fc2: (f: (x: Dog) => Dog) => void;
>fc2 : (f: (x: Dog) => Dog) => void
>    : ^ ^^               ^^^^^    
>f : (x: Dog) => Dog
>  : ^ ^^   ^^^^^   
>x : Dog
>  : ^^^

fc1 = fc2;  // Error
>fc1 = fc2 : (f: (x: Dog) => Dog) => void
>          : ^ ^^               ^^^^^    
>fc1 : (f: (x: Animal) => Animal) => void
>    : ^ ^^                     ^^^^^    
>fc2 : (f: (x: Dog) => Dog) => void
>    : ^ ^^               ^^^^^    

fc2 = fc1;  // Error
>fc2 = fc1 : (f: (x: Animal) => Animal) => void
>          : ^ ^^                     ^^^^^    
>fc2 : (f: (x: Dog) => Dog) => void
>    : ^ ^^               ^^^^^    
>fc1 : (f: (x: Animal) => Animal) => void
>    : ^ ^^                     ^^^^^    

// Verify that callback parameters aren't loosely checked when types
// originate in method declarations

namespace n1 {
>n1 : typeof n1
>   : ^^^^^^^^^

    class Foo {
>Foo : Foo
>    : ^^^

        static f1(x: Animal): Animal { throw "wat"; }
>f1 : (x: Animal) => Animal
>   : ^ ^^      ^^^^^      
>x : Animal
>  : ^^^^^^
>"wat" : "wat"
>      : ^^^^^

        static f2(x: Dog): Animal { throw "wat"; };
>f2 : (x: Dog) => Animal
>   : ^ ^^   ^^^^^      
>x : Dog
>  : ^^^
>"wat" : "wat"
>      : ^^^^^
    }
    declare let f1: (cb: typeof Foo.f1) => void;
>f1 : (cb: (x: Animal) => Animal) => void
>   : ^  ^^^ ^^      ^^^^^      ^^^^^    
>cb : (x: Animal) => Animal
>   : ^ ^^      ^^^^^      
>Foo.f1 : (x: Animal) => Animal
>       : ^ ^^      ^^^^^      
>Foo : typeof Foo
>    : ^^^^^^^^^^
>f1 : (x: Animal) => Animal
>   : ^ ^^      ^^^^^      

    declare let f2: (cb: typeof Foo.f2) => void;
>f2 : (cb: (x: Dog) => Animal) => void
>   : ^  ^^^ ^^   ^^^^^      ^^^^^    
>cb : (x: Dog) => Animal
>   : ^ ^^   ^^^^^      
>Foo.f2 : (x: Dog) => Animal
>       : ^ ^^   ^^^^^      
>Foo : typeof Foo
>    : ^^^^^^^^^^
>f2 : (x: Dog) => Animal
>   : ^ ^^   ^^^^^      

    f1 = f2;
>f1 = f2 : (cb: (x: Dog) => Animal) => void
>        : ^  ^^^ ^^   ^^^^^      ^^^^^    
>f1 : (cb: (x: Animal) => Animal) => void
>   : ^  ^^^ ^^      ^^^^^      ^^^^^    
>f2 : (cb: (x: Dog) => Animal) => void
>   : ^  ^^^ ^^   ^^^^^      ^^^^^    

    f2 = f1;  // Error
>f2 = f1 : (cb: (x: Animal) => Animal) => void
>        : ^  ^^^ ^^      ^^^^^      ^^^^^    
>f2 : (cb: (x: Dog) => Animal) => void
>   : ^  ^^^ ^^   ^^^^^      ^^^^^    
>f1 : (cb: (x: Animal) => Animal) => void
>   : ^  ^^^ ^^      ^^^^^      ^^^^^    
}

namespace n2 {
>n2 : typeof n2
>   : ^^^^^^^^^

    type BivariantHack<Input, Output> = { foo(x: Input): Output }["foo"];
>BivariantHack : (x: Input) => Output
>              : ^ ^^     ^^^^^      
>foo : (x: Input) => Output
>    : ^ ^^     ^^^^^      
>x : Input
>  : ^^^^^

    declare let f1: (cb: BivariantHack<Animal, Animal>) => void;
>f1 : (cb: (x: Animal) => Animal) => void
>   : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^    
>cb : (x: Animal) => Animal
>   : ^ ^^^^^^^^^^^^^^^^^^^

    declare let f2: (cb: BivariantHack<Dog, Animal>) => void;
>f2 : (cb: (x: Dog) => Animal) => void
>   : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^    
>cb : (x: Dog) => Animal
>   : ^ ^^^^^^^^^^^^^^^^

    f1 = f2;
>f1 = f2 : (cb: (x: Dog) => Animal) => void
>        : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^    
>f1 : (cb: (x: Animal) => Animal) => void
>   : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^    
>f2 : (cb: (x: Dog) => Animal) => void
>   : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^    

    f2 = f1;  // Error
>f2 = f1 : (cb: (x: Animal) => Animal) => void
>        : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^    
>f2 : (cb: (x: Dog) => Animal) => void
>   : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^    
>f1 : (cb: (x: Animal) => Animal) => void
>   : ^  ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^    
}
