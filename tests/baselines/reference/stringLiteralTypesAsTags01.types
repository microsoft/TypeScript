//// [tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags01.ts] ////

=== stringLiteralTypesAsTags01.ts ===
type Kind = "A" | "B"
>Kind : Kind
>     : ^^^^

interface Entity {
    kind: Kind;
>kind : Kind
>     : ^^^^
}

interface A extends Entity {
    kind: "A";
>kind : "A"
>     : ^^^

    a: number;
>a : number
>  : ^^^^^^
}

interface B extends Entity {
    kind: "B";
>kind : "B"
>     : ^^^

    b: string;
>b : string
>  : ^^^^^^
}

function hasKind(entity: Entity, kind: "A"): entity is A;
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; (entity: Entity, kind: Kind): entity is Entity; }
>        : ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^    ^^^                ^^^
>entity : Entity
>       : ^^^^^^
>kind : "A"
>     : ^^^

function hasKind(entity: Entity, kind: "B"): entity is B;
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; (entity: Entity, kind: Kind): entity is Entity; }
>        : ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^    ^^^                ^^^
>entity : Entity
>       : ^^^^^^
>kind : "B"
>     : ^^^

function hasKind(entity: Entity, kind: Kind): entity is Entity;
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; (entity: Entity, kind: Kind): entity is Entity; }
>        : ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^    ^^^                ^^^
>entity : Entity
>       : ^^^^^^
>kind : Kind
>     : ^^^^

function hasKind(entity: Entity, kind: Kind): boolean {
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; (entity: Entity, kind: Kind): entity is Entity; }
>        : ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^    ^^^                ^^^
>entity : Entity
>       : ^^^^^^
>kind : Kind
>     : ^^^^

    return entity.kind === kind;
>entity.kind === kind : boolean
>                     : ^^^^^^^
>entity.kind : Kind
>            : ^^^^
>entity : Entity
>       : ^^^^^^
>kind : Kind
>     : ^^^^
>kind : Kind
>     : ^^^^
}

let x: A = {
>x : A
>  : ^
>{    kind: "A",    a: 100,} : { kind: "A"; a: number; }
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^

    kind: "A",
>kind : "A"
>     : ^^^
>"A" : "A"
>    : ^^^

    a: 100,
>a : number
>  : ^^^^^^
>100 : 100
>    : ^^^
}

if (hasKind(x, "A")) {
>hasKind(x, "A") : boolean
>                : ^^^^^^^
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; (entity: Entity, kind: Kind): entity is Entity; }
>        : ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^    ^^^                ^^^
>x : A
>  : ^
>"A" : "A"
>    : ^^^

    let a = x;
>a : A
>  : ^
>x : A
>  : ^
}
else {
    let b = x;
>b : never
>  : ^^^^^
>x : never
>  : ^^^^^
}

if (!hasKind(x, "B")) {
>!hasKind(x, "B") : boolean
>                 : ^^^^^^^
>hasKind(x, "B") : boolean
>                : ^^^^^^^
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; (entity: Entity, kind: Kind): entity is Entity; }
>        : ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^   ^^^           ^^^      ^^      ^^    ^^    ^^^                ^^^
>x : A
>  : ^
>"B" : "B"
>    : ^^^

    let c = x;
>c : A
>  : ^
>x : A
>  : ^
}
else {
    let d = x;
>d : never
>  : ^^^^^
>x : never
>  : ^^^^^
}
