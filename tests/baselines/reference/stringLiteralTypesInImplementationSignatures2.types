//// [tests/cases/conformance/types/objectTypeLiteral/callSignatures/stringLiteralTypesInImplementationSignatures2.ts] ////

=== stringLiteralTypesInImplementationSignatures2.ts ===
// String literal types are only valid in overload signatures

function foo(x: any);
>foo : (x: any) => any
>    : ^ ^^   ^^^^^^^^
>x : any
>  : ^^^

function foo(x: 'hi') { }
>foo : (x: any) => any
>    : ^ ^^   ^^^^^^^^
>x : "hi"
>  : ^^^^

class C {
>C : C
>  : ^

    foo(x: string);
>foo : (x: string) => any
>    : ^ ^^      ^^^^^^^^
>x : string
>  : ^^^^^^

    foo(x: 'hi') { }
>foo : (x: string) => any
>    : ^ ^^      ^^^^^^^^
>x : "hi"
>  : ^^^^
}

interface I {
    (x: 'a');
>x : "a"
>  : ^^^

    (x: 'hi');
>x : "hi"
>  : ^^^^

    foo(x: 'a', y: 'a');
>foo : { (x: "a", y: "a"): any; (x: "hi", y: "hi"): any; }
>    : ^^^ ^^   ^^ ^^   ^^^^^^^^^ ^^    ^^ ^^    ^^^^^^^^^
>x : "a"
>  : ^^^
>y : "a"
>  : ^^^

    foo(x: 'hi', y: 'hi');
>foo : { (x: "a", y: "a"): any; (x: "hi", y: "hi"): any; }
>    : ^^^ ^^   ^^ ^^   ^^^^^^^^^ ^^    ^^ ^^    ^^^^^^^^^
>x : "hi"
>  : ^^^^
>y : "hi"
>  : ^^^^
}

var a: {
>a : { (x: "hi"): any; (x: "a"): any; foo(x: "hi"): any; foo(x: "a"): any; }
>  : ^^^ ^^    ^^^^^^^^^ ^^   ^^^^^^^^^^^^ ^^    ^^^^^^^^^^^^ ^^   ^^^^^^^^^

    (x: 'hi');
>x : "hi"
>  : ^^^^

    (x: 'a');
>x : "a"
>  : ^^^

    foo(x: 'hi');
>foo : { (x: "hi"): any; (x: "a"): any; }
>    : ^^^ ^^    ^^^^^^^^^ ^^   ^^^^^^^^^
>x : "hi"
>  : ^^^^

    foo(x: 'a');
>foo : { (x: "hi"): any; (x: "a"): any; }
>    : ^^^ ^^    ^^^^^^^^^ ^^   ^^^^^^^^^
>x : "a"
>  : ^^^
}

var b = {
>b : { foo(x: "hi"): void; foo(x: "a"): void; }
>  : ^^^^^^ ^^    ^^^^^^^^^^^^^ ^^   ^^^^^^^^^^
>{    foo(x: 'hi') { },    foo(x: 'a') { },} : { foo(x: "hi"): void; foo(x: "a"): void; }
>                                            : ^^^^^^ ^^    ^^^^^^^^^^^^^ ^^   ^^^^^^^^^^

    foo(x: 'hi') { },
>foo : { (x: "hi"): void; (x: "a"): void; }
>    : ^^^ ^^    ^^^^^^^^^^ ^^   ^^^^^^^^^^
>x : "hi"
>  : ^^^^

    foo(x: 'a') { },
>foo : { (x: "hi"): void; (x: "a"): void; }
>    : ^^^ ^^    ^^^^^^^^^^ ^^   ^^^^^^^^^^
>x : "a"
>  : ^^^
}

