//// [tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability05.ts] ////

=== stringLiteralTypesOverloadAssignability05.ts ===
function f(x: "foo"): number;
>f : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^
>x : "foo"
>  : ^^^^^

function f(x: string): number;
>f : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^
>x : string
>  : ^^^^^^

function f(x: string): number {
>f : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^
>x : string
>  : ^^^^^^

    return 0;
>0 : 0
>  : ^
}

function g(x: "foo"): number;
>g : (x: "foo") => number
>  : ^ ^^     ^^^^^      
>x : "foo"
>  : ^^^^^

function g(x: string): number {
>g : (x: "foo") => number
>  : ^ ^^     ^^^^^      
>x : string
>  : ^^^^^^

    return 0;
>0 : 0
>  : ^
}

let a = f;
>a : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^
>f : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^

let b = g;
>b : (x: "foo") => number
>  : ^ ^^     ^^^^^      
>g : (x: "foo") => number
>  : ^ ^^     ^^^^^      

a = b;
>a = b : (x: "foo") => number
>      : ^ ^^     ^^^^^      
>a : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^
>b : (x: "foo") => number
>  : ^ ^^     ^^^^^      

b = a;
>b = a : { (x: "foo"): number; (x: string): number; }
>      : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^
>b : (x: "foo") => number
>  : ^ ^^     ^^^^^      
>a : { (x: "foo"): number; (x: string): number; }
>  : ^^^ ^^     ^^^      ^^^ ^^      ^^^      ^^^

