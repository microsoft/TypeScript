//// [tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads03.ts] ////

=== stringLiteralTypesOverloads03.ts ===
interface Base {
    x: string;
>x : string
>  : ^^^^^^

    y: number;
>y : number
>  : ^^^^^^
}

interface HelloOrWorld extends Base {
    p1: boolean;
>p1 : boolean
>   : ^^^^^^^
}

interface JustHello extends Base {
    p2: boolean;
>p2 : boolean
>   : ^^^^^^^
}

interface JustWorld extends Base {
    p3: boolean;
>p3 : boolean
>   : ^^^^^^^
}

let hello: "hello";
>hello : "hello"
>      : ^^^^^^^

let world: "world";
>world : "world"
>      : ^^^^^^^

let helloOrWorld: "hello" | "world";
>helloOrWorld : "hello" | "world"
>             : ^^^^^^^^^^^^^^^^^

function f(p: "hello"): JustHello;
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>p : "hello"
>  : ^^^^^^^

function f(p: "hello" | "world"): HelloOrWorld;
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>p : "hello" | "world"
>  : ^^^^^^^^^^^^^^^^^

function f(p: "world"): JustWorld;
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>p : "world"
>  : ^^^^^^^

function f(p: string): Base;
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>p : string
>  : ^^^^^^

function f(...args: any[]): any {
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>args : any[]
>     : ^^^^^

    return undefined;
>undefined : undefined
>          : ^^^^^^^^^
}

let fResult1 = f(hello);
>fResult1 : JustHello
>         : ^^^^^^^^^
>f(hello) : JustHello
>         : ^^^^^^^^^
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>hello : "hello"
>      : ^^^^^^^

let fResult2 = f(world);
>fResult2 : JustWorld
>         : ^^^^^^^^^
>f(world) : JustWorld
>         : ^^^^^^^^^
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>world : "world"
>      : ^^^^^^^

let fResult3 = f(helloOrWorld);
>fResult3 : HelloOrWorld
>         : ^^^^^^^^^^^^
>f(helloOrWorld) : HelloOrWorld
>                : ^^^^^^^^^^^^
>f : { (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; (p: string): Base; }
>  : ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^ ^^      ^^^    ^^^
>helloOrWorld : "hello" | "world"
>             : ^^^^^^^^^^^^^^^^^

function g(p: string): Base;
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>p : string
>  : ^^^^^^

function g(p: "hello"): JustHello;
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>p : "hello"
>  : ^^^^^^^

function g(p: "hello" | "world"): HelloOrWorld;
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>p : "hello" | "world"
>  : ^^^^^^^^^^^^^^^^^

function g(p: "world"): JustWorld;
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>p : "world"
>  : ^^^^^^^

function g(...args: any[]): any {
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>args : any[]
>     : ^^^^^

    return undefined;
>undefined : undefined
>          : ^^^^^^^^^
}

let gResult1 = g(hello);
>gResult1 : JustHello
>         : ^^^^^^^^^
>g(hello) : JustHello
>         : ^^^^^^^^^
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>hello : "hello"
>      : ^^^^^^^

let gResult2 = g(world);
>gResult2 : JustWorld
>         : ^^^^^^^^^
>g(world) : JustWorld
>         : ^^^^^^^^^
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>world : "world"
>      : ^^^^^^^

let gResult3 = g(helloOrWorld);
>gResult3 : Base
>         : ^^^^
>g(helloOrWorld) : Base
>                : ^^^^
>g : { (p: string): Base; (p: "hello"): JustHello; (p: "hello" | "world"): HelloOrWorld; (p: "world"): JustWorld; }
>  : ^^^ ^^      ^^^    ^^^ ^^       ^^^         ^^^ ^^                 ^^^            ^^^ ^^       ^^^         ^^^
>helloOrWorld : "hello" | "world"
>             : ^^^^^^^^^^^^^^^^^

