//// [tests/cases/compiler/substitutionTypesCompareCorrectlyInRestrictiveInstances.ts] ////

=== substitutionTypesCompareCorrectlyInRestrictiveInstances.ts ===
type UnionKeys<T> = T extends any ? keyof T : never;
>UnionKeys : UnionKeys<T>
>          : ^^^^^^^^^^^^

type BugHelper<T, TAll> = T extends any ? Exclude<UnionKeys<TAll>, keyof T> : never
>BugHelper : BugHelper<T, TAll>
>          : ^^^^^^^^^^^^^^^^^^

type Bug<TAll> =  BugHelper<TAll, TAll>
>Bug : Bug<TAll>
>    : ^^^^^^^^^

type Q = UnionKeys<{ a : any } | { b: any }>    // should be "a" | "b"
>Q : Q
>  : ^
>a : any
>b : any

type R = Bug<{ a : any } | { b: any }>          // should be "a" | "b"
>R : R
>  : ^
>a : any
>b : any

