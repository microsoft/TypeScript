//// [tests/cases/compiler/substitutionTypesInIndexedAccessTypes.ts] ////

=== substitutionTypesInIndexedAccessTypes.ts ===
// Repro from #31086

type UserArgs = {
>UserArgs : UserArgs
>         : ^^^^^^^^

  select?: boolean
>select : boolean | undefined
>       : ^^^^^^^^^^^^^^^^^^^

};

type Subset<T, U> = { [key in keyof T]: key extends keyof U ? T[key] : never };
>Subset : Subset<T, U>
>       : ^^^^^^^^^^^^

declare function withBoundary<T extends UserArgs>(args?: Subset<T, UserArgs>): T;
>withBoundary : <T extends UserArgs>(args?: Subset<T, UserArgs>) => T
>             : ^ ^^^^^^^^^        ^^    ^^^                   ^^^^^ 
>args : Subset<T, UserArgs> | undefined
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare function withoutBoundary<T extends UserArgs>(args?: T): T;
>withoutBoundary : <T extends UserArgs>(args?: T) => T
>                : ^ ^^^^^^^^^        ^^    ^^^ ^^^^^ 
>args : T | undefined
>     : ^^^^^^^^^^^^^

const boundaryResult = withBoundary({
>boundaryResult : { select: true; }
>               : ^^^^^^^^^^^^^^^^^
>withBoundary({  select: true,}) : { select: true; }
>                                : ^^^^^^^^^^^^^^^^^
>withBoundary : <T extends UserArgs>(args?: Subset<T, UserArgs>) => T
>             : ^ ^^^^^^^^^        ^^    ^^^                   ^^^^^ 
>{  select: true,} : { select: true; }
>                  : ^^^^^^^^^^^^^^^^^

  select: true,
>select : true
>       : ^^^^
>true : true
>     : ^^^^

});

const withoutBoundaryResult = withoutBoundary({
>withoutBoundaryResult : { select: true; }
>                      : ^^^^^^^^^^^^^^^^^
>withoutBoundary({  select: true,}) : { select: true; }
>                                   : ^^^^^^^^^^^^^^^^^
>withoutBoundary : <T extends UserArgs>(args?: T) => T
>                : ^ ^^^^^^^^^        ^^    ^^^ ^^^^^ 
>{  select: true,} : { select: true; }
>                  : ^^^^^^^^^^^^^^^^^

  select: true,
>select : true
>       : ^^^^
>true : true
>     : ^^^^

});

