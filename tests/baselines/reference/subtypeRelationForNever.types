//// [tests/cases/compiler/subtypeRelationForNever.ts] ////

=== subtypeRelationForNever.ts ===
function fail(message: string) : never { throw new Error(message); }
>fail : (message: string) => never
>     : ^       ^^      ^^^^^     
>message : string
>        : ^^^^^^
>new Error(message) : Error
>                   : ^^^^^
>Error : ErrorConstructor
>      : ^^^^^^^^^^^^^^^^
>message : string
>        : ^^^^^^

function withFew<a, r>(values: a[], haveFew: (values: a[]) => r, haveNone: (reason: string) => r): r {
>withFew : <a, r>(values: a[], haveFew: (values: a[]) => r, haveNone: (reason: string) => r) => r
>        : ^ ^^ ^^      ^^   ^^       ^^                  ^^        ^^                     ^^^^^ 
>values : a[]
>       : ^^^
>haveFew : (values: a[]) => r
>        : ^      ^^   ^^^^^ 
>values : a[]
>       : ^^^
>haveNone : (reason: string) => r
>         : ^      ^^      ^^^^^ 
>reason : string
>       : ^^^^^^

    return values.length > 0 ? haveFew(values) : haveNone('No values.');
>values.length > 0 ? haveFew(values) : haveNone('No values.') : r
>                                                             : ^
>values.length > 0 : boolean
>                  : ^^^^^^^
>values.length : number
>              : ^^^^^^
>values : a[]
>       : ^^^
>length : number
>       : ^^^^^^
>0 : 0
>  : ^
>haveFew(values) : r
>                : ^
>haveFew : (values: a[]) => r
>        : ^      ^^   ^^^^^ 
>values : a[]
>       : ^^^
>haveNone('No values.') : r
>                       : ^
>haveNone : (reason: string) => r
>         : ^      ^^      ^^^^^ 
>'No values.' : "No values."
>             : ^^^^^^^^^^^^
}
function id<a>(value: a) : a { return value; }
>id : <a>(value: a) => a
>   : ^ ^^     ^^ ^^^^^ 
>value : a
>      : ^
>value : a
>      : ^

const result = withFew([1, 2, 3], id, fail); // expected result is number[]
>result : number[]
>       : ^^^^^^^^
>withFew([1, 2, 3], id, fail) : number[]
>                             : ^^^^^^^^
>withFew : <a, r>(values: a[], haveFew: (values: a[]) => r, haveNone: (reason: string) => r) => r
>        : ^ ^^ ^^      ^^   ^^       ^^                  ^^        ^^                     ^^^^^ 
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>id : <a>(value: a) => a
>   : ^ ^^     ^^ ^^^^^ 
>fail : (message: string) => never
>     : ^       ^^      ^^^^^     

