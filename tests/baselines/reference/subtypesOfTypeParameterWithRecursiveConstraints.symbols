//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithRecursiveConstraints.ts] ////

=== subtypesOfTypeParameterWithRecursiveConstraints.ts ===
// checking whether other types are subtypes of type parameters with constraints

class Foo<T> { foo: T; }
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 2, 10))
>foo : Symbol(Foo.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 2, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 2, 10))

function f<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>>(t: T, u: U, v: V) {
>f : Symbol(f, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 2, 24))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))

    // ok
    var r1 = true ? t : u;
>r1 : Symbol(r1, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 5, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 6, 7))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))

    var r1 = true ? u : t;
>r1 : Symbol(r1, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 5, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 6, 7))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))

    // ok
    var r2 = true ? t : v;
>r2 : Symbol(r2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 9, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 10, 7))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))

    var r2 = true ? v : t;
>r2 : Symbol(r2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 9, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 10, 7))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))

    // ok
    var r3 = true ? v : u;
>r3 : Symbol(r3, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 13, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 14, 7))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))

    var r3 = true ? u : v;
>r3 : Symbol(r3, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 13, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 14, 7))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))

    // ok
    var r4 = true ? t : new Foo<T>();
>r4 : Symbol(r4, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 17, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 18, 7))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))

    var r4 = true ? new Foo<T>() : t;
>r4 : Symbol(r4, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 17, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 18, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))

    // ok
    var r5 = true ? u : new Foo<T>();
>r5 : Symbol(r5, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 21, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 22, 7))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))

    var r5 = true ? new Foo<T>() : u;
>r5 : Symbol(r5, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 21, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 22, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))

    // ok
    var r6 = true ? v : new Foo<T>();
>r6 : Symbol(r6, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 25, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 26, 7))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))

    var r6 = true ? new Foo<T>() : v;
>r6 : Symbol(r6, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 25, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 26, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 11))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))


    // ok
    var r7 = true ? t : new Foo<U>();
>r7 : Symbol(r7, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 30, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 31, 7))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))

    var r7 = true ? new Foo<U>() : t;
>r7 : Symbol(r7, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 30, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 31, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))

    // ok
    var r8 = true ? u : new Foo<U>();
>r8 : Symbol(r8, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 34, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 35, 7))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))

    var r8 = true ? new Foo<U>() : u;
>r8 : Symbol(r8, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 34, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 35, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))

    // ok
    var r9 = true ? v : new Foo<U>();
>r9 : Symbol(r9, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 38, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 39, 7))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))

    var r9 = true ? new Foo<U>() : v;
>r9 : Symbol(r9, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 38, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 39, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 28))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))


    // ok
    var r10 = true ? t : new Foo<V>();
>r10 : Symbol(r10, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 43, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 44, 7))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))

    var r10 = true ? new Foo<V>() : t;
>r10 : Symbol(r10, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 43, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 44, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))
>t : Symbol(t, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 65))

    // ok
    var r11 = true ? u : new Foo<V>();
>r11 : Symbol(r11, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 47, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 48, 7))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))

    var r11 = true ? new Foo<V>() : u;
>r11 : Symbol(r11, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 47, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 48, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))
>u : Symbol(u, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 70))

    // ok
    var r12 = true ? v : new Foo<V>();
>r12 : Symbol(r12, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 51, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 52, 7))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))

    var r12 = true ? new Foo<V>() : v;
>r12 : Symbol(r12, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 51, 7), Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 52, 7))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 46))
>v : Symbol(v, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 3, 76))
}

namespace M1 {
>M1 : Symbol(M1, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 53, 1))

    class Base<T> {
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 56, 15))

        foo: T;
>foo : Symbol(Base.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 56, 19))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 56, 15))
    }

    class D1<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<T> {
>D1 : Symbol(D1, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 58, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 13))

        [x: string]: T;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 61, 9))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 13))

        foo: T
>foo : Symbol(D1.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 61, 23))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 60, 13))
    }

    class D2<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<T> {
>D2 : Symbol(D2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 63, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 13))

        [x: string]: T;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 66, 9))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 13))

        foo: U
>foo : Symbol(D2.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 66, 23))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 65, 30))
    }

    class D3<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<T> {
>D3 : Symbol(D3, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 68, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 13))

        [x: string]: T;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 71, 9))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 13))

        foo: V
>foo : Symbol(D3.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 71, 23))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 70, 48))
    }

    class D4<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<U> {
>D4 : Symbol(D4, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 73, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 30))

        [x: string]: U;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 76, 9))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 30))

        foo: T
>foo : Symbol(D4.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 76, 23))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 75, 13))
    }

    class D5<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<U> {
>D5 : Symbol(D5, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 78, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 30))

        [x: string]: U;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 81, 9))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 30))

        foo: U
>foo : Symbol(D5.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 81, 23))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 80, 30))
    }

    class D6<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<U> {
>D6 : Symbol(D6, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 83, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 30))

        [x: string]: U;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 86, 9))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 30))

        foo: V
>foo : Symbol(D6.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 86, 23))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 85, 48))
    }

    class D7<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<V> {
>D7 : Symbol(D7, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 88, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 48))

        [x: string]: V;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 91, 9))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 48))

        foo: T
>foo : Symbol(D7.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 91, 23))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 90, 13))
    }

    class D8<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<V> {
>D8 : Symbol(D8, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 93, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 48))

        [x: string]: V;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 96, 9))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 48))

        foo: U
>foo : Symbol(D8.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 96, 23))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 95, 30))
    }

    class D9<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base<V> {
>D9 : Symbol(D9, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 98, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 48))
>Base : Symbol(Base, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 55, 14))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 48))

        [x: string]: V;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 101, 9))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 48))

        foo: V
>foo : Symbol(D9.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 101, 23))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 100, 48))
    }
}


namespace M2 {
>M2 : Symbol(M2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 104, 1))

    class Base2<T> {
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 108, 16))

        foo: Foo<T>;
>foo : Symbol(Base2.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 108, 20))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 108, 16))
    }

    class D1<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<T> {
>D1 : Symbol(D1, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 110, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 13))

        [x: string]: T;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 113, 9))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 13))

        foo: T
>foo : Symbol(D1.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 113, 23))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 112, 13))
    }

    class D2<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<T> {
>D2 : Symbol(D2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 115, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 13))

        [x: string]: T;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 118, 9))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 13))

        foo: U
>foo : Symbol(D2.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 118, 23))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 117, 30))
    }

    class D3<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<T> {
>D3 : Symbol(D3, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 120, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 13))

        [x: string]: T;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 123, 9))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 13))

        foo: V
>foo : Symbol(D3.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 123, 23))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 122, 48))
    }

    class D4<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<U> {
>D4 : Symbol(D4, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 125, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 30))

        [x: string]: U;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 128, 9))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 30))

        foo: T
>foo : Symbol(D4.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 128, 23))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 127, 13))
    }

    class D5<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<U> {
>D5 : Symbol(D5, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 130, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 30))

        [x: string]: U;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 133, 9))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 30))

        foo: U
>foo : Symbol(D5.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 133, 23))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 132, 30))
    }

    class D6<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<U> {
>D6 : Symbol(D6, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 135, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 30))

        [x: string]: U;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 138, 9))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 30))

        foo: V
>foo : Symbol(D6.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 138, 23))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 137, 48))
    }

    class D7<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<V> {
>D7 : Symbol(D7, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 140, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 48))

        [x: string]: V;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 143, 9))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 48))

        foo: T
>foo : Symbol(D7.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 143, 23))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 142, 13))
    }

    class D8<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<V> {
>D8 : Symbol(D8, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 145, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 48))

        [x: string]: V;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 148, 9))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 48))

        foo: U
>foo : Symbol(D8.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 148, 23))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 147, 30))
    }

    class D9<T extends Foo<U>, U extends Foo<T>, V extends Foo<V>> extends Base2<V> {
>D9 : Symbol(D9, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 150, 5))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 13))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 30))
>U : Symbol(U, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 30))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>T : Symbol(T, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 13))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 48))
>Foo : Symbol(Foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 0, 0))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 48))
>Base2 : Symbol(Base2, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 107, 14))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 48))

        [x: string]: V;
>x : Symbol(x, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 153, 9))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 48))

        foo: V
>foo : Symbol(D9.foo, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 153, 23))
>V : Symbol(V, Decl(subtypesOfTypeParameterWithRecursiveConstraints.ts, 152, 48))
    }
}
