//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithOptionalParameters.ts] ////

=== subtypingWithCallSignaturesWithOptionalParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

interface Base { 
    a: () => number;
>a : () => number
>  : ^^^^^^      

    a2: (x?: number) => number;
>a2 : (x?: number) => number
>   : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^

    a3: (x: number) => number;
>a3 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

    a4: (x: number, y?: number) => number;
>a4 : (x: number, y?: number) => number
>   : ^ ^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    a5: (x?: number, y?: number) => number;
>a5 : (x?: number, y?: number) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I1 extends Base {
    a: () => number; // ok, same number of required params
>a : () => number
>  : ^^^^^^      
}

interface I2 extends Base {
    a: (x?: number) => number; // ok, same number of required params
>a : (x?: number) => number
>  : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I3 extends Base {
    a: (x: number) => number; // error, too many required params
>a : (x: number) => number
>  : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}


interface I4 extends Base {
    a2: () => number; // ok, same number of required params
>a2 : () => number
>   : ^^^^^^      
}

interface I5 extends Base {
    a2: (x?: number) => number; // ok, same number of required params
>a2 : (x?: number) => number
>   : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I6 extends Base {
    a2: (x: number) => number; // ok, same number of params
>a2 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}


interface I7 extends Base {
    a3: () => number; // ok, fewer required params
>a3 : () => number
>   : ^^^^^^      
}

interface I8 extends Base {
    a3: (x?: number) => number; // ok, fewer required params
>a3 : (x?: number) => number
>   : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I9 extends Base {
    a3: (x: number) => number; // ok, same number of required params
>a3 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I10 extends Base {
    a3: (x: number, y: number) => number;  // error, too many required params
>a3 : (x: number, y: number) => number
>   : ^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}


interface I11 extends Base {
    a4: () => number; // ok, fewer required params
>a4 : () => number
>   : ^^^^^^      
}

interface I12 extends Base {
    a4: (x?: number, y?: number) => number; // ok, fewer required params
>a4 : (x?: number, y?: number) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I13 extends Base {
    a4: (x: number) => number; // ok, same number of required params
>a4 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I14 extends Base {
    a4: (x: number, y: number) => number;  // ok, same number of params
>a4 : (x: number, y: number) => number
>   : ^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}


interface I15 extends Base {
    a5: () => number; // ok, fewer required params
>a5 : () => number
>   : ^^^^^^      
}

interface I16 extends Base {
    a5: (x?: number, y?: number) => number; // ok, fewer required params
>a5 : (x?: number, y?: number) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I17 extends Base {
    a5: (x: number) => number; // ok, all present params match
>a5 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I18 extends Base {
    a5: (x: number, y: number) => number;  // ok, same number of params
>a5 : (x: number, y: number) => number
>   : ^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}
