//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithRestParameters.ts] ////

=== subtypingWithCallSignaturesWithRestParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

interface Base { 
    a: (...args: number[]) => number;
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>args : number[]
>     : ^^^^^^^^

    a2: (x: number, ...z: number[]) => number;
>a2 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a3: (x: number, y?: string, ...z: number[]) => number;
>a3 : (x: number, y?: string, ...z: number[]) => number
>   : ^ ^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^

    a4: (x?: number, y?: string, ...z: number[]) => number;
>a4 : (x?: number, y?: string, ...z: number[]) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^
}

interface I1 extends Base {
    a: () => number; // ok, same number of required params
>a : () => number
>  : ^^^^^^      
}

interface I1B extends Base {
    a: (...args: number[]) => number; // ok, same number of required params
>a : (...args: number[]) => number
>  : ^^^^    ^^        ^^^^^      
>args : number[]
>     : ^^^^^^^^
}

interface I1C extends Base {
    a: (...args: string[]) => number; // error, type mismatch
>a : (...args: string[]) => number
>  : ^^^^    ^^        ^^^^^      
>args : string[]
>     : ^^^^^^^^
}

interface I2 extends Base {
    a: (x?: number) => number; // ok, same number of required params
>a : (x?: number) => number
>  : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I2B extends Base {
    a: (x?: number, y?: number, z?: number) => number; // ok, same number of required params
>a : (x?: number, y?: number, z?: number) => number
>  : ^ ^^^      ^^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>z : number
>  : ^^^^^^
}

interface I3 extends Base {
    a: (x: number) => number; // ok, all present params match
>a : (x: number) => number
>  : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I3B extends Base {
    a: (x?: string) => number; // error, incompatible type
>a : (x?: string) => number
>  : ^ ^^^      ^^^^^      
>x : string
>  : ^^^^^^
}



interface I4 extends Base {
    a2: () => number; // ok, fewer required params
>a2 : () => number
>   : ^^^^^^      
}

interface I4B extends Base {
    a2: (...args: number[]) => number; // ok, fewer required params
>a2 : (...args: number[]) => number
>   : ^^^^    ^^        ^^^^^      
>args : number[]
>     : ^^^^^^^^
}

interface I5 extends Base {
    a2: (x?: number) => number; // ok, fewer required params
>a2 : (x?: number) => number
>   : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I6 extends Base {
    a2: (x: number) => number; // ok, same number of required params
>a2 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I6B extends Base {
    a2: (x: number, ...args: number[]) => number; // ok, same number of required params
>a2 : (x: number, ...args: number[]) => number
>   : ^ ^^      ^^^^^    ^^        ^^^^^      
>x : number
>  : ^^^^^^
>args : number[]
>     : ^^^^^^^^
}

interface I6C extends Base {
    a2: (x: number, ...args: string[]) => number; // error
>a2 : (x: number, ...args: string[]) => number
>   : ^ ^^      ^^^^^    ^^        ^^^^^      
>x : number
>  : ^^^^^^
>args : string[]
>     : ^^^^^^^^
}

interface I6D extends Base {
    a2: (x: number, y: number) => number; // ok, all present params match
>a2 : (x: number, y: number) => number
>   : ^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I6E extends Base {
    a2: (x: number, y?: number) => number; // ok, same number of required params
>a2 : (x: number, y?: number) => number
>   : ^ ^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}



interface I7 extends Base {
    a3: () => number; // ok, fewer required params
>a3 : () => number
>   : ^^^^^^      
}

interface I8 extends Base {
    a3: (x?: number) => number; // ok, fewer required params
>a3 : (x?: number) => number
>   : ^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I9 extends Base {
    a3: (x: number) => number; // ok, same number of required params
>a3 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I10 extends Base {
    a3: (x: number, y: string) => number;  // ok, all present params match
>a3 : (x: number, y: string) => number
>   : ^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
}

interface I10B extends Base {
    a3: (x: number, y?: number, z?: number) => number;  // error
>a3 : (x: number, y?: number, z?: number) => number
>   : ^ ^^      ^^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>z : number
>  : ^^^^^^
}

interface I10C extends Base {
    a3: (x: number, ...z: number[]) => number;  // error
>a3 : (x: number, ...z: number[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>z : number[]
>  : ^^^^^^^^
}

interface I10D extends Base {
    a3: (x: string, y?: string, z?: string) => number;  // error, incompatible types
>a3 : (x: string, y?: string, z?: string) => number
>   : ^ ^^      ^^ ^^^      ^^ ^^^      ^^^^^      
>x : string
>  : ^^^^^^
>y : string
>  : ^^^^^^
>z : string
>  : ^^^^^^
}

interface I10E extends Base {
    a3: (x: number, ...z: string[]) => number;  // error
>a3 : (x: number, ...z: string[]) => number
>   : ^ ^^      ^^^^^ ^^        ^^^^^      
>x : number
>  : ^^^^^^
>z : string[]
>  : ^^^^^^^^
}

interface I11 extends Base {
    a4: () => number; // ok, fewer required params
>a4 : () => number
>   : ^^^^^^      
}

interface I12 extends Base {
    a4: (x?: number, y?: number) => number; // error, type mismatch
>a4 : (x?: number, y?: number) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I13 extends Base {
    a4: (x: number) => number; // ok, all present params match
>a4 : (x: number) => number
>   : ^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I14 extends Base {
    a4: (x: number, y?: number) => number;  // error, second param has type mismatch
>a4 : (x: number, y?: number) => number
>   : ^ ^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I15 extends Base {
    a4: (x?: number, y?: string) => number;  // ok, same number of required params with matching types
>a4 : (x?: number, y?: string) => number
>   : ^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : string
>  : ^^^^^^
}

interface I16 extends Base {
    a4: (x: number, ...args: string[]) => number;  // error, rest param has type mismatch
>a4 : (x: number, ...args: string[]) => number
>   : ^ ^^      ^^^^^    ^^        ^^^^^      
>x : number
>  : ^^^^^^
>args : string[]
>     : ^^^^^^^^
}

interface I17 extends Base {
    a4: (...args: number[]) => number; // error
>a4 : (...args: number[]) => number
>   : ^^^^    ^^        ^^^^^      
>args : number[]
>     : ^^^^^^^^
}

