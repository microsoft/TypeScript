//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithSpecializedSignatures.ts] ////

=== subtypingWithCallSignaturesWithSpecializedSignatures.ts ===
// same as subtypingWithCallSignatures but with additional specialized signatures that should not affect the results

namespace CallSignature {
>CallSignature : Symbol(CallSignature, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 0, 0))

    interface Base { // T
>Base : Symbol(Base, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 2, 25))

        // M's
        (x: 'a'): void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 5, 9))

        (x: string, y: number): void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 6, 9))
>y : Symbol(y, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 6, 19))
    }

    // S's
    interface I extends Base {
>I : Symbol(I, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 7, 5))
>Base : Symbol(Base, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 2, 25))

        // N's
        (x: 'a'): number; // ok because base returns void
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 12, 9))

        (x: string, y: number): number; // ok because base returns void
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 13, 9))
>y : Symbol(y, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 13, 19))

        <T>(x: T): string; // ok because base returns void
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 14, 9))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 14, 12))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 14, 9))
    }

    interface Base2 { // T
>Base2 : Symbol(Base2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 15, 5))

        // M's
        (x: 'a'): number;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 19, 9))

        (x: string): number;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 20, 9))
    }

    // S's
    interface I2 extends Base2 {
>I2 : Symbol(I2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 21, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 15, 5))

        // N's
        (x: 'a'): string;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 26, 9))

        (x: string): string; // error because base returns non-void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 27, 9))
    }

    // S's
    interface I3 extends Base2 {
>I3 : Symbol(I3, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 28, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 15, 5))

        // N's
        <T>(x: T): string; // ok, adds a new call signature
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 33, 9))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 33, 12))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 33, 9))
    }
}

namespace MemberWithCallSignature {
>MemberWithCallSignature : Symbol(MemberWithCallSignature, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 35, 1))

    interface Base { // T
>Base : Symbol(Base, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 37, 35))

        // M's
        a: {
>a : Symbol(Base.a, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 38, 20))

            (x: 'a'): void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 41, 13))

            (x: string): void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 42, 13))
        }
        a2: {
>a2 : Symbol(Base.a2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 43, 9))

            (x: 'a', y: number): void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 45, 13))
>y : Symbol(y, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 45, 20))

            (x: string, y: number): void;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 46, 13))
>y : Symbol(y, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 46, 23))
        }
        a3: <T>(x: T) => void;
>a3 : Symbol(Base.a3, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 47, 9))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 48, 13))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 48, 16))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 48, 13))
    }

    // S's
    interface I extends Base {
>I : Symbol(I, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 49, 5))
>Base : Symbol(Base, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 37, 35))

        // N's
        a: (x: string) => number; // ok because base returns void
>a : Symbol(I.a, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 52, 30))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 54, 12))

        a2: (x: string, y: number) => boolean; // ok because base returns void
>a2 : Symbol(I.a2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 54, 33))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 55, 13))
>y : Symbol(y, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 55, 23))

        a3: <T>(x: T) => string; // ok because base returns void
>a3 : Symbol(I.a3, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 55, 46))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 56, 13))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 56, 16))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 56, 13))
    }

    interface Base2 { // T
>Base2 : Symbol(Base2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 57, 5))

        // M's
        a: {
>a : Symbol(Base2.a, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 59, 21))

            (x: 'a'): number;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 62, 13))

            (x: string): number;
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 63, 13))
        }
        a2: <T>(x: T) => T;
>a2 : Symbol(Base2.a2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 64, 9))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 65, 13))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 65, 16))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 65, 13))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 65, 13))
    }

    // S's
    interface I2 extends Base2 {
>I2 : Symbol(I2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 66, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 57, 5))

        // N's
        a: (x: string) => string; // error because base returns non-void;
>a : Symbol(I2.a, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 69, 32))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 71, 12))
    }

    // S's
    interface I3 extends Base2 {
>I3 : Symbol(I3, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 72, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 57, 5))

        // N's
        a2: <T>(x: T) => string; // error because base returns non-void;
>a2 : Symbol(I3.a2, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 75, 32))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 77, 13))
>x : Symbol(x, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 77, 16))
>T : Symbol(T, Decl(subtypingWithCallSignaturesWithSpecializedSignatures.ts, 77, 13))
    }
}
