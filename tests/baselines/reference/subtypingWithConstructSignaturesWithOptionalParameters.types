//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithOptionalParameters.ts] ////

=== subtypingWithConstructSignaturesWithOptionalParameters.ts ===
// call signatures in derived types must have the same or fewer optional parameters as the base type

interface Base { 
    a: new () => number;
>a : new () => number
>  : ^^^^^^^^^^      

    a2: new (x?: number) => number;
>a2 : new (x?: number) => number
>   : ^^^^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^

    a3: new (x: number) => number;
>a3 : new (x: number) => number
>   : ^^^^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^

    a4: new (x: number, y?: number) => number;
>a4 : new (x: number, y?: number) => number
>   : ^^^^^ ^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

    a5: new (x?: number, y?: number) => number;
>a5 : new (x?: number, y?: number) => number
>   : ^^^^^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I1 extends Base {
    a: new () => number; // ok, same number of required params
>a : new () => number
>  : ^^^^^^^^^^      
}

interface I2 extends Base {
    a: new (x?: number) => number; // ok, same number of required params
>a : new (x?: number) => number
>  : ^^^^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I3 extends Base {
    a: new (x: number) => number; // error, too many required params
>a : new (x: number) => number
>  : ^^^^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}


interface I4 extends Base {
    a2: new () => number; // ok, same number of required params
>a2 : new () => number
>   : ^^^^^^^^^^      
}

interface I5 extends Base {
    a2: new (x?: number) => number; // ok, same number of required params
>a2 : new (x?: number) => number
>   : ^^^^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I6 extends Base {
    a2: new (x: number) => number; // ok, same number of params
>a2 : new (x: number) => number
>   : ^^^^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}


interface I7 extends Base {
    a3: new () => number; // ok, fewer required params
>a3 : new () => number
>   : ^^^^^^^^^^      
}

interface I8 extends Base {
    a3: new (x?: number) => number; // ok, fewer required params
>a3 : new (x?: number) => number
>   : ^^^^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I9 extends Base {
    a3: new (x: number) => number; // ok, same number of required params
>a3 : new (x: number) => number
>   : ^^^^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I10 extends Base {
    a3: new (x: number, y: number) => number;  // error, too many required params
>a3 : new (x: number, y: number) => number
>   : ^^^^^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}


interface I11 extends Base {
    a4: new () => number; // ok, fewer required params
>a4 : new () => number
>   : ^^^^^^^^^^      
}

interface I12 extends Base {
    a4: new (x?: number, y?: number) => number; // ok, fewer required params
>a4 : new (x?: number, y?: number) => number
>   : ^^^^^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I13 extends Base {
    a4: new (x: number) => number; // ok, same number of required params
>a4 : new (x: number) => number
>   : ^^^^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I14 extends Base {
    a4: new (x: number, y: number) => number;  // ok, same number of params
>a4 : new (x: number, y: number) => number
>   : ^^^^^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}


interface I15 extends Base {
    a5: new () => number; // ok, fewer required params
>a5 : new () => number
>   : ^^^^^^^^^^      
}

interface I16 extends Base {
    a5: new (x?: number, y?: number) => number; // ok, fewer required params
>a5 : new (x?: number, y?: number) => number
>   : ^^^^^ ^^^      ^^ ^^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}

interface I17 extends Base {
    a5: new (x: number) => number; // ok, all present params match
>a5 : new (x: number) => number
>   : ^^^^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
}

interface I18 extends Base {
    a5: new (x: number, y: number) => number;  // ok, same number of params
>a5 : new (x: number, y: number) => number
>   : ^^^^^ ^^      ^^ ^^      ^^^^^      
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
}
