//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts] ////

=== subtypingWithConstructSignaturesWithSpecializedSignatures.ts ===
// same as subtypingWithCallSignatures but with additional specialized signatures that should not affect the results

namespace CallSignature {
>CallSignature : Symbol(CallSignature, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 0, 0))

    interface Base { // T
>Base : Symbol(Base, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 2, 25))

        // M's
        new (x: 'a'): void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 5, 13))

        new (x: string, y: number): void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 6, 13))
>y : Symbol(y, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 6, 23))
    }

    // S's
    interface I extends Base {
>I : Symbol(I, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 7, 5))
>Base : Symbol(Base, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 2, 25))

        // N's
        new (x: 'a'): number; // ok because base returns void
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 12, 13))

        new (x: string, y: number): number; // ok because base returns void
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 13, 13))
>y : Symbol(y, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 13, 23))

        new <T>(x: T): string; // ok because base returns void
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 14, 13))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 14, 16))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 14, 13))
    }   

    interface Base2 { // T
>Base2 : Symbol(Base2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 15, 5))

        // M's
        new (x: 'a'): number;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 19, 13))

        new (x: string): number;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 20, 13))
    }

    // S's
    interface I2 extends Base2 {
>I2 : Symbol(I2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 21, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 15, 5))

        // N's
        new (x: 'a'): string;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 26, 13))

        new (x: string): string; // error because base returns non-void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 27, 13))
    }

    // S's
    interface I3 extends Base2 {
>I3 : Symbol(I3, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 28, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 15, 5))

        // N's
        new <T>(x: T): string; // ok, adds a new call signature
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 33, 13))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 33, 16))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 33, 13))
    }
}

namespace MemberWithCallSignature {
>MemberWithCallSignature : Symbol(MemberWithCallSignature, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 35, 1))

    interface Base { // T
>Base : Symbol(Base, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 37, 35))

        // M's
        a: {
>a : Symbol(Base.a, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 38, 20))

            new (x: 'a'): void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 41, 17))

            new (x: string): void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 42, 17))
        }
        a2: {
>a2 : Symbol(Base.a2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 43, 9))

            new (x: 'a', y: number): void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 45, 17))
>y : Symbol(y, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 45, 24))

            new (x: string, y: number): void;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 46, 17))
>y : Symbol(y, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 46, 27))
        }
        a3: new <T>(x: T) => void;
>a3 : Symbol(Base.a3, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 47, 9))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 48, 17))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 48, 20))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 48, 17))
    }

    // S's
    interface I extends Base {
>I : Symbol(I, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 49, 5))
>Base : Symbol(Base, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 37, 35))

        // N's
        a: new (x: string) => number; // ok because base returns void
>a : Symbol(I.a, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 52, 30))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 54, 16))

        a2: new  (x: string, y: number) => boolean; // ok because base returns void
>a2 : Symbol(I.a2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 54, 37))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 55, 18))
>y : Symbol(y, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 55, 28))

        a3: new <T>(x: T) => string; // ok because base returns void
>a3 : Symbol(I.a3, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 55, 51))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 56, 17))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 56, 20))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 56, 17))
    }

    interface Base2 { // T
>Base2 : Symbol(Base2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 57, 5))

        // M's
        a: {
>a : Symbol(Base2.a, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 59, 21))

            new (x: 'a'): number;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 62, 17))

            new (x: string): number;
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 63, 17))
        }
        a2: new <T>(x: T) => T;
>a2 : Symbol(Base2.a2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 64, 9))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 65, 17))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 65, 20))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 65, 17))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 65, 17))
    }

    // S's
    interface I2 extends Base2 {
>I2 : Symbol(I2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 66, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 57, 5))

        // N's
        a: new (x: string) => string; // error because base returns non-void;
>a : Symbol(I2.a, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 69, 32))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 71, 16))
    }

    // S's
    interface I3 extends Base2 {
>I3 : Symbol(I3, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 72, 5))
>Base2 : Symbol(Base2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 57, 5))

        // N's
        a2: new <T>(x: T) => string; // error because base returns non-void;
>a2 : Symbol(I3.a2, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 75, 32))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 77, 17))
>x : Symbol(x, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 77, 20))
>T : Symbol(T, Decl(subtypingWithConstructSignaturesWithSpecializedSignatures.ts, 77, 17))
    }
}
