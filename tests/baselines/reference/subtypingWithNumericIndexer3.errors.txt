subtypingWithNumericIndexer3.ts(11,7): error TS2415: Class 'B' incorrectly extends base class 'A'.
  'number' index signatures are incompatible.
    Property 'bar' is missing in type 'Base' but required in type 'Derived'.
subtypingWithNumericIndexer3.ts(24,23): error TS2344: Type 'Base' does not satisfy the constraint 'Derived'.
  Property 'bar' is missing in type 'Base' but required in type 'Derived'.
subtypingWithNumericIndexer3.ts(32,11): error TS2415: Class 'B3<T>' incorrectly extends base class 'A<T>'.
  'number' index signatures are incompatible.
    Type 'Base' is not assignable to type 'T'.
      'T' could be instantiated with an arbitrary type which could be unrelated to 'Base'.
subtypingWithNumericIndexer3.ts(36,11): error TS2415: Class 'B4<T>' incorrectly extends base class 'A<T>'.
  'number' index signatures are incompatible.
    Type 'Derived' is not assignable to type 'T'.
      'Derived' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived'.
subtypingWithNumericIndexer3.ts(40,11): error TS2415: Class 'B5<T>' incorrectly extends base class 'A<T>'.
  'number' index signatures are incompatible.
    Type 'Derived2' is not assignable to type 'T'.
      'Derived2' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived2'.


==== subtypingWithNumericIndexer3.ts (5 errors) ====
    // Derived type indexer must be subtype of base type indexer
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    class A {
        [x: number]: Derived;
    }
    
    class B extends A {
          ~
!!! error TS2415: Class 'B' incorrectly extends base class 'A'.
!!! error TS2415:   'number' index signatures are incompatible.
!!! error TS2415:     Property 'bar' is missing in type 'Base' but required in type 'Derived'.
!!! related TS2728 subtypingWithNumericIndexer3.ts:4:34: 'bar' is declared here.
        [x: number]: Base; // error
    }
    
    class B2 extends A {
        [x: number]: Derived2; // ok
    }
    
    module Generics {
        class A<T extends Derived> {
            [x: number]: T;
        }
    
        class B extends A<Base> {
                          ~~~~
!!! error TS2344: Type 'Base' does not satisfy the constraint 'Derived'.
!!! error TS2344:   Property 'bar' is missing in type 'Base' but required in type 'Derived'.
!!! related TS2728 subtypingWithNumericIndexer3.ts:4:34: 'bar' is declared here.
            [x: number]: Derived; // error
        }
    
        class B2 extends A<Derived> {
            [x: number]: Derived2; // ok
        }
    
        class B3<T extends Derived> extends A<T> {
              ~~
!!! error TS2415: Class 'B3<T>' incorrectly extends base class 'A<T>'.
!!! error TS2415:   'number' index signatures are incompatible.
!!! error TS2415:     Type 'Base' is not assignable to type 'T'.
!!! error TS2415:       'T' could be instantiated with an arbitrary type which could be unrelated to 'Base'.
            [x: number]: Base; // error
        }
    
        class B4<T extends Derived> extends A<T> {
              ~~
!!! error TS2415: Class 'B4<T>' incorrectly extends base class 'A<T>'.
!!! error TS2415:   'number' index signatures are incompatible.
!!! error TS2415:     Type 'Derived' is not assignable to type 'T'.
!!! error TS2415:       'Derived' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived'.
            [x: number]: Derived; // error
        }
    
        class B5<T extends Derived2> extends A<T> {
              ~~
!!! error TS2415: Class 'B5<T>' incorrectly extends base class 'A<T>'.
!!! error TS2415:   'number' index signatures are incompatible.
!!! error TS2415:     Type 'Derived2' is not assignable to type 'T'.
!!! error TS2415:       'Derived2' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived2'.
            [x: number]: Derived2; // error
        }
    }