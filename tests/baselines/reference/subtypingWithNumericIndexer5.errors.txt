subtypingWithNumericIndexer5.ts(11,7): error TS2420: Class 'B' incorrectly implements interface 'A'.
  'string' and 'number' index signatures are incompatible.
    Type 'Base' is not assignable to type 'Derived'.
      Property 'bar' is missing in type 'Base' but required in type 'Derived'.
subtypingWithNumericIndexer5.ts(19,8): error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
subtypingWithNumericIndexer5.ts(32,11): error TS2420: Class 'B3<T>' incorrectly implements interface 'A<T>'.
  'string' and 'number' index signatures are incompatible.
    Type 'Base' is not assignable to type 'T'.
      'T' could be instantiated with an arbitrary type which could be unrelated to 'Base'.
subtypingWithNumericIndexer5.ts(36,11): error TS2420: Class 'B4<T>' incorrectly implements interface 'A<T>'.
  'string' and 'number' index signatures are incompatible.
    Type 'Derived' is not assignable to type 'T'.
      'Derived' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived'.
subtypingWithNumericIndexer5.ts(40,11): error TS2420: Class 'B5<T>' incorrectly implements interface 'A<T>'.
  'string' and 'number' index signatures are incompatible.
    Type 'Derived2' is not assignable to type 'T'.
      'Derived2' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived2'.


==== subtypingWithNumericIndexer5.ts (5 errors) ====
    // Derived type indexer must be subtype of base type indexer
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    interface A {
        [x: number]: Derived;
    }
    
    class B implements A {
          ~
!!! error TS2420: Class 'B' incorrectly implements interface 'A'.
!!! error TS2420:   'string' and 'number' index signatures are incompatible.
!!! error TS2420:     Type 'Base' is not assignable to type 'Derived'.
!!! error TS2420:       Property 'bar' is missing in type 'Base' but required in type 'Derived'.
!!! related TS2728 subtypingWithNumericIndexer5.ts:4:34: 'bar' is declared here.
        [x: string]: Base; // error
    }
    
    class B2 implements A {
        [x: string]: Derived2; // ok
    }
    
    module Generics {
           ~~~~~~~~
!!! error TS1294: This syntax is not allowed when 'erasableSyntaxOnly' is enabled.
        interface A<T extends Base> {
            [x: number]: T;
        }
    
        class B implements A<Base> {
            [x: string]: Derived; // ok
        }
    
        class B2 implements A<Derived> {
            [x: string]: Derived2; // ok
        }
    
        class B3<T extends Derived> implements A<T> {
              ~~
!!! error TS2420: Class 'B3<T>' incorrectly implements interface 'A<T>'.
!!! error TS2420:   'string' and 'number' index signatures are incompatible.
!!! error TS2420:     Type 'Base' is not assignable to type 'T'.
!!! error TS2420:       'T' could be instantiated with an arbitrary type which could be unrelated to 'Base'.
            [x: string]: Base; // error
        }
    
        class B4<T extends Derived> implements A<T> {
              ~~
!!! error TS2420: Class 'B4<T>' incorrectly implements interface 'A<T>'.
!!! error TS2420:   'string' and 'number' index signatures are incompatible.
!!! error TS2420:     Type 'Derived' is not assignable to type 'T'.
!!! error TS2420:       'Derived' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived'.
            [x: string]: Derived; // error
        }
    
        class B5<T extends Derived2> implements A<T> {
              ~~
!!! error TS2420: Class 'B5<T>' incorrectly implements interface 'A<T>'.
!!! error TS2420:   'string' and 'number' index signatures are incompatible.
!!! error TS2420:     Type 'Derived2' is not assignable to type 'T'.
!!! error TS2420:       'Derived2' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Derived2'.
            [x: string]: Derived2; // error
        }
    }