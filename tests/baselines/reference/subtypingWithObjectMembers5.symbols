//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers5.ts] ////

=== subtypingWithObjectMembers5.ts ===
interface Base {
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))

    foo: string;
>foo : Symbol(Base.foo, Decl(subtypingWithObjectMembers5.ts, 0, 16))
}

interface Derived extends Base {
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))

    bar: string;
>bar : Symbol(Derived.bar, Decl(subtypingWithObjectMembers5.ts, 4, 32))
}

// N and M have the same name, same accessibility, same optionality, and N is a subtype of M
// foo properties are valid, bar properties cause errors in the derived class declarations
namespace NotOptional {
>NotOptional : Symbol(NotOptional, Decl(subtypingWithObjectMembers5.ts, 6, 1))

    interface A {
>A : Symbol(A, Decl(subtypingWithObjectMembers5.ts, 10, 23))

        foo: Base;
>foo : Symbol(A.foo, Decl(subtypingWithObjectMembers5.ts, 11, 17))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))
    }

    class B implements A {
>B : Symbol(B, Decl(subtypingWithObjectMembers5.ts, 13, 5))
>A : Symbol(A, Decl(subtypingWithObjectMembers5.ts, 10, 23))

        fooo: Derived; // error
>fooo : Symbol(B.fooo, Decl(subtypingWithObjectMembers5.ts, 15, 26))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
    }

    interface A2 {
>A2 : Symbol(A2, Decl(subtypingWithObjectMembers5.ts, 17, 5))

        1: Base;
>1 : Symbol(A2[1], Decl(subtypingWithObjectMembers5.ts, 19, 18))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))
    }

    class B2 implements A2 {
>B2 : Symbol(B2, Decl(subtypingWithObjectMembers5.ts, 21, 5))
>A2 : Symbol(A2, Decl(subtypingWithObjectMembers5.ts, 17, 5))

        2: Derived; // error
>2 : Symbol(B2[2], Decl(subtypingWithObjectMembers5.ts, 23, 28))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
    }

    interface A3 {
>A3 : Symbol(A3, Decl(subtypingWithObjectMembers5.ts, 25, 5))

        '1': Base;
>'1' : Symbol(A3['1'], Decl(subtypingWithObjectMembers5.ts, 27, 18))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))
    }

    class B3 implements A3 {
>B3 : Symbol(B3, Decl(subtypingWithObjectMembers5.ts, 29, 5))
>A3 : Symbol(A3, Decl(subtypingWithObjectMembers5.ts, 25, 5))

        '1.0': Derived; // error
>'1.0' : Symbol(B3['1.0'], Decl(subtypingWithObjectMembers5.ts, 31, 28))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
    }
}

// same cases as above but with optional
namespace Optional {
>Optional : Symbol(Optional, Decl(subtypingWithObjectMembers5.ts, 34, 1))

    interface A {
>A : Symbol(A, Decl(subtypingWithObjectMembers5.ts, 37, 20))

        foo?: Base;
>foo : Symbol(A.foo, Decl(subtypingWithObjectMembers5.ts, 38, 17))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))
    }

    class B implements A {
>B : Symbol(B, Decl(subtypingWithObjectMembers5.ts, 40, 5))
>A : Symbol(A, Decl(subtypingWithObjectMembers5.ts, 37, 20))

        fooo: Derived; // weak type error
>fooo : Symbol(B.fooo, Decl(subtypingWithObjectMembers5.ts, 42, 26))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
    }

    interface A2 {
>A2 : Symbol(A2, Decl(subtypingWithObjectMembers5.ts, 44, 5))

        1?: Base;
>1 : Symbol(A2[1], Decl(subtypingWithObjectMembers5.ts, 46, 18))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))
    }

    class B2 implements A2 {
>B2 : Symbol(B2, Decl(subtypingWithObjectMembers5.ts, 48, 5))
>A2 : Symbol(A2, Decl(subtypingWithObjectMembers5.ts, 44, 5))

        2: Derived; // weak type error
>2 : Symbol(B2[2], Decl(subtypingWithObjectMembers5.ts, 50, 28))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
    }

    interface A3 {
>A3 : Symbol(A3, Decl(subtypingWithObjectMembers5.ts, 52, 5))

        '1'?: Base;
>'1' : Symbol(A3['1'], Decl(subtypingWithObjectMembers5.ts, 54, 18))
>Base : Symbol(Base, Decl(subtypingWithObjectMembers5.ts, 0, 0))
    }

    class B3 implements A3 {
>B3 : Symbol(B3, Decl(subtypingWithObjectMembers5.ts, 56, 5))
>A3 : Symbol(A3, Decl(subtypingWithObjectMembers5.ts, 52, 5))

        '1.0': Derived; // weak type error
>'1.0' : Symbol(B3['1.0'], Decl(subtypingWithObjectMembers5.ts, 58, 28))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembers5.ts, 2, 1))
    }
}

