//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers5.ts] ////

=== subtypingWithObjectMembers5.ts ===
interface Base {
    foo: string;
>foo : string
>    : ^^^^^^
}

interface Derived extends Base {
    bar: string;
>bar : string
>    : ^^^^^^
}

// N and M have the same name, same accessibility, same optionality, and N is a subtype of M
// foo properties are valid, bar properties cause errors in the derived class declarations
module NotOptional {
>NotOptional : typeof NotOptional
>            : ^^^^^^^^^^^^^^^^^^

    interface A {
        foo: Base;
>foo : Base
>    : ^^^^
    }

    class B implements A {
>B : B
>  : ^

        fooo: Derived; // error
>fooo : Derived
>     : ^^^^^^^
    }

    interface A2 {
        1: Base;
>1 : Base
>  : ^^^^
    }

    class B2 implements A2 {
>B2 : B2
>   : ^^

        2: Derived; // error
>2 : Derived
>  : ^^^^^^^
    }

    interface A3 {
        '1': Base;
>'1' : Base
>    : ^^^^
    }

    class B3 implements A3 {
>B3 : B3
>   : ^^

        '1.0': Derived; // error
>'1.0' : Derived
>      : ^^^^^^^
    }
}

// same cases as above but with optional
module Optional {
>Optional : typeof Optional
>         : ^^^^^^^^^^^^^^^

    interface A {
        foo?: Base;
>foo : Base
>    : ^^^^
    }

    class B implements A {
>B : B
>  : ^

        fooo: Derived; // weak type error
>fooo : Derived
>     : ^^^^^^^
    }

    interface A2 {
        1?: Base;
>1 : Base
>  : ^^^^
    }

    class B2 implements A2 {
>B2 : B2
>   : ^^

        2: Derived; // weak type error
>2 : Derived
>  : ^^^^^^^
    }

    interface A3 {
        '1'?: Base;
>'1' : Base
>    : ^^^^
    }

    class B3 implements A3 {
>B3 : B3
>   : ^^

        '1.0': Derived; // weak type error
>'1.0' : Derived
>      : ^^^^^^^
    }
}

