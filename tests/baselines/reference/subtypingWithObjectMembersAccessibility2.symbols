//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersAccessibility2.ts] ////

=== subtypingWithObjectMembersAccessibility2.ts ===
// Derived member is private, base member is not causes errors

class Base {
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))

    foo: string;
>foo : Symbol(Base.foo, Decl(subtypingWithObjectMembersAccessibility2.ts, 2, 12))
}

class Derived extends Base {
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))

    bar: string;
>bar : Symbol(Derived.bar, Decl(subtypingWithObjectMembersAccessibility2.ts, 6, 28))
}

namespace ExplicitPublic {
>ExplicitPublic : Symbol(ExplicitPublic, Decl(subtypingWithObjectMembersAccessibility2.ts, 8, 1))

    class A {
>A : Symbol(A, Decl(subtypingWithObjectMembersAccessibility2.ts, 10, 26))

        private foo: Base;
>foo : Symbol(A.foo, Decl(subtypingWithObjectMembersAccessibility2.ts, 11, 13))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))
    }

    class B extends A {
>B : Symbol(B, Decl(subtypingWithObjectMembersAccessibility2.ts, 13, 5))
>A : Symbol(A, Decl(subtypingWithObjectMembersAccessibility2.ts, 10, 26))

        public foo: Derived; // error
>foo : Symbol(B.foo, Decl(subtypingWithObjectMembersAccessibility2.ts, 15, 23))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
    }

    class A2 {
>A2 : Symbol(A2, Decl(subtypingWithObjectMembersAccessibility2.ts, 17, 5))

        private 1: Base;
>1 : Symbol(A2[1], Decl(subtypingWithObjectMembersAccessibility2.ts, 19, 14))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))
    }

    class B2 extends A2 {
>B2 : Symbol(B2, Decl(subtypingWithObjectMembersAccessibility2.ts, 21, 5))
>A2 : Symbol(A2, Decl(subtypingWithObjectMembersAccessibility2.ts, 17, 5))

        public 1: Derived; // error
>1 : Symbol(B2[1], Decl(subtypingWithObjectMembersAccessibility2.ts, 23, 25))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
    }

    class A3 {
>A3 : Symbol(A3, Decl(subtypingWithObjectMembersAccessibility2.ts, 25, 5))

        private '1': Base;
>'1' : Symbol(A3['1'], Decl(subtypingWithObjectMembersAccessibility2.ts, 27, 14))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))
    }

    class B3 extends A3 {
>B3 : Symbol(B3, Decl(subtypingWithObjectMembersAccessibility2.ts, 29, 5))
>A3 : Symbol(A3, Decl(subtypingWithObjectMembersAccessibility2.ts, 25, 5))

        public '1': Derived; // error
>'1' : Symbol(B3['1'], Decl(subtypingWithObjectMembersAccessibility2.ts, 31, 25))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
    }
}

namespace ImplicitPublic {
>ImplicitPublic : Symbol(ImplicitPublic, Decl(subtypingWithObjectMembersAccessibility2.ts, 34, 1))

    class A {
>A : Symbol(A, Decl(subtypingWithObjectMembersAccessibility2.ts, 36, 26))

        private foo: Base;
>foo : Symbol(A.foo, Decl(subtypingWithObjectMembersAccessibility2.ts, 37, 13))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))
    }

    class B extends A {
>B : Symbol(B, Decl(subtypingWithObjectMembersAccessibility2.ts, 39, 5))
>A : Symbol(A, Decl(subtypingWithObjectMembersAccessibility2.ts, 36, 26))

        foo: Derived; // error
>foo : Symbol(B.foo, Decl(subtypingWithObjectMembersAccessibility2.ts, 41, 23))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
    }

    class A2 {
>A2 : Symbol(A2, Decl(subtypingWithObjectMembersAccessibility2.ts, 43, 5))

        private 1: Base;
>1 : Symbol(A2[1], Decl(subtypingWithObjectMembersAccessibility2.ts, 45, 14))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))
    }

    class B2 extends A2 {
>B2 : Symbol(B2, Decl(subtypingWithObjectMembersAccessibility2.ts, 47, 5))
>A2 : Symbol(A2, Decl(subtypingWithObjectMembersAccessibility2.ts, 43, 5))

        1: Derived; // error
>1 : Symbol(B2[1], Decl(subtypingWithObjectMembersAccessibility2.ts, 49, 25))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
    }

    class A3 {
>A3 : Symbol(A3, Decl(subtypingWithObjectMembersAccessibility2.ts, 51, 5))

        private '1': Base;
>'1' : Symbol(A3['1'], Decl(subtypingWithObjectMembersAccessibility2.ts, 53, 14))
>Base : Symbol(Base, Decl(subtypingWithObjectMembersAccessibility2.ts, 0, 0))
    }

    class B3 extends A3 {
>B3 : Symbol(B3, Decl(subtypingWithObjectMembersAccessibility2.ts, 55, 5))
>A3 : Symbol(A3, Decl(subtypingWithObjectMembersAccessibility2.ts, 51, 5))

        '1': Derived; // error
>'1' : Symbol(B3['1'], Decl(subtypingWithObjectMembersAccessibility2.ts, 57, 25))
>Derived : Symbol(Derived, Decl(subtypingWithObjectMembersAccessibility2.ts, 4, 1))
    }
}
