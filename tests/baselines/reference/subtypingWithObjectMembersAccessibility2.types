//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersAccessibility2.ts] ////

=== subtypingWithObjectMembersAccessibility2.ts ===
// Derived member is private, base member is not causes errors

class Base {
>Base : Base
>     : ^^^^

    foo: string;
>foo : string
>    : ^^^^^^
}

class Derived extends Base {
>Derived : Derived
>        : ^^^^^^^
>Base : Base
>     : ^^^^

    bar: string;
>bar : string
>    : ^^^^^^
}

module ExplicitPublic {
>ExplicitPublic : typeof ExplicitPublic
>               : ^^^^^^^^^^^^^^^^^^^^^

    class A {
>A : A
>  : ^

        private foo: Base;
>foo : Base
>    : ^^^^
    }

    class B extends A {
>B : B
>  : ^
>A : A
>  : ^

        public foo: Derived; // error
>foo : Derived
>    : ^^^^^^^
    }

    class A2 {
>A2 : A2
>   : ^^

        private 1: Base;
>1 : Base
>  : ^^^^
    }

    class B2 extends A2 {
>B2 : B2
>   : ^^
>A2 : A2
>   : ^^

        public 1: Derived; // error
>1 : Derived
>  : ^^^^^^^
    }

    class A3 {
>A3 : A3
>   : ^^

        private '1': Base;
>'1' : Base
>    : ^^^^
    }

    class B3 extends A3 {
>B3 : B3
>   : ^^
>A3 : A3
>   : ^^

        public '1': Derived; // error
>'1' : Derived
>    : ^^^^^^^
    }
}

module ImplicitPublic {
>ImplicitPublic : typeof ImplicitPublic
>               : ^^^^^^^^^^^^^^^^^^^^^

    class A {
>A : A
>  : ^

        private foo: Base;
>foo : Base
>    : ^^^^
    }

    class B extends A {
>B : B
>  : ^
>A : A
>  : ^

        foo: Derived; // error
>foo : Derived
>    : ^^^^^^^
    }

    class A2 {
>A2 : A2
>   : ^^

        private 1: Base;
>1 : Base
>  : ^^^^
    }

    class B2 extends A2 {
>B2 : B2
>   : ^^
>A2 : A2
>   : ^^

        1: Derived; // error
>1 : Derived
>  : ^^^^^^^
    }

    class A3 {
>A3 : A3
>   : ^^

        private '1': Base;
>'1' : Base
>    : ^^^^
    }

    class B3 extends A3 {
>B3 : B3
>   : ^^
>A3 : A3
>   : ^^

        '1': Derived; // error
>'1' : Derived
>    : ^^^^^^^
    }
}
