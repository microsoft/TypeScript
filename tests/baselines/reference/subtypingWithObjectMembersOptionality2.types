//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality2.ts] ////

=== subtypingWithObjectMembersOptionality2.ts ===
// Derived member is optional but base member is not, should be an error

interface Base { foo: string; }
>foo : string
>    : ^^^^^^

interface Derived extends Base { bar: string; }
>bar : string
>    : ^^^^^^

interface T {
    Foo: Base;
>Foo : Base
>    : ^^^^
}

interface S extends T {
    Foo?: Derived // error
>Foo : Derived
>    : ^^^^^^^
}

interface T2 {
    1: Base;
>1 : Base
>  : ^^^^
}

interface S2 extends T2 {
    1?: Derived; // error
>1 : Derived
>  : ^^^^^^^
}

interface T3 {
    '1': Base;
>'1' : Base
>    : ^^^^
}

interface S3 extends T3 {
    '1'?: Derived; // error
>'1' : Derived
>    : ^^^^^^^
}

// object literal case
var a: { Foo: Base; }
>a : { Foo: Base; }
>  : ^^^^^^^    ^^^
>Foo : Base
>    : ^^^^

var b: { Foo?: Derived; }
>b : { Foo?: Derived; }
>  : ^^^^^^^^       ^^^
>Foo : Derived
>    : ^^^^^^^

var r = true ? a : b; // ok
>r : { Foo: Base; } | { Foo?: Derived; }
>  : ^^^^^^^    ^^^^^^^^^^^^^^       ^^^
>true ? a : b : { Foo: Base; } | { Foo?: Derived; }
>             : ^^^^^^^    ^^^^^^^^^^^^^^       ^^^
>true : true
>     : ^^^^
>a : { Foo: Base; }
>  : ^^^^^^^    ^^^
>b : { Foo?: Derived; }
>  : ^^^^^^^^       ^^^

