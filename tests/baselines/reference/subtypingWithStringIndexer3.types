//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts] ////

=== subtypingWithStringIndexer3.ts ===
// Derived type indexer must be subtype of base type indexer

interface Base { foo: string; }
>foo : string
>    : ^^^^^^

interface Derived extends Base { bar: string; }
>bar : string
>    : ^^^^^^

interface Derived2 extends Derived { baz: string; }
>baz : string
>    : ^^^^^^

class A {
>A : A
>  : ^

    [x: string]: Derived;
>x : string
>  : ^^^^^^
}

class B extends A {
>B : B
>  : ^
>A : A
>  : ^

    [x: string]: Base; // error
>x : string
>  : ^^^^^^
}

class B2 extends A {
>B2 : B2
>   : ^^
>A : A
>  : ^

    [x: string]: Derived2; // ok
>x : string
>  : ^^^^^^
}

module Generics {
>Generics : typeof Generics
>         : ^^^^^^^^^^^^^^^

    class A<T extends Derived> {
>A : A<T>
>  : ^^^^

        [x: string]: T;
>x : string
>  : ^^^^^^
    }

    class B extends A<Base> {
>B : B
>  : ^
>A : A<Base>
>  : ^^^^^^^

        [x: string]: Derived; // error
>x : string
>  : ^^^^^^
    }

    class B2 extends A<Derived> {
>B2 : B2
>   : ^^
>A : A<Derived>
>  : ^^^^^^^^^^

        [x: string]: Derived2; // ok
>x : string
>  : ^^^^^^
    }

    class B3<T extends Derived> extends A<T> {
>B3 : B3<T>
>   : ^^^^^
>A : A<T>
>  : ^^^^

        [x: string]: Base; // error
>x : string
>  : ^^^^^^
    }

    class B4<T extends Derived> extends A<T> {
>B4 : B4<T>
>   : ^^^^^
>A : A<T>
>  : ^^^^

        [x: string]: Derived; // error
>x : string
>  : ^^^^^^
    }

    class B5<T extends Derived2> extends A<T> {
>B5 : B5<T>
>   : ^^^^^
>A : A<T>
>  : ^^^^

        [x: string]: Derived2; // error
>x : string
>  : ^^^^^^
    }
}
