//// [tests/cases/compiler/superCallInNonStaticMethod.ts] ////

=== superCallInNonStaticMethod.ts ===
class Doing {
>Doing : Doing
>      : ^^^^^

    public instanceMethod() {
>instanceMethod : () => void
>               : ^^^^^^^^^^
    }
}

class Other extends Doing {
>Other : Other
>      : ^^^^^
>Doing : Doing
>      : ^^^^^

    // in instance method
    public instanceMethod() {
>instanceMethod : () => void
>               : ^^^^^^^^^^

        super.instanceMethod();
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^
    }

    // in a lambda inside a instance method
    public lambdaInsideAnInstanceMethod() {
>lambdaInsideAnInstanceMethod : () => void
>                             : ^^^^^^^^^^

        () => {
>() => {            super.instanceMethod();        } : () => void
>                                                    : ^^^^^^^^^^

            super.instanceMethod();
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^
        }
    }

    // in an object literal inside a instance method
    public objectLiteralInsideAnInstanceMethod() {
>objectLiteralInsideAnInstanceMethod : () => { a: () => void; b: void; }
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        return {
>{            a: () => {                super.instanceMethod();            },            b: super.instanceMethod()        } : { a: () => void; b: void; }
>                                                                                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

            a: () => {
>a : () => void
>  : ^^^^^^^^^^
>() => {                super.instanceMethod();            } : () => void
>                                                            : ^^^^^^^^^^

                super.instanceMethod();
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^

            },
            b: super.instanceMethod()
>b : void
>  : ^^^^
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^

        };
    }

    // in a getter
    public get accessor() {
>accessor : number
>         : ^^^^^^

        super.instanceMethod();
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^

        return 0;
>0 : 0
>  : ^
    }

    // in a setter
    public set accessor(value: number) {
>accessor : number
>         : ^^^^^^
>value : number
>      : ^^^^^^

        super.instanceMethod();
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^
    }
    
    constructor() {
        super();
>super() : void
>        : ^^^^
>super : typeof Doing
>      : ^^^^^^^^^^^^

        super.instanceMethod();
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^
    }
    
    public propertyInitializer = super.instanceMethod();
>propertyInitializer : void
>                    : ^^^^
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^
    
    public functionProperty = () => {super.instanceMethod(); };
>functionProperty : () => void
>                 : ^^^^^^^^^^
>() => {super.instanceMethod(); } : () => void
>                                 : ^^^^^^^^^^
>super.instanceMethod() : void
>                       : ^^^^
>super.instanceMethod : () => void
>                     : ^^^^^^^^^^
>super : Doing
>      : ^^^^^
>instanceMethod : () => void
>               : ^^^^^^^^^^
}

