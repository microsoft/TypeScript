//// [tests/cases/compiler/superElementAccess.ts] ////

=== superElementAccess.ts ===
class MyBase {
>MyBase : MyBase
>       : ^^^^^^

    m1(a: string) { return a; }
>m1 : (a: string) => string
>   : ^ ^^      ^^^^^^^^^^^
>a : string
>  : ^^^^^^
>a : string
>  : ^^^^^^

    private p1() { }
>p1 : () => void
>   : ^^^^^^^^^^

    m2: () => void = function () { }
>m2 : () => void
>   : ^^^^^^    
>function () { } : () => void
>                : ^^^^^^^^^^

    d1: number = 42;
>d1 : number
>   : ^^^^^^
>42 : 42
>   : ^^

    private d2: number = 42;
>d2 : number
>   : ^^^^^^
>42 : 42
>   : ^^

    get value() {return 0 }
>value : number
>      : ^^^^^^
>0 : 0
>  : ^

    set value(v: number) { }
>value : number
>      : ^^^^^^
>v : number
>  : ^^^^^^
}


class MyDerived extends MyBase {
>MyDerived : MyDerived
>          : ^^^^^^^^^
>MyBase : MyBase
>       : ^^^^^^

    foo() {
>foo : () => void
>    : ^^^^^^^^^^

        super["m1"]("hi");                                     // Should be allowed, method on base prototype
>super["m1"]("hi") : string
>                  : ^^^^^^
>super["m1"] : (a: string) => string
>            : ^ ^^      ^^^^^^^^^^^
>super : MyBase
>      : ^^^^^^
>"m1" : "m1"
>     : ^^^^
>"hi" : "hi"
>     : ^^^^

        var l2 = super["m1"].bind(this);                       // Should be allowed, can access properties as well as invoke
>l2 : any
>super["m1"].bind(this) : any
>super["m1"].bind : (this: Function, thisArg: any, ...argArray: any[]) => any
>                 : ^    ^^        ^^       ^^   ^^^^^        ^^     ^^^^^   
>super["m1"] : (a: string) => string
>            : ^ ^^      ^^^^^^^^^^^
>super : MyBase
>      : ^^^^^^
>"m1" : "m1"
>     : ^^^^
>bind : (this: Function, thisArg: any, ...argArray: any[]) => any
>     : ^    ^^        ^^       ^^   ^^^^^        ^^     ^^^^^   
>this : this
>     : ^^^^

        var x: (a: string) => string = super["m1"];            // Should be allowed, can assign to var with compatible signature
>x : (a: string) => string
>  : ^ ^^      ^^^^^      
>a : string
>  : ^^^^^^
>super["m1"] : (a: string) => string
>            : ^ ^^      ^^^^^^^^^^^
>super : MyBase
>      : ^^^^^^
>"m1" : "m1"
>     : ^^^^

        super["m2"].bind(this);                                // Should error, instance property, not a public instance member function
>super["m2"].bind(this) : any
>super["m2"].bind : (this: Function, thisArg: any, ...argArray: any[]) => any
>                 : ^    ^^        ^^       ^^   ^^^^^        ^^     ^^^^^   
>super["m2"] : () => void
>            : ^^^^^^    
>super : MyBase
>      : ^^^^^^
>"m2" : "m2"
>     : ^^^^
>bind : (this: Function, thisArg: any, ...argArray: any[]) => any
>     : ^    ^^        ^^       ^^   ^^^^^        ^^     ^^^^^   
>this : this
>     : ^^^^

        super["p1"]();                                         // Should error, private not public instance member function
>super["p1"]() : void
>              : ^^^^
>super["p1"] : () => void
>            : ^^^^^^^^^^
>super : MyBase
>      : ^^^^^^
>"p1" : "p1"
>     : ^^^^

        var l1 = super["d1"];                                  // Should error, instance data property not a public instance member function
>l1 : number
>   : ^^^^^^
>super["d1"] : number
>            : ^^^^^^
>super : MyBase
>      : ^^^^^^
>"d1" : "d1"
>     : ^^^^

        var l1 = super["d2"];                                  // Should error, instance data property not a public instance member function
>l1 : number
>   : ^^^^^^
>super["d2"] : number
>            : ^^^^^^
>super : MyBase
>      : ^^^^^^
>"d2" : "d2"
>     : ^^^^

        super["m1"] = function (a: string) { return ""; };     // Should be allowed, we will not restrict assignment
>super["m1"] = function (a: string) { return ""; } : (a: string) => string
>                                                  : ^ ^^      ^^^^^^^^^^^
>super["m1"] : (a: string) => string
>            : ^ ^^      ^^^^^^^^^^^
>super : MyBase
>      : ^^^^^^
>"m1" : "m1"
>     : ^^^^
>function (a: string) { return ""; } : (a: string) => string
>                                    : ^ ^^      ^^^^^^^^^^^
>a : string
>  : ^^^^^^
>"" : ""
>   : ^^

        super["value"] = 0;                                    // Should error, instance data property not a public instance member function
>super["value"] = 0 : 0
>                   : ^
>super["value"] : number
>               : ^^^^^^
>super : MyBase
>      : ^^^^^^
>"value" : "value"
>        : ^^^^^^^
>0 : 0
>  : ^
        
        var z = super["value"];                                // Should error, instance data property not a public instance member function
>z : number
>  : ^^^^^^
>super["value"] : number
>               : ^^^^^^
>super : MyBase
>      : ^^^^^^
>"value" : "value"
>        : ^^^^^^^
    }
}
