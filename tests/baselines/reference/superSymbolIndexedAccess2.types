//// [tests/cases/conformance/expressions/superPropertyAccess/superSymbolIndexedAccess2.ts] ////

=== superSymbolIndexedAccess2.ts ===
class Foo {
>Foo : Foo
>    : ^^^

    [Symbol.isConcatSpreadable]() {
>[Symbol.isConcatSpreadable] : () => number
>                            : ^^^^^^^^^^^^
>Symbol.isConcatSpreadable : unique symbol
>                          : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>isConcatSpreadable : unique symbol
>                   : ^^^^^^^^^^^^^

        return 0;
>0 : 0
>  : ^
    }
}

class Bar extends Foo {
>Bar : Bar
>    : ^^^
>Foo : Foo
>    : ^^^

    [Symbol.isConcatSpreadable]() {
>[Symbol.isConcatSpreadable] : () => number
>                            : ^^^^^^^^^^^^
>Symbol.isConcatSpreadable : unique symbol
>                          : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>isConcatSpreadable : unique symbol
>                   : ^^^^^^^^^^^^^

        return super[Symbol.isConcatSpreadable]();
>super[Symbol.isConcatSpreadable]() : number
>                                   : ^^^^^^
>super[Symbol.isConcatSpreadable] : () => number
>                                 : ^^^^^^^^^^^^
>super : Foo
>      : ^^^
>Symbol.isConcatSpreadable : unique symbol
>                          : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>isConcatSpreadable : unique symbol
>                   : ^^^^^^^^^^^^^
    }
}
