//// [tests/cases/conformance/es6/Symbols/symbolProperty19.ts] ////

=== symbolProperty19.ts ===
var i = {
>i : { [Symbol.iterator]: { p: any; }; [Symbol.toStringTag](): { p: any; }; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    [Symbol.iterator]: { p: null },    [Symbol.toStringTag]() { return { p: undefined }; }} : { [Symbol.iterator]: { p: null; }; [Symbol.toStringTag](): { p: any; }; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    [Symbol.iterator]: { p: null },
>[Symbol.iterator] : { p: null; }
>                  : ^^^^^^^^^^^^
>Symbol.iterator : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>iterator : unique symbol
>         : ^^^^^^^^^^^^^
>{ p: null } : { p: null; }
>            : ^^^^^^^^^^^^
>p : null
>  : ^^^^

    [Symbol.toStringTag]() { return { p: undefined }; }
>[Symbol.toStringTag] : () => { p: any; }
>                     : ^^^^^^^^^^^^^^^^^
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>{ p: undefined } : { p: undefined; }
>                 : ^^^^^^^^^^^^^^^^^
>p : undefined
>  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
}

var it = i[Symbol.iterator];
>it : { p: any; }
>   : ^^^^^^^^^^^
>i[Symbol.iterator] : { p: any; }
>                   : ^^^^^^^^^^^
>i : { [Symbol.iterator]: { p: any; }; [Symbol.toStringTag](): { p: any; }; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Symbol.iterator : unique symbol
>                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>iterator : unique symbol
>         : ^^^^^^^^^^^^^

var str = i[Symbol.toStringTag]();
>str : { p: any; }
>    : ^^^^^^^^^^^
>i[Symbol.toStringTag]() : { p: any; }
>                        : ^^^^^^^^^^^
>i[Symbol.toStringTag] : () => { p: any; }
>                      : ^^^^^^^^^^^^^^^^^
>i : { [Symbol.iterator]: { p: any; }; [Symbol.toStringTag](): { p: any; }; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^

