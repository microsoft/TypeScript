//// [tests/cases/compiler/symlinkedWorkspaceDependenciesNoDirectLinkGeneratesDeepNonrelativeName.ts] ////

=== workspace/packageA/foo.d.ts ===
export declare class Foo {
>Foo : Foo
>    : ^^^

    private f: any;
>f : any
}
=== workspace/packageA/index.d.ts ===
import { Foo } from "./foo.js";
>Foo : typeof Foo
>    : ^^^^^^^^^^

export function create(): Foo;
>create : () => Foo
>       : ^^^^^^   

=== workspace/packageB/index.d.ts ===
import { create } from "package-a";
>create : () => import("workspace/packageA/foo").Foo
>       : ^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^

export declare function invoke(): ReturnType<typeof create>;
>invoke : () => ReturnType<typeof create>
>       : ^^^^^^                         
>create : () => import("workspace/packageA/foo").Foo
>       : ^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^

=== workspace/packageC/index.ts ===
import * as pkg from "package-b";
>pkg : typeof pkg
>    : ^^^^^^^^^^

export const a = pkg.invoke();
>a : import("workspace/packageA/foo").Foo
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>pkg.invoke() : import("workspace/packageA/foo").Foo
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>pkg.invoke : () => ReturnType<typeof import("workspace/packageA/index").create>
>           : ^^^^^^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ 
>pkg : typeof pkg
>    : ^^^^^^^^^^
>invoke : () => ReturnType<typeof import("workspace/packageA/index").create>
>       : ^^^^^^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^ 

