//// [tests/cases/compiler/taggedTemplateStringsWithCurriedFunction.ts] ////

=== taggedTemplateStringsWithCurriedFunction.ts ===
// Originated from #38558

const f = _ => (..._) => "";
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>_ => (..._) => "" : (_: any) => (..._: any[]) => string
>                  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>_ : any
>(..._) => "" : (..._: any[]) => string
>             : ^^^^ ^^^^^^^^^^^^^^^^^^
>_ : any[]
>  : ^^^^^
>"" : ""
>   : ^^

f({ ...{ x: 0 } })``;
>f({ ...{ x: 0 } })`` : string
>                     : ^^^^^^
>f({ ...{ x: 0 } }) : (..._: any[]) => string
>                   : ^^^^ ^^^^^^^^^^^^^^^^^^
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>{ ...{ x: 0 } } : { x: number; }
>                : ^^^^^^^^^^^^^^
>{ x: 0 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>`` : ""
>   : ^^

f({ ...{ x: 0 } })`x`;
>f({ ...{ x: 0 } })`x` : string
>                      : ^^^^^^
>f({ ...{ x: 0 } }) : (..._: any[]) => string
>                   : ^^^^ ^^^^^^^^^^^^^^^^^^
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>{ ...{ x: 0 } } : { x: number; }
>                : ^^^^^^^^^^^^^^
>{ x: 0 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>`x` : "x"
>    : ^^^

f({ ...{ x: 0 } })`x${f}x`;
>f({ ...{ x: 0 } })`x${f}x` : string
>                           : ^^^^^^
>f({ ...{ x: 0 } }) : (..._: any[]) => string
>                   : ^^^^ ^^^^^^^^^^^^^^^^^^
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>{ ...{ x: 0 } } : { x: number; }
>                : ^^^^^^^^^^^^^^
>{ x: 0 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>`x${f}x` : string
>         : ^^^^^^
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^

f({ ...{ x: 0 }, y: (() => 1)() })``;
>f({ ...{ x: 0 }, y: (() => 1)() })`` : string
>                                     : ^^^^^^
>f({ ...{ x: 0 }, y: (() => 1)() }) : (..._: any[]) => string
>                                   : ^^^^ ^^^^^^^^^^^^^^^^^^
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>{ ...{ x: 0 }, y: (() => 1)() } : { y: number; x: number; }
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^
>{ x: 0 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : number
>  : ^^^^^^
>(() => 1)() : number
>            : ^^^^^^
>(() => 1) : () => number
>          : ^^^^^^^^^^^^
>() => 1 : () => number
>        : ^^^^^^^^^^^^
>1 : 1
>  : ^
>`` : ""
>   : ^^

f({ x: (() => 1)(), ...{ y: 1 } })``;
>f({ x: (() => 1)(), ...{ y: 1 } })`` : string
>                                     : ^^^^^^
>f({ x: (() => 1)(), ...{ y: 1 } }) : (..._: any[]) => string
>                                   : ^^^^ ^^^^^^^^^^^^^^^^^^
>f : (_: any) => (..._: any[]) => string
>  : ^ ^^^^^^^^^^^      ^^^^^^^^^^^^^^^^
>{ x: (() => 1)(), ...{ y: 1 } } : { y: number; x: number; }
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>(() => 1)() : number
>            : ^^^^^^
>(() => 1) : () => number
>          : ^^^^^^^^^^^^
>() => 1 : () => number
>        : ^^^^^^^^^^^^
>1 : 1
>  : ^
>{ y: 1 } : { y: number; }
>         : ^^^^^^^^^^^^^^
>y : number
>  : ^^^^^^
>1 : 1
>  : ^
>`` : ""
>   : ^^

