//// [tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution3_ES6.ts] ////

=== taggedTemplateStringsWithOverloadResolution3_ES6.ts ===
// Ambiguous call picks the first overload in declaration order
function fn1(strs: TemplateStringsArray, s: string): string;
>fn1 : { (strs: TemplateStringsArray, s: string): string; (strs: TemplateStringsArray, n: number): number; }
>    : ^^^    ^^                    ^^ ^^      ^^^      ^^^    ^^                    ^^ ^^      ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^

function fn1(strs: TemplateStringsArray, n: number): number;
>fn1 : { (strs: TemplateStringsArray, s: string): string; (strs: TemplateStringsArray, n: number): number; }
>    : ^^^    ^^                    ^^ ^^      ^^^      ^^^    ^^                    ^^ ^^      ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^

function fn1() { return null; }
>fn1 : { (strs: TemplateStringsArray, s: string): string; (strs: TemplateStringsArray, n: number): number; }
>    : ^^^    ^^                    ^^ ^^      ^^^      ^^^    ^^                    ^^ ^^      ^^^      ^^^

var s: string = fn1 `${ undefined }`;
>s : string
>  : ^^^^^^
>fn1 `${ undefined }` : string
>                     : ^^^^^^
>fn1 : { (strs: TemplateStringsArray, s: string): string; (strs: TemplateStringsArray, n: number): number; }
>    : ^^^    ^^                    ^^ ^^      ^^^      ^^^    ^^                    ^^ ^^      ^^^      ^^^
>`${ undefined }` : string
>                 : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

// No candidate overloads found
fn1 `${ {} }`; // Error
>fn1 `${ {} }` : never
>              : ^^^^^
>fn1 : { (strs: TemplateStringsArray, s: string): string; (strs: TemplateStringsArray, n: number): number; }
>    : ^^^    ^^                    ^^ ^^      ^^^      ^^^    ^^                    ^^ ^^      ^^^      ^^^
>`${ {} }` : string
>          : ^^^^^^
>{} : {}
>   : ^^

function fn2(strs: TemplateStringsArray, s: string, n: number): number;
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>n : number
>  : ^^^^^^

function fn2<T>(strs: TemplateStringsArray, n: number, t: T): T;
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^
>t : T
>  : ^

function fn2() { return undefined; }
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>undefined : undefined
>          : ^^^^^^^^^

var d1: Date = fn2 `${ 0 }${ undefined }`; // contextually typed
>d1 : Date
>   : ^^^^
>fn2 `${ 0 }${ undefined }` : any
>                           : ^^^
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>`${ 0 }${ undefined }` : string
>                       : ^^^^^^
>0 : 0
>  : ^
>undefined : undefined
>          : ^^^^^^^^^

var d2 = fn2 `${ 0 }${ undefined }`; // any
>d2 : any
>   : ^^^
>fn2 `${ 0 }${ undefined }` : any
>                           : ^^^
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>`${ 0 }${ undefined }` : string
>                       : ^^^^^^
>0 : 0
>  : ^
>undefined : undefined
>          : ^^^^^^^^^

d1.foo(); // error
>d1.foo() : any
>         : ^^^
>d1.foo : any
>       : ^^^
>d1 : Date
>   : ^^^^
>foo : any
>    : ^^^

d2();     // no error (typed as any)
>d2() : any
>     : ^^^
>d2 : any
>   : ^^^

// Generic and non-generic overload where generic overload is the only candidate
fn2 `${ 0 }${ '' }`; // OK
>fn2 `${ 0 }${ '' }` : ""
>                    : ^^
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>`${ 0 }${ '' }` : string
>                : ^^^^^^
>0 : 0
>  : ^
>'' : ""
>   : ^^

// Generic and non-generic overload where non-generic overload is the only candidate
fn2 `${ '' }${ 0 }`; // OK
>fn2 `${ '' }${ 0 }` : number
>                    : ^^^^^^
>fn2 : { (strs: TemplateStringsArray, s: string, n: number): number; <T>(strs: TemplateStringsArray, n: number, t: T): T; }
>    : ^^^    ^^                    ^^ ^^      ^^ ^^      ^^^      ^^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^^ ^^^
>`${ '' }${ 0 }` : string
>                : ^^^^^^
>'' : ""
>   : ^^
>0 : 0
>  : ^

// Generic overloads with differing arity
function fn3<T>(strs: TemplateStringsArray, n: T): string;
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T_1, U>(strs: TemplateStringsArray, s: string, t: T_1, u: U): U; <T_1, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T_1): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^^^^^^ ^^    ^^                    ^^ ^^      ^^ ^^   ^^ ^^ ^^^ ^^^^^^^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^   ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>n : T
>  : ^

function fn3<T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U;
>fn3 : { <T_1>(strs: TemplateStringsArray, n: T_1): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T_1, U_1, V>(strs: TemplateStringsArray, v: V, u: U_1, t: T_1): number; }
>    : ^^^^^^^^    ^^                    ^^ ^^   ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^^^^^^^^^^^ ^^    ^^                    ^^ ^^ ^^ ^^   ^^ ^^   ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>t : T
>  : ^
>u : U
>  : ^

function fn3<T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number;
>fn3 : { <T_1>(strs: TemplateStringsArray, n: T_1): string; <T_1, U_1>(strs: TemplateStringsArray, s: string, t: T_1, u: U_1): U_1; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^^^^^^    ^^                    ^^ ^^   ^^^      ^^^^^^^^^^^^^    ^^                    ^^ ^^      ^^ ^^   ^^ ^^   ^^^   ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>v : V
>  : ^
>u : U
>  : ^
>t : T
>  : ^

function fn3() { return null; }
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^

var s = fn3 `${ 3 }`;
>s : string
>  : ^^^^^^
>fn3 `${ 3 }` : string
>             : ^^^^^^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`${ 3 }` : string
>         : ^^^^^^
>3 : 3
>  : ^

var s = fn3 `${'' }${ 3 }${ '' }`;
>s : string
>  : ^^^^^^
>fn3 `${'' }${ 3 }${ '' }` : ""
>                          : ^^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`${'' }${ 3 }${ '' }` : string
>                      : ^^^^^^
>'' : ""
>   : ^^
>3 : 3
>  : ^
>'' : ""
>   : ^^

var n = fn3 `${ 5 }${ 5 }${ 5 }`;
>n : number
>  : ^^^^^^
>fn3 `${ 5 }${ 5 }${ 5 }` : number
>                         : ^^^^^^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`${ 5 }${ 5 }${ 5 }` : string
>                     : ^^^^^^
>5 : 5
>  : ^
>5 : 5
>  : ^
>5 : 5
>  : ^

var n: number;
>n : number
>  : ^^^^^^

// Generic overloads with differing arity tagging with arguments matching each overload type parameter count
var s = fn3 `${ 4 }`
>s : string
>  : ^^^^^^
>fn3 `${ 4 }` : string
>             : ^^^^^^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`${ 4 }` : string
>         : ^^^^^^
>4 : 4
>  : ^

var s = fn3 `${ '' }${ '' }${ '' }`;
>s : string
>  : ^^^^^^
>fn3 `${ '' }${ '' }${ '' }` : ""
>                            : ^^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`${ '' }${ '' }${ '' }` : string
>                        : ^^^^^^
>'' : ""
>   : ^^
>'' : ""
>   : ^^
>'' : ""
>   : ^^

var n = fn3 `${ '' }${ '' }${ 3 }`;
>n : number
>  : ^^^^^^
>fn3 `${ '' }${ '' }${ 3 }` : 3
>                           : ^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`${ '' }${ '' }${ 3 }` : string
>                       : ^^^^^^
>'' : ""
>   : ^^
>'' : ""
>   : ^^
>3 : 3
>  : ^

// Generic overloads with differing arity tagging with argument count that doesn't match any overload
fn3 ``; // Error
>fn3 `` : string
>       : ^^^^^^
>fn3 : { <T>(strs: TemplateStringsArray, n: T): string; <T, U>(strs: TemplateStringsArray, s: string, t: T, u: U): U; <T, U, V>(strs: TemplateStringsArray, v: V, u: U, t: T): number; }
>    : ^^^ ^^    ^^                    ^^ ^^ ^^^      ^^^ ^^ ^^    ^^                    ^^ ^^      ^^ ^^ ^^ ^^ ^^^ ^^^ ^^ ^^ ^^    ^^                    ^^ ^^ ^^ ^^ ^^ ^^ ^^^      ^^^
>`` : ""
>   : ^^

// Generic overloads with constraints
function fn4<T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U);
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T_1 extends number, U_1 extends string>(strs: TemplateStringsArray, n: T_1, m: U_1): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^    ^^                    ^^ ^^   ^^ ^^   ^^^^^^^^^    ^^                    ^^^^^^^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>n : T
>  : ^
>m : U
>  : ^

function fn4<T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U);
>fn4 : { <T_1 extends string, U_1 extends number>(strs: TemplateStringsArray, n: T_1, m: U_1): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^      ^^    ^^                    ^^ ^^   ^^ ^^   ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>n : T
>  : ^
>m : U
>  : ^

function fn4(strs: TemplateStringsArray)
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^

function fn4() { }
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^

// Generic overloads with constraints tagged with types that satisfy the constraints
fn4 `${ '' }${ 3  }`;
>fn4 `${ '' }${ 3  }` : any
>                     : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ '' }${ 3  }` : string
>                 : ^^^^^^
>'' : ""
>   : ^^
>3 : 3
>  : ^

fn4 `${ 3  }${ '' }`;
>fn4 `${ 3  }${ '' }` : any
>                     : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ 3  }${ '' }` : string
>                 : ^^^^^^
>3 : 3
>  : ^
>'' : ""
>   : ^^

fn4 `${ 3  }${ undefined }`;
>fn4 `${ 3  }${ undefined }` : any
>                            : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ 3  }${ undefined }` : string
>                        : ^^^^^^
>3 : 3
>  : ^
>undefined : undefined
>          : ^^^^^^^^^

fn4 `${ '' }${ null }`;
>fn4 `${ '' }${ null }` : any
>                       : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ '' }${ null }` : string
>                   : ^^^^^^
>'' : ""
>   : ^^

// Generic overloads with constraints called with type arguments that do not satisfy the constraints
fn4 `${ null }${ null }`; // Error
>fn4 `${ null }${ null }` : any
>                         : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ null }${ null }` : string
>                     : ^^^^^^

// Generic overloads with constraints called without type arguments but with types that do not satisfy the constraints
fn4 `${ true }${ null }`;
>fn4 `${ true }${ null }` : any
>                         : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ true }${ null }` : string
>                     : ^^^^^^
>true : true
>     : ^^^^

fn4 `${ null }${ true }`;
>fn4 `${ null }${ true }` : any
>                         : ^^^
>fn4 : { <T extends string, U extends number>(strs: TemplateStringsArray, n: T, m: U): any; <T extends number, U extends string>(strs: TemplateStringsArray, n: T, m: U): any; (strs: TemplateStringsArray): any; }
>    : ^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^ ^^^^^^^^^      ^^ ^^^^^^^^^      ^^    ^^                    ^^ ^^ ^^ ^^ ^^^^^^^^^    ^^                    ^^^^^^^^^
>`${ null }${ true }` : string
>                     : ^^^^^^
>true : true
>     : ^^^^

// Non - generic overloads where contextual typing of function arguments has errors
function fn5(strs: TemplateStringsArray, f: (n: string) => void): string;
>fn5 : { (strs: TemplateStringsArray, f: (n: string) => void): string; (strs: TemplateStringsArray, f: (n: number) => void): number; }
>    : ^^^    ^^                    ^^ ^^                   ^^^      ^^^    ^^                    ^^ ^^                   ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>f : (n: string) => void
>  : ^ ^^      ^^^^^    
>n : string
>  : ^^^^^^

function fn5(strs: TemplateStringsArray, f: (n: number) => void): number;
>fn5 : { (strs: TemplateStringsArray, f: (n: string) => void): string; (strs: TemplateStringsArray, f: (n: number) => void): number; }
>    : ^^^    ^^                    ^^ ^^                   ^^^      ^^^    ^^                    ^^ ^^                   ^^^      ^^^
>strs : TemplateStringsArray
>     : ^^^^^^^^^^^^^^^^^^^^
>f : (n: number) => void
>  : ^ ^^      ^^^^^    
>n : number
>  : ^^^^^^

function fn5() { return undefined; }
>fn5 : { (strs: TemplateStringsArray, f: (n: string) => void): string; (strs: TemplateStringsArray, f: (n: number) => void): number; }
>    : ^^^    ^^                    ^^ ^^                   ^^^      ^^^    ^^                    ^^ ^^                   ^^^      ^^^
>undefined : undefined
>          : ^^^^^^^^^

fn5 `${ (n) => n.toFixed() }`; // will error; 'n' should have type 'string'.
>fn5 `${ (n) => n.toFixed() }` : string
>                              : ^^^^^^
>fn5 : { (strs: TemplateStringsArray, f: (n: string) => void): string; (strs: TemplateStringsArray, f: (n: number) => void): number; }
>    : ^^^    ^^                    ^^ ^^                   ^^^      ^^^    ^^                    ^^ ^^                   ^^^      ^^^
>`${ (n) => n.toFixed() }` : string
>                          : ^^^^^^
>(n) => n.toFixed() : (n: string) => any
>                   : ^ ^^^^^^^^^^^^^^^^
>n : string
>  : ^^^^^^
>n.toFixed() : any
>            : ^^^
>n.toFixed : any
>          : ^^^
>n : string
>  : ^^^^^^
>toFixed : any
>        : ^^^

fn5 `${ (n) => n.substr(0) }`;
>fn5 `${ (n) => n.substr(0) }` : string
>                              : ^^^^^^
>fn5 : { (strs: TemplateStringsArray, f: (n: string) => void): string; (strs: TemplateStringsArray, f: (n: number) => void): number; }
>    : ^^^    ^^                    ^^ ^^                   ^^^      ^^^    ^^                    ^^ ^^                   ^^^      ^^^
>`${ (n) => n.substr(0) }` : string
>                          : ^^^^^^
>(n) => n.substr(0) : (n: string) => string
>                   : ^ ^^^^^^^^^^^^^^^^^^^
>n : string
>  : ^^^^^^
>n.substr(0) : string
>            : ^^^^^^
>n.substr : (from: number, length?: number) => string
>         : ^    ^^      ^^      ^^^      ^^^^^      
>n : string
>  : ^^^^^^
>substr : (from: number, length?: number) => string
>       : ^    ^^      ^^      ^^^      ^^^^^      
>0 : 0
>  : ^


