//// [tests/cases/compiler/targetTypeBaseCalls.ts] ////

=== targetTypeBaseCalls.ts ===
function foo(x: (s: string) => void) { }
>foo : (x: (s: string) => void) => void
>    : ^ ^^                   ^^^^^^^^^
>x : (s: string) => void
>  : ^ ^^      ^^^^^    
>s : string
>  : ^^^^^^
 
 
 
class Foo { constructor(x: (s: string) => void){} }
>Foo : Foo
>    : ^^^
>x : (s: string) => void
>  : ^ ^^      ^^^^^    
>s : string
>  : ^^^^^^
 
 
 
foo(function(s) { s = 5 });  // Error, canâ€™t assign number to string
>foo(function(s) { s = 5 }) : void
>                           : ^^^^
>foo : (x: (s: string) => void) => void
>    : ^ ^^                   ^^^^^^^^^
>function(s) { s = 5 } : (s: string) => void
>                      : ^ ^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>s = 5 : 5
>      : ^
>s : string
>  : ^^^^^^
>5 : 5
>  : ^
 
 
 
new Foo(function(s) { s = 5 });  // error, if types are applied correctly
>new Foo(function(s) { s = 5 }) : Foo
>                               : ^^^
>Foo : typeof Foo
>    : ^^^^^^^^^^
>function(s) { s = 5 } : (s: string) => void
>                      : ^ ^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>s = 5 : 5
>      : ^
>s : string
>  : ^^^^^^
>5 : 5
>  : ^
 
 
 
class Bar extends Foo { constructor() { super(function(s) { s = 5 }) } }  // error, if types are applied correctly
>Bar : Bar
>    : ^^^
>Foo : Foo
>    : ^^^
>super(function(s) { s = 5 }) : void
>                             : ^^^^
>super : typeof Foo
>      : ^^^^^^^^^^
>function(s) { s = 5 } : (s: string) => void
>                      : ^ ^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>s = 5 : 5
>      : ^
>s : string
>  : ^^^^^^
>5 : 5
>  : ^

