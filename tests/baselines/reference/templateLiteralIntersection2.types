//// [tests/cases/compiler/templateLiteralIntersection2.ts] ////

=== templateLiteralIntersection2.ts ===
type Path = string & { _pathBrand: any };
>Path : Path
>     : ^^^^
>_pathBrand : any
>           : ^^^

type JoinedPath = `${Path}/${Path}`;
>JoinedPath : `${Path}/${Path}`
>           : ^^^^^^^^^^^^^^^^^

declare function joinedPath(p: JoinedPath): void;
>joinedPath : (p: JoinedPath) => void
>           : ^ ^^          ^^^^^    
>p : `${Path}/${Path}`
>  : ^^^^^^^^^^^^^^^^^

joinedPath("foo/bar");
>joinedPath("foo/bar") : void
>                      : ^^^^
>joinedPath : (p: JoinedPath) => void
>           : ^ ^^          ^^^^^    
>"foo/bar" : "foo/bar"
>          : ^^^^^^^^^

declare const somePath: Path;
>somePath : Path
>         : ^^^^

joinedPath(`${somePath}/${somePath}`);
>joinedPath(`${somePath}/${somePath}`) : void
>                                      : ^^^^
>joinedPath : (p: JoinedPath) => void
>           : ^ ^^          ^^^^^    
>`${somePath}/${somePath}` : `${Path}/${Path}`
>                          : ^^^^^^^^^^^^^^^^^
>somePath : Path
>         : ^^^^
>somePath : Path
>         : ^^^^


type StartsWithA = `a${string}`;
>StartsWithA : `a${string}`
>            : ^^^^^^^^^^^^

type EndsWithA = `${string}a`;
>EndsWithA : `${string}a`
>          : ^^^^^^^^^^^^


declare function withinAs(p: StartsWithA & EndsWithA): void;
>withinAs : (p: StartsWithA & EndsWithA) => void
>         : ^ ^^                       ^^^^^    
>p : `a${string}` & `${string}a`
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

withinAs("");
>withinAs("") : void
>             : ^^^^
>withinAs : (p: StartsWithA & EndsWithA) => void
>         : ^ ^^                       ^^^^^    
>"" : ""
>   : ^^

withinAs("a");
>withinAs("a") : void
>              : ^^^^
>withinAs : (p: StartsWithA & EndsWithA) => void
>         : ^ ^^                       ^^^^^    
>"a" : "a"
>    : ^^^

withinAs("ab");
>withinAs("ab") : void
>               : ^^^^
>withinAs : (p: StartsWithA & EndsWithA) => void
>         : ^ ^^                       ^^^^^    
>"ab" : "ab"
>     : ^^^^

withinAs("aba");
>withinAs("aba") : void
>                : ^^^^
>withinAs : (p: StartsWithA & EndsWithA) => void
>         : ^ ^^                       ^^^^^    
>"aba" : "aba"
>      : ^^^^^

withinAs("abavvvva");
>withinAs("abavvvva") : void
>                     : ^^^^
>withinAs : (p: StartsWithA & EndsWithA) => void
>         : ^ ^^                       ^^^^^    
>"abavvvva" : "abavvvva"
>           : ^^^^^^^^^^

