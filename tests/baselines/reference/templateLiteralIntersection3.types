//// [tests/cases/compiler/templateLiteralIntersection3.ts] ////

=== templateLiteralIntersection3.ts ===
type Path = string & { _pathBrand: any };
>Path : Path
>     : ^^^^
>_pathBrand : any

declare const path: Path;
>path : Path
>     : ^^^^

declare const options1: { prop: number; } & { [k: string]: boolean; };
>options1 : { prop: number; } & { [k: string]: boolean; }
>         : ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>prop : number
>     : ^^^^^^
>k : string
>  : ^^^^^^

options1[`foo`] = false;
>options1[`foo`] = false : false
>                        : ^^^^^
>options1[`foo`] : boolean
>                : ^^^^^^^
>options1 : { prop: number; } & { [k: string]: boolean; }
>         : ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>`foo` : "foo"
>      : ^^^^^
>false : false
>      : ^^^^^

options1[`foo/${path}`] = false;
>options1[`foo/${path}`] = false : false
>                                : ^^^^^
>options1[`foo/${path}`] : boolean
>                        : ^^^^^^^
>options1 : { prop: number; } & { [k: string]: boolean; }
>         : ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>`foo/${path}` : `foo/${Path}`
>              : ^^^^^^^^^^^^^
>path : Path
>     : ^^^^
>false : false
>      : ^^^^^


// Lowercase<`foo/${Path}`> => `foo/${Lowercase<Path>}`
declare const lowercasePath: Lowercase<`foo/${Path}`>;
>lowercasePath : `foo/${Lowercase<`${Path}`>}`
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

options1[lowercasePath] = false;
>options1[lowercasePath] = false : false
>                                : ^^^^^
>options1[lowercasePath] : boolean
>                        : ^^^^^^^
>options1 : { prop: number; } & { [k: string]: boolean; }
>         : ^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>lowercasePath : `foo/${Lowercase<`${Path}`>}`
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>false : false
>      : ^^^^^

