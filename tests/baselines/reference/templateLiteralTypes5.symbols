//// [tests/cases/conformance/types/literal/templateLiteralTypes5.ts] ////

=== templateLiteralTypes5.ts ===
// https://github.com/microsoft/TypeScript/issues/55364
interface TypeMap {
>TypeMap : Symbol(TypeMap, Decl(templateLiteralTypes5.ts, 0, 0))

  a: "A";
>a : Symbol(TypeMap.a, Decl(templateLiteralTypes5.ts, 1, 19))

  b: "B";
>b : Symbol(TypeMap.b, Decl(templateLiteralTypes5.ts, 2, 9))
}
declare const f: <T0 extends "a" | "b">(x: `${T0}`) => TypeMap[T0];
>f : Symbol(f, Decl(templateLiteralTypes5.ts, 5, 13))
>T0 : Symbol(T0, Decl(templateLiteralTypes5.ts, 5, 18))
>x : Symbol(x, Decl(templateLiteralTypes5.ts, 5, 40))
>T0 : Symbol(T0, Decl(templateLiteralTypes5.ts, 5, 18))
>TypeMap : Symbol(TypeMap, Decl(templateLiteralTypes5.ts, 0, 0))
>T0 : Symbol(T0, Decl(templateLiteralTypes5.ts, 5, 18))

type F1 = <T1 extends "a" | "b">(x: `${T1}`) => TypeMap[T1];
>F1 : Symbol(F1, Decl(templateLiteralTypes5.ts, 5, 67))
>T1 : Symbol(T1, Decl(templateLiteralTypes5.ts, 6, 11))
>x : Symbol(x, Decl(templateLiteralTypes5.ts, 6, 33))
>T1 : Symbol(T1, Decl(templateLiteralTypes5.ts, 6, 11))
>TypeMap : Symbol(TypeMap, Decl(templateLiteralTypes5.ts, 0, 0))
>T1 : Symbol(T1, Decl(templateLiteralTypes5.ts, 6, 11))

const f1: F1 = f; 
>f1 : Symbol(f1, Decl(templateLiteralTypes5.ts, 7, 5))
>F1 : Symbol(F1, Decl(templateLiteralTypes5.ts, 5, 67))
>f : Symbol(f, Decl(templateLiteralTypes5.ts, 5, 13))

type F2 = <T2 extends 'a' | 'b'>(x: `${T2}`) => TypeMap[`${T2}`]
>F2 : Symbol(F2, Decl(templateLiteralTypes5.ts, 7, 17))
>T2 : Symbol(T2, Decl(templateLiteralTypes5.ts, 8, 11))
>x : Symbol(x, Decl(templateLiteralTypes5.ts, 8, 33))
>T2 : Symbol(T2, Decl(templateLiteralTypes5.ts, 8, 11))
>TypeMap : Symbol(TypeMap, Decl(templateLiteralTypes5.ts, 0, 0))
>T2 : Symbol(T2, Decl(templateLiteralTypes5.ts, 8, 11))

const f2: F2 = f
>f2 : Symbol(f2, Decl(templateLiteralTypes5.ts, 9, 5))
>F2 : Symbol(F2, Decl(templateLiteralTypes5.ts, 7, 17))
>f : Symbol(f, Decl(templateLiteralTypes5.ts, 5, 13))

function f3<T3 extends "a" | "b">(x: T3) {
>f3 : Symbol(f3, Decl(templateLiteralTypes5.ts, 9, 16))
>T3 : Symbol(T3, Decl(templateLiteralTypes5.ts, 11, 12))
>x : Symbol(x, Decl(templateLiteralTypes5.ts, 11, 34))
>T3 : Symbol(T3, Decl(templateLiteralTypes5.ts, 11, 12))

    const test1: `${T3}` = x    
>test1 : Symbol(test1, Decl(templateLiteralTypes5.ts, 12, 9))
>T3 : Symbol(T3, Decl(templateLiteralTypes5.ts, 11, 12))
>x : Symbol(x, Decl(templateLiteralTypes5.ts, 11, 34))

    const test2: T3 = "" as `${T3}`;    
>test2 : Symbol(test2, Decl(templateLiteralTypes5.ts, 13, 9))
>T3 : Symbol(T3, Decl(templateLiteralTypes5.ts, 11, 12))
>T3 : Symbol(T3, Decl(templateLiteralTypes5.ts, 11, 12))
}

