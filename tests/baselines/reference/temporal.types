//// [tests/cases/compiler/temporal.ts] ////

=== Performance Stats ===
Type Count: 1,000

=== temporal.ts ===
let timeZoneLike: Temporal.TimeZoneLike;
>timeZoneLike : Temporal.TimeZoneLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

timeZoneLike = new Temporal.ZonedDateTime(1234567890n, 'UTC');
>timeZoneLike = new Temporal.ZonedDateTime(1234567890n, 'UTC') : Temporal.ZonedDateTime
>                                                              : ^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : Temporal.TimeZoneLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>new Temporal.ZonedDateTime(1234567890n, 'UTC') : Temporal.ZonedDateTime
>                                               : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime : Temporal.ZonedDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>ZonedDateTime : Temporal.ZonedDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1234567890n : 1234567890n
>            : ^^^^^^^^^^^
>'UTC' : "UTC"
>      : ^^^^^

timeZoneLike = Temporal.Now.timeZoneId();
>timeZoneLike = Temporal.Now.timeZoneId() : string
>                                         : ^^^^^^
>timeZoneLike : Temporal.TimeZoneLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.timeZoneId() : string
>                          : ^^^^^^
>Temporal.Now.timeZoneId : () => string
>                        : ^^^^^^      
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>timeZoneId : () => string
>           : ^^^^^^      

let instant: Temporal.Instant;
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

instant = Temporal.Now.instant();
>instant = Temporal.Now.instant() : Temporal.Instant
>                                 : ^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>Temporal.Now.instant() : Temporal.Instant
>                       : ^^^^^^^^^^^^^^^^
>Temporal.Now.instant : () => Temporal.Instant
>                     : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>instant : () => Temporal.Instant
>        : ^^^^^^^^^^^^^^^^^^^^^^

let plainDate: Temporal.PlainDate;
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

plainDate = Temporal.Now.plainDateISO();
>plainDate = Temporal.Now.plainDateISO() : Temporal.PlainDate
>                                        : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateISO() : Temporal.PlainDate
>                            : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDate
>                          : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>plainDateISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDate
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

plainDate = Temporal.Now.plainDateISO(timeZoneLike);
>plainDate = Temporal.Now.plainDateISO(timeZoneLike) : Temporal.PlainDate
>                                                    : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateISO(timeZoneLike) : Temporal.PlainDate
>                                        : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDate
>                          : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>plainDateISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDate
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

let plainDateTime: Temporal.PlainDateTime;
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

plainDateTime = Temporal.Now.plainDateTimeISO();
>plainDateTime = Temporal.Now.plainDateTimeISO() : Temporal.PlainDateTime
>                                                : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateTimeISO() : Temporal.PlainDateTime
>                                : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDateTime
>                              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>plainDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDateTime
>                 : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

plainDateTime = Temporal.Now.plainDateTimeISO(timeZoneLike)
>plainDateTime = Temporal.Now.plainDateTimeISO(timeZoneLike) : Temporal.PlainDateTime
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateTimeISO(timeZoneLike) : Temporal.PlainDateTime
>                                            : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDateTime
>                              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>plainDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainDateTime
>                 : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

let plainTime: Temporal.PlainTime;
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

plainTime = Temporal.Now.plainTimeISO();
>plainTime = Temporal.Now.plainTimeISO() : Temporal.PlainTime
>                                        : ^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainTimeISO() : Temporal.PlainTime
>                            : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainTime
>                          : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>plainTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainTime
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

plainTime = Temporal.Now.plainTimeISO(timeZoneLike);
>plainTime = Temporal.Now.plainTimeISO(timeZoneLike) : Temporal.PlainTime
>                                                    : ^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainTimeISO(timeZoneLike) : Temporal.PlainTime
>                                        : ^^^^^^^^^^^^^^^^^^
>Temporal.Now.plainTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainTime
>                          : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>plainTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.PlainTime
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

let zonedDateTime: Temporal.ZonedDateTime;
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

zonedDateTime = Temporal.Now.zonedDateTimeISO();
>zonedDateTime = Temporal.Now.zonedDateTimeISO() : Temporal.ZonedDateTime
>                                                : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.zonedDateTimeISO() : Temporal.ZonedDateTime
>                                : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.zonedDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>zonedDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                 : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

zonedDateTime = Temporal.Now.zonedDateTimeISO(timeZoneLike);
>zonedDateTime = Temporal.Now.zonedDateTimeISO(timeZoneLike) : Temporal.ZonedDateTime
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.zonedDateTimeISO(timeZoneLike) : Temporal.ZonedDateTime
>                                            : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now.zonedDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Now : typeof Temporal.Now
>             : ^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Now : typeof Temporal.Now
>    : ^^^^^^^^^^^^^^^^^^^
>zonedDateTimeISO : (timeZone?: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                 : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

let durationLike: Temporal.DurationLike;
>durationLike : Temporal.DurationLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

durationLike = new Temporal.Duration();
>durationLike = new Temporal.Duration() : Temporal.Duration
>                                       : ^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>new Temporal.Duration() : Temporal.Duration
>                        : ^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

durationLike = {
>durationLike = {    years: 1,    months: 2,    weeks: 3,    days: 4,    hours: 5,    minutes: 6,    seconds: 7,    milliseconds: 8,    microseconds: 9,    nanoseconds: 10,} : { years: number; months: number; weeks: number; days: number; hours: number; minutes: number; seconds: number; milliseconds: number; microseconds: number; nanoseconds: number; }
>                                                                                                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>{    years: 1,    months: 2,    weeks: 3,    days: 4,    hours: 5,    minutes: 6,    seconds: 7,    milliseconds: 8,    microseconds: 9,    nanoseconds: 10,} : { years: number; months: number; weeks: number; days: number; hours: number; minutes: number; seconds: number; milliseconds: number; microseconds: number; nanoseconds: number; }
>                                                                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    years: 1,
>years : number
>      : ^^^^^^
>1 : 1
>  : ^

    months: 2,
>months : number
>       : ^^^^^^
>2 : 2
>  : ^

    weeks: 3,
>weeks : number
>      : ^^^^^^
>3 : 3
>  : ^

    days: 4,
>days : number
>     : ^^^^^^
>4 : 4
>  : ^

    hours: 5,
>hours : number
>      : ^^^^^^
>5 : 5
>  : ^

    minutes: 6,
>minutes : number
>        : ^^^^^^
>6 : 6
>  : ^

    seconds: 7,
>seconds : number
>        : ^^^^^^
>7 : 7
>  : ^

    milliseconds: 8,
>milliseconds : number
>             : ^^^^^^
>8 : 8
>  : ^

    microseconds: 9,
>microseconds : number
>             : ^^^^^^
>9 : 9
>  : ^

    nanoseconds: 10,
>nanoseconds : number
>            : ^^^^^^
>10 : 10
>   : ^^

};

let calendarLike!: Temporal.CalendarLike;
>calendarLike : Temporal.CalendarLike
>             : ^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

declare const anyRoundingUnits: Temporal.DateUnit | Temporal.TimeUnit | undefined;
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^
>Temporal : any
>         : ^^^

declare const calendarName: 'auto' | 'always' | 'never' | 'critical' | undefined;
>calendarName : "auto" | "always" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const disambiguation: 'compatible' | 'earlier' | 'later' | 'reject' | undefined;
>disambiguation : "compatible" | "earlier" | "later" | "reject" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const fractionalSecondDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;
>fractionalSecondDigits : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const roundingIncrement: number | undefined;
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^

declare const roundingMode: 'ceil' | 'floor' | 'expand' | 'trunc' | 'halfCeil' | 'halfFloor' | 'halfExpand' | 'halfTrunc' | 'halfEven' | undefined;
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const overflow: 'constrain' | 'reject' | undefined;
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

declare const locales: Intl.LocalesArgument | undefined;
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>Intl : any
>     : ^^^

declare const toLocaleStringOptions: Intl.DateTimeFormatOptions | undefined;
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Intl : any
>     : ^^^

{
    let duration: Temporal.Duration;
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    duration = new Temporal.Duration();
>duration = new Temporal.Duration() : Temporal.Duration
>                                   : ^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>new Temporal.Duration() : Temporal.Duration
>                        : ^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration = new Temporal.Duration(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
>duration = new Temporal.Duration(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) : Temporal.Duration
>                                                               : ^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>new Temporal.Duration(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) : Temporal.Duration
>                                                    : ^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>7 : 7
>  : ^
>8 : 8
>  : ^
>9 : 9
>  : ^

    duration = Temporal.Duration.from(duration);
>duration = Temporal.Duration.from(duration) : Temporal.Duration
>                                            : ^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>Temporal.Duration.from(duration) : Temporal.Duration
>                                 : ^^^^^^^^^^^^^^^^^
>Temporal.Duration.from : (item: Temporal.DurationLike) => Temporal.Duration
>                       : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.DurationLike) => Temporal.Duration
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^

    duration = Temporal.Duration.from(durationLike);
>duration = Temporal.Duration.from(durationLike) : Temporal.Duration
>                                                : ^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>Temporal.Duration.from(durationLike) : Temporal.Duration
>                                     : ^^^^^^^^^^^^^^^^^
>Temporal.Duration.from : (item: Temporal.DurationLike) => Temporal.Duration
>                       : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.DurationLike) => Temporal.Duration
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Temporal.Duration.compare(duration, durationLike);
>Temporal.Duration.compare(duration, durationLike) : Temporal.Duration
>                                                  : ^^^^^^^^^^^^^^^^^
>Temporal.Duration.compare : (one: Temporal.DurationLike, two: Temporal.DurationLike, options?: Temporal.DurationRelativeToOptions) => Temporal.Duration
>                          : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.DurationLike, two: Temporal.DurationLike, options?: Temporal.DurationRelativeToOptions) => Temporal.Duration
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Temporal.Duration.compare(duration, durationLike, { relativeTo: plainDate });
>Temporal.Duration.compare(duration, durationLike, { relativeTo: plainDate }) : Temporal.Duration
>                                                                             : ^^^^^^^^^^^^^^^^^
>Temporal.Duration.compare : (one: Temporal.DurationLike, two: Temporal.DurationLike, options?: Temporal.DurationRelativeToOptions) => Temporal.Duration
>                          : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Duration : Temporal.DurationConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Duration : Temporal.DurationConstructor
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.DurationLike, two: Temporal.DurationLike, options?: Temporal.DurationRelativeToOptions) => Temporal.Duration
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ relativeTo: plainDate } : { relativeTo: Temporal.PlainDate; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>relativeTo : Temporal.PlainDate
>           : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^

    const {
        blank,
>blank : boolean
>      : ^^^^^^^

        days,
>days : number
>     : ^^^^^^

        hours,
>hours : number
>      : ^^^^^^

        microseconds,
>microseconds : number
>             : ^^^^^^

        milliseconds,
>milliseconds : number
>             : ^^^^^^

        minutes,
>minutes : number
>        : ^^^^^^

        months,
>months : number
>       : ^^^^^^

        nanoseconds,
>nanoseconds : number
>            : ^^^^^^

        seconds,
>seconds : number
>        : ^^^^^^

        sign,
>sign : number
>     : ^^^^^^

        weeks,
>weeks : number
>      : ^^^^^^

        years,
>years : number
>      : ^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.Duration"
>            : ^^^^^^^^^^^^^^^^^^^

    } = duration;
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^

    let roundingUnits!: (Temporal.DateUnit & `day${string}`) | Temporal.TimeUnit;
>roundingUnits : "days" | "day" | Temporal.TimeUnit
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^
>Temporal : any
>         : ^^^

    let toStringUnits!: Exclude<Temporal.TimeUnit, `hour${string}` | `minute${string}`> | undefined;
>toStringUnits : "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    duration.abs();
>duration.abs() : Temporal.Duration
>               : ^^^^^^^^^^^^^^^^^
>duration.abs : () => Temporal.Duration
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>abs : () => Temporal.Duration
>    : ^^^^^^^^^^^^^^^^^^^^^^^

    duration.add(durationLike);
>duration.add(durationLike) : Temporal.Duration
>                           : ^^^^^^^^^^^^^^^^^
>duration.add : (other: Temporal.DurationLike) => Temporal.Duration
>             : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>add : (other: Temporal.DurationLike) => Temporal.Duration
>    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.negated();
>duration.negated() : Temporal.Duration
>                   : ^^^^^^^^^^^^^^^^^
>duration.negated : () => Temporal.Duration
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>negated : () => Temporal.Duration
>        : ^^^^^^^^^^^^^^^^^^^^^^^

    duration.round(roundingUnits);
>duration.round(roundingUnits) : Temporal.Duration
>                              : ^^^^^^^^^^^^^^^^^
>duration.round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.Duration; (roundTo: Temporal.DurationRoundingOptions): Temporal.Duration; }
>               : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.Duration; (roundTo: Temporal.DurationRoundingOptions): Temporal.Duration; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "days" | "day" | Temporal.TimeUnit
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.round({ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, relativeTo: plainDateTime, roundingIncrement, roundingMode });
>duration.round({ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, relativeTo: plainDateTime, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                              : ^^^^^^^^^^^^^^^^^
>duration.round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.Duration; (roundTo: Temporal.DurationRoundingOptions): Temporal.Duration; }
>               : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.Duration; (roundTo: Temporal.DurationRoundingOptions): Temporal.Duration; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, relativeTo: plainDateTime, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; largestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; relativeTo: Temporal.PlainDateTime; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>relativeTo : Temporal.PlainDateTime
>           : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.subtract(durationLike);
>duration.subtract(durationLike) : Temporal.Duration
>                                : ^^^^^^^^^^^^^^^^^
>duration.subtract : (other: Temporal.DurationLike) => Temporal.Duration
>                  : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>subtract : (other: Temporal.DurationLike) => Temporal.Duration
>         : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.toJSON();
>duration.toJSON() : string
>                  : ^^^^^^
>duration.toJSON : () => string
>                : ^^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    duration.toLocaleString();
>duration.toLocaleString() : string
>                          : ^^^^^^
>duration.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                        : ^       ^^^                    ^^       ^^^                          ^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    duration.toLocaleString(locales);
>duration.toLocaleString(locales) : string
>                                 : ^^^^^^
>duration.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                        : ^       ^^^                    ^^       ^^^                          ^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    duration.toLocaleString(locales, toLocaleStringOptions);
>duration.toLocaleString(locales, toLocaleStringOptions) : string
>                                                        : ^^^^^^
>duration.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                        : ^       ^^^                    ^^       ^^^                          ^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.toString();
>duration.toString() : string
>                    : ^^^^^^
>duration.toString : (options?: Temporal.DurationToStringOptions) => string
>                  : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.DurationToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    duration.toString({});
>duration.toString({}) : string
>                      : ^^^^^^
>duration.toString : (options?: Temporal.DurationToStringOptions) => string
>                  : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.DurationToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{} : {}
>   : ^^

    duration.toString({ smallestUnit: toStringUnits, fractionalSecondDigits, roundingMode });
>duration.toString({ smallestUnit: toStringUnits, fractionalSecondDigits, roundingMode }) : string
>                                                                                         : ^^^^^^
>duration.toString : (options?: Temporal.DurationToStringOptions) => string
>                  : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.DurationToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ smallestUnit: toStringUnits, fractionalSecondDigits, roundingMode } : { smallestUnit: "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined; fractionalSecondDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toStringUnits : "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fractionalSecondDigits : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.total(roundingUnits!);
>duration.total(roundingUnits!) : number
>                               : ^^^^^^
>duration.total : { (totalOf: "day" | "days" | Temporal.TimeUnit): number; (totalOf: Temporal.DurationTotalOptions): number; }
>               : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^      ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>total : { (totalOf: "day" | "days" | Temporal.TimeUnit): number; (totalOf: Temporal.DurationTotalOptions): number; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^      ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>roundingUnits! : "days" | "day" | Temporal.TimeUnit
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "days" | "day" | Temporal.TimeUnit
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.total({ unit: anyRoundingUnits! });
>duration.total({ unit: anyRoundingUnits! }) : number
>                                            : ^^^^^^
>duration.total : { (totalOf: "day" | "days" | Temporal.TimeUnit): number; (totalOf: Temporal.DurationTotalOptions): number; }
>               : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^      ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>total : { (totalOf: "day" | "days" | Temporal.TimeUnit): number; (totalOf: Temporal.DurationTotalOptions): number; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^      ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>{ unit: anyRoundingUnits! } : { unit: Temporal.DateUnit | Temporal.TimeUnit; }
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>unit : Temporal.DateUnit | Temporal.TimeUnit
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits! : Temporal.DateUnit | Temporal.TimeUnit
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    duration.total({ unit: anyRoundingUnits!, relativeTo: zonedDateTime });
>duration.total({ unit: anyRoundingUnits!, relativeTo: zonedDateTime }) : number
>                                                                       : ^^^^^^
>duration.total : { (totalOf: "day" | "days" | Temporal.TimeUnit): number; (totalOf: Temporal.DurationTotalOptions): number; }
>               : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^      ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>total : { (totalOf: "day" | "days" | Temporal.TimeUnit): number; (totalOf: Temporal.DurationTotalOptions): number; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^      ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>{ unit: anyRoundingUnits!, relativeTo: zonedDateTime } : { unit: Temporal.DateUnit | Temporal.TimeUnit; relativeTo: Temporal.ZonedDateTime; }
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>unit : Temporal.DateUnit | Temporal.TimeUnit
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits! : Temporal.DateUnit | Temporal.TimeUnit
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>relativeTo : Temporal.ZonedDateTime
>           : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    duration.with({ days, hours, microseconds, milliseconds, minutes, months, nanoseconds, seconds, weeks, years });
>duration.with({ days, hours, microseconds, milliseconds, minutes, months, nanoseconds, seconds, weeks, years }) : Temporal.Duration
>                                                                                                                : ^^^^^^^^^^^^^^^^^
>duration.with : (durationLike: Temporal.PartialTemporalLike<Temporal.DurationLikeObject>) => Temporal.Duration
>              : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>duration : Temporal.Duration
>         : ^^^^^^^^^^^^^^^^^
>with : (durationLike: Temporal.PartialTemporalLike<Temporal.DurationLikeObject>) => Temporal.Duration
>     : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>{ days, hours, microseconds, milliseconds, minutes, months, nanoseconds, seconds, weeks, years } : { days: number; hours: number; microseconds: number; milliseconds: number; minutes: number; months: number; nanoseconds: number; seconds: number; weeks: number; years: number; }
>                                                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>days : number
>     : ^^^^^^
>hours : number
>      : ^^^^^^
>microseconds : number
>             : ^^^^^^
>milliseconds : number
>             : ^^^^^^
>minutes : number
>        : ^^^^^^
>months : number
>       : ^^^^^^
>nanoseconds : number
>            : ^^^^^^
>seconds : number
>        : ^^^^^^
>weeks : number
>      : ^^^^^^
>years : number
>      : ^^^^^^
}

{
    instant = new Temporal.Instant(1234567890n);
>instant = new Temporal.Instant(1234567890n) : Temporal.Instant
>                                            : ^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>new Temporal.Instant(1234567890n) : Temporal.Instant
>                                  : ^^^^^^^^^^^^^^^^
>Temporal.Instant : Temporal.InstantConstructor
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Instant : Temporal.InstantConstructor
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1234567890n : 1234567890n
>            : ^^^^^^^^^^^

    let instantLike: Temporal.InstantLike;
>instantLike : Temporal.InstantLike
>            : ^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    instantLike = instant;
>instantLike = instant : Temporal.Instant
>                      : ^^^^^^^^^^^^^^^^
>instantLike : Temporal.InstantLike
>            : ^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^

    instantLike = '1970-01-01T00:00:00.000Z';
>instantLike = '1970-01-01T00:00:00.000Z' : "1970-01-01T00:00:00.000Z"
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>instantLike : Temporal.InstantLike
>            : ^^^^^^^^^^^^^^^^^^^^
>'1970-01-01T00:00:00.000Z' : "1970-01-01T00:00:00.000Z"
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant = Temporal.Instant.from(instant);
>instant = Temporal.Instant.from(instant) : Temporal.Instant
>                                         : ^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>Temporal.Instant.from(instant) : Temporal.Instant
>                               : ^^^^^^^^^^^^^^^^
>Temporal.Instant.from : (item: Temporal.InstantLike) => Temporal.Instant
>                      : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Instant : Temporal.InstantConstructor
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Instant : Temporal.InstantConstructor
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.InstantLike) => Temporal.Instant
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^

    instant = Temporal.Instant.from(instantLike);
>instant = Temporal.Instant.from(instantLike) : Temporal.Instant
>                                             : ^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>Temporal.Instant.from(instantLike) : Temporal.Instant
>                                   : ^^^^^^^^^^^^^^^^
>Temporal.Instant.from : (item: Temporal.InstantLike) => Temporal.Instant
>                      : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.Instant : Temporal.InstantConstructor
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Instant : Temporal.InstantConstructor
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.InstantLike) => Temporal.Instant
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>instantLike : string
>            : ^^^^^^

    instant = Temporal.Instant.fromEpochMilliseconds(1234567890);
>instant = Temporal.Instant.fromEpochMilliseconds(1234567890) : Temporal.Instant
>                                                             : ^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>Temporal.Instant.fromEpochMilliseconds(1234567890) : Temporal.Instant
>                                                   : ^^^^^^^^^^^^^^^^
>Temporal.Instant.fromEpochMilliseconds : (epochMilliseconds: number) => Temporal.Instant
>                                       : ^                 ^^      ^^^^^^^^^^^^^^^^^^^^^
>Temporal.Instant : Temporal.InstantConstructor
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Instant : Temporal.InstantConstructor
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fromEpochMilliseconds : (epochMilliseconds: number) => Temporal.Instant
>                      : ^                 ^^      ^^^^^^^^^^^^^^^^^^^^^
>1234567890 : 1234567890
>           : ^^^^^^^^^^

    instant = Temporal.Instant.fromEpochNanoseconds(1234567890n);
>instant = Temporal.Instant.fromEpochNanoseconds(1234567890n) : Temporal.Instant
>                                                             : ^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>Temporal.Instant.fromEpochNanoseconds(1234567890n) : Temporal.Instant
>                                                   : ^^^^^^^^^^^^^^^^
>Temporal.Instant.fromEpochNanoseconds : (epochNanoseconds: bigint) => Temporal.Instant
>                                      : ^                ^^      ^^^^^^^^^^^^^^^^^^^^^
>Temporal.Instant : Temporal.InstantConstructor
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Instant : Temporal.InstantConstructor
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fromEpochNanoseconds : (epochNanoseconds: bigint) => Temporal.Instant
>                     : ^                ^^      ^^^^^^^^^^^^^^^^^^^^^
>1234567890n : 1234567890n
>            : ^^^^^^^^^^^

    Temporal.Instant.compare(instant, instantLike);
>Temporal.Instant.compare(instant, instantLike) : number
>                                               : ^^^^^^
>Temporal.Instant.compare : (one: Temporal.InstantLike, two: Temporal.InstantLike) => number
>                         : ^   ^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>Temporal.Instant : Temporal.InstantConstructor
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>Instant : Temporal.InstantConstructor
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.InstantLike, two: Temporal.InstantLike) => number
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>instantLike : string
>            : ^^^^^^

    const {
        epochMilliseconds,
>epochMilliseconds : number
>                  : ^^^^^^

        epochNanoseconds,
>epochNanoseconds : bigint
>                 : ^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.Instant"
>            : ^^^^^^^^^^^^^^^^^^

    } = instant;
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^

    let roundingUnits!: Temporal.TimeUnit | undefined;
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    let toStringUnits!: Exclude<Temporal.TimeUnit, `hour${string}`> | undefined;
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    instant.add(durationLike);
>instant.add(durationLike) : Temporal.Instant
>                          : ^^^^^^^^^^^^^^^^
>instant.add : (duration: Temporal.DurationLike) => Temporal.Instant
>            : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike) => Temporal.Instant
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.equals(instantLike);
>instant.equals(instantLike) : boolean
>                            : ^^^^^^^
>instant.equals : (other: Temporal.InstantLike) => boolean
>               : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>equals : (other: Temporal.InstantLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>instantLike : string
>            : ^^^^^^

    instant.round(roundingUnits!);
>instant.round(roundingUnits!) : Temporal.Instant
>                              : ^^^^^^^^^^^^^^^^
>instant.round : { (roundTo: Temporal.TimeUnit): Temporal.Instant; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.Instant; }
>              : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>round : { (roundTo: Temporal.TimeUnit): Temporal.Instant; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.Instant; }
>      : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits! : Temporal.TimeUnit
>               : ^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode });
>instant.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Instant
>                                                                                : ^^^^^^^^^^^^^^^^
>instant.round : { (roundTo: Temporal.TimeUnit): Temporal.Instant; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.Instant; }
>              : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>round : { (roundTo: Temporal.TimeUnit): Temporal.Instant; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.Instant; }
>      : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.since(instantLike);
>instant.since(instantLike) : Temporal.Duration
>                           : ^^^^^^^^^^^^^^^^^
>instant.since : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>              : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>since : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instantLike : string
>            : ^^^^^^

    instant.since(instantLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>instant.since(instantLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                         : ^^^^^^^^^^^^^^^^^
>instant.since : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>              : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>since : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instantLike : string
>            : ^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.TimeUnit | undefined; largestUnit: Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.subtract(durationLike);
>instant.subtract(durationLike) : Temporal.Instant
>                               : ^^^^^^^^^^^^^^^^
>instant.subtract : (duration: Temporal.DurationLike) => Temporal.Instant
>                 : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike) => Temporal.Instant
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.toJSON();
>instant.toJSON() : string
>                 : ^^^^^^
>instant.toJSON : () => string
>               : ^^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    instant.toLocaleString();
>instant.toLocaleString() : string
>                         : ^^^^^^
>instant.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                       : ^       ^^^                    ^^       ^^^                          ^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    instant.toLocaleString(locales);
>instant.toLocaleString(locales) : string
>                                : ^^^^^^
>instant.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                       : ^       ^^^                    ^^       ^^^                          ^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    instant.toLocaleString(locales, toLocaleStringOptions);
>instant.toLocaleString(locales, toLocaleStringOptions) : string
>                                                       : ^^^^^^
>instant.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                       : ^       ^^^                    ^^       ^^^                          ^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.toString();
>instant.toString() : string
>                   : ^^^^^^
>instant.toString : (options?: Temporal.InstantToStringOptions) => string
>                 : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.InstantToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    instant.toString({ smallestUnit: toStringUnits, timeZone: timeZoneLike, fractionalSecondDigits, roundingMode });
>instant.toString({ smallestUnit: toStringUnits, timeZone: timeZoneLike, fractionalSecondDigits, roundingMode }) : string
>                                                                                                                : ^^^^^^
>instant.toString : (options?: Temporal.InstantToStringOptions) => string
>                 : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.InstantToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ smallestUnit: toStringUnits, timeZone: timeZoneLike, fractionalSecondDigits, roundingMode } : { smallestUnit: "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined; timeZone: string; fractionalSecondDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZone : string
>         : ^^^^^^
>timeZoneLike : string
>             : ^^^^^^
>fractionalSecondDigits : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    instant.toZonedDateTimeISO(timeZoneLike);
>instant.toZonedDateTimeISO(timeZoneLike) : Temporal.ZonedDateTime
>                                         : ^^^^^^^^^^^^^^^^^^^^^^
>instant.toZonedDateTimeISO : (timeZone: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                           : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>toZonedDateTimeISO : (timeZone: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

    instant.until(instantLike);
>instant.until(instantLike) : Temporal.Duration
>                           : ^^^^^^^^^^^^^^^^^
>instant.until : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>              : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>until : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instantLike : string
>            : ^^^^^^

    instant.until(instantLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>instant.until(instantLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                         : ^^^^^^^^^^^^^^^^^
>instant.until : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>              : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instant : Temporal.Instant
>        : ^^^^^^^^^^^^^^^^
>until : (other: Temporal.InstantLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>instantLike : string
>            : ^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.TimeUnit | undefined; largestUnit: Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

{
    plainDate = new Temporal.PlainDate(1970, 1, 1);
>plainDate = new Temporal.PlainDate(1970, 1, 1) : Temporal.PlainDate
>                                               : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>new Temporal.PlainDate(1970, 1, 1) : Temporal.PlainDate
>                                   : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate : Temporal.PlainDateConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDate : Temporal.PlainDateConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1970 : 1970
>     : ^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    plainDate = new Temporal.PlainDate(1970, 1, 1, 'gregorian');
>plainDate = new Temporal.PlainDate(1970, 1, 1, 'gregorian') : Temporal.PlainDate
>                                                            : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>new Temporal.PlainDate(1970, 1, 1, 'gregorian') : Temporal.PlainDate
>                                                : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate : Temporal.PlainDateConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDate : Temporal.PlainDateConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1970 : 1970
>     : ^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^
>'gregorian' : "gregorian"
>            : ^^^^^^^^^^^

    let plainDateLike: Temporal.PlainDateLike;
>plainDateLike : Temporal.PlainDateLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainDateLike = plainDate;
>plainDateLike = plainDate : Temporal.PlainDate
>                          : ^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.PlainDateLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^

    plainDateLike = plainDateTime;
>plainDateLike = plainDateTime : Temporal.PlainDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.PlainDateLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainDateLike = zonedDateTime;
>plainDateLike = zonedDateTime : Temporal.ZonedDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.PlainDateLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainDateLike = {
>plainDateLike = {        day: 1,        month: 1,        year: 1970,    } : { day: number; month: number; year: number; }
>                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.PlainDateLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>{        day: 1,        month: 1,        year: 1970,    } : { day: number; month: number; year: number; }
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        day: 1,
>day : number
>    : ^^^^^^
>1 : 1
>  : ^

        month: 1,
>month : number
>      : ^^^^^^
>1 : 1
>  : ^

        year: 1970,
>year : number
>     : ^^^^^^
>1970 : 1970
>     : ^^^^

    };

    plainDate = Temporal.PlainDate.from(plainDate);
>plainDate = Temporal.PlainDate.from(plainDate) : Temporal.PlainDate
>                                               : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate.from(plainDate) : Temporal.PlainDate
>                                   : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate.from : (item: Temporal.PlainDateLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>                        : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate : Temporal.PlainDateConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDate : Temporal.PlainDateConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainDateLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^

    plainDate = Temporal.PlainDate.from(plainDateLike);
>plainDate = Temporal.PlainDate.from(plainDateLike) : Temporal.PlainDate
>                                                   : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate.from(plainDateLike) : Temporal.PlainDate
>                                       : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate.from : (item: Temporal.PlainDateLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>                        : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate : Temporal.PlainDateConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDate : Temporal.PlainDateConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainDateLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainDate = Temporal.PlainDate.from(plainDateLike, { overflow });
>plainDate = Temporal.PlainDate.from(plainDateLike, { overflow }) : Temporal.PlainDate
>                                                                 : ^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate.from(plainDateLike, { overflow }) : Temporal.PlainDate
>                                                     : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate.from : (item: Temporal.PlainDateLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>                        : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDate : Temporal.PlainDateConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDate : Temporal.PlainDateConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainDateLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Temporal.PlainDate.compare(plainDate, plainDateLike);
>Temporal.PlainDate.compare(plainDate, plainDateLike) : number
>                                                     : ^^^^^^
>Temporal.PlainDate.compare : (one: Temporal.PlainDateLike, two: Temporal.PlainDateLike) => number
>                           : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>Temporal.PlainDate : Temporal.PlainDateConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDate : Temporal.PlainDateConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.PlainDateLike, two: Temporal.PlainDateLike) => number
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    const {
        calendarId,
>calendarId : string
>           : ^^^^^^

        day,
>day : number
>    : ^^^^^^

        dayOfWeek,
>dayOfWeek : number
>          : ^^^^^^

        dayOfYear,
>dayOfYear : number
>          : ^^^^^^

        daysInMonth,
>daysInMonth : number
>            : ^^^^^^

        daysInWeek,
>daysInWeek : number
>           : ^^^^^^

        daysInYear,
>daysInYear : number
>           : ^^^^^^

        era,
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

        eraYear,
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^

        inLeapYear,
>inLeapYear : boolean
>           : ^^^^^^^

        month,
>month : number
>      : ^^^^^^

        monthCode,
>monthCode : string
>          : ^^^^^^

        monthsInYear,
>monthsInYear : number
>             : ^^^^^^

        weekOfYear,
>weekOfYear : number | undefined
>           : ^^^^^^^^^^^^^^^^^^

        year,
>year : number
>     : ^^^^^^

        yearOfWeek,
>yearOfWeek : number | undefined
>           : ^^^^^^^^^^^^^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.PlainDate"
>            : ^^^^^^^^^^^^^^^^^^^^

    } = plainDate;
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^

    let roundingUnits!: Temporal.DateUnit | undefined;
>roundingUnits : Temporal.DateUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainDate.add(durationLike);
>plainDate.add(durationLike) : Temporal.PlainDate
>                            : ^^^^^^^^^^^^^^^^^^
>plainDate.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.add(durationLike, { overflow });
>plainDate.add(durationLike, { overflow }) : Temporal.PlainDate
>                                          : ^^^^^^^^^^^^^^^^^^
>plainDate.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.equals(plainDateLike);
>plainDate.equals(plainDateLike) : boolean
>                                : ^^^^^^^
>plainDate.equals : (other: Temporal.PlainDateLike) => boolean
>                 : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>equals : (other: Temporal.PlainDateLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.since(plainDateLike);
>plainDate.since(plainDateLike) : Temporal.Duration
>                               : ^^^^^^^^^^^^^^^^^
>plainDate.since : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.since(plainDateLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainDate.since(plainDateLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                             : ^^^^^^^^^^^^^^^^^
>plainDate.since : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | undefined; largestUnit: Temporal.DateUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.DateUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.DateUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.subtract(durationLike);
>plainDate.subtract(durationLike) : Temporal.PlainDate
>                                 : ^^^^^^^^^^^^^^^^^^
>plainDate.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.subtract(durationLike, { overflow });
>plainDate.subtract(durationLike, { overflow }) : Temporal.PlainDate
>                                               : ^^^^^^^^^^^^^^^^^^
>plainDate.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.toJSON();
>plainDate.toJSON() : string
>                   : ^^^^^^
>plainDate.toJSON : () => string
>                 : ^^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    plainDate.toLocaleString();
>plainDate.toLocaleString() : string
>                           : ^^^^^^
>plainDate.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                         : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    plainDate.toLocaleString(locales);
>plainDate.toLocaleString(locales) : string
>                                  : ^^^^^^
>plainDate.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                         : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    plainDate.toLocaleString(locales, toLocaleStringOptions);
>plainDate.toLocaleString(locales, toLocaleStringOptions) : string
>                                                         : ^^^^^^
>plainDate.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                         : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.toPlainDateTime();
>plainDate.toPlainDateTime() : Temporal.PlainDateTime
>                            : ^^^^^^^^^^^^^^^^^^^^^^
>plainDate.toPlainDateTime : (time?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>                          : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toPlainDateTime : (time?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>                : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.toPlainDateTime(plainTime);
>plainDate.toPlainDateTime(plainTime) : Temporal.PlainDateTime
>                                     : ^^^^^^^^^^^^^^^^^^^^^^
>plainDate.toPlainDateTime : (time?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>                          : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toPlainDateTime : (time?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>                : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^

    plainDate.toPlainMonthDay();
>plainDate.toPlainMonthDay() : Temporal.PlainMonthDay
>                            : ^^^^^^^^^^^^^^^^^^^^^^
>plainDate.toPlainMonthDay : () => Temporal.PlainMonthDay
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toPlainMonthDay : () => Temporal.PlainMonthDay
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.toPlainYearMonth();
>plainDate.toPlainYearMonth() : Temporal.PlainYearMonth
>                             : ^^^^^^^^^^^^^^^^^^^^^^^
>plainDate.toPlainYearMonth : () => Temporal.PlainYearMonth
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toPlainYearMonth : () => Temporal.PlainYearMonth
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.toString();
>plainDate.toString() : string
>                     : ^^^^^^
>plainDate.toString : (options?: Temporal.PlainDateToStringOptions) => string
>                   : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainDateToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    plainDate.toString({ calendarName });
>plainDate.toString({ calendarName }) : string
>                                     : ^^^^^^
>plainDate.toString : (options?: Temporal.PlainDateToStringOptions) => string
>                   : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainDateToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ calendarName } : { calendarName: "auto" | "always" | "never" | "critical" | undefined; }
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarName : "auto" | "always" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.toZonedDateTime(timeZoneLike);
>plainDate.toZonedDateTime(timeZoneLike) : Temporal.ZonedDateTime
>                                        : ^^^^^^^^^^^^^^^^^^^^^^
>plainDate.toZonedDateTime : { (timeZone: Temporal.TimeZoneLike): Temporal.ZonedDateTime; (item: Temporal.PlainDateToZonedDateTimeOptions): Temporal.ZonedDateTime; }
>                          : ^^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>toZonedDateTime : { (timeZone: Temporal.TimeZoneLike): Temporal.ZonedDateTime; (item: Temporal.PlainDateToZonedDateTimeOptions): Temporal.ZonedDateTime; }
>                : ^^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

    plainDate.until(plainDateLike);
>plainDate.until(plainDateLike) : Temporal.Duration
>                               : ^^^^^^^^^^^^^^^^^
>plainDate.until : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.until(plainDateLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainDate.until(plainDateLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                             : ^^^^^^^^^^^^^^^^^
>plainDate.until : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainDateLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateLike : Temporal.DateLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | undefined; largestUnit: Temporal.DateUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.DateUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.DateUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.with({ year, era, eraYear, month, monthCode, day });
>plainDate.with({ year, era, eraYear, month, monthCode, day }) : Temporal.PlainDate
>                                                              : ^^^^^^^^^^^^^^^^^^
>plainDate.with : (dateLike: Temporal.PartialTemporalLike<Temporal.DateLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>               : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>with : (dateLike: Temporal.PartialTemporalLike<Temporal.DateLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode, day } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; day: number; }
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^

    plainDate.with({ year, era, eraYear, month, monthCode, day }, { overflow });
>plainDate.with({ year, era, eraYear, month, monthCode, day }, { overflow }) : Temporal.PlainDate
>                                                                            : ^^^^^^^^^^^^^^^^^^
>plainDate.with : (dateLike: Temporal.PartialTemporalLike<Temporal.DateLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>               : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>with : (dateLike: Temporal.PartialTemporalLike<Temporal.DateLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDate
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode, day } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; day: number; }
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDate.withCalendar(calendarLike);
>plainDate.withCalendar(calendarLike) : Temporal.PlainDate
>                                     : ^^^^^^^^^^^^^^^^^^
>plainDate.withCalendar : (calendarLike: Temporal.CalendarLike) => Temporal.PlainDate
>                       : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^
>withCalendar : (calendarLike: Temporal.CalendarLike) => Temporal.PlainDate
>             : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarLike : Temporal.CalendarLike
>             : ^^^^^^^^^^^^^^^^^^^^^
}

{
    plainDateTime = new Temporal.PlainDateTime(1970, 1, 1);
>plainDateTime = new Temporal.PlainDateTime(1970, 1, 1) : Temporal.PlainDateTime
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.PlainDateTime(1970, 1, 1) : Temporal.PlainDateTime
>                                       : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime : Temporal.PlainDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDateTime : Temporal.PlainDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1970 : 1970
>     : ^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    plainDateTime = new Temporal.PlainDateTime(1970, 1, 1, 0, 0, 0, 0, 0, 0, 'iso8601');
>plainDateTime = new Temporal.PlainDateTime(1970, 1, 1, 0, 0, 0, 0, 0, 0, 'iso8601') : Temporal.PlainDateTime
>                                                                                    : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.PlainDateTime(1970, 1, 1, 0, 0, 0, 0, 0, 0, 'iso8601') : Temporal.PlainDateTime
>                                                                    : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime : Temporal.PlainDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDateTime : Temporal.PlainDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1970 : 1970
>     : ^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^
>0 : 0
>  : ^
>0 : 0
>  : ^
>0 : 0
>  : ^
>0 : 0
>  : ^
>0 : 0
>  : ^
>0 : 0
>  : ^
>'iso8601' : "iso8601"
>          : ^^^^^^^^^

    let plainDateTimeLike: Temporal.PlainDateTimeLike;
>plainDateTimeLike : Temporal.PlainDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainDateTimeLike = plainDateTime;
>plainDateTimeLike = plainDateTime : Temporal.PlainDateTime
>                                  : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.PlainDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainDateTimeLike = plainDate;
>plainDateTimeLike = plainDate : Temporal.PlainDate
>                              : ^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.PlainDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDate : Temporal.PlainDate
>          : ^^^^^^^^^^^^^^^^^^

    plainDateTimeLike = zonedDateTime;
>plainDateTimeLike = zonedDateTime : Temporal.ZonedDateTime
>                                  : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.PlainDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainDateTimeLike = {
>plainDateTimeLike = {        day: 1,        month: 1,        year: 1970,        hour: 0,        minute: 0,        second: 0,        millisecond: 0,        microsecond: 0,        nanosecond: 0,    } : { day: number; month: number; year: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                                                                                                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.PlainDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        day: 1,        month: 1,        year: 1970,        hour: 0,        minute: 0,        second: 0,        millisecond: 0,        microsecond: 0,        nanosecond: 0,    } : { day: number; month: number; year: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                                                                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        day: 1,
>day : number
>    : ^^^^^^
>1 : 1
>  : ^

        month: 1,
>month : number
>      : ^^^^^^
>1 : 1
>  : ^

        year: 1970,
>year : number
>     : ^^^^^^
>1970 : 1970
>     : ^^^^

        hour: 0,
>hour : number
>     : ^^^^^^
>0 : 0
>  : ^

        minute: 0,
>minute : number
>       : ^^^^^^
>0 : 0
>  : ^

        second: 0,
>second : number
>       : ^^^^^^
>0 : 0
>  : ^

        millisecond: 0,
>millisecond : number
>            : ^^^^^^
>0 : 0
>  : ^

        microsecond: 0,
>microsecond : number
>            : ^^^^^^
>0 : 0
>  : ^

        nanosecond: 0,
>nanosecond : number
>           : ^^^^^^
>0 : 0
>  : ^

    };

    plainDateTime = Temporal.PlainDateTime.from(plainDateTimeLike);
>plainDateTime = Temporal.PlainDateTime.from(plainDateTimeLike) : Temporal.PlainDateTime
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime.from(plainDateTimeLike) : Temporal.PlainDateTime
>                                               : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime.from : (item: Temporal.PlainDateTimeLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime : Temporal.PlainDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDateTime : Temporal.PlainDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainDateTimeLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime = Temporal.PlainDateTime.from(plainDateTimeLike, { overflow });
>plainDateTime = Temporal.PlainDateTime.from(plainDateTimeLike, { overflow }) : Temporal.PlainDateTime
>                                                                             : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime.from(plainDateTimeLike, { overflow }) : Temporal.PlainDateTime
>                                                             : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime.from : (item: Temporal.PlainDateTimeLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainDateTime : Temporal.PlainDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDateTime : Temporal.PlainDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainDateTimeLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Temporal.PlainDateTime.compare(plainDateTime, plainDateTimeLike);
>Temporal.PlainDateTime.compare(plainDateTime, plainDateTimeLike) : number
>                                                                 : ^^^^^^
>Temporal.PlainDateTime.compare : (one: Temporal.PlainDateTimeLike, two: Temporal.PlainDateTimeLike) => number
>                               : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>Temporal.PlainDateTime : Temporal.PlainDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainDateTime : Temporal.PlainDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.PlainDateTimeLike, two: Temporal.PlainDateTimeLike) => number
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const {
        calendarId,
>calendarId : string
>           : ^^^^^^

        day,
>day : number
>    : ^^^^^^

        dayOfWeek,
>dayOfWeek : number
>          : ^^^^^^

        dayOfYear,
>dayOfYear : number
>          : ^^^^^^

        daysInMonth,
>daysInMonth : number
>            : ^^^^^^

        daysInWeek,
>daysInWeek : number
>           : ^^^^^^

        daysInYear,
>daysInYear : number
>           : ^^^^^^

        era,
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

        eraYear,
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^

        hour,
>hour : number
>     : ^^^^^^

        inLeapYear,
>inLeapYear : boolean
>           : ^^^^^^^

        microsecond,
>microsecond : number
>            : ^^^^^^

        millisecond,
>millisecond : number
>            : ^^^^^^

        minute,
>minute : number
>       : ^^^^^^

        month,
>month : number
>      : ^^^^^^

        monthCode,
>monthCode : string
>          : ^^^^^^

        monthsInYear,
>monthsInYear : number
>             : ^^^^^^

        nanosecond,
>nanosecond : number
>           : ^^^^^^

        second,
>second : number
>       : ^^^^^^

        weekOfYear,
>weekOfYear : number | undefined
>           : ^^^^^^^^^^^^^^^^^^

        year,
>year : number
>     : ^^^^^^

        yearOfWeek,
>yearOfWeek : number | undefined
>           : ^^^^^^^^^^^^^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.PlainDateTime"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    } = plainDateTime;
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    let roundingUnits!: (Temporal.DateUnit & `day${string}`) | Temporal.TimeUnit | undefined;
>roundingUnits : "days" | "day" | Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^
>Temporal : any
>         : ^^^

    let toStringUnits!: Exclude<Temporal.TimeUnit, `hour${string}`> | undefined;
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainDateTime.add(durationLike);
>plainDateTime.add(durationLike) : Temporal.PlainDateTime
>                                : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                  : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.add(durationLike, { overflow });
>plainDateTime.add(durationLike, { overflow }) : Temporal.PlainDateTime
>                                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                  : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.equals(plainDateTimeLike);
>plainDateTime.equals(plainDateTimeLike) : boolean
>                                        : ^^^^^^^
>plainDateTime.equals : (other: Temporal.PlainDateTimeLike) => boolean
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>equals : (other: Temporal.PlainDateTimeLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.round(roundingUnits!);
>plainDateTime.round(roundingUnits!) : Temporal.PlainDateTime
>                                    : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.PlainDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.PlainDateTime; }
>                    : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.PlainDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.PlainDateTime; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits! : "days" | "day" | Temporal.TimeUnit
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "days" | "day" | Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainDateTime.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.PlainDateTime
>                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.PlainDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.PlainDateTime; }
>                    : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.PlainDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.PlainDateTime; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: "days" | "day" | Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "days" | "day" | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "days" | "day" | Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.since(plainDateTimeLike);
>plainDateTime.since(plainDateTimeLike) : Temporal.Duration
>                                       : ^^^^^^^^^^^^^^^^^
>plainDateTime.since : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.since(plainDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode });
>plainDateTime.since(plainDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                           : ^^^^^^^^^^^^^^^^^
>plainDateTime.since : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; largestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.subtract(durationLike);
>plainDateTime.subtract(durationLike) : Temporal.PlainDateTime
>                                     : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                       : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.subtract(durationLike, { overflow });
>plainDateTime.subtract(durationLike, { overflow }) : Temporal.PlainDateTime
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                       : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.toJSON();
>plainDateTime.toJSON() : string
>                       : ^^^^^^
>plainDateTime.toJSON : () => string
>                     : ^^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    plainDateTime.toLocaleString();
>plainDateTime.toLocaleString() : string
>                               : ^^^^^^
>plainDateTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    plainDateTime.toLocaleString(locales);
>plainDateTime.toLocaleString(locales) : string
>                                      : ^^^^^^
>plainDateTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    plainDateTime.toLocaleString(locales, toLocaleStringOptions);
>plainDateTime.toLocaleString(locales, toLocaleStringOptions) : string
>                                                             : ^^^^^^
>plainDateTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.toPlainDate();
>plainDateTime.toPlainDate() : Temporal.PlainDate
>                            : ^^^^^^^^^^^^^^^^^^
>plainDateTime.toPlainDate : () => Temporal.PlainDate
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toPlainDate : () => Temporal.PlainDate
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.toPlainTime();
>plainDateTime.toPlainTime() : Temporal.PlainTime
>                            : ^^^^^^^^^^^^^^^^^^
>plainDateTime.toPlainTime : () => Temporal.PlainTime
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toPlainTime : () => Temporal.PlainTime
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.toString();
>plainDateTime.toString() : string
>                         : ^^^^^^
>plainDateTime.toString : (options?: Temporal.PlainDateTimeToStringOptions) => string
>                       : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainDateTimeToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    plainDateTime.toString({ smallestUnit: toStringUnits, calendarName, fractionalSecondDigits, roundingMode });
>plainDateTime.toString({ smallestUnit: toStringUnits, calendarName, fractionalSecondDigits, roundingMode }) : string
>                                                                                                            : ^^^^^^
>plainDateTime.toString : (options?: Temporal.PlainDateTimeToStringOptions) => string
>                       : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainDateTimeToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ smallestUnit: toStringUnits, calendarName, fractionalSecondDigits, roundingMode } : { smallestUnit: "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined; calendarName: "auto" | "always" | "never" | "critical" | undefined; fractionalSecondDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarName : "auto" | "always" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fractionalSecondDigits : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.toZonedDateTime(timeZoneLike);
>plainDateTime.toZonedDateTime(timeZoneLike) : Temporal.ZonedDateTime
>                                            : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.toZonedDateTime : (timeZone: Temporal.TimeZoneLike, options?: Temporal.PlainDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toZonedDateTime : (timeZone: Temporal.TimeZoneLike, options?: Temporal.PlainDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^

    plainDateTime.toZonedDateTime(timeZoneLike, { disambiguation });
>plainDateTime.toZonedDateTime(timeZoneLike, { disambiguation }) : Temporal.ZonedDateTime
>                                                                : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.toZonedDateTime : (timeZone: Temporal.TimeZoneLike, options?: Temporal.PlainDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toZonedDateTime : (timeZone: Temporal.TimeZoneLike, options?: Temporal.PlainDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^
>{ disambiguation } : { disambiguation: "compatible" | "earlier" | "later" | "reject" | undefined; }
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>disambiguation : "compatible" | "earlier" | "later" | "reject" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.until(plainDateTimeLike);
>plainDateTime.until(plainDateTimeLike) : Temporal.Duration
>                                       : ^^^^^^^^^^^^^^^^^
>plainDateTime.until : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.until(plainDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode });
>plainDateTime.until(plainDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                           : ^^^^^^^^^^^^^^^^^
>plainDateTime.until : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTimeLike : Temporal.DateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; largestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond });
>plainDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond }) : Temporal.PlainDateTime
>                                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.with : (dateTimeLike: Temporal.PartialTemporalLike<Temporal.DateTimeLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                   : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>with : (dateTimeLike: Temporal.PartialTemporalLike<Temporal.DateTimeLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>     : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; day: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^
>hour : number
>     : ^^^^^^
>minute : number
>       : ^^^^^^
>second : number
>       : ^^^^^^
>millisecond : number
>            : ^^^^^^
>microsecond : number
>            : ^^^^^^
>nanosecond : number
>           : ^^^^^^

    plainDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond }, { overflow });
>plainDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond }, { overflow }) : Temporal.PlainDateTime
>                                                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.with : (dateTimeLike: Temporal.PartialTemporalLike<Temporal.DateTimeLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>                   : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>with : (dateTimeLike: Temporal.PartialTemporalLike<Temporal.DateTimeLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainDateTime
>     : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; day: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^
>hour : number
>     : ^^^^^^
>minute : number
>       : ^^^^^^
>second : number
>       : ^^^^^^
>millisecond : number
>            : ^^^^^^
>microsecond : number
>            : ^^^^^^
>nanosecond : number
>           : ^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.withCalendar(calendarLike);
>plainDateTime.withCalendar(calendarLike) : Temporal.PlainDateTime
>                                         : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.withCalendar : (calendar: Temporal.CalendarLike) => Temporal.PlainDateTime
>                           : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withCalendar : (calendar: Temporal.CalendarLike) => Temporal.PlainDateTime
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarLike : Temporal.CalendarLike
>             : ^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.withPlainTime();
>plainDateTime.withPlainTime() : Temporal.PlainDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>                            : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>              : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainDateTime.withPlainTime(plainTime);
>plainDateTime.withPlainTime(plainTime) : Temporal.PlainDateTime
>                                       : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime.withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>                            : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.PlainDateTime
>              : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
}

{
    let plainMonthDay: Temporal.PlainMonthDay;
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainMonthDay = new Temporal.PlainMonthDay(1, 1);
>plainMonthDay = new Temporal.PlainMonthDay(1, 1) : Temporal.PlainMonthDay
>                                                 : ^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.PlainMonthDay(1, 1) : Temporal.PlainMonthDay
>                                 : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay : Temporal.PlainMonthDayConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainMonthDay : Temporal.PlainMonthDayConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^

    plainMonthDay = new Temporal.PlainMonthDay(1, 1, 'gregorian', 1972);
>plainMonthDay = new Temporal.PlainMonthDay(1, 1, 'gregorian', 1972) : Temporal.PlainMonthDay
>                                                                    : ^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.PlainMonthDay(1, 1, 'gregorian', 1972) : Temporal.PlainMonthDay
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay : Temporal.PlainMonthDayConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainMonthDay : Temporal.PlainMonthDayConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>1 : 1
>  : ^
>'gregorian' : "gregorian"
>            : ^^^^^^^^^^^
>1972 : 1972
>     : ^^^^

    let plainMonthDayLike: Temporal.PlainMonthDayLike;
>plainMonthDayLike : Temporal.PlainMonthDayLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainMonthDayLike = plainMonthDay;
>plainMonthDayLike = plainMonthDay : Temporal.PlainMonthDay
>                                  : ^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDayLike : Temporal.PlainMonthDayLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainMonthDayLike = {
>plainMonthDayLike = {        day: 1,        month: 1,        year: 1970,    } : { day: number; month: number; year: number; }
>                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDayLike : Temporal.PlainMonthDayLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        day: 1,        month: 1,        year: 1970,    } : { day: number; month: number; year: number; }
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        day: 1,
>day : number
>    : ^^^^^^
>1 : 1
>  : ^

        month: 1,
>month : number
>      : ^^^^^^
>1 : 1
>  : ^

        year: 1970,
>year : number
>     : ^^^^^^
>1970 : 1970
>     : ^^^^

    };

    plainMonthDay = Temporal.PlainMonthDay.from(plainMonthDayLike);
>plainMonthDay = Temporal.PlainMonthDay.from(plainMonthDayLike) : Temporal.PlainMonthDay
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay.from(plainMonthDayLike) : Temporal.PlainMonthDay
>                                               : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay.from : (item: Temporal.PlainMonthDayLike, options?: Temporal.OverflowOptions) => Temporal.PlainMonthDay
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay : Temporal.PlainMonthDayConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainMonthDay : Temporal.PlainMonthDayConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainMonthDayLike, options?: Temporal.OverflowOptions) => Temporal.PlainMonthDay
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDayLike : Temporal.MonthDayLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainMonthDay = Temporal.PlainMonthDay.from(plainMonthDayLike, { overflow });
>plainMonthDay = Temporal.PlainMonthDay.from(plainMonthDayLike, { overflow }) : Temporal.PlainMonthDay
>                                                                             : ^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay.from(plainMonthDayLike, { overflow }) : Temporal.PlainMonthDay
>                                                             : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay.from : (item: Temporal.PlainMonthDayLike, options?: Temporal.OverflowOptions) => Temporal.PlainMonthDay
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainMonthDay : Temporal.PlainMonthDayConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainMonthDay : Temporal.PlainMonthDayConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainMonthDayLike, options?: Temporal.OverflowOptions) => Temporal.PlainMonthDay
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDayLike : Temporal.MonthDayLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const {
        calendarId,
>calendarId : string
>           : ^^^^^^

        day,
>day : number
>    : ^^^^^^

        monthCode,
>monthCode : string
>          : ^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.PlainMonthDay"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    } = plainMonthDay;
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainMonthDay.equals(plainMonthDayLike);
>plainMonthDay.equals(plainMonthDayLike) : boolean
>                                        : ^^^^^^^
>plainMonthDay.equals : (other: Temporal.PlainMonthDayLike) => boolean
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>equals : (other: Temporal.PlainMonthDayLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainMonthDayLike : Temporal.MonthDayLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainMonthDay.toJSON();
>plainMonthDay.toJSON() : string
>                       : ^^^^^^
>plainMonthDay.toJSON : () => string
>                     : ^^^^^^      
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    plainMonthDay.toLocaleString();
>plainMonthDay.toLocaleString() : string
>                               : ^^^^^^
>plainMonthDay.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    plainMonthDay.toLocaleString(locales);
>plainMonthDay.toLocaleString(locales) : string
>                                      : ^^^^^^
>plainMonthDay.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    plainMonthDay.toLocaleString(locales, toLocaleStringOptions);
>plainMonthDay.toLocaleString(locales, toLocaleStringOptions) : string
>                                                             : ^^^^^^
>plainMonthDay.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainMonthDay.toPlainDate({ year: 1970 });
>plainMonthDay.toPlainDate({ year: 1970 }) : Temporal.PlainDate
>                                          : ^^^^^^^^^^^^^^^^^^
>plainMonthDay.toPlainDate : (item: Temporal.PlainMonthDayToPlainDateOptions) => Temporal.PlainDate
>                          : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toPlainDate : (item: Temporal.PlainMonthDayToPlainDateOptions) => Temporal.PlainDate
>            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year: 1970 } : { year: number; }
>               : ^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>1970 : 1970
>     : ^^^^

    plainMonthDay.toString();
>plainMonthDay.toString() : string
>                         : ^^^^^^
>plainMonthDay.toString : (options?: Temporal.PlainMonthDayToStringOptions) => string
>                       : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainMonthDayToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    plainMonthDay.toString({ calendarName });
>plainMonthDay.toString({ calendarName }) : string
>                                         : ^^^^^^
>plainMonthDay.toString : (options?: Temporal.PlainMonthDayToStringOptions) => string
>                       : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainMonthDayToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ calendarName } : { calendarName: "auto" | "always" | "never" | "critical" | undefined; }
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarName : "auto" | "always" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainMonthDay.with({ monthCode, day });
>plainMonthDay.with({ monthCode, day }) : Temporal.PlainMonthDay
>                                       : ^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay.with : (monthDayLike: Temporal.PartialTemporalLike<Temporal.MonthDayLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainMonthDay
>                   : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainMonthDay : Temporal.PlainMonthDay
>              : ^^^^^^^^^^^^^^^^^^^^^^
>with : (monthDayLike: Temporal.PartialTemporalLike<Temporal.MonthDayLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainMonthDay
>     : ^            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ monthCode, day } : { monthCode: string; day: number; }
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^
}

{
    plainTime = new Temporal.PlainTime();
>plainTime = new Temporal.PlainTime() : Temporal.PlainTime
>                                     : ^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>new Temporal.PlainTime() : Temporal.PlainTime
>                         : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainTime : Temporal.PlainTimeConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainTime : Temporal.PlainTimeConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime = new Temporal.PlainTime(1, 2, 3, 4, 5, 6);
>plainTime = new Temporal.PlainTime(1, 2, 3, 4, 5, 6) : Temporal.PlainTime
>                                                     : ^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>new Temporal.PlainTime(1, 2, 3, 4, 5, 6) : Temporal.PlainTime
>                                         : ^^^^^^^^^^^^^^^^^^
>Temporal.PlainTime : Temporal.PlainTimeConstructor
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainTime : Temporal.PlainTimeConstructor
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^

    let plainTimeLike: Temporal.PlainTimeLike;
>plainTimeLike : Temporal.PlainTimeLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainTimeLike = plainTime;
>plainTimeLike = plainTime : Temporal.PlainTime
>                          : ^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.PlainTimeLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^

    plainTimeLike = plainDateTime;
>plainTimeLike = plainDateTime : Temporal.PlainDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.PlainTimeLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>plainDateTime : Temporal.PlainDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainTimeLike = zonedDateTime;
>plainTimeLike = zonedDateTime : Temporal.ZonedDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.PlainTimeLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    plainTimeLike = {
>plainTimeLike = {        hour: 1,        minute: 2,        second: 3,        millisecond: 4,        microsecond: 5,        nanosecond: 6,    } : { hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.PlainTimeLike
>              : ^^^^^^^^^^^^^^^^^^^^^^
>{        hour: 1,        minute: 2,        second: 3,        millisecond: 4,        microsecond: 5,        nanosecond: 6,    } : { hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                                                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        hour: 1,
>hour : number
>     : ^^^^^^
>1 : 1
>  : ^

        minute: 2,
>minute : number
>       : ^^^^^^
>2 : 2
>  : ^

        second: 3,
>second : number
>       : ^^^^^^
>3 : 3
>  : ^

        millisecond: 4,
>millisecond : number
>            : ^^^^^^
>4 : 4
>  : ^

        microsecond: 5,
>microsecond : number
>            : ^^^^^^
>5 : 5
>  : ^

        nanosecond: 6,
>nanosecond : number
>           : ^^^^^^
>6 : 6
>  : ^

    };

    const {
        hour,
>hour : number
>     : ^^^^^^

        microsecond,
>microsecond : number
>            : ^^^^^^

        millisecond,
>millisecond : number
>            : ^^^^^^

        minute,
>minute : number
>       : ^^^^^^

        nanosecond,
>nanosecond : number
>           : ^^^^^^

        second,
>second : number
>       : ^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.PlainTime"
>            : ^^^^^^^^^^^^^^^^^^^^

    } = plainTime;
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^

    let roundingUnits!: Temporal.TimeUnit | undefined;
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    let toStringUnits!: Exclude<Temporal.TimeUnit, `hour${string}`> | undefined;
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainTime.add(durationLike);
>plainTime.add(durationLike) : Temporal.PlainTime
>                            : ^^^^^^^^^^^^^^^^^^
>plainTime.add : (duration: Temporal.DurationLike) => Temporal.PlainTime
>              : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike) => Temporal.PlainTime
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.equals(plainTimeLike);
>plainTime.equals(plainTimeLike) : boolean
>                                : ^^^^^^^
>plainTime.equals : (other: Temporal.PlainTimeLike) => boolean
>                 : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>equals : (other: Temporal.PlainTimeLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainTimeLike : Temporal.TimeLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.round(roundingUnits!);
>plainTime.round(roundingUnits!) : Temporal.PlainTime
>                                : ^^^^^^^^^^^^^^^^^^
>plainTime.round : { (roundTo: Temporal.TimeUnit): Temporal.PlainTime; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.PlainTime; }
>                : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>round : { (roundTo: Temporal.TimeUnit): Temporal.PlainTime; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.PlainTime; }
>      : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits! : Temporal.TimeUnit
>               : ^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainTime.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.PlainTime
>                                                                                  : ^^^^^^^^^^^^^^^^^^
>plainTime.round : { (roundTo: Temporal.TimeUnit): Temporal.PlainTime; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.PlainTime; }
>                : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>round : { (roundTo: Temporal.TimeUnit): Temporal.PlainTime; (roundTo: Temporal.RoundingOptions<Temporal.TimeUnit>): Temporal.PlainTime; }
>      : ^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.since(plainTimeLike);
>plainTime.since(plainTimeLike) : Temporal.Duration
>                               : ^^^^^^^^^^^^^^^^^
>plainTime.since : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.TimeLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.since(plainTimeLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainTime.since(plainTimeLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                             : ^^^^^^^^^^^^^^^^^
>plainTime.since : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.TimeLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.TimeUnit | undefined; largestUnit: Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.subtract(durationLike);
>plainTime.subtract(durationLike) : Temporal.PlainTime
>                                 : ^^^^^^^^^^^^^^^^^^
>plainTime.subtract : (duration: Temporal.DurationLike) => Temporal.PlainTime
>                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike) => Temporal.PlainTime
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.toJSON();
>plainTime.toJSON() : string
>                   : ^^^^^^
>plainTime.toJSON : () => string
>                 : ^^^^^^      
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    plainTime.toLocaleString();
>plainTime.toLocaleString() : string
>                           : ^^^^^^
>plainTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                         : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    plainTime.toLocaleString(locales);
>plainTime.toLocaleString(locales) : string
>                                  : ^^^^^^
>plainTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                         : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    plainTime.toLocaleString(locales, toLocaleStringOptions);
>plainTime.toLocaleString(locales, toLocaleStringOptions) : string
>                                                         : ^^^^^^
>plainTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                         : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.toString();
>plainTime.toString() : string
>                     : ^^^^^^
>plainTime.toString : (options?: Temporal.PlainTimeToStringOptions) => string
>                   : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainTimeToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    plainTime.toString({ smallestUnit: toStringUnits, fractionalSecondDigits, roundingMode });
>plainTime.toString({ smallestUnit: toStringUnits, fractionalSecondDigits, roundingMode }) : string
>                                                                                          : ^^^^^^
>plainTime.toString : (options?: Temporal.PlainTimeToStringOptions) => string
>                   : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainTimeToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ smallestUnit: toStringUnits, fractionalSecondDigits, roundingMode } : { smallestUnit: "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined; fractionalSecondDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fractionalSecondDigits : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.until(plainTimeLike);
>plainTime.until(plainTimeLike) : Temporal.Duration
>                               : ^^^^^^^^^^^^^^^^^
>plainTime.until : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.TimeLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.until(plainTimeLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainTime.until(plainTimeLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                             : ^^^^^^^^^^^^^^^^^
>plainTime.until : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>                : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>plainTimeLike : Temporal.TimeLikeObject
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.TimeUnit | undefined; largestUnit: Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainTime.with({ hour, minute, second, millisecond, microsecond, nanosecond });
>plainTime.with({ hour, minute, second, millisecond, microsecond, nanosecond }) : Temporal.PlainTime
>                                                                               : ^^^^^^^^^^^^^^^^^^
>plainTime.with : (timeLike: Temporal.PartialTemporalLike<Temporal.TimeLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainTime
>               : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^
>with : (timeLike: Temporal.PartialTemporalLike<Temporal.TimeLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainTime
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ hour, minute, second, millisecond, microsecond, nanosecond } : { hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; }
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>hour : number
>     : ^^^^^^
>minute : number
>       : ^^^^^^
>second : number
>       : ^^^^^^
>millisecond : number
>            : ^^^^^^
>microsecond : number
>            : ^^^^^^
>nanosecond : number
>           : ^^^^^^
}

{
    let plainYearMonth: Temporal.PlainYearMonth;
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainYearMonth = new Temporal.PlainYearMonth(1970, 1);
>plainYearMonth = new Temporal.PlainYearMonth(1970, 1) : Temporal.PlainYearMonth
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.PlainYearMonth(1970, 1) : Temporal.PlainYearMonth
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth : Temporal.PlainYearMonthConstructor
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainYearMonth : Temporal.PlainYearMonthConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1970 : 1970
>     : ^^^^
>1 : 1
>  : ^

    plainYearMonth = new Temporal.PlainYearMonth(1970, 1, 'gregorian', 1);
>plainYearMonth = new Temporal.PlainYearMonth(1970, 1, 'gregorian', 1) : Temporal.PlainYearMonth
>                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.PlainYearMonth(1970, 1, 'gregorian', 1) : Temporal.PlainYearMonth
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth : Temporal.PlainYearMonthConstructor
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainYearMonth : Temporal.PlainYearMonthConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1970 : 1970
>     : ^^^^
>1 : 1
>  : ^
>'gregorian' : "gregorian"
>            : ^^^^^^^^^^^
>1 : 1
>  : ^

    let plainYearMonthLike: Temporal.PlainYearMonthLike;
>plainYearMonthLike : Temporal.PlainYearMonthLike
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainYearMonthLike = plainYearMonth;
>plainYearMonthLike = plainYearMonth : Temporal.PlainYearMonth
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.PlainYearMonthLike
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonthLike = {
>plainYearMonthLike = {        month: 1,        year: 1970,    } : { month: number; year: number; }
>                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.PlainYearMonthLike
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        month: 1,        year: 1970,    } : { month: number; year: number; }
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        month: 1,
>month : number
>      : ^^^^^^
>1 : 1
>  : ^

        year: 1970,
>year : number
>     : ^^^^^^
>1970 : 1970
>     : ^^^^

    };

    plainYearMonth = Temporal.PlainYearMonth.from(plainYearMonthLike);
>plainYearMonth = Temporal.PlainYearMonth.from(plainYearMonthLike) : Temporal.PlainYearMonth
>                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth.from(plainYearMonthLike) : Temporal.PlainYearMonth
>                                                 : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth.from : (item: Temporal.PlainYearMonthLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                             : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth : Temporal.PlainYearMonthConstructor
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainYearMonth : Temporal.PlainYearMonthConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainYearMonthLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth = Temporal.PlainYearMonth.from(plainYearMonthLike, { overflow });
>plainYearMonth = Temporal.PlainYearMonth.from(plainYearMonthLike, { overflow }) : Temporal.PlainYearMonth
>                                                                                : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth.from(plainYearMonthLike, { overflow }) : Temporal.PlainYearMonth
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth.from : (item: Temporal.PlainYearMonthLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                             : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.PlainYearMonth : Temporal.PlainYearMonthConstructor
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainYearMonth : Temporal.PlainYearMonthConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.PlainYearMonthLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Temporal.PlainYearMonth.compare(plainYearMonth, plainYearMonthLike);
>Temporal.PlainYearMonth.compare(plainYearMonth, plainYearMonthLike) : number
>                                                                    : ^^^^^^
>Temporal.PlainYearMonth.compare : (one: Temporal.PlainYearMonthLike, two: Temporal.PlainYearMonthLike) => number
>                                : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>Temporal.PlainYearMonth : Temporal.PlainYearMonthConstructor
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>PlainYearMonth : Temporal.PlainYearMonthConstructor
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.PlainYearMonthLike, two: Temporal.PlainYearMonthLike) => number
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const {
        calendarId,
>calendarId : string
>           : ^^^^^^

        daysInMonth,
>daysInMonth : number
>            : ^^^^^^

        daysInYear,
>daysInYear : number
>           : ^^^^^^

        era,
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

        eraYear,
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^

        inLeapYear,
>inLeapYear : boolean
>           : ^^^^^^^

        month,
>month : number
>      : ^^^^^^

        monthCode,
>monthCode : string
>          : ^^^^^^

        monthsInYear,
>monthsInYear : number
>             : ^^^^^^

        year,
>year : number
>     : ^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.PlainYearMonth"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^

    } = plainYearMonth;
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^

    let roundingUnits!: (Temporal.DateUnit & (`year${string}` | `month${string}`)) | undefined;
>roundingUnits : "years" | "months" | "year" | "month" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    plainYearMonth.add(durationLike);
>plainYearMonth.add(durationLike) : Temporal.PlainYearMonth
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.add(durationLike, { overflow });
>plainYearMonth.add(durationLike, { overflow }) : Temporal.PlainYearMonth
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.equals(plainYearMonthLike);
>plainYearMonth.equals(plainYearMonthLike) : boolean
>                                          : ^^^^^^^
>plainYearMonth.equals : (other: Temporal.PlainYearMonthLike) => boolean
>                      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>equals : (other: Temporal.PlainYearMonthLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.since(plainYearMonthLike);
>plainYearMonth.since(plainYearMonthLike) : Temporal.Duration
>                                         : ^^^^^^^^^^^^^^^^^
>plainYearMonth.since : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.since(plainYearMonthLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainYearMonth.since(plainYearMonthLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                       : ^^^^^^^^^^^^^^^^^
>plainYearMonth.since : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: "years" | "months" | "year" | "month" | undefined; largestUnit: "years" | "months" | "year" | "month" | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "years" | "months" | "year" | "month" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "years" | "months" | "year" | "month" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : "years" | "months" | "year" | "month" | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "years" | "months" | "year" | "month" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.subtract(durationLike);
>plainYearMonth.subtract(durationLike) : Temporal.PlainYearMonth
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                        : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.subtract(durationLike, { overflow });
>plainYearMonth.subtract(durationLike, { overflow }) : Temporal.PlainYearMonth
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                        : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.toJSON();
>plainYearMonth.toJSON() : string
>                        : ^^^^^^
>plainYearMonth.toJSON : () => string
>                      : ^^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    plainYearMonth.toLocaleString();
>plainYearMonth.toLocaleString() : string
>                                : ^^^^^^
>plainYearMonth.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                              : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    plainYearMonth.toLocaleString(locales);
>plainYearMonth.toLocaleString(locales) : string
>                                       : ^^^^^^
>plainYearMonth.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                              : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.toLocaleString(locales, toLocaleStringOptions);
>plainYearMonth.toLocaleString(locales, toLocaleStringOptions) : string
>                                                              : ^^^^^^
>plainYearMonth.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                              : ^       ^^^                    ^^       ^^^                          ^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.toPlainDate({ day: 1 });
>plainYearMonth.toPlainDate({ day: 1 }) : Temporal.PlainDate
>                                       : ^^^^^^^^^^^^^^^^^^
>plainYearMonth.toPlainDate : (item: Temporal.PlainYearMonthToPlainDateOptions) => Temporal.PlainDate
>                           : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toPlainDate : (item: Temporal.PlainYearMonthToPlainDateOptions) => Temporal.PlainDate
>            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ day: 1 } : { day: number; }
>           : ^^^^^^^^^^^^^^^^
>day : number
>    : ^^^^^^
>1 : 1
>  : ^

    plainYearMonth.toString();
>plainYearMonth.toString() : string
>                          : ^^^^^^
>plainYearMonth.toString : (options?: Temporal.PlainYearMonthToStringOptions) => string
>                        : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainYearMonthToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    plainYearMonth.toString({ calendarName });
>plainYearMonth.toString({ calendarName }) : string
>                                          : ^^^^^^
>plainYearMonth.toString : (options?: Temporal.PlainYearMonthToStringOptions) => string
>                        : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.PlainYearMonthToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ calendarName } : { calendarName: "auto" | "always" | "never" | "critical" | undefined; }
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarName : "auto" | "always" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.until(plainYearMonthLike);
>plainYearMonth.until(plainYearMonthLike) : Temporal.Duration
>                                         : ^^^^^^^^^^^^^^^^^
>plainYearMonth.until : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.until(plainYearMonthLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode });
>plainYearMonth.until(plainYearMonthLike, { smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                       : ^^^^^^^^^^^^^^^^^
>plainYearMonth.until : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.PlainYearMonthLike, options?: Temporal.RoundingOptionsWithLargestUnit<"year" | "month" | "years" | "months">) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonthLike : Temporal.YearMonthLikeObject
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, largestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: "years" | "months" | "year" | "month" | undefined; largestUnit: "years" | "months" | "year" | "month" | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "years" | "months" | "year" | "month" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "years" | "months" | "year" | "month" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : "years" | "months" | "year" | "month" | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "years" | "months" | "year" | "month" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    plainYearMonth.with({ year, era, eraYear, month, monthCode });
>plainYearMonth.with({ year, era, eraYear, month, monthCode }) : Temporal.PlainYearMonth
>                                                              : ^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth.with : (yearMonthLike: Temporal.PartialTemporalLike<Temporal.YearMonthLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>                    : ^             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainYearMonth : Temporal.PlainYearMonth
>               : ^^^^^^^^^^^^^^^^^^^^^^^
>with : (yearMonthLike: Temporal.PartialTemporalLike<Temporal.YearMonthLikeObject>, options?: Temporal.OverflowOptions) => Temporal.PlainYearMonth
>     : ^             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
}

{
    zonedDateTime = new Temporal.ZonedDateTime(1234567890n, 'UTC');
>zonedDateTime = new Temporal.ZonedDateTime(1234567890n, 'UTC') : Temporal.ZonedDateTime
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.ZonedDateTime(1234567890n, 'UTC') : Temporal.ZonedDateTime
>                                               : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime : Temporal.ZonedDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>ZonedDateTime : Temporal.ZonedDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1234567890n : 1234567890n
>            : ^^^^^^^^^^^
>'UTC' : "UTC"
>      : ^^^^^

    zonedDateTime = new Temporal.ZonedDateTime(1234567890n, 'UTC', 'iso8601');
>zonedDateTime = new Temporal.ZonedDateTime(1234567890n, 'UTC', 'iso8601') : Temporal.ZonedDateTime
>                                                                          : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>new Temporal.ZonedDateTime(1234567890n, 'UTC', 'iso8601') : Temporal.ZonedDateTime
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime : Temporal.ZonedDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>ZonedDateTime : Temporal.ZonedDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1234567890n : 1234567890n
>            : ^^^^^^^^^^^
>'UTC' : "UTC"
>      : ^^^^^
>'iso8601' : "iso8601"
>          : ^^^^^^^^^

    let zonedDateTimeLike: Temporal.ZonedDateTimeLike;
>zonedDateTimeLike : Temporal.ZonedDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    zonedDateTimeLike = zonedDateTime;
>zonedDateTimeLike = zonedDateTime : Temporal.ZonedDateTime
>                                  : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTimeLike = {
>zonedDateTimeLike = {        day: 1,        month: 1,        year: 1,        hour: 0,        minute: 0,        second: 0,        millisecond: 0,        microsecond: 0,        nanosecond: 0,        timeZone: 'UTC',    } : { day: number; month: number; year: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; timeZone: string; }
>                                                                                                                                                                                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLike
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        day: 1,        month: 1,        year: 1,        hour: 0,        minute: 0,        second: 0,        millisecond: 0,        microsecond: 0,        nanosecond: 0,        timeZone: 'UTC',    } : { day: number; month: number; year: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; timeZone: string; }
>                                                                                                                                                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        day: 1,
>day : number
>    : ^^^^^^
>1 : 1
>  : ^

        month: 1,
>month : number
>      : ^^^^^^
>1 : 1
>  : ^

        year: 1,
>year : number
>     : ^^^^^^
>1 : 1
>  : ^

        hour: 0,
>hour : number
>     : ^^^^^^
>0 : 0
>  : ^

        minute: 0,
>minute : number
>       : ^^^^^^
>0 : 0
>  : ^

        second: 0,
>second : number
>       : ^^^^^^
>0 : 0
>  : ^

        millisecond: 0,
>millisecond : number
>            : ^^^^^^
>0 : 0
>  : ^

        microsecond: 0,
>microsecond : number
>            : ^^^^^^
>0 : 0
>  : ^

        nanosecond: 0,
>nanosecond : number
>           : ^^^^^^
>0 : 0
>  : ^

        timeZone: 'UTC',
>timeZone : string
>         : ^^^^^^
>'UTC' : "UTC"
>      : ^^^^^

    };

    let toZonedDateTimeOffset!: 'use' | 'ignore' | 'reject' | 'prefer' | undefined;
>toZonedDateTimeOffset : "reject" | "use" | "ignore" | "prefer" | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime = Temporal.ZonedDateTime.from(zonedDateTimeLike);
>zonedDateTime = Temporal.ZonedDateTime.from(zonedDateTimeLike) : Temporal.ZonedDateTime
>                                                               : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime.from(zonedDateTimeLike) : Temporal.ZonedDateTime
>                                               : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime.from : (item: Temporal.ZonedDateTimeLike, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime : Temporal.ZonedDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>ZonedDateTime : Temporal.ZonedDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.ZonedDateTimeLike, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime = Temporal.ZonedDateTime.from(zonedDateTimeLike, { disambiguation, offset: toZonedDateTimeOffset, overflow });
>zonedDateTime = Temporal.ZonedDateTime.from(zonedDateTimeLike, { disambiguation, offset: toZonedDateTimeOffset, overflow }) : Temporal.ZonedDateTime
>                                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime.from(zonedDateTimeLike, { disambiguation, offset: toZonedDateTimeOffset, overflow }) : Temporal.ZonedDateTime
>                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime.from : (item: Temporal.ZonedDateTimeLike, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                            : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal.ZonedDateTime : Temporal.ZonedDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>ZonedDateTime : Temporal.ZonedDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : (item: Temporal.ZonedDateTimeLike, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ disambiguation, offset: toZonedDateTimeOffset, overflow } : { disambiguation: "compatible" | "earlier" | "later" | "reject" | undefined; offset: "reject" | "use" | "ignore" | "prefer" | undefined; overflow: "reject" | "constrain" | undefined; }
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>disambiguation : "compatible" | "earlier" | "later" | "reject" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>offset : "reject" | "use" | "ignore" | "prefer" | undefined
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toZonedDateTimeOffset : "reject" | "use" | "ignore" | "prefer" | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Temporal.ZonedDateTime.compare(zonedDateTime, zonedDateTimeLike);
>Temporal.ZonedDateTime.compare(zonedDateTime, zonedDateTimeLike) : number
>                                                                 : ^^^^^^
>Temporal.ZonedDateTime.compare : (one: Temporal.ZonedDateTimeLike, two: Temporal.ZonedDateTimeLike) => number
>                               : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>Temporal.ZonedDateTime : Temporal.ZonedDateTimeConstructor
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : typeof Temporal
>         : ^^^^^^^^^^^^^^^
>ZonedDateTime : Temporal.ZonedDateTimeConstructor
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>compare : (one: Temporal.ZonedDateTimeLike, two: Temporal.ZonedDateTimeLike) => number
>        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    const {
        calendarId,
>calendarId : string
>           : ^^^^^^

        day,
>day : number
>    : ^^^^^^

        dayOfWeek,
>dayOfWeek : number
>          : ^^^^^^

        dayOfYear,
>dayOfYear : number
>          : ^^^^^^

        daysInMonth,
>daysInMonth : number
>            : ^^^^^^

        daysInWeek,
>daysInWeek : number
>           : ^^^^^^

        daysInYear,
>daysInYear : number
>           : ^^^^^^

        epochMilliseconds,
>epochMilliseconds : number
>                  : ^^^^^^

        epochNanoseconds,
>epochNanoseconds : bigint
>                 : ^^^^^^

        era,
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^

        eraYear,
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^

        hour,
>hour : number
>     : ^^^^^^

        hoursInDay,
>hoursInDay : number
>           : ^^^^^^

        inLeapYear,
>inLeapYear : boolean
>           : ^^^^^^^

        microsecond,
>microsecond : number
>            : ^^^^^^

        millisecond,
>millisecond : number
>            : ^^^^^^

        minute,
>minute : number
>       : ^^^^^^

        month,
>month : number
>      : ^^^^^^

        monthCode,
>monthCode : string
>          : ^^^^^^

        monthsInYear,
>monthsInYear : number
>             : ^^^^^^

        nanosecond,
>nanosecond : number
>           : ^^^^^^

        offset,
>offset : string
>       : ^^^^^^

        offsetNanoseconds,
>offsetNanoseconds : number
>                  : ^^^^^^

        second,
>second : number
>       : ^^^^^^

        timeZoneId,
>timeZoneId : string
>           : ^^^^^^

        weekOfYear,
>weekOfYear : number | undefined
>           : ^^^^^^^^^^^^^^^^^^

        year,
>year : number
>     : ^^^^^^

        yearOfWeek,
>yearOfWeek : number | undefined
>           : ^^^^^^^^^^^^^^^^^^

        [Symbol.toStringTag]: toStringTag,
>Symbol.toStringTag : unique symbol
>                   : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>toStringTag : unique symbol
>            : ^^^^^^^^^^^^^
>toStringTag : "Temporal.ZonedDateTime"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    } = zonedDateTime;
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^

    let direction!: 'next' | 'previous';
>direction : "next" | "previous"
>          : ^^^^^^^^^^^^^^^^^^^

    let toStringOffset!: 'auto' | 'never' | undefined;
>toStringOffset : "auto" | "never" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let timeZoneName!: 'auto' | 'never' | 'critical' | undefined;
>timeZoneName : "auto" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let roundingUnits!: (Temporal.DateUnit & `day${string}`) | Temporal.TimeUnit | undefined;
>roundingUnits : "days" | "day" | Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^
>Temporal : any
>         : ^^^

    let toStringUnits!: Exclude<Temporal.TimeUnit, `hour${string}`> | undefined;
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Temporal : any
>         : ^^^

    zonedDateTime.add(durationLike);
>zonedDateTime.add(durationLike) : Temporal.ZonedDateTime
>                                : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>                  : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.add(durationLike, { overflow });
>zonedDateTime.add(durationLike, { overflow }) : Temporal.ZonedDateTime
>                                              : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>                  : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>add : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>    : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.equals(zonedDateTimeLike);
>zonedDateTime.equals(zonedDateTimeLike) : boolean
>                                        : ^^^^^^^
>zonedDateTime.equals : (other: Temporal.ZonedDateTimeLike) => boolean
>                     : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>equals : (other: Temporal.ZonedDateTimeLike) => boolean
>       : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.getTimeZoneTransition(direction);
>zonedDateTime.getTimeZoneTransition(direction) : Temporal.ZonedDateTime | null
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.getTimeZoneTransition : { (direction: "next" | "previous"): Temporal.ZonedDateTime | null; (direction: Temporal.ZonedDateTimeTransitionOptions): Temporal.ZonedDateTime | null; }
>                                    : ^^^         ^^                   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>getTimeZoneTransition : { (direction: "next" | "previous"): Temporal.ZonedDateTime | null; (direction: Temporal.ZonedDateTimeTransitionOptions): Temporal.ZonedDateTime | null; }
>                      : ^^^         ^^                   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>direction : "next" | "previous"
>          : ^^^^^^^^^^^^^^^^^^^

    zonedDateTime.getTimeZoneTransition({ direction });
>zonedDateTime.getTimeZoneTransition({ direction }) : Temporal.ZonedDateTime | null
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.getTimeZoneTransition : { (direction: "next" | "previous"): Temporal.ZonedDateTime | null; (direction: Temporal.ZonedDateTimeTransitionOptions): Temporal.ZonedDateTime | null; }
>                                    : ^^^         ^^                   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>getTimeZoneTransition : { (direction: "next" | "previous"): Temporal.ZonedDateTime | null; (direction: Temporal.ZonedDateTimeTransitionOptions): Temporal.ZonedDateTime | null; }
>                      : ^^^         ^^                   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^
>{ direction } : { direction: "next" | "previous"; }
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>direction : "next" | "previous"
>          : ^^^^^^^^^^^^^^^^^^^

    zonedDateTime.round(roundingUnits!);
>zonedDateTime.round(roundingUnits!) : Temporal.ZonedDateTime
>                                    : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.ZonedDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.ZonedDateTime; }
>                    : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.ZonedDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.ZonedDateTime; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits! : "days" | "day" | Temporal.TimeUnit
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "days" | "day" | Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode });
>zonedDateTime.round({ smallestUnit: roundingUnits, roundingIncrement, roundingMode }) : Temporal.ZonedDateTime
>                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.ZonedDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.ZonedDateTime; }
>                    : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>round : { (roundTo: "day" | "days" | Temporal.TimeUnit): Temporal.ZonedDateTime; (roundTo: Temporal.RoundingOptions<"day" | "days" | Temporal.TimeUnit>): Temporal.ZonedDateTime; }
>      : ^^^       ^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^                  ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: roundingUnits, roundingIncrement, roundingMode } : { smallestUnit: "days" | "day" | Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : "days" | "day" | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingUnits : "days" | "day" | Temporal.TimeUnit | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.since(zonedDateTimeLike);
>zonedDateTime.since(zonedDateTimeLike) : Temporal.Duration
>                                       : ^^^^^^^^^^^^^^^^^
>zonedDateTime.since : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.since(zonedDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode });
>zonedDateTime.since(zonedDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                           : ^^^^^^^^^^^^^^^^^
>zonedDateTime.since : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>since : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; largestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.startOfDay();
>zonedDateTime.startOfDay() : Temporal.ZonedDateTime
>                           : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.startOfDay : () => Temporal.ZonedDateTime
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>startOfDay : () => Temporal.ZonedDateTime
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.subtract(durationLike);
>zonedDateTime.subtract(durationLike) : Temporal.ZonedDateTime
>                                     : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>                       : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.subtract(durationLike, { overflow });
>zonedDateTime.subtract(durationLike, { overflow }) : Temporal.ZonedDateTime
>                                                   : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>                       : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>subtract : (duration: Temporal.DurationLike, options?: Temporal.OverflowOptions) => Temporal.ZonedDateTime
>         : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>durationLike : Temporal.DurationLikeObject
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ overflow } : { overflow: "reject" | "constrain" | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toInstant();
>zonedDateTime.toInstant() : Temporal.Instant
>                          : ^^^^^^^^^^^^^^^^
>zonedDateTime.toInstant : () => Temporal.Instant
>                        : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toInstant : () => Temporal.Instant
>          : ^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toJSON();
>zonedDateTime.toJSON() : string
>                       : ^^^^^^
>zonedDateTime.toJSON : () => string
>                     : ^^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toJSON : () => string
>       : ^^^^^^      

    zonedDateTime.toLocaleString();
>zonedDateTime.toLocaleString() : string
>                               : ^^^^^^
>zonedDateTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      

    zonedDateTime.toLocaleString(locales);
>zonedDateTime.toLocaleString(locales) : string
>                                      : ^^^^^^
>zonedDateTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toLocaleString(locales, toLocaleStringOptions);
>zonedDateTime.toLocaleString(locales, toLocaleStringOptions) : string
>                                                             : ^^^^^^
>zonedDateTime.toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>                             : ^       ^^^                    ^^       ^^^                          ^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toLocaleString : (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions) => string
>               : ^       ^^^                    ^^       ^^^                          ^^^^^      
>locales : Intl.LocalesArgument
>        : ^^^^^^^^^^^^^^^^^^^^
>toLocaleStringOptions : Intl.DateTimeFormatOptions | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toPlainDate();
>zonedDateTime.toPlainDate() : Temporal.PlainDate
>                            : ^^^^^^^^^^^^^^^^^^
>zonedDateTime.toPlainDate : () => Temporal.PlainDate
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toPlainDate : () => Temporal.PlainDate
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toPlainDateTime();
>zonedDateTime.toPlainDateTime() : Temporal.PlainDateTime
>                                : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.toPlainDateTime : () => Temporal.PlainDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toPlainDateTime : () => Temporal.PlainDateTime
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toPlainTime();
>zonedDateTime.toPlainTime() : Temporal.PlainTime
>                            : ^^^^^^^^^^^^^^^^^^
>zonedDateTime.toPlainTime : () => Temporal.PlainTime
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toPlainTime : () => Temporal.PlainTime
>            : ^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.toString();
>zonedDateTime.toString() : string
>                         : ^^^^^^
>zonedDateTime.toString : (options?: Temporal.ZonedDateTimeToStringOptions) => string
>                       : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.ZonedDateTimeToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      

    zonedDateTime.toString({ smallestUnit: toStringUnits, calendarName, timeZoneName, fractionalSecondDigits, offset: toStringOffset, roundingMode });
>zonedDateTime.toString({ smallestUnit: toStringUnits, calendarName, timeZoneName, fractionalSecondDigits, offset: toStringOffset, roundingMode }) : string
>                                                                                                                                                  : ^^^^^^
>zonedDateTime.toString : (options?: Temporal.ZonedDateTimeToStringOptions) => string
>                       : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>toString : (options?: Temporal.ZonedDateTimeToStringOptions) => string
>         : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      
>{ smallestUnit: toStringUnits, calendarName, timeZoneName, fractionalSecondDigits, offset: toStringOffset, roundingMode } : { smallestUnit: "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined; calendarName: "auto" | "always" | "never" | "critical" | undefined; timeZoneName: "auto" | "never" | "critical" | undefined; fractionalSecondDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined; offset: "auto" | "never" | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }

>smallestUnit : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toStringUnits : "minutes" | "seconds" | "milliseconds" | "microseconds" | "nanoseconds" | "minute" | "second" | "millisecond" | "microsecond" | "nanosecond" | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarName : "auto" | "always" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneName : "auto" | "never" | "critical" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fractionalSecondDigits : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>offset : "auto" | "never" | undefined
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toStringOffset : "auto" | "never" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.until(zonedDateTimeLike);
>zonedDateTime.until(zonedDateTimeLike) : Temporal.Duration
>                                       : ^^^^^^^^^^^^^^^^^
>zonedDateTime.until : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.until(zonedDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode });
>zonedDateTime.until(zonedDateTimeLike, { smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode }) : Temporal.Duration
>                                                                                                                                           : ^^^^^^^^^^^^^^^^^
>zonedDateTime.until : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>                    : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>until : (other: Temporal.ZonedDateTimeLike, options?: Temporal.RoundingOptionsWithLargestUnit<Temporal.DateUnit | Temporal.TimeUnit>) => Temporal.Duration
>      : ^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTimeLike : Temporal.ZonedDateTimeLikeObject
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ smallestUnit: anyRoundingUnits, largestUnit: anyRoundingUnits, roundingIncrement, roundingMode } : { smallestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; largestUnit: Temporal.DateUnit | Temporal.TimeUnit | undefined; roundingIncrement: number | undefined; roundingMode: "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined; }
>                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>smallestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>largestUnit : Temporal.DateUnit | Temporal.TimeUnit | undefined
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anyRoundingUnits : Temporal.DateUnit | Temporal.TimeUnit | undefined
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>roundingIncrement : number | undefined
>                  : ^^^^^^^^^^^^^^^^^^
>roundingMode : "ceil" | "floor" | "expand" | "trunc" | "halfCeil" | "halfFloor" | "halfExpand" | "halfTrunc" | "halfEven" | undefined
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond, offset });
>zonedDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond, offset }) : Temporal.ZonedDateTime
>                                                                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.with : (zonedDateTimeLike: Temporal.PartialTemporalLike<Temporal.ZonedDateTimeLikeObject>, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                   : ^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>with : (zonedDateTimeLike: Temporal.PartialTemporalLike<Temporal.ZonedDateTimeLikeObject>, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>     : ^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond, offset } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; day: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; offset: string; }
>                                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^
>hour : number
>     : ^^^^^^
>minute : number
>       : ^^^^^^
>second : number
>       : ^^^^^^
>millisecond : number
>            : ^^^^^^
>microsecond : number
>            : ^^^^^^
>nanosecond : number
>           : ^^^^^^
>offset : string
>       : ^^^^^^

    zonedDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond, offset }, { disambiguation, offset: toZonedDateTimeOffset, overflow });
>zonedDateTime.with({ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond, offset }, { disambiguation, offset: toZonedDateTimeOffset, overflow }) : Temporal.ZonedDateTime
>                                                                                                                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.with : (zonedDateTimeLike: Temporal.PartialTemporalLike<Temporal.ZonedDateTimeLikeObject>, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>                   : ^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>with : (zonedDateTimeLike: Temporal.PartialTemporalLike<Temporal.ZonedDateTimeLikeObject>, options?: Temporal.ZonedDateTimeToZonedDateTimeOptions) => Temporal.ZonedDateTime
>     : ^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ year, era, eraYear, month, monthCode, day, hour, minute, second, millisecond, microsecond, nanosecond, offset } : { year: number; era: string | undefined; eraYear: number | undefined; month: number; monthCode: string; day: number; hour: number; minute: number; second: number; millisecond: number; microsecond: number; nanosecond: number; offset: string; }
>                                                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>era : string | undefined
>    : ^^^^^^^^^^^^^^^^^^
>eraYear : number | undefined
>        : ^^^^^^^^^^^^^^^^^^
>month : number
>      : ^^^^^^
>monthCode : string
>          : ^^^^^^
>day : number
>    : ^^^^^^
>hour : number
>     : ^^^^^^
>minute : number
>       : ^^^^^^
>second : number
>       : ^^^^^^
>millisecond : number
>            : ^^^^^^
>microsecond : number
>            : ^^^^^^
>nanosecond : number
>           : ^^^^^^
>offset : string
>       : ^^^^^^
>{ disambiguation, offset: toZonedDateTimeOffset, overflow } : { disambiguation: "compatible" | "earlier" | "later" | "reject" | undefined; offset: "reject" | "use" | "ignore" | "prefer" | undefined; overflow: "reject" | "constrain" | undefined; }
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>disambiguation : "compatible" | "earlier" | "later" | "reject" | undefined
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>offset : "reject" | "use" | "ignore" | "prefer" | undefined
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>toZonedDateTimeOffset : "reject" | "use" | "ignore" | "prefer" | undefined
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>overflow : "reject" | "constrain" | undefined
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.withCalendar(calendarLike);
>zonedDateTime.withCalendar(calendarLike) : Temporal.ZonedDateTime
>                                         : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.withCalendar : (calendar: Temporal.CalendarLike) => Temporal.ZonedDateTime
>                           : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withCalendar : (calendar: Temporal.CalendarLike) => Temporal.ZonedDateTime
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>calendarLike : Temporal.CalendarLike
>             : ^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.withPlainTime();
>zonedDateTime.withPlainTime() : Temporal.ZonedDateTime
>                              : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.ZonedDateTime
>                            : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.ZonedDateTime
>              : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    zonedDateTime.withPlainTime(plainTime);
>zonedDateTime.withPlainTime(plainTime) : Temporal.ZonedDateTime
>                                       : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.ZonedDateTime
>                            : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withPlainTime : (plainTime?: Temporal.PlainTimeLike) => Temporal.ZonedDateTime
>              : ^         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>plainTime : Temporal.PlainTime
>          : ^^^^^^^^^^^^^^^^^^

    zonedDateTime.withTimeZone(timeZoneLike);
>zonedDateTime.withTimeZone(timeZoneLike) : Temporal.ZonedDateTime
>                                         : ^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime.withTimeZone : (timeZone: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>                           : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>zonedDateTime : Temporal.ZonedDateTime
>              : ^^^^^^^^^^^^^^^^^^^^^^
>withTimeZone : (timeZone: Temporal.TimeZoneLike) => Temporal.ZonedDateTime
>             : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>timeZoneLike : string
>             : ^^^^^^
}

