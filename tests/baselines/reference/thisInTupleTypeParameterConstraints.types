//// [tests/cases/compiler/thisInTupleTypeParameterConstraints.ts] ////

=== thisInTupleTypeParameterConstraints.ts ===
interface Boolean {}
interface IArguments {}
interface Function {}
interface Number {}
interface RegExp {}
interface Object {}
interface String {}

interface Array<T> {
    // 4 methods will run out of memory if this-types are not instantiated
    // correctly for tuple types that are type parameter constraints
    map<U>(arg: this): void;
>map : { <U_1>(callbackfn: (value: T, index: number, array: T[]) => U_1, thisArg?: any): U_1[]; <U>(arg: this): void; }
>    : ^^^^^^^^          ^^                                            ^^       ^^^   ^^^     ^^^ ^^   ^^    ^^^    ^^^
>arg : this
>    : ^^^^

    reduceRight<U>(arg: this): void;
>reduceRight : { (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U_1>(callbackfn: (previousValue: U_1, currentValue: T, currentIndex: number, array: T[]) => U_1, initialValue: U_1): U_1; <U>(arg: this): void; }
>            : ^^^          ^^                                                                          ^^^ ^^^          ^^                                                                          ^^            ^^ ^^^ ^^^^^^^^          ^^                                                                              ^^            ^^   ^^^   ^^^ ^^   ^^    ^^^    ^^^
>arg : this
>    : ^^^^

    reduce<U>(arg: this): void;
>reduce : { (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U_1>(callbackfn: (previousValue: U_1, currentValue: T, currentIndex: number, array: T[]) => U_1, initialValue: U_1): U_1; <U>(arg: this): void; }
>       : ^^^          ^^                                                                          ^^^ ^^^          ^^                                                                          ^^            ^^ ^^^ ^^^^^^^^          ^^                                                                              ^^            ^^   ^^^   ^^^ ^^   ^^    ^^^    ^^^
>arg : this
>    : ^^^^

    reduce2<U>(arg: this): void;
>reduce2 : <U>(arg: this) => void
>        : ^ ^^   ^^    ^^^^^    
>arg : this
>    : ^^^^
}

declare function f<T extends [(x: number) => number]>(a: T): void;
>f : <T extends [(x: number) => number]>(a: T) => void
>  : ^ ^^^^^^^^^                       ^^ ^^ ^^^^^    
>x : number
>  : ^^^^^^
>a : T
>  : ^

let x: [(x: number) => number];
>x : [(x: number) => number]
>  : ^^ ^^      ^^^^^      ^
>x : number
>  : ^^^^^^

f(x);
>f(x) : void
>     : ^^^^
>f : <T extends [(x: number) => number]>(a: T) => void
>  : ^ ^^^^^^^^^                       ^^ ^^ ^^^^^    
>x : [(x: number) => number]
>  : ^^ ^^      ^^^^^      ^

