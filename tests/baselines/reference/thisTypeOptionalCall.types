//// [tests/cases/conformance/types/thisType/thisTypeOptionalCall.ts] ////

=== thisTypeOptionalCall.ts ===
function maybeBind<T, A extends any[], R>(obj: T, fn: ((this: T, ...args: A) => R) | undefined): ((...args: A) => R) | undefined {
>maybeBind : <T, A extends any[], R>(obj: T, fn: ((this: T, ...args: A) => R) | undefined) => ((...args: A) => R) | undefined
>          : ^ ^^ ^^^^^^^^^     ^^ ^^   ^^ ^^  ^^                                        ^^^^^                               
>obj : T
>    : ^
>fn : ((this: T, ...args: A) => R) | undefined
>   : ^^    ^^ ^^^^^    ^^ ^^^^^ ^^^^^^^^^^^^^
>this : T
>     : ^
>args : A
>     : ^
>args : A
>     : ^

    return fn?.bind(obj);
>fn?.bind(obj) : any
>fn?.bind : ((this: Function, thisArg: any, ...argArray: any[]) => any) | undefined
>         : ^^    ^^        ^^       ^^   ^^^^^        ^^     ^^^^^   ^^^^^^^^^^^^^
>fn : ((this: T, ...args: A) => R) | undefined
>   : ^^    ^^ ^^^^^    ^^ ^^^^^ ^^^^^^^^^^^^^
>bind : ((this: Function, thisArg: any, ...argArray: any[]) => any) | undefined
>     : ^^    ^^        ^^       ^^   ^^^^^        ^^     ^^^^^   ^^^^^^^^^^^^^
>obj : T
>    : ^
}
