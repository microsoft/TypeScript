//// [tests/cases/conformance/types/thisType/thisTypeSyntacticContext.ts] ////

=== thisTypeSyntacticContext.ts ===
function f(this: { n: number }) {
>f : (this: { n: number; }) => void
>  : ^    ^^              ^^^^^^^^^
>this : { n: number; }
>     : ^^^^^      ^^^
>n : number
>  : ^^^^^^
}

const o: { n: number, test?: (this: { n: number }) => void } = { n: 1 }
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>n : number
>  : ^^^^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    
>this : { n: number; }
>     : ^^^^^      ^^^
>n : number
>  : ^^^^^^
>{ n: 1 } : { n: number; }
>         : ^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^
>1 : 1
>  : ^

o.test = f
>o.test = f : (this: { n: number; }) => void
>           : ^    ^^              ^^^^^^^^^
>o.test : (this: { n: number; }) => void
>       : ^    ^^              ^^^^^    
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    
>f : (this: { n: number; }) => void
>  : ^    ^^              ^^^^^^^^^

o.test();
>o.test() : void
>         : ^^^^
>o.test : (this: { n: number; }) => void
>       : ^    ^^              ^^^^^    
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    

o!.test();
>o!.test() : void
>          : ^^^^
>o!.test : (this: { n: number; }) => void
>        : ^    ^^              ^^^^^    
>o! : { n: number; test?: (this: { n: number; }) => void; }
>   : ^^^^^      ^^^^^^^^^                              ^^^
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    

o.test!();
>o.test!() : void
>          : ^^^^
>o.test! : (this: { n: number; }) => void
>        : ^    ^^              ^^^^^    
>o.test : (this: { n: number; }) => void
>       : ^    ^^              ^^^^^    
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    

o.test!!!();
>o.test!!!() : void
>            : ^^^^
>o.test!!! : (this: { n: number; }) => void
>          : ^    ^^              ^^^^^    
>o.test!! : (this: { n: number; }) => void
>         : ^    ^^              ^^^^^    
>o.test! : (this: { n: number; }) => void
>        : ^    ^^              ^^^^^    
>o.test : (this: { n: number; }) => void
>       : ^    ^^              ^^^^^    
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    

(o.test!)();
>(o.test!)() : void
>            : ^^^^
>(o.test!) : (this: { n: number; }) => void
>          : ^    ^^              ^^^^^    
>o.test! : (this: { n: number; }) => void
>        : ^    ^^              ^^^^^    
>o.test : (this: { n: number; }) => void
>       : ^    ^^              ^^^^^    
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    

(o.test)();
>(o.test)() : void
>           : ^^^^
>(o.test) : (this: { n: number; }) => void
>         : ^    ^^              ^^^^^    
>o.test : (this: { n: number; }) => void
>       : ^    ^^              ^^^^^    
>o : { n: number; test?: (this: { n: number; }) => void; }
>  : ^^^^^      ^^^^^^^^^                              ^^^
>test : (this: { n: number; }) => void
>     : ^    ^^              ^^^^^    


