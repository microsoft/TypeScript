//// [tests/cases/compiler/thislessFunctionsNotContextSensitive3.ts] ////

=== thislessFunctionsNotContextSensitive3.ts ===
declare class Editor {
>Editor : Symbol(Editor, Decl(thislessFunctionsNotContextSensitive3.ts, 0, 0))

  private _editor;
>_editor : Symbol(Editor._editor, Decl(thislessFunctionsNotContextSensitive3.ts, 0, 22))
}

declare class Plugin {
>Plugin : Symbol(Plugin, Decl(thislessFunctionsNotContextSensitive3.ts, 2, 1))

  private _plugin;
>_plugin : Symbol(Plugin._plugin, Decl(thislessFunctionsNotContextSensitive3.ts, 4, 22))
}

type ParentConfig<T> = Partial<{
>ParentConfig : Symbol(ParentConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 6, 1))
>T : Symbol(T, Decl(thislessFunctionsNotContextSensitive3.ts, 8, 18))
>Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))

  [P in keyof T]: Required<T>[P] extends (...args: any) => any
>P : Symbol(P, Decl(thislessFunctionsNotContextSensitive3.ts, 9, 3))
>T : Symbol(T, Decl(thislessFunctionsNotContextSensitive3.ts, 8, 18))
>Required : Symbol(Required, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(thislessFunctionsNotContextSensitive3.ts, 8, 18))
>P : Symbol(P, Decl(thislessFunctionsNotContextSensitive3.ts, 9, 3))
>args : Symbol(args, Decl(thislessFunctionsNotContextSensitive3.ts, 9, 42))

    ? (...args: Parameters<Required<T>[P]>) => ReturnType<Required<T>[P]>
>args : Symbol(args, Decl(thislessFunctionsNotContextSensitive3.ts, 10, 7))
>Parameters : Symbol(Parameters, Decl(lib.es5.d.ts, --, --))
>Required : Symbol(Required, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(thislessFunctionsNotContextSensitive3.ts, 8, 18))
>P : Symbol(P, Decl(thislessFunctionsNotContextSensitive3.ts, 9, 3))
>ReturnType : Symbol(ReturnType, Decl(lib.es5.d.ts, --, --))
>Required : Symbol(Required, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(thislessFunctionsNotContextSensitive3.ts, 8, 18))
>P : Symbol(P, Decl(thislessFunctionsNotContextSensitive3.ts, 9, 3))

    : T[P];
>T : Symbol(T, Decl(thislessFunctionsNotContextSensitive3.ts, 8, 18))
>P : Symbol(P, Decl(thislessFunctionsNotContextSensitive3.ts, 9, 3))

}>;

interface ExtendableConfig<
>ExtendableConfig : Symbol(ExtendableConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 12, 3))

  Options = any,
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 14, 27))

  Config extends
>Config : Symbol(Config, Decl(thislessFunctionsNotContextSensitive3.ts, 15, 16))

    | ExtensionConfig<Options>
>ExtensionConfig : Symbol(ExtensionConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 29, 1))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 14, 27))

    | ExtendableConfig<Options> = ExtendableConfig<Options, any>,
>ExtendableConfig : Symbol(ExtendableConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 12, 3))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 14, 27))
>ExtendableConfig : Symbol(ExtendableConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 12, 3))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 14, 27))

> {
  name: string;
>name : Symbol(ExtendableConfig.name, Decl(thislessFunctionsNotContextSensitive3.ts, 19, 3))

  addOptions?: (this: {
>addOptions : Symbol(ExtendableConfig.addOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 20, 15))
>this : Symbol(this, Decl(thislessFunctionsNotContextSensitive3.ts, 21, 16))

    name: string;
>name : Symbol(name, Decl(thislessFunctionsNotContextSensitive3.ts, 21, 23))

    parent: ParentConfig<Config>["addOptions"];
>parent : Symbol(parent, Decl(thislessFunctionsNotContextSensitive3.ts, 22, 17))
>ParentConfig : Symbol(ParentConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 6, 1))
>Config : Symbol(Config, Decl(thislessFunctionsNotContextSensitive3.ts, 15, 16))

  }) => Options;
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 14, 27))

  addProseMirrorPlugins?: (this: {
>addProseMirrorPlugins : Symbol(ExtendableConfig.addProseMirrorPlugins, Decl(thislessFunctionsNotContextSensitive3.ts, 24, 16))
>this : Symbol(this, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 27))

    options: Options;
>options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 34))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 14, 27))

    editor: Editor;
>editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 26, 21))
>Editor : Symbol(Editor, Decl(thislessFunctionsNotContextSensitive3.ts, 0, 0))

  }) => Plugin[];
>Plugin : Symbol(Plugin, Decl(thislessFunctionsNotContextSensitive3.ts, 2, 1))
}

interface ExtensionConfig<Options = any>
>ExtensionConfig : Symbol(ExtensionConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 29, 1))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 31, 26))

  extends ExtendableConfig<Options, ExtensionConfig<Options>> {}
>ExtendableConfig : Symbol(ExtendableConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 12, 3))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 31, 26))
>ExtensionConfig : Symbol(ExtensionConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 29, 1))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 31, 26))

declare class Extension<Options = any> {
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 34, 24))

  _options: Options;
>_options : Symbol(Extension._options, Decl(thislessFunctionsNotContextSensitive3.ts, 34, 40))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 34, 24))

  static create<O = any>(config: Partial<ExtensionConfig<O>>): Extension<O>;
>create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))
>O : Symbol(O, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 16))
>config : Symbol(config, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 25))
>Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
>ExtensionConfig : Symbol(ExtensionConfig, Decl(thislessFunctionsNotContextSensitive3.ts, 29, 1))
>O : Symbol(O, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 16))
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>O : Symbol(O, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 16))

  configure(options?: Partial<Options>): Extension<Options>;
>configure : Symbol(Extension.configure, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 76))
>options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 39, 12))
>Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 34, 24))
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>Options : Symbol(Options, Decl(thislessFunctionsNotContextSensitive3.ts, 34, 24))
}

interface SuggestionOptions {
>SuggestionOptions : Symbol(SuggestionOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 40, 1))

  editor: Editor;
>editor : Symbol(SuggestionOptions.editor, Decl(thislessFunctionsNotContextSensitive3.ts, 42, 29))
>Editor : Symbol(Editor, Decl(thislessFunctionsNotContextSensitive3.ts, 0, 0))

  char?: string;
>char : Symbol(SuggestionOptions.char, Decl(thislessFunctionsNotContextSensitive3.ts, 43, 17))
}

declare function Suggestion(options: SuggestionOptions): Plugin;
>Suggestion : Symbol(Suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 45, 1))
>options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 47, 28))
>SuggestionOptions : Symbol(SuggestionOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 40, 1))
>Plugin : Symbol(Plugin, Decl(thislessFunctionsNotContextSensitive3.ts, 2, 1))

Extension.create({
>Extension.create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))

  name: "slash-command",
>name : Symbol(name, Decl(thislessFunctionsNotContextSensitive3.ts, 49, 18))

  addOptions() {
>addOptions : Symbol(addOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 50, 24))

    return {
      suggestion: {
>suggestion : Symbol(suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 52, 12))

        char: "/",
>char : Symbol(char, Decl(thislessFunctionsNotContextSensitive3.ts, 53, 19))

      } as SuggestionOptions,
>SuggestionOptions : Symbol(SuggestionOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 40, 1))

    };
  },
  addProseMirrorPlugins() {
>addProseMirrorPlugins : Symbol(addProseMirrorPlugins, Decl(thislessFunctionsNotContextSensitive3.ts, 57, 4))

    return [
      Suggestion({
>Suggestion : Symbol(Suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 45, 1))

        editor: this.editor, // error
>editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 60, 18))
>this.editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 26, 21))
>this : Symbol(this, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 27))
>editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 26, 21))

        ...this.options.suggestion,
>this.options.suggestion : Symbol(suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 52, 12))
>this.options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 34))
>this : Symbol(this, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 27))
>options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 34))
>suggestion : Symbol(suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 52, 12))

      }),
    ];
  },
});

Extension.create({
>Extension.create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))

  name: "slash-command",
>name : Symbol(name, Decl(thislessFunctionsNotContextSensitive3.ts, 68, 18))

  addOptions: () => {
>addOptions : Symbol(addOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 69, 24))

    return {
      suggestion: {
>suggestion : Symbol(suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 71, 12))

        char: "/",
>char : Symbol(char, Decl(thislessFunctionsNotContextSensitive3.ts, 72, 19))

      } as SuggestionOptions,
>SuggestionOptions : Symbol(SuggestionOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 40, 1))

    };
  },
  addProseMirrorPlugins() {
>addProseMirrorPlugins : Symbol(addProseMirrorPlugins, Decl(thislessFunctionsNotContextSensitive3.ts, 76, 4))

    return [
      Suggestion({
>Suggestion : Symbol(Suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 45, 1))

        editor: this.editor, // error
>editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 79, 18))
>this.editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 26, 21))
>this : Symbol(this, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 27))
>editor : Symbol(editor, Decl(thislessFunctionsNotContextSensitive3.ts, 26, 21))

        ...this.options.suggestion,
>this.options.suggestion : Symbol(suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 71, 12))
>this.options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 34))
>this : Symbol(this, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 27))
>options : Symbol(options, Decl(thislessFunctionsNotContextSensitive3.ts, 25, 34))
>suggestion : Symbol(suggestion, Decl(thislessFunctionsNotContextSensitive3.ts, 71, 12))

      }),
    ];
  },
});

const parentExtension = Extension.create({
>parentExtension : Symbol(parentExtension, Decl(thislessFunctionsNotContextSensitive3.ts, 87, 5))
>Extension.create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))

  name: "parentExtension",
>name : Symbol(name, Decl(thislessFunctionsNotContextSensitive3.ts, 87, 42))

  addOptions() {
>addOptions : Symbol(addOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 88, 26))

    return { parent: "exists", overwrite: "parent" };
>parent : Symbol(parent, Decl(thislessFunctionsNotContextSensitive3.ts, 90, 12))
>overwrite : Symbol(overwrite, Decl(thislessFunctionsNotContextSensitive3.ts, 90, 30))

  },
});

const childExtension = parentExtension.configure({
>childExtension : Symbol(childExtension, Decl(thislessFunctionsNotContextSensitive3.ts, 94, 5))
>parentExtension.configure : Symbol(Extension.configure, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 76))
>parentExtension : Symbol(parentExtension, Decl(thislessFunctionsNotContextSensitive3.ts, 87, 5))
>configure : Symbol(Extension.configure, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 76))

  child: "exists-too", // error
>child : Symbol(child, Decl(thislessFunctionsNotContextSensitive3.ts, 94, 50))

  overwrite: "child",
>overwrite : Symbol(overwrite, Decl(thislessFunctionsNotContextSensitive3.ts, 95, 22))

});

const parentExtension2 = Extension.create({
>parentExtension2 : Symbol(parentExtension2, Decl(thislessFunctionsNotContextSensitive3.ts, 99, 5))
>Extension.create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))
>Extension : Symbol(Extension, Decl(thislessFunctionsNotContextSensitive3.ts, 32, 64))
>create : Symbol(Extension.create, Decl(thislessFunctionsNotContextSensitive3.ts, 35, 20))

  name: "parentExtension2",
>name : Symbol(name, Decl(thislessFunctionsNotContextSensitive3.ts, 99, 43))

  addOptions: () => {
>addOptions : Symbol(addOptions, Decl(thislessFunctionsNotContextSensitive3.ts, 100, 27))

    return { parent: "exists", overwrite: "parent" };
>parent : Symbol(parent, Decl(thislessFunctionsNotContextSensitive3.ts, 102, 12))
>overwrite : Symbol(overwrite, Decl(thislessFunctionsNotContextSensitive3.ts, 102, 30))

  },
});

const childExtension2 = parentExtension2.configure({
>childExtension2 : Symbol(childExtension2, Decl(thislessFunctionsNotContextSensitive3.ts, 106, 5))
>parentExtension2.configure : Symbol(Extension.configure, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 76))
>parentExtension2 : Symbol(parentExtension2, Decl(thislessFunctionsNotContextSensitive3.ts, 99, 5))
>configure : Symbol(Extension.configure, Decl(thislessFunctionsNotContextSensitive3.ts, 37, 76))

  child: "exists-too", // error
>child : Symbol(child, Decl(thislessFunctionsNotContextSensitive3.ts, 106, 52))

  overwrite: "child",
>overwrite : Symbol(overwrite, Decl(thislessFunctionsNotContextSensitive3.ts, 107, 22))

});

export {};

