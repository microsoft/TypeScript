//// [tests/cases/compiler/thislessFunctionsNotContextSensitive3.ts] ////

=== thislessFunctionsNotContextSensitive3.ts ===
declare class Editor {
>Editor : Editor
>       : ^^^^^^

  private _editor;
>_editor : any
>        : ^^^
}

declare class Plugin {
>Plugin : Plugin
>       : ^^^^^^

  private _plugin;
>_plugin : any
>        : ^^^
}

type ParentConfig<T> = Partial<{
>ParentConfig : Partial<{ [P in keyof T]: Required<T>[P] extends (...args: any) => any ? (...args: Parameters<Required<T>[P]>) => ReturnType<Required<T>[P]> : T[P]; }>
>             : ^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^   ^^^^^   ^^^^^^^    ^^                          ^^^^^                          ^^^^^^^^^^^

  [P in keyof T]: Required<T>[P] extends (...args: any) => any
>args : any
>     : ^^^

    ? (...args: Parameters<Required<T>[P]>) => ReturnType<Required<T>[P]>
>args : Parameters<Required<T>[P]>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^

    : T[P];
}>;

interface ExtendableConfig<
  Options = any,
  Config extends
    | ExtensionConfig<Options>
    | ExtendableConfig<Options> = ExtendableConfig<Options, any>,
> {
  name: string;
>name : string
>     : ^^^^^^

  addOptions?: (this: {
>addOptions : ((this: { name: string; parent: ParentConfig<Config>["addOptions"]; }) => Options) | undefined
>           : ^^    ^^                                                             ^^^^^       ^^^^^^^^^^^^^
>this : { name: string; parent: ParentConfig<Config>["addOptions"]; }
>     : ^^^^^^^^      ^^^^^^^^^^                                  ^^^

    name: string;
>name : string
>     : ^^^^^^

    parent: ParentConfig<Config>["addOptions"];
>parent : Partial<{ [P in keyof Config]: Required<Config>[P] extends (...args: any) => any ? (...args: Parameters<Required<Config>[P]>) => ReturnType<Required<Config>[P]> : Config[P]; }>["addOptions"]
>       : ^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^   ^^^^^   ^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  }) => Options;
  addProseMirrorPlugins?: (this: {
>addProseMirrorPlugins : ((this: { options: Options; editor: Editor; }) => Plugin[]) | undefined
>                      : ^^    ^^                                     ^^^^^        ^^^^^^^^^^^^^
>this : { options: Options; editor: Editor; }
>     : ^^^^^^^^^^^       ^^^^^^^^^^      ^^^

    options: Options;
>options : Options
>        : ^^^^^^^

    editor: Editor;
>editor : Editor
>       : ^^^^^^

  }) => Plugin[];
}

interface ExtensionConfig<Options = any>
  extends ExtendableConfig<Options, ExtensionConfig<Options>> {}

declare class Extension<Options = any> {
>Extension : Extension<Options>
>          : ^^^^^^^^^^^^^^^^^^

  _options: Options;
>_options : Options
>         : ^^^^^^^

  static create<O = any>(config: Partial<ExtensionConfig<O>>): Extension<O>;
>create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>       : ^ ^^^^^^^^      ^^                           ^^^^^            
>config : Partial<ExtensionConfig<O>>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

  configure(options?: Partial<Options>): Extension<Options>;
>configure : (options?: Partial<Options>) => Extension<Options>
>          : ^       ^^^                ^^^^^                  
>options : Partial<Options> | undefined
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

interface SuggestionOptions {
  editor: Editor;
>editor : Editor
>       : ^^^^^^

  char?: string;
>char : string | undefined
>     : ^^^^^^^^^^^^^^^^^^
}

declare function Suggestion(options: SuggestionOptions): Plugin;
>Suggestion : (options: SuggestionOptions) => Plugin
>           : ^       ^^                 ^^^^^      
>options : SuggestionOptions
>        : ^^^^^^^^^^^^^^^^^

Extension.create({
>Extension.create({  name: "slash-command",  addOptions() {    return {      suggestion: {        char: "/",      } as SuggestionOptions,    };  },  addProseMirrorPlugins() {    return [      Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }),    ];  },}) : Extension<{ suggestion: SuggestionOptions; }>
>                                                                                                                                                                                                                                                                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^
>Extension.create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>                 : ^ ^^^^^^^^      ^^                           ^^^^^            
>Extension : typeof Extension
>          : ^^^^^^^^^^^^^^^^
>create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>       : ^ ^^^^^^^^      ^^                           ^^^^^            
>{  name: "slash-command",  addOptions() {    return {      suggestion: {        char: "/",      } as SuggestionOptions,    };  },  addProseMirrorPlugins() {    return [      Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }),    ];  },} : { name: string; addOptions(): { suggestion: SuggestionOptions; }; addProseMirrorPlugins(this: { options: { suggestion: SuggestionOptions; }; editor: Editor; }): Plugin[]; }
>                                                                                                                                                                                                                                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^

  name: "slash-command",
>name : string
>     : ^^^^^^
>"slash-command" : "slash-command"
>                : ^^^^^^^^^^^^^^^

  addOptions() {
>addOptions : () => { suggestion: SuggestionOptions; }
>           : ^^^^^^^^^^^^^^^^^^^^                 ^^^

    return {
>{      suggestion: {        char: "/",      } as SuggestionOptions,    } : { suggestion: SuggestionOptions; }
>                                                                         : ^^^^^^^^^^^^^^                 ^^^

      suggestion: {
>suggestion : SuggestionOptions
>           : ^^^^^^^^^^^^^^^^^
>{        char: "/",      } as SuggestionOptions : SuggestionOptions
>                                                : ^^^^^^^^^^^^^^^^^
>{        char: "/",      } : { char: string; }
>                           : ^^^^^^^^^^^^^^^^^

        char: "/",
>char : string
>     : ^^^^^^
>"/" : "/"
>    : ^^^

      } as SuggestionOptions,
    };
  },
  addProseMirrorPlugins() {
>addProseMirrorPlugins : (this: { options: { suggestion: SuggestionOptions; }; editor: Editor; }) => Plugin[]
>                      : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^

    return [
>[      Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }),    ] : Plugin[]
>                                                                                                          : ^^^^^^^^

      Suggestion({
>Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }) : Plugin
>                                                                                             : ^^^^^^
>Suggestion : (options: SuggestionOptions) => Plugin
>           : ^       ^^                 ^^^^^      
>{        editor: this.editor, // error        ...this.options.suggestion,      } : { editor: Editor; char?: string; }
>                                                                                 : ^^^^^^^^^^      ^^^^^^^^^      ^^^

        editor: this.editor, // error
>editor : Editor
>       : ^^^^^^
>this.editor : Editor
>            : ^^^^^^
>this : { options: { suggestion: SuggestionOptions; }; editor: Editor; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^
>editor : Editor
>       : ^^^^^^

        ...this.options.suggestion,
>this.options.suggestion : SuggestionOptions
>                        : ^^^^^^^^^^^^^^^^^
>this.options : { suggestion: SuggestionOptions; }
>             : ^^^^^^^^^^^^^^                 ^^^
>this : { options: { suggestion: SuggestionOptions; }; editor: Editor; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^
>options : { suggestion: SuggestionOptions; }
>        : ^^^^^^^^^^^^^^                 ^^^
>suggestion : SuggestionOptions
>           : ^^^^^^^^^^^^^^^^^

      }),
    ];
  },
});

Extension.create({
>Extension.create({  name: "slash-command",  addOptions: () => {    return {      suggestion: {        char: "/",      } as SuggestionOptions,    };  },  addProseMirrorPlugins() {    return [      Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }),    ];  },}) : Extension<{ suggestion: SuggestionOptions; }>
>                                                                                                                                                                                                                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^
>Extension.create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>                 : ^ ^^^^^^^^      ^^                           ^^^^^            
>Extension : typeof Extension
>          : ^^^^^^^^^^^^^^^^
>create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>       : ^ ^^^^^^^^      ^^                           ^^^^^            
>{  name: "slash-command",  addOptions: () => {    return {      suggestion: {        char: "/",      } as SuggestionOptions,    };  },  addProseMirrorPlugins() {    return [      Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }),    ];  },} : { name: string; addOptions: () => { suggestion: SuggestionOptions; }; addProseMirrorPlugins(this: { options: { suggestion: SuggestionOptions; }; editor: Editor; }): Plugin[]; }
>                                                                                                                                                                                                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^

  name: "slash-command",
>name : string
>     : ^^^^^^
>"slash-command" : "slash-command"
>                : ^^^^^^^^^^^^^^^

  addOptions: () => {
>addOptions : () => { suggestion: SuggestionOptions; }
>           : ^^^^^^^^^^^^^^^^^^^^                 ^^^
>() => {    return {      suggestion: {        char: "/",      } as SuggestionOptions,    };  } : () => { suggestion: SuggestionOptions; }
>                                                                                               : ^^^^^^^^^^^^^^^^^^^^                 ^^^

    return {
>{      suggestion: {        char: "/",      } as SuggestionOptions,    } : { suggestion: SuggestionOptions; }
>                                                                         : ^^^^^^^^^^^^^^                 ^^^

      suggestion: {
>suggestion : SuggestionOptions
>           : ^^^^^^^^^^^^^^^^^
>{        char: "/",      } as SuggestionOptions : SuggestionOptions
>                                                : ^^^^^^^^^^^^^^^^^
>{        char: "/",      } : { char: string; }
>                           : ^^^^^^^^^^^^^^^^^

        char: "/",
>char : string
>     : ^^^^^^
>"/" : "/"
>    : ^^^

      } as SuggestionOptions,
    };
  },
  addProseMirrorPlugins() {
>addProseMirrorPlugins : (this: { options: { suggestion: SuggestionOptions; }; editor: Editor; }) => Plugin[]
>                      : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^

    return [
>[      Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }),    ] : Plugin[]
>                                                                                                          : ^^^^^^^^

      Suggestion({
>Suggestion({        editor: this.editor, // error        ...this.options.suggestion,      }) : Plugin
>                                                                                             : ^^^^^^
>Suggestion : (options: SuggestionOptions) => Plugin
>           : ^       ^^                 ^^^^^      
>{        editor: this.editor, // error        ...this.options.suggestion,      } : { editor: Editor; char?: string; }
>                                                                                 : ^^^^^^^^^^      ^^^^^^^^^      ^^^

        editor: this.editor, // error
>editor : Editor
>       : ^^^^^^
>this.editor : Editor
>            : ^^^^^^
>this : { options: { suggestion: SuggestionOptions; }; editor: Editor; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^
>editor : Editor
>       : ^^^^^^

        ...this.options.suggestion,
>this.options.suggestion : SuggestionOptions
>                        : ^^^^^^^^^^^^^^^^^
>this.options : { suggestion: SuggestionOptions; }
>             : ^^^^^^^^^^^^^^                 ^^^
>this : { options: { suggestion: SuggestionOptions; }; editor: Editor; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^                 ^^^^^^^^^^^^^      ^^^
>options : { suggestion: SuggestionOptions; }
>        : ^^^^^^^^^^^^^^                 ^^^
>suggestion : SuggestionOptions
>           : ^^^^^^^^^^^^^^^^^

      }),
    ];
  },
});

const parentExtension = Extension.create({
>parentExtension : Extension<{ parent: string; overwrite: string; }>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Extension.create({  name: "parentExtension",  addOptions() {    return { parent: "exists", overwrite: "parent" };  },}) : Extension<{ parent: string; overwrite: string; }>
>                                                                                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Extension.create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>                 : ^ ^^^^^^^^      ^^                           ^^^^^            
>Extension : typeof Extension
>          : ^^^^^^^^^^^^^^^^
>create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>       : ^ ^^^^^^^^      ^^                           ^^^^^            
>{  name: "parentExtension",  addOptions() {    return { parent: "exists", overwrite: "parent" };  },} : { name: string; addOptions(): { parent: string; overwrite: string; }; }
>                                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  name: "parentExtension",
>name : string
>     : ^^^^^^
>"parentExtension" : "parentExtension"
>                  : ^^^^^^^^^^^^^^^^^

  addOptions() {
>addOptions : () => { parent: string; overwrite: string; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return { parent: "exists", overwrite: "parent" };
>{ parent: "exists", overwrite: "parent" } : { parent: string; overwrite: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parent : string
>       : ^^^^^^
>"exists" : "exists"
>         : ^^^^^^^^
>overwrite : string
>          : ^^^^^^
>"parent" : "parent"
>         : ^^^^^^^^

  },
});

const childExtension = parentExtension.configure({
>childExtension : Extension<{ parent: string; overwrite: string; }>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parentExtension.configure({  child: "exists-too", // error  overwrite: "child",}) : Extension<{ parent: string; overwrite: string; }>
>                                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parentExtension.configure : (options?: Partial<{ parent: string; overwrite: string; }> | undefined) => Extension<{ parent: string; overwrite: string; }>
>                          : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parentExtension : Extension<{ parent: string; overwrite: string; }>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>configure : (options?: Partial<{ parent: string; overwrite: string; }> | undefined) => Extension<{ parent: string; overwrite: string; }>
>          : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{  child: "exists-too", // error  overwrite: "child",} : { child: string; overwrite: string; }
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  child: "exists-too", // error
>child : string
>      : ^^^^^^
>"exists-too" : "exists-too"
>             : ^^^^^^^^^^^^

  overwrite: "child",
>overwrite : string
>          : ^^^^^^
>"child" : "child"
>        : ^^^^^^^

});

const parentExtension2 = Extension.create({
>parentExtension2 : Extension<{ parent: string; overwrite: string; }>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Extension.create({  name: "parentExtension2",  addOptions: () => {    return { parent: "exists", overwrite: "parent" };  },}) : Extension<{ parent: string; overwrite: string; }>
>                                                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Extension.create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>                 : ^ ^^^^^^^^      ^^                           ^^^^^            
>Extension : typeof Extension
>          : ^^^^^^^^^^^^^^^^
>create : <O = any>(config: Partial<ExtensionConfig<O>>) => Extension<O>
>       : ^ ^^^^^^^^      ^^                           ^^^^^            
>{  name: "parentExtension2",  addOptions: () => {    return { parent: "exists", overwrite: "parent" };  },} : { name: string; addOptions: () => { parent: string; overwrite: string; }; }
>                                                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  name: "parentExtension2",
>name : string
>     : ^^^^^^
>"parentExtension2" : "parentExtension2"
>                   : ^^^^^^^^^^^^^^^^^^

  addOptions: () => {
>addOptions : () => { parent: string; overwrite: string; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => {    return { parent: "exists", overwrite: "parent" };  } : () => { parent: string; overwrite: string; }
>                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return { parent: "exists", overwrite: "parent" };
>{ parent: "exists", overwrite: "parent" } : { parent: string; overwrite: string; }
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parent : string
>       : ^^^^^^
>"exists" : "exists"
>         : ^^^^^^^^
>overwrite : string
>          : ^^^^^^
>"parent" : "parent"
>         : ^^^^^^^^

  },
});

const childExtension2 = parentExtension2.configure({
>childExtension2 : Extension<{ parent: string; overwrite: string; }>
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parentExtension2.configure({  child: "exists-too", // error  overwrite: "child",}) : Extension<{ parent: string; overwrite: string; }>
>                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parentExtension2.configure : (options?: Partial<{ parent: string; overwrite: string; }> | undefined) => Extension<{ parent: string; overwrite: string; }>
>                           : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>parentExtension2 : Extension<{ parent: string; overwrite: string; }>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>configure : (options?: Partial<{ parent: string; overwrite: string; }> | undefined) => Extension<{ parent: string; overwrite: string; }>
>          : ^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{  child: "exists-too", // error  overwrite: "child",} : { child: string; overwrite: string; }
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  child: "exists-too", // error
>child : string
>      : ^^^^^^
>"exists-too" : "exists-too"
>             : ^^^^^^^^^^^^

  overwrite: "child",
>overwrite : string
>          : ^^^^^^
>"child" : "child"
>        : ^^^^^^^

});

export {};

