/package2/index.ts(2,16): error TS2354: This syntax requires an imported helper but module 'tslib' cannot be found.


==== /tsconfig.json (0 errors) ====
    {
        "compilerOptions": {
            "strict": true,
            "target": "ES2016",
            "importHelpers": true,
            "module": "commonjs",
        }
    }
    
==== /package1/index.ts (0 errors) ====
    export {};
    async function foo(): Promise<void> {}
    async function bar(): Promise<void> {}
    
==== /package2/index.ts (1 errors) ====
    export {};
    async function foo(): Promise<void> {}
                   ~~~
!!! error TS2354: This syntax requires an imported helper but module 'tslib' cannot be found.
==== /package1/node_modules/tslib/package.json (0 errors) ====
    {
        "name": "tslib",
        "main": "tslib.js",
        "typings": "tslib.d.ts"
    }
    
==== /package1/node_modules/tslib/tslib.d.ts (0 errors) ====
    /**
     * Converts a generator function into a pseudo-async function, by treating each `yield` as an `await`.
     *
     * @param thisArg The reference to use as the `this` value in the generator function
     * @param _arguments The optional arguments array
     * @param P The optional promise constructor argument, defaults to the `Promise` property of the global object.
     * @param generator The generator function
     */
    export declare function __awaiter(thisArg: any, _arguments: any, P: Function, generator: Function): any;
    
==== /package1/node_modules/tslib/tslib.js (0 errors) ====
    module.exports.__awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    