//// [tests/cases/conformance/jsx/tsxAttributeResolution3.tsx] ////

=== file.tsx ===
declare namespace JSX {
>JSX : Symbol(JSX, Decl(file.tsx, 0, 0))

	interface Element { }
>Element : Symbol(Element, Decl(file.tsx, 0, 23))

	interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 1, 22))

		test1: Attribs1;
>test1 : Symbol(IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>Attribs1 : Symbol(Attribs1, Decl(file.tsx, 5, 1))
	}
}
interface Attribs1 {
>Attribs1 : Symbol(Attribs1, Decl(file.tsx, 5, 1))

	x: string;
>x : Symbol(Attribs1.x, Decl(file.tsx, 6, 20))

	y?: number;
>y : Symbol(Attribs1.y, Decl(file.tsx, 7, 11))

	z?: string;
>z : Symbol(Attribs1.z, Decl(file.tsx, 8, 12))
}

// OK
var obj1 = { x: 'foo' };
>obj1 : Symbol(obj1, Decl(file.tsx, 13, 3))
>x : Symbol(x, Decl(file.tsx, 13, 12))

<test1 {...obj1} />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj1 : Symbol(obj1, Decl(file.tsx, 13, 3))

// Error, x is not string
var obj2 = { x: 32 };
>obj2 : Symbol(obj2, Decl(file.tsx, 17, 3))
>x : Symbol(x, Decl(file.tsx, 17, 12))

<test1 {...obj2} />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj2 : Symbol(obj2, Decl(file.tsx, 17, 3))

// Error, x is missing
var obj3 = { y: 32 };
>obj3 : Symbol(obj3, Decl(file.tsx, 21, 3))
>y : Symbol(y, Decl(file.tsx, 21, 12))

<test1 {...obj3} />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj3 : Symbol(obj3, Decl(file.tsx, 21, 3))

// OK
var obj4 = { x: 32, y: 32 };
>obj4 : Symbol(obj4, Decl(file.tsx, 25, 3))
>x : Symbol(x, Decl(file.tsx, 25, 12))
>y : Symbol(y, Decl(file.tsx, 25, 19))

<test1 {...obj4} x="ok" />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj4 : Symbol(obj4, Decl(file.tsx, 25, 3))
>x : Symbol(x, Decl(file.tsx, 26, 16))

// Error
var obj5 = { x: 32, y: 32 };
>obj5 : Symbol(obj5, Decl(file.tsx, 29, 3))
>x : Symbol(x, Decl(file.tsx, 29, 12))
>y : Symbol(y, Decl(file.tsx, 29, 19))

<test1 x="ok" {...obj5} />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>x : Symbol(x, Decl(file.tsx, 30, 6))
>obj5 : Symbol(obj5, Decl(file.tsx, 29, 3))

// Ok
var obj6 = { x: 'ok', y: 32, extra: 100 };
>obj6 : Symbol(obj6, Decl(file.tsx, 33, 3))
>x : Symbol(x, Decl(file.tsx, 33, 12))
>y : Symbol(y, Decl(file.tsx, 33, 21))
>extra : Symbol(extra, Decl(file.tsx, 33, 28))

<test1 {...obj6} />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj6 : Symbol(obj6, Decl(file.tsx, 33, 3))

// OK (spread override)
var obj7 = { x: 'foo' };
>obj7 : Symbol(obj7, Decl(file.tsx, 37, 3))
>x : Symbol(x, Decl(file.tsx, 37, 12))

<test1 x={32} {...obj7} />
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>x : Symbol(x, Decl(file.tsx, 38, 6))
>obj7 : Symbol(obj7, Decl(file.tsx, 37, 3))

