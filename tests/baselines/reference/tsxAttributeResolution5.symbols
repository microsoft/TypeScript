//// [tests/cases/conformance/jsx/tsxAttributeResolution5.tsx] ////

=== file.tsx ===
declare namespace JSX {
>JSX : Symbol(JSX, Decl(file.tsx, 0, 0))

	interface Element { }
>Element : Symbol(Element, Decl(file.tsx, 0, 23))

	interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 1, 22))

		test1: Attribs1;
>test1 : Symbol(IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>Attribs1 : Symbol(Attribs1, Decl(file.tsx, 6, 1))

		test2: Attribs2;
>test2 : Symbol(IntrinsicElements.test2, Decl(file.tsx, 3, 18))
>Attribs2 : Symbol(Attribs2, Decl(file.tsx, 9, 1))
	}
}
interface Attribs1 {
>Attribs1 : Symbol(Attribs1, Decl(file.tsx, 6, 1))

	x: string;
>x : Symbol(Attribs1.x, Decl(file.tsx, 7, 20))
}

interface Attribs2 {
>Attribs2 : Symbol(Attribs2, Decl(file.tsx, 9, 1))

	toString(): string;
>toString : Symbol(Attribs2.toString, Decl(file.tsx, 11, 20))
}

function make1<T extends {x: string}> (obj: T) {
>make1 : Symbol(make1, Decl(file.tsx, 13, 1))
>T : Symbol(T, Decl(file.tsx, 15, 15))
>x : Symbol(x, Decl(file.tsx, 15, 26))
>obj : Symbol(obj, Decl(file.tsx, 15, 39))
>T : Symbol(T, Decl(file.tsx, 15, 15))

	return <test1 {...obj} />; // OK
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj : Symbol(obj, Decl(file.tsx, 15, 39))
}

function make2<T extends {x: number}> (obj: T) {
>make2 : Symbol(make2, Decl(file.tsx, 17, 1))
>T : Symbol(T, Decl(file.tsx, 19, 15))
>x : Symbol(x, Decl(file.tsx, 19, 26))
>obj : Symbol(obj, Decl(file.tsx, 19, 39))
>T : Symbol(T, Decl(file.tsx, 19, 15))

	return <test1 {...obj} />; // Error (x is number, not string)
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj : Symbol(obj, Decl(file.tsx, 19, 39))
}

function make3<T extends {y: string}> (obj: T) {
>make3 : Symbol(make3, Decl(file.tsx, 21, 1))
>T : Symbol(T, Decl(file.tsx, 23, 15))
>y : Symbol(y, Decl(file.tsx, 23, 26))
>obj : Symbol(obj, Decl(file.tsx, 23, 39))
>T : Symbol(T, Decl(file.tsx, 23, 15))

	return <test1 {...obj} />; // Error, missing x
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>obj : Symbol(obj, Decl(file.tsx, 23, 39))
}


<test1 {...{}} />; // Error, missing x
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))

<test2 {...{}} />; // Error, missing toString
>test2 : Symbol(JSX.IntrinsicElements.test2, Decl(file.tsx, 3, 18))

