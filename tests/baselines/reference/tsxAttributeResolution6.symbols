//// [tests/cases/conformance/jsx/tsxAttributeResolution6.tsx] ////

=== file.tsx ===
declare namespace JSX {
>JSX : Symbol(JSX, Decl(file.tsx, 0, 0))

	interface Element { }
>Element : Symbol(Element, Decl(file.tsx, 0, 23))

	interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 1, 22))

		test1: { n?: boolean; s?: string};
>test1 : Symbol(IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>n : Symbol(n, Decl(file.tsx, 3, 10))
>s : Symbol(s, Decl(file.tsx, 3, 23))

		test2: { n: boolean; };
>test2 : Symbol(IntrinsicElements.test2, Decl(file.tsx, 3, 36))
>n : Symbol(n, Decl(file.tsx, 4, 10))
	}
}

// Error
<test1 s />;
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>s : Symbol(s, Decl(file.tsx, 9, 6))

<test1 n='true' />;
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>n : Symbol(n, Decl(file.tsx, 10, 6))

<test2 />;
>test2 : Symbol(JSX.IntrinsicElements.test2, Decl(file.tsx, 3, 36))

// OK
<test1 n />;
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>n : Symbol(n, Decl(file.tsx, 14, 6))

<test1 n={false} />;
>test1 : Symbol(JSX.IntrinsicElements.test1, Decl(file.tsx, 2, 30))
>n : Symbol(n, Decl(file.tsx, 15, 6))

<test2 n />;
>test2 : Symbol(JSX.IntrinsicElements.test2, Decl(file.tsx, 3, 36))
>n : Symbol(n, Decl(file.tsx, 16, 6))

