//// [tests/cases/compiler/tsxDiscriminantPropertyInference.tsx] ////

=== tsxDiscriminantPropertyInference.tsx ===
// Repro from #41759
namespace JSX {
    export interface Element {}
}

type DiscriminatorTrue = {
>DiscriminatorTrue : DiscriminatorTrue
>                  : ^^^^^^^^^^^^^^^^^

    disc: true;
>disc : true
>     : ^^^^
>true : true
>     : ^^^^

    cb: (x: string) => void;
>cb : (x: string) => void
>   : ^ ^^      ^^^^^    
>x : string
>  : ^^^^^^
}

type DiscriminatorFalse = {
>DiscriminatorFalse : DiscriminatorFalse
>                   : ^^^^^^^^^^^^^^^^^^

    disc?: false;
>disc : false | undefined
>     : ^^^^^^^^^^^^^^^^^
>false : false
>      : ^^^^^

    cb: (x: number) => void;
>cb : (x: number) => void
>   : ^ ^^      ^^^^^    
>x : number
>  : ^^^^^^
}

type Props = DiscriminatorTrue | DiscriminatorFalse;
>Props : Props
>      : ^^^^^

declare function Comp(props: DiscriminatorTrue | DiscriminatorFalse): JSX.Element;
>Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
>     : ^     ^^                                      ^^^^^           
>props : DiscriminatorTrue | DiscriminatorFalse
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>JSX : any
>    : ^^^

// simple inference
void (<Comp disc cb={s => parseInt(s)} />);
>void (<Comp disc cb={s => parseInt(s)} />) : undefined
>                                           : ^^^^^^^^^
>(<Comp disc cb={s => parseInt(s)} />) : JSX.Element
>                                      : ^^^^^^^^^^^
><Comp disc cb={s => parseInt(s)} /> : JSX.Element
>                                    : ^^^^^^^^^^^
>Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
>     : ^     ^^                                      ^^^^^           
>disc : true
>     : ^^^^
>cb : (s: string) => number
>   : ^ ^^^^^^^^^^^^^^^^^^^
>s => parseInt(s) : (s: string) => number
>                 : ^ ^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>parseInt(s) : number
>            : ^^^^^^
>parseInt : (string: string, radix?: number) => number
>         : ^      ^^      ^^     ^^^      ^^^^^      
>s : string
>  : ^^^^^^

// simple inference
void (<Comp disc={false} cb={n => n.toFixed()} />);
>void (<Comp disc={false} cb={n => n.toFixed()} />) : undefined
>                                                   : ^^^^^^^^^
>(<Comp disc={false} cb={n => n.toFixed()} />) : JSX.Element
>                                              : ^^^^^^^^^^^
><Comp disc={false} cb={n => n.toFixed()} /> : JSX.Element
>                                            : ^^^^^^^^^^^
>Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
>     : ^     ^^                                      ^^^^^           
>disc : false
>     : ^^^^^
>false : false
>      : ^^^^^
>cb : (n: number) => string
>   : ^ ^^^^^^^^^^^^^^^^^^^
>n => n.toFixed() : (n: number) => string
>                 : ^ ^^^^^^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^
>n.toFixed() : string
>            : ^^^^^^
>n.toFixed : (fractionDigits?: number) => string
>          : ^              ^^^      ^^^^^      
>n : number
>  : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      

// simple inference when strict-null-checks are enabled
void (<Comp disc={undefined} cb={n => n.toFixed()} />);
>void (<Comp disc={undefined} cb={n => n.toFixed()} />) : undefined
>                                                       : ^^^^^^^^^
>(<Comp disc={undefined} cb={n => n.toFixed()} />) : JSX.Element
>                                                  : ^^^^^^^^^^^
><Comp disc={undefined} cb={n => n.toFixed()} /> : JSX.Element
>                                                : ^^^^^^^^^^^
>Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
>     : ^     ^^                                      ^^^^^           
>disc : undefined
>     : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>cb : (n: number) => string
>   : ^ ^^^^^^^^^^^^^^^^^^^
>n => n.toFixed() : (n: number) => string
>                 : ^ ^^^^^^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^
>n.toFixed() : string
>            : ^^^^^^
>n.toFixed : (fractionDigits?: number) => string
>          : ^              ^^^      ^^^^^      
>n : number
>  : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      

// requires checking type information since discriminator is missing from object
void (<Comp cb={n => n.toFixed()} />);
>void (<Comp cb={n => n.toFixed()} />) : undefined
>                                      : ^^^^^^^^^
>(<Comp cb={n => n.toFixed()} />) : JSX.Element
>                                 : ^^^^^^^^^^^
><Comp cb={n => n.toFixed()} /> : JSX.Element
>                               : ^^^^^^^^^^^
>Comp : (props: DiscriminatorTrue | DiscriminatorFalse) => JSX.Element
>     : ^     ^^                                      ^^^^^           
>cb : (n: number) => string
>   : ^ ^^^^^^^^^^^^^^^^^^^
>n => n.toFixed() : (n: number) => string
>                 : ^ ^^^^^^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^
>n.toFixed() : string
>            : ^^^^^^
>n.toFixed : (fractionDigits?: number) => string
>          : ^              ^^^      ^^^^^      
>n : number
>  : ^^^^^^
>toFixed : (fractionDigits?: number) => string
>        : ^              ^^^      ^^^^^      

