//// [tests/cases/conformance/jsx/tsxElementResolution10.tsx] ////

=== file.tsx ===
declare namespace JSX {
>JSX : Symbol(JSX, Decl(file.tsx, 0, 0))

	interface Element { }
>Element : Symbol(Element, Decl(file.tsx, 0, 23))

	interface ElementClass {
>ElementClass : Symbol(ElementClass, Decl(file.tsx, 1, 22))

		render: any;
>render : Symbol(ElementClass.render, Decl(file.tsx, 2, 25))
	}
	interface IntrinsicElements { }
>IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 4, 2))
}

interface Obj1type {
>Obj1type : Symbol(Obj1type, Decl(file.tsx, 6, 1))

	new(n: string): { x: number };
>n : Symbol(n, Decl(file.tsx, 9, 5))
>x : Symbol(x, Decl(file.tsx, 9, 18))
}
var Obj1: Obj1type;
>Obj1 : Symbol(Obj1, Decl(file.tsx, 11, 3))
>Obj1type : Symbol(Obj1type, Decl(file.tsx, 6, 1))

<Obj1 x={10} />; // Error, no render member
>Obj1 : Symbol(Obj1, Decl(file.tsx, 11, 3))
>x : Symbol(x, Decl(file.tsx, 12, 5))

interface Obj2type {
>Obj2type : Symbol(Obj2type, Decl(file.tsx, 12, 16))

	(n: string): { x: number; render: any; };
>n : Symbol(n, Decl(file.tsx, 15, 2))
>x : Symbol(x, Decl(file.tsx, 15, 15))
>render : Symbol(render, Decl(file.tsx, 15, 26))
}
var Obj2: Obj2type;
>Obj2 : Symbol(Obj2, Decl(file.tsx, 17, 3))
>Obj2type : Symbol(Obj2type, Decl(file.tsx, 12, 16))

<Obj2 x={32} render={100} />; // OK
>Obj2 : Symbol(Obj2, Decl(file.tsx, 17, 3))
>x : Symbol(x, Decl(file.tsx, 18, 5))
>render : Symbol(render, Decl(file.tsx, 18, 12))

