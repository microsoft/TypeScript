//// [tests/cases/conformance/jsx/tsxElementResolution11.tsx] ////

=== file.tsx ===
declare namespace JSX {
>JSX : Symbol(JSX, Decl(file.tsx, 0, 0))

	interface Element { }
>Element : Symbol(Element, Decl(file.tsx, 0, 23))

	interface ElementAttributesProperty { }
>ElementAttributesProperty : Symbol(ElementAttributesProperty, Decl(file.tsx, 1, 22))

	interface IntrinsicElements { }
>IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 2, 40))
}

interface Obj1type {
>Obj1type : Symbol(Obj1type, Decl(file.tsx, 4, 1))

	new(n: string): any;
>n : Symbol(n, Decl(file.tsx, 7, 5))
}
var Obj1: Obj1type;
>Obj1 : Symbol(Obj1, Decl(file.tsx, 9, 3))
>Obj1type : Symbol(Obj1type, Decl(file.tsx, 4, 1))

<Obj1 x={10} />; // OK
>Obj1 : Symbol(Obj1, Decl(file.tsx, 9, 3))
>x : Symbol(x, Decl(file.tsx, 10, 5))

interface Obj2type {
>Obj2type : Symbol(Obj2type, Decl(file.tsx, 10, 16))

	new(n: string): { q?: number };
>n : Symbol(n, Decl(file.tsx, 13, 5))
>q : Symbol(q, Decl(file.tsx, 13, 18))
}
var Obj2: Obj2type;
>Obj2 : Symbol(Obj2, Decl(file.tsx, 15, 3))
>Obj2type : Symbol(Obj2type, Decl(file.tsx, 10, 16))

<Obj2 x={10} />; // Error
>Obj2 : Symbol(Obj2, Decl(file.tsx, 15, 3))
>x : Symbol(x, Decl(file.tsx, 16, 5))

interface Obj3type {
>Obj3type : Symbol(Obj3type, Decl(file.tsx, 16, 16))

	new(n: string): { x: number; };
>n : Symbol(n, Decl(file.tsx, 19, 5))
>x : Symbol(x, Decl(file.tsx, 19, 18))
}
var Obj3: Obj3type;
>Obj3 : Symbol(Obj3, Decl(file.tsx, 21, 3))
>Obj3type : Symbol(Obj3type, Decl(file.tsx, 16, 16))

<Obj3 x={10} />; // OK
>Obj3 : Symbol(Obj3, Decl(file.tsx, 21, 3))
>x : Symbol(x, Decl(file.tsx, 22, 5))

