//// [tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx] ////

=== tsxLibraryManagedAttributes.tsx ===
type Defaultize<TProps, TDefaults> =
>Defaultize : Defaultize<TProps, TDefaults>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    & {[K in Extract<keyof TProps, keyof TDefaults>]?: TProps[K]}
    & {[K in Exclude<keyof TProps, keyof TDefaults>]: TProps[K]}
    & Partial<TDefaults>;

type InferredPropTypes<P> = {[K in keyof P]: P[K] extends PropTypeChecker<infer T, infer U> ? PropTypeChecker<T, U>[typeof checkedType] : {}};
>InferredPropTypes : InferredPropTypes<P>
>                  : ^^^^^^^^^^^^^^^^^^^^
>checkedType : unique symbol
>            : ^^^^^^^^^^^^^

declare const checkedType: unique symbol;
>checkedType : unique symbol
>            : ^^^^^^^^^^^^^

interface PropTypeChecker<U, TRequired = false> {
>false : false
>      : ^^^^^

    (props: any, propName: string, componentName: string, location: any, propFullName: string): boolean;
>props : any
>      : ^^^
>propName : string
>         : ^^^^^^
>componentName : string
>              : ^^^^^^
>location : any
>         : ^^^
>propFullName : string
>             : ^^^^^^

    isRequired: PropTypeChecker<U, true>;
>isRequired : PropTypeChecker<U, true>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^

    [checkedType]: TRequired extends true ? U : U | null | undefined;
>[checkedType] : TRequired extends true ? U : U | null | undefined
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>checkedType : unique symbol
>            : ^^^^^^^^^^^^^
>true : true
>     : ^^^^
}

declare namespace PropTypes {
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^

    export const number: PropTypeChecker<number>;
>number : PropTypeChecker<number, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    export const string: PropTypeChecker<string>;
>string : PropTypeChecker<string, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    export const node: PropTypeChecker<ReactNode>;
>node : PropTypeChecker<ReactNode, false>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

type ReactNode = string | number | ReactComponent<{}, {}>;
>ReactNode : ReactNode
>          : ^^^^^^^^^

declare class ReactComponent<P={}, S={}> {
>ReactComponent : ReactComponent<P, S>
>               : ^^^^^^^^^^^^^^^^^^^^

    constructor(props: P);
>props : P
>      : ^

    props: P & Readonly<{children: ReactNode[]}>;
>props : P & Readonly<{ children: ReactNode[]; }>
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^           ^^^^
>children : ReactNode[]
>         : ^^^^^^^^^^^

    setState(s: Partial<S>): S;
>setState : (s: Partial<S>) => S
>         : ^ ^^          ^^^^^ 
>s : Partial<S>
>  : ^^^^^^^^^^

    render(): ReactNode;
>render : () => ReactNode
>       : ^^^^^^         
}

declare namespace JSX {
    interface Element extends ReactComponent {}
    interface IntrinsicElements {}
    type LibraryManagedAttributes<TComponent, TProps> =
>LibraryManagedAttributes : LibraryManagedAttributes<TComponent, TProps>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        TComponent extends { defaultProps: infer D; propTypes: infer P; }
>defaultProps : D
>             : ^
>propTypes : P
>          : ^

            ? Defaultize<TProps & InferredPropTypes<P>, D>
            : TComponent extends { defaultProps: infer D }
>defaultProps : D
>             : ^

                ? Defaultize<TProps, D>
                : TComponent extends { propTypes: infer P }
>propTypes : P
>          : ^

                    ? TProps & InferredPropTypes<P>
                    : TProps;
}

class Component extends ReactComponent {
>Component : Component
>          : ^^^^^^^^^
>ReactComponent : ReactComponent<{}, {}>
>               : ^^^^^^^^^^^^^^^^^^^^^^

    static propTypes = {
>propTypes : { foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<string, true>; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        foo: PropTypes.number,        bar: PropTypes.node,        baz: PropTypes.string.isRequired,    } : { foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<string, true>; }
>                                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        foo: PropTypes.number,
>foo : PropTypeChecker<number, false>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.number : PropTypeChecker<number, false>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>number : PropTypeChecker<number, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        bar: PropTypes.node,
>bar : PropTypeChecker<ReactNode, false>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.node : PropTypeChecker<ReactNode, false>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>node : PropTypeChecker<ReactNode, false>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        baz: PropTypes.string.isRequired,
>baz : PropTypeChecker<string, true>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.string.isRequired : PropTypeChecker<string, true>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.string : PropTypeChecker<string, false>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>string : PropTypeChecker<string, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>isRequired : PropTypeChecker<string, true>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
    static defaultProps = {
>defaultProps : { foo: number; }
>             : ^^^^^^^^^^^^^^^^
>{        foo: 42,    } : { foo: number; }
>                       : ^^^^^^^^^^^^^^^^

        foo: 42,
>foo : number
>    : ^^^^^^
>42 : 42
>   : ^^
    }
}

const a = <Component foo={12} bar="yes" baz="yeah" />;
>a : JSX.Element
>  : ^^^^^^^^^^^
><Component foo={12} bar="yes" baz="yeah" /> : JSX.Element
>                                            : ^^^^^^^^^^^
>Component : typeof Component
>          : ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bar : string
>    : ^^^^^^
>baz : string
>    : ^^^^^^

const b = <Component foo={12} />; // Error, missing required prop bar
>b : JSX.Element
>  : ^^^^^^^^^^^
><Component foo={12} /> : JSX.Element
>                       : ^^^^^^^^^^^
>Component : typeof Component
>          : ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^

const c = <Component bar="yes" baz="yeah" />;
>c : JSX.Element
>  : ^^^^^^^^^^^
><Component bar="yes" baz="yeah" /> : JSX.Element
>                                   : ^^^^^^^^^^^
>Component : typeof Component
>          : ^^^^^^^^^^^^^^^^
>bar : string
>    : ^^^^^^
>baz : string
>    : ^^^^^^

const d = <Component bar="yes" baz="yo" bat="ohno" />; // Error, baz not a valid prop
>d : JSX.Element
>  : ^^^^^^^^^^^
><Component bar="yes" baz="yo" bat="ohno" /> : JSX.Element
>                                            : ^^^^^^^^^^^
>Component : typeof Component
>          : ^^^^^^^^^^^^^^^^
>bar : string
>    : ^^^^^^
>baz : string
>    : ^^^^^^
>bat : string
>    : ^^^^^^

const e = <Component foo={12} bar={null} baz="cool" />; // bar is nullable/undefinable since it's not marked `isRequired`
>e : JSX.Element
>  : ^^^^^^^^^^^
><Component foo={12} bar={null} baz="cool" /> : JSX.Element
>                                             : ^^^^^^^^^^^
>Component : typeof Component
>          : ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bar : null
>    : ^^^^
>baz : string
>    : ^^^^^^

const f = <Component foo={12} bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
>f : JSX.Element
>  : ^^^^^^^^^^^
><Component foo={12} bar="yeah" baz={null} /> : JSX.Element
>                                             : ^^^^^^^^^^^
>Component : typeof Component
>          : ^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bar : string
>    : ^^^^^^
>baz : null
>    : ^^^^

class JustPropTypes extends ReactComponent {
>JustPropTypes : JustPropTypes
>              : ^^^^^^^^^^^^^
>ReactComponent : ReactComponent<{}, {}>
>               : ^^^^^^^^^^^^^^^^^^^^^^

    static propTypes = {
>propTypes : { foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, true>; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        foo: PropTypes.number,        bar: PropTypes.node.isRequired,    } : { foo: PropTypeChecker<number, false>; bar: PropTypeChecker<ReactNode, true>; }
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        foo: PropTypes.number,
>foo : PropTypeChecker<number, false>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.number : PropTypeChecker<number, false>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>number : PropTypeChecker<number, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        bar: PropTypes.node.isRequired,
>bar : PropTypeChecker<ReactNode, true>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.node.isRequired : PropTypeChecker<ReactNode, true>
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.node : PropTypeChecker<ReactNode, false>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>node : PropTypeChecker<ReactNode, false>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>isRequired : PropTypeChecker<ReactNode, true>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
}

const g = <JustPropTypes foo={12} bar="ok" />;
>g : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypes foo={12} bar="ok" /> : JSX.Element
>                                    : ^^^^^^^^^^^
>JustPropTypes : typeof JustPropTypes
>              : ^^^^^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bar : string
>    : ^^^^^^

const h = <JustPropTypes foo="no" />; // error, wrong type
>h : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypes foo="no" /> : JSX.Element
>                           : ^^^^^^^^^^^
>JustPropTypes : typeof JustPropTypes
>              : ^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^

const i = <JustPropTypes foo={null} bar="ok" />;
>i : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypes foo={null} bar="ok" /> : JSX.Element
>                                      : ^^^^^^^^^^^
>JustPropTypes : typeof JustPropTypes
>              : ^^^^^^^^^^^^^^^^^^^^
>foo : null
>    : ^^^^
>bar : string
>    : ^^^^^^

const j = <JustPropTypes foo={12} bar={null} />; // error, bar is required
>j : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypes foo={12} bar={null} /> : JSX.Element
>                                      : ^^^^^^^^^^^
>JustPropTypes : typeof JustPropTypes
>              : ^^^^^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bar : null
>    : ^^^^

class JustDefaultProps extends ReactComponent {
>JustDefaultProps : JustDefaultProps
>                 : ^^^^^^^^^^^^^^^^
>ReactComponent : ReactComponent<{}, {}>
>               : ^^^^^^^^^^^^^^^^^^^^^^

    static defaultProps = {
>defaultProps : { foo: number; }
>             : ^^^^^^^^^^^^^^^^
>{        foo: 42,    } : { foo: number; }
>                       : ^^^^^^^^^^^^^^^^

        foo: 42,
>foo : number
>    : ^^^^^^
>42 : 42
>   : ^^

    };
}

const k = <JustDefaultProps foo={12} />;
>k : JSX.Element
>  : ^^^^^^^^^^^
><JustDefaultProps foo={12} /> : JSX.Element
>                              : ^^^^^^^^^^^
>JustDefaultProps : typeof JustDefaultProps
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^

const l = <JustDefaultProps foo={12} bar="ok" />; // error, no prop named bar
>l : JSX.Element
>  : ^^^^^^^^^^^
><JustDefaultProps foo={12} bar="ok" /> : JSX.Element
>                                       : ^^^^^^^^^^^
>JustDefaultProps : typeof JustDefaultProps
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bar : string
>    : ^^^^^^

const m = <JustDefaultProps foo="no" />; // error, wrong type
>m : JSX.Element
>  : ^^^^^^^^^^^
><JustDefaultProps foo="no" /> : JSX.Element
>                              : ^^^^^^^^^^^
>JustDefaultProps : typeof JustDefaultProps
>                 : ^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^

interface FooProps {
    foo: string;
>foo : string
>    : ^^^^^^
}

class BothWithSpecifiedGeneric extends ReactComponent<FooProps> {
>BothWithSpecifiedGeneric : BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>ReactComponent : ReactComponent<FooProps, {}>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static propTypes = {
>propTypes : { foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<number, true>; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        foo: PropTypes.string,        bar: PropTypes.node,        baz: PropTypes.number.isRequired,    } : { foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, false>; baz: PropTypeChecker<number, true>; }
>                                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        foo: PropTypes.string,
>foo : PropTypeChecker<string, false>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.string : PropTypeChecker<string, false>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>string : PropTypeChecker<string, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        bar: PropTypes.node,
>bar : PropTypeChecker<ReactNode, false>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.node : PropTypeChecker<ReactNode, false>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>node : PropTypeChecker<ReactNode, false>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        baz: PropTypes.number.isRequired,
>baz : PropTypeChecker<number, true>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.number.isRequired : PropTypeChecker<number, true>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.number : PropTypeChecker<number, false>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>number : PropTypeChecker<number, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>isRequired : PropTypeChecker<number, true>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
    static defaultProps = {
>defaultProps : { foo: string; }
>             : ^^^^^^^^^^^^^^^^
>{        foo: "yo",    } : { foo: string; }
>                         : ^^^^^^^^^^^^^^^^

        foo: "yo",
>foo : string
>    : ^^^^^^
>"yo" : "yo"
>     : ^^^^

    };
}
const n = <BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} />;
>n : JSX.Element
>  : ^^^^^^^^^^^
><BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} /> : JSX.Element
>                                                           : ^^^^^^^^^^^
>BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>bar : string
>    : ^^^^^^
>baz : number
>    : ^^^^^^
>12 : 12
>   : ^^

const o = <BothWithSpecifiedGeneric foo="no" />; // Error, missing required prop bar
>o : JSX.Element
>  : ^^^^^^^^^^^
><BothWithSpecifiedGeneric foo="no" /> : JSX.Element
>                                      : ^^^^^^^^^^^
>BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^

const p = <BothWithSpecifiedGeneric bar="yes" baz={12} />;
>p : JSX.Element
>  : ^^^^^^^^^^^
><BothWithSpecifiedGeneric bar="yes" baz={12} /> : JSX.Element
>                                                : ^^^^^^^^^^^
>BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>bar : string
>    : ^^^^^^
>baz : number
>    : ^^^^^^
>12 : 12
>   : ^^

const q = <BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" />; // Error, baz not a valid prop
>q : JSX.Element
>  : ^^^^^^^^^^^
><BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" /> : JSX.Element
>                                                           : ^^^^^^^^^^^
>BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>bar : string
>    : ^^^^^^
>baz : number
>    : ^^^^^^
>12 : 12
>   : ^^
>bat : string
>    : ^^^^^^

const r = <BothWithSpecifiedGeneric foo="no" bar={null} baz={0} />; // bar is nullable/undefinable since it's not marked `isRequired`
>r : JSX.Element
>  : ^^^^^^^^^^^
><BothWithSpecifiedGeneric foo="no" bar={null} baz={0} /> : JSX.Element
>                                                         : ^^^^^^^^^^^
>BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>bar : null
>    : ^^^^
>baz : number
>    : ^^^^^^
>0 : 0
>  : ^

const s = <BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
>s : JSX.Element
>  : ^^^^^^^^^^^
><BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} /> : JSX.Element
>                                                            : ^^^^^^^^^^^
>BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>bar : string
>    : ^^^^^^
>baz : null
>    : ^^^^

class JustPropTypesWithSpecifiedGeneric extends ReactComponent<FooProps> {
>JustPropTypesWithSpecifiedGeneric : JustPropTypesWithSpecifiedGeneric
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ReactComponent : ReactComponent<FooProps, {}>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static propTypes = {
>propTypes : { foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, true>; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{        foo: PropTypes.string,        bar: PropTypes.node.isRequired,    } : { foo: PropTypeChecker<string, false>; bar: PropTypeChecker<ReactNode, true>; }
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        foo: PropTypes.string,
>foo : PropTypeChecker<string, false>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.string : PropTypeChecker<string, false>
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>string : PropTypeChecker<string, false>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        bar: PropTypes.node.isRequired,
>bar : PropTypeChecker<ReactNode, true>
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.node.isRequired : PropTypeChecker<ReactNode, true>
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes.node : PropTypeChecker<ReactNode, false>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>PropTypes : typeof PropTypes
>          : ^^^^^^^^^^^^^^^^
>node : PropTypeChecker<ReactNode, false>
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>isRequired : PropTypeChecker<ReactNode, true>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    };
}
const t = <JustPropTypesWithSpecifiedGeneric foo="nice" bar="ok" />;
>t : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypesWithSpecifiedGeneric foo="nice" bar="ok" /> : JSX.Element
>                                                          : ^^^^^^^^^^^
>JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>bar : string
>    : ^^^^^^

const u = <JustPropTypesWithSpecifiedGeneric foo={12} />; // error, wrong type
>u : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypesWithSpecifiedGeneric foo={12} /> : JSX.Element
>                                               : ^^^^^^^^^^^
>JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^

const v = <JustPropTypesWithSpecifiedGeneric foo={null} bar="ok" />; // generic overrides propTypes required-ness, null isn't valid
>v : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypesWithSpecifiedGeneric foo={null} bar="ok" /> : JSX.Element
>                                                          : ^^^^^^^^^^^
>JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : null
>    : ^^^^
>bar : string
>    : ^^^^^^

const w = <JustPropTypesWithSpecifiedGeneric foo="cool" bar={null} />; // error, bar is required
>w : JSX.Element
>  : ^^^^^^^^^^^
><JustPropTypesWithSpecifiedGeneric foo="cool" bar={null} /> : JSX.Element
>                                                            : ^^^^^^^^^^^
>JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>bar : null
>    : ^^^^

class JustDefaultPropsWithSpecifiedGeneric extends ReactComponent<FooProps> {
>JustDefaultPropsWithSpecifiedGeneric : JustDefaultPropsWithSpecifiedGeneric
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ReactComponent : ReactComponent<FooProps, {}>
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    static defaultProps = {
>defaultProps : { foo: string; }
>             : ^^^^^^^^^^^^^^^^
>{        foo: "no",    } : { foo: string; }
>                         : ^^^^^^^^^^^^^^^^

        foo: "no",
>foo : string
>    : ^^^^^^
>"no" : "no"
>     : ^^^^

    };
}

const x = <JustDefaultPropsWithSpecifiedGeneric foo="eh" />;
>x : JSX.Element
>  : ^^^^^^^^^^^
><JustDefaultPropsWithSpecifiedGeneric foo="eh" /> : JSX.Element
>                                                  : ^^^^^^^^^^^
>JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^

const y = <JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" />; // error, no prop named bar
>y : JSX.Element
>  : ^^^^^^^^^^^
><JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" /> : JSX.Element
>                                                           : ^^^^^^^^^^^
>JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^
>bar : string
>    : ^^^^^^

const z = <JustDefaultPropsWithSpecifiedGeneric foo={12} />; // error, wrong type
>z : JSX.Element
>  : ^^^^^^^^^^^
><JustDefaultPropsWithSpecifiedGeneric foo={12} /> : JSX.Element
>                                                  : ^^^^^^^^^^^
>JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : number
>    : ^^^^^^
>12 : 12
>   : ^^

const aa = <JustDefaultPropsWithSpecifiedGeneric />;
>aa : JSX.Element
>   : ^^^^^^^^^^^
><JustDefaultPropsWithSpecifiedGeneric /> : JSX.Element
>                                         : ^^^^^^^^^^^
>JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

