//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponents1.tsx] ////

=== file.tsx ===
function EmptyPropSFC() {
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^

    return <div> Default Greeting </div>;
><div> Default Greeting </div> : JSX.Element
>                              : ^^^^^^^^^^^
>div : any
>    : ^^^
>div : any
>    : ^^^
}

function Greet(x: {name: string}) {
>Greet : (x: { name: string; }) => JSX.Element
>      : ^ ^^                 ^^^^^^^^^^^^^^^^
>x : { name: string; }
>  : ^^^^^^^^      ^^^
>name : string
>     : ^^^^^^

	return <div>Hello, {x}</div>;
><div>Hello, {x}</div> : JSX.Element
>                      : ^^^^^^^^^^^
>div : any
>    : ^^^
>x : { name: string; }
>  : ^^^^^^^^      ^^^
>div : any
>    : ^^^
}
function Meet({name = 'world'}) {
>Meet : ({ name }: { name?: string; }) => JSX.Element
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'world' : "world"
>        : ^^^^^^^

	return <div>Hello, {name}</div>;
><div>Hello, {name}</div> : JSX.Element
>                         : ^^^^^^^^^^^
>div : any
>    : ^^^
>name : string
>     : ^^^^^^
>div : any
>    : ^^^
}
function MeetAndGreet(k: {"prop-name": string}) {
>MeetAndGreet : (k: { "prop-name": string; }) => JSX.Element
>             : ^ ^^                        ^^^^^^^^^^^^^^^^
>k : { "prop-name": string; }
>  : ^^^^^^^^^^^^^^^      ^^^
>"prop-name" : string
>            : ^^^^^^

	return <div>Hi Hi</div>;
><div>Hi Hi</div> : JSX.Element
>                 : ^^^^^^^^^^^
>div : any
>    : ^^^
>div : any
>    : ^^^
}

// OK
let a = <Greet name='world' />;
>a : JSX.Element
>  : ^^^^^^^^^^^
><Greet name='world' /> : JSX.Element
>                       : ^^^^^^^^^^^
>Greet : (x: { name: string; }) => JSX.Element
>      : ^ ^^                 ^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

let a1 = <Greet name='world' extra-prop />;
>a1 : JSX.Element
>   : ^^^^^^^^^^^
><Greet name='world' extra-prop /> : JSX.Element
>                                  : ^^^^^^^^^^^
>Greet : (x: { name: string; }) => JSX.Element
>      : ^ ^^                 ^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>extra-prop : true
>           : ^^^^

// Error
let b = <Greet naaame='world' />;
>b : JSX.Element
>  : ^^^^^^^^^^^
><Greet naaame='world' /> : JSX.Element
>                         : ^^^^^^^^^^^
>Greet : (x: { name: string; }) => JSX.Element
>      : ^ ^^                 ^^^^^^^^^^^^^^^^
>naaame : string
>       : ^^^^^^

// OK
let c = <Meet />;
>c : JSX.Element
>  : ^^^^^^^^^^^
><Meet /> : JSX.Element
>         : ^^^^^^^^^^^
>Meet : ({ name }: { name?: string; }) => JSX.Element
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

let c1 = <Meet extra-prop/>;
>c1 : JSX.Element
>   : ^^^^^^^^^^^
><Meet extra-prop/> : JSX.Element
>                   : ^^^^^^^^^^^
>Meet : ({ name }: { name?: string; }) => JSX.Element
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>extra-prop : true
>           : ^^^^

// OK
let d = <Meet name='me' />;
>d : JSX.Element
>  : ^^^^^^^^^^^
><Meet name='me' /> : JSX.Element
>                   : ^^^^^^^^^^^
>Meet : ({ name }: { name?: string; }) => JSX.Element
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^

// Error
let e = <Meet name={42} />;
>e : JSX.Element
>  : ^^^^^^^^^^^
><Meet name={42} /> : JSX.Element
>                   : ^^^^^^^^^^^
>Meet : ({ name }: { name?: string; }) => JSX.Element
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : number
>     : ^^^^^^
>42 : 42
>   : ^^

// Error
let f = <Meet naaaaaaame='no' />;
>f : JSX.Element
>  : ^^^^^^^^^^^
><Meet naaaaaaame='no' /> : JSX.Element
>                         : ^^^^^^^^^^^
>Meet : ({ name }: { name?: string; }) => JSX.Element
>     : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>naaaaaaame : string
>           : ^^^^^^

// OK
let g = <MeetAndGreet prop-name="Bob" />;
>g : JSX.Element
>  : ^^^^^^^^^^^
><MeetAndGreet prop-name="Bob" /> : JSX.Element
>                                 : ^^^^^^^^^^^
>MeetAndGreet : (k: { "prop-name": string; }) => JSX.Element
>             : ^ ^^                        ^^^^^^^^^^^^^^^^
>prop-name : string
>          : ^^^^^^

// Error
let h = <MeetAndGreet extra-prop-name="World" />;
>h : JSX.Element
>  : ^^^^^^^^^^^
><MeetAndGreet extra-prop-name="World" /> : JSX.Element
>                                         : ^^^^^^^^^^^
>MeetAndGreet : (k: { "prop-name": string; }) => JSX.Element
>             : ^ ^^                        ^^^^^^^^^^^^^^^^
>extra-prop-name : string
>                : ^^^^^^

// Error
let i = <EmptyPropSFC prop1 />
>i : JSX.Element
>  : ^^^^^^^^^^^
><EmptyPropSFC prop1 /> : JSX.Element
>                       : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>prop1 : true
>      : ^^^^

let i1 = <EmptyPropSFC ref={x => x.greeting.substr(10)} />
>i1 : JSX.Element
>   : ^^^^^^^^^^^
><EmptyPropSFC ref={x => x.greeting.substr(10)} /> : JSX.Element
>                                                  : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>ref : (x: any) => any
>    : ^ ^^^^^^^^^^^^^
>x => x.greeting.substr(10) : (x: any) => any
>                           : ^ ^^^^^^^^^^^^^
>x : any
>  : ^^^
>x.greeting.substr(10) : any
>                      : ^^^
>x.greeting.substr : any
>                  : ^^^
>x.greeting : any
>           : ^^^
>x : any
>  : ^^^
>greeting : any
>         : ^^^
>substr : any
>       : ^^^
>10 : 10
>   : ^^

let o = {
>o : { prop1: boolean; }
>  : ^^^^^^^^^^^^^^^^^^^
>{    prop1: true;} : { prop1: boolean; }
>                   : ^^^^^^^^^^^^^^^^^^^

    prop1: true;
>prop1 : boolean
>      : ^^^^^^^
>true : true
>     : ^^^^
}

// OK as access properties are allow when spread
let i2 = <EmptyPropSFC {...o} />
>i2 : JSX.Element
>   : ^^^^^^^^^^^
><EmptyPropSFC {...o} /> : JSX.Element
>                        : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>o : { prop1: boolean; }
>  : ^^^^^^^^^^^^^^^^^^^

let o1: any;
>o1 : any
>   : ^^^

// OK
let j = <EmptyPropSFC {...o1} />
>j : JSX.Element
>  : ^^^^^^^^^^^
><EmptyPropSFC {...o1} /> : JSX.Element
>                         : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>o1 : any
>   : ^^^

let j1 = <EmptyPropSFC />
>j1 : JSX.Element
>   : ^^^^^^^^^^^
><EmptyPropSFC /> : JSX.Element
>                 : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^

let j2 = <EmptyPropSFC data-prop />
>j2 : JSX.Element
>   : ^^^^^^^^^^^
><EmptyPropSFC data-prop /> : JSX.Element
>                           : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>data-prop : true
>          : ^^^^

let j3 = <EmptyPropSFC {...{}} />
>j3 : JSX.Element
>   : ^^^^^^^^^^^
><EmptyPropSFC {...{}} /> : JSX.Element
>                         : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>{} : {}
>   : ^^

let j4 = <EmptyPropSFC {...{ "data-info": "hi"}} />
>j4 : JSX.Element
>   : ^^^^^^^^^^^
><EmptyPropSFC {...{ "data-info": "hi"}} /> : JSX.Element
>                                           : ^^^^^^^^^^^
>EmptyPropSFC : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>{ "data-info": "hi"} : { "data-info": string; }
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^
>"data-info" : string
>            : ^^^^^^
>"hi" : "hi"
>     : ^^^^


