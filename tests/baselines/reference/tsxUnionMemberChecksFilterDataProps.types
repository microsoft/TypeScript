//// [tests/cases/compiler/tsxUnionMemberChecksFilterDataProps.tsx] ////

=== Performance Stats ===
Assignability cache: 2,500
Type Count: 5,000
Instantiation count: 50,000
Symbol count: 50,000

=== tsxUnionMemberChecksFilterDataProps.tsx ===
/// <reference path="react16.d.ts" />
import React, { ReactElement } from "react";
>React : typeof React
>      : ^^^^^^^^^^^^
>ReactElement : any
>             : ^^^

declare function NotHappy(props: ({ fixed?: boolean } | { value?: number })): ReactElement<any>;
>NotHappy : (props: ({ fixed?: boolean; } | { value?: number; })) => ReactElement<any>
>         : ^     ^^                                            ^^^^^                 
>props : { fixed?: boolean; } | { value?: number; }
>      : ^^^^^^^^^^       ^^^^^^^^^^^^^^^^      ^^^
>fixed : boolean
>      : ^^^^^^^
>value : number
>      : ^^^^^^

declare function Happy(props: { fixed?: boolean, value?: number }): ReactElement<any>;
>Happy : (props: { fixed?: boolean; value?: number; }) => ReactElement<any>
>      : ^     ^^                                    ^^^^^                 
>props : { fixed?: boolean; value?: number; }
>      : ^^^^^^^^^^       ^^^^^^^^^^      ^^^
>fixed : boolean
>      : ^^^^^^^
>value : number
>      : ^^^^^^

const RootNotHappy = () => (<NotHappy data-testid="my-test-id" />);
>RootNotHappy : () => JSX.Element
>             : ^^^^^^^^^^^^^^^^^
>() => (<NotHappy data-testid="my-test-id" />) : () => JSX.Element
>                                              : ^^^^^^^^^^^^^^^^^
>(<NotHappy data-testid="my-test-id" />) : JSX.Element
>                                        : ^^^^^^^^^^^
><NotHappy data-testid="my-test-id" /> : JSX.Element
>                                      : ^^^^^^^^^^^
>NotHappy : (props: ({ fixed?: boolean; } | { value?: number; })) => ReactElement<any>
>         : ^     ^^                                            ^^^^^                 
>data-testid : string
>            : ^^^^^^

const RootHappy = () => (<Happy data-testid="my-test-id" />);
>RootHappy : () => JSX.Element
>          : ^^^^^^^^^^^^^^^^^
>() => (<Happy data-testid="my-test-id" />) : () => JSX.Element
>                                           : ^^^^^^^^^^^^^^^^^
>(<Happy data-testid="my-test-id" />) : JSX.Element
>                                     : ^^^^^^^^^^^
><Happy data-testid="my-test-id" /> : JSX.Element
>                                   : ^^^^^^^^^^^
>Happy : (props: { fixed?: boolean; value?: number; }) => ReactElement<any>
>      : ^     ^^                                    ^^^^^                 
>data-testid : string
>            : ^^^^^^

