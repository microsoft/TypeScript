//// [tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesDifferingByTypeParameterName.ts] ////

=== twoGenericInterfacesDifferingByTypeParameterName.ts ===
// type parameter names are relevant when choosing whether to merge interface declarations

interface A<T> {
>A : Symbol(A, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 0, 0), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 4, 1))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 2, 12))

    x: T;
>x : Symbol(A.x, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 2, 16))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 2, 12))
}

interface A<U> { // error
>A : Symbol(A, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 0, 0), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 4, 1))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 6, 12))

    y: U;
>y : Symbol(A.y, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 6, 16))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 6, 12))
}

interface B<T,U> {
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 8, 1), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 12, 1))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 10, 12), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 14, 12))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 10, 14))

    x: U;
>x : Symbol(B.x, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 10, 18))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 10, 14))
}

interface B<T,V> { // error
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 8, 1), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 12, 1))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 10, 12), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 14, 12))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 14, 14))

    y: V;
>y : Symbol(B.y, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 14, 18))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 14, 14))
}

namespace M {
>M : Symbol(M, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 16, 1))

    interface A<T> {
>A : Symbol(A, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 18, 13), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 21, 5))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 19, 16))

        x: T;
>x : Symbol(A.x, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 19, 20))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 19, 16))
    }

    interface A<U> { // error
>A : Symbol(A, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 18, 13), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 21, 5))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 23, 16))

        y: U;
>y : Symbol(A.y, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 23, 20))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 23, 16))
    }

    interface B<T, U> {
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 25, 5), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 29, 5))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 27, 16), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 31, 16))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 27, 18))

        x: U;
>x : Symbol(B.x, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 27, 23))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 27, 18))
    }

    interface B<T, V> { // error
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 25, 5), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 29, 5))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 27, 16), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 31, 16))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 31, 18))

        y: V;
>y : Symbol(B.y, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 31, 23))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 31, 18))
    }
}

namespace M2 {
>M2 : Symbol(M2, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 34, 1), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 40, 1))

    interface B<T, U> {
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 36, 14))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 37, 16))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 37, 18))

        x: U;
>x : Symbol(B.x, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 37, 23))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 37, 18))
    }
}

namespace M2 {
>M2 : Symbol(M2, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 34, 1), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 40, 1))

    interface B<T, V> { // ok, different declaration space than other M2
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 42, 14))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 43, 16))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 43, 18))

        y: V;
>y : Symbol(B.y, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 43, 23))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 43, 18))
    }
}

namespace M3 {
>M3 : Symbol(M3, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 46, 1), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 52, 1))

    export interface B<T, U> {
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 48, 14), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 54, 14))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 49, 23), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 55, 23))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 49, 25))

        x: U;
>x : Symbol(B.x, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 49, 30))
>U : Symbol(U, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 49, 25))
    }
}

namespace M3 {
>M3 : Symbol(M3, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 46, 1), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 52, 1))

    export interface B<T, V> { // error
>B : Symbol(B, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 48, 14), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 54, 14))
>T : Symbol(T, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 49, 23), Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 55, 23))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 55, 25))

        y: V;
>y : Symbol(B.y, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 55, 30))
>V : Symbol(V, Decl(twoGenericInterfacesDifferingByTypeParameterName.ts, 55, 25))
    }
}


