//// [tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesDifferingByTypeParameterName.ts] ////

=== twoGenericInterfacesDifferingByTypeParameterName.ts ===
// type parameter names are relevant when choosing whether to merge interface declarations

interface A<T> {
    x: T;
>x : T
>  : ^
}

interface A<U> { // error
    y: U;
>y : U
>  : ^
}

interface B<T,U> {
    x: U;
>x : U
>  : ^
}

interface B<T,V> { // error
    y: V;
>y : V
>  : ^
}

namespace M {
    interface A<T> {
        x: T;
>x : T
>  : ^
    }

    interface A<U> { // error
        y: U;
>y : U
>  : ^
    }

    interface B<T, U> {
        x: U;
>x : U
>  : ^
    }

    interface B<T, V> { // error
        y: V;
>y : V
>  : ^
    }
}

namespace M2 {
    interface B<T, U> {
        x: U;
>x : U
>  : ^
    }
}

namespace M2 {
    interface B<T, V> { // ok, different declaration space than other M2
        y: V;
>y : V
>  : ^
    }
}

namespace M3 {
    export interface B<T, U> {
        x: U;
>x : U
>  : ^
    }
}

namespace M3 {
    export interface B<T, V> { // error
        y: V;
>y : V
>  : ^
    }
}


