//// [tests/cases/compiler/typeAliasDoesntMakeModuleInstantiated.ts] ////

=== typeAliasDoesntMakeModuleInstantiated.ts ===
declare namespace m {
>m : Symbol(m, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 0), Decl(typeAliasDoesntMakeModuleInstantiated.ts, 9, 11))

    // type alias declaration here shouldnt make the module declaration instantiated
    type Selector = string| string[] |Function;
>Selector : Symbol(Selector, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 21))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    export interface IStatic {
>IStatic : Symbol(IStatic, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 2, 47))

        (selector: any /* Selector */): IInstance;
>selector : Symbol(selector, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 5, 9))
>IInstance : Symbol(IInstance, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 6, 5))
    }
    export interface IInstance { }
>IInstance : Symbol(IInstance, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 6, 5))
}
declare var m: m.IStatic; // Should be ok to have var 'm' as module is non instantiated
>m : Symbol(m, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 0), Decl(typeAliasDoesntMakeModuleInstantiated.ts, 9, 11))
>m : Symbol(m, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 0), Decl(typeAliasDoesntMakeModuleInstantiated.ts, 9, 11))
>IStatic : Symbol(m.IStatic, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 2, 47))

