//// [tests/cases/compiler/typeArgumentInferenceWithRecursivelyReferencedTypeAliasToTypeLiteral01.ts] ////

=== typeArgumentInferenceWithRecursivelyReferencedTypeAliasToTypeLiteral01.ts ===
type TreeNode = {
>TreeNode : TreeNode
>         : ^^^^^^^^

    name: string;
>name : string
>     : ^^^^^^

    parent: TreeNode;
>parent : TreeNode
>       : ^^^^^^^^
}

var nodes: TreeNode[];
>nodes : TreeNode[]
>      : ^^^^^^^^^^

nodes.map(n => n.name);
>nodes.map(n => n.name) : string[]
>                       : ^^^^^^^^
>nodes.map : <U>(callbackfn: (value: TreeNode, index: number, array: TreeNode[]) => U, thisArg?: any) => U[]
>          : ^ ^^          ^^^     ^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^
>nodes : TreeNode[]
>      : ^^^^^^^^^^
>map : <U>(callbackfn: (value: TreeNode, index: number, array: TreeNode[]) => U, thisArg?: any) => U[]
>    : ^ ^^          ^^^     ^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^
>n => n.name : (n: TreeNode) => string
>            : ^ ^^^^^^^^^^^^^^^^^^^^^
>n : TreeNode
>  : ^^^^^^^^
>n.name : string
>       : ^^^^^^
>n : TreeNode
>  : ^^^^^^^^
>name : string
>     : ^^^^^^

