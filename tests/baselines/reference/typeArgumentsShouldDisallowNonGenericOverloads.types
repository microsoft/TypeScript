//// [tests/cases/compiler/typeArgumentsShouldDisallowNonGenericOverloads.ts] ////

=== typeArgumentsShouldDisallowNonGenericOverloads.ts ===
function foo(a: string): string;
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>a : string
>  : ^^^^^^

function foo<T>(a: T): number;
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>a : T
>  : ^

function foo(a: any): any {
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>a : any
>  : ^^^

    return "hi";
>"hi" : "hi"
>     : ^^^^
}

var x: number = foo<string>("hi"); // return type should be 'number'
>x : number
>  : ^^^^^^
>foo<string>("hi") : number
>                  : ^^^^^^
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>"hi" : "hi"
>     : ^^^^

var y: string = foo("hi"); // return type should be 'string'
>y : string
>  : ^^^^^^
>foo("hi") : string
>          : ^^^^^^
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>"hi" : "hi"
>     : ^^^^

var w: string = foo<string>("hi"); // should error
>w : string
>  : ^^^^^^
>foo<string>("hi") : number
>                  : ^^^^^^
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>"hi" : "hi"
>     : ^^^^

var z: number = foo("hi"); // should error
>z : number
>  : ^^^^^^
>foo("hi") : string
>          : ^^^^^^
>foo : { (a: string): string; <T>(a: T): number; }
>    : ^^^ ^^      ^^^      ^^^ ^^ ^^ ^^^      ^^^
>"hi" : "hi"
>     : ^^^^

