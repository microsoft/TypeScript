//// [tests/cases/compiler/typeGuardConstructorClassAndNumber.ts] ////

=== typeGuardConstructorClassAndNumber.ts ===
// Typical case
class C1 {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    property1: string;
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}

let var1: C1 | number;
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

if (var1.constructor == C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] == C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1.constructor === C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] === C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 == var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 == var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 === var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 === var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // string
>var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
}
else {
    var1; // number | C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}

if (var1.constructor != C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] != C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1.constructor !== C1) {
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (var1["constructor"] !== C1) {
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 != var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 != var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 !== var1.constructor) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
if (C1 !== var1["constructor"]) {
>C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
>"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))

    var1; // C1 | number
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))

    var1.property1; // error
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}
else {
    var1; // C1
>var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
}

// Repro from #37660

function foo(instance: Function | object) {
>foo : Symbol(foo, Decl(typeGuardConstructorClassAndNumber.ts, 118, 1))
>instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

    if (typeof instance === 'function') {
>instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))

        if (instance.prototype == null || instance.prototype.constructor == null) {
>instance.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>instance.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
>instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
>prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))

            return instance.length;
>instance.length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
>instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
>length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
        }
    }
}

