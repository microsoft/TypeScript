//// [tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfEqualEqualHasNoEffect.ts] ////

=== typeGuardOfFormTypeOfEqualEqualHasNoEffect.ts ===
class C { private p: string };
>C : C
>  : ^
>p : string
>  : ^^^^^^

var strOrNum: string | number;
>strOrNum : string | number
>         : ^^^^^^^^^^^^^^^

var strOrBool: string | boolean;
>strOrBool : string | boolean
>          : ^^^^^^^^^^^^^^^^

var numOrBool: number | boolean
>numOrBool : number | boolean
>          : ^^^^^^^^^^^^^^^^

var strOrC: string | C;
>strOrC : string | C
>       : ^^^^^^^^^^

// typeof x == s has not effect on typeguard
if (typeof strOrNum == "string") {
>typeof strOrNum == "string" : boolean
>                            : ^^^^^^^
>typeof strOrNum : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>strOrNum : string | number
>         : ^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

    var r1 = strOrNum; // string | number
>r1 : string
>   : ^^^^^^
>strOrNum : string
>         : ^^^^^^
}
else {
    var r1 = strOrNum; // string | number
>r1 : string
>   : ^^^^^^
>strOrNum : number
>         : ^^^^^^
}

if (typeof strOrBool == "boolean") {
>typeof strOrBool == "boolean" : boolean
>                              : ^^^^^^^
>typeof strOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>strOrBool : string | boolean
>          : ^^^^^^^^^^^^^^^^
>"boolean" : "boolean"
>          : ^^^^^^^^^

    var r2 = strOrBool; // string | boolean
>r2 : boolean
>   : ^^^^^^^
>strOrBool : boolean
>          : ^^^^^^^
}
else {
    var r2 = strOrBool; // string | boolean
>r2 : boolean
>   : ^^^^^^^
>strOrBool : string
>          : ^^^^^^
}

if (typeof numOrBool == "number") {
>typeof numOrBool == "number" : boolean
>                             : ^^^^^^^
>typeof numOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>numOrBool : number | boolean
>          : ^^^^^^^^^^^^^^^^
>"number" : "number"
>         : ^^^^^^^^

    var r3 = numOrBool; // number | boolean
>r3 : number
>   : ^^^^^^
>numOrBool : number
>          : ^^^^^^
}
else {
    var r3 =  numOrBool; // number | boolean
>r3 : number
>   : ^^^^^^
>numOrBool : boolean
>          : ^^^^^^^
}

if (typeof strOrC == "Object") {
>typeof strOrC == "Object" : boolean
>                          : ^^^^^^^
>typeof strOrC : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>strOrC : string | C
>       : ^^^^^^^^^^
>"Object" : "Object"
>         : ^^^^^^^^

    var r4 = strOrC; // string | C
>r4 : C
>   : ^
>strOrC : C
>       : ^
}
else {
    var r4 = strOrC; // string | C
>r4 : C
>   : ^
>strOrC : string
>       : ^^^^^^
}
