//// [tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfPrimitiveSubtype.ts] ////

=== typeGuardOfFormTypeOfPrimitiveSubtype.ts ===
let a: {};
>a : {}
>  : ^^

let b: {toString(): string};
>b : { toString(): string; }
>  : ^^^^^^^^^^^^^^      ^^^
>toString : () => string
>         : ^^^^^^      

if (typeof a === "number") {
>typeof a === "number" : boolean
>                      : ^^^^^^^
>typeof a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : {}
>  : ^^
>"number" : "number"
>         : ^^^^^^^^

    let c: number = a;
>c : number
>  : ^^^^^^
>a : number
>  : ^^^^^^
}
if (typeof a === "string") {
>typeof a === "string" : boolean
>                      : ^^^^^^^
>typeof a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : {}
>  : ^^
>"string" : "string"
>         : ^^^^^^^^

    let c: string = a;
>c : string
>  : ^^^^^^
>a : string
>  : ^^^^^^
}
if (typeof a === "boolean") {
>typeof a === "boolean" : boolean
>                       : ^^^^^^^
>typeof a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : {}
>  : ^^
>"boolean" : "boolean"
>          : ^^^^^^^^^

    let c: boolean = a;
>c : boolean
>  : ^^^^^^^
>a : boolean
>  : ^^^^^^^
}

if (typeof b === "number") {
>typeof b === "number" : boolean
>                      : ^^^^^^^
>typeof b : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : { toString(): string; }
>  : ^^^^^^^^^^^^^^      ^^^
>"number" : "number"
>         : ^^^^^^^^

    let c: number = b;
>c : number
>  : ^^^^^^
>b : number
>  : ^^^^^^
}
if (typeof b === "string") {
>typeof b === "string" : boolean
>                      : ^^^^^^^
>typeof b : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : { toString(): string; }
>  : ^^^^^^^^^^^^^^      ^^^
>"string" : "string"
>         : ^^^^^^^^

    let c: string = b;
>c : string
>  : ^^^^^^
>b : string
>  : ^^^^^^
}
if (typeof b === "boolean") {
>typeof b === "boolean" : boolean
>                       : ^^^^^^^
>typeof b : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : { toString(): string; }
>  : ^^^^^^^^^^^^^^      ^^^
>"boolean" : "boolean"
>          : ^^^^^^^^^

    let c: boolean = b;
>c : boolean
>  : ^^^^^^^
>b : boolean
>  : ^^^^^^^
}

