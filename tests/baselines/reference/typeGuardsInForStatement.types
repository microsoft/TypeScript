//// [tests/cases/conformance/expressions/typeGuards/typeGuardsInForStatement.ts] ////

=== typeGuardsInForStatement.ts ===
let cond: boolean;
>cond : boolean
>     : ^^^^^^^

function a(x: string | number) {
>a : (x: string | number) => void
>  : ^ ^^               ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^

    for (x = undefined; typeof x !== "number"; x = undefined) {
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>typeof x !== "number" : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>"number" : "number"
>         : ^^^^^^^^
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

        x; // string
>x : string
>  : ^^^^^^
    }
    x; // number
>x : number
>  : ^^^^^^
}
function b(x: string | number) {
>b : (x: string | number) => void
>  : ^ ^^               ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^

    for (x = undefined; typeof x !== "number"; x = undefined) {
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>typeof x !== "number" : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>"number" : "number"
>         : ^^^^^^^^
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

        x; // string
>x : string
>  : ^^^^^^

        if (cond) continue;
>cond : boolean
>     : ^^^^^^^
    }
    x; // number
>x : number
>  : ^^^^^^
}
function c(x: string | number) {
>c : (x: string | number) => void
>  : ^ ^^               ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^

    for (x = undefined; typeof x !== "number"; x = undefined) {
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>typeof x !== "number" : boolean
>                      : ^^^^^^^
>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>"number" : "number"
>         : ^^^^^^^^
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

        x; // string
>x : string
>  : ^^^^^^

        if (cond) break;
>cond : boolean
>     : ^^^^^^^
    }
    x; // string | number
>x : string | number
>  : ^^^^^^^^^^^^^^^
}

