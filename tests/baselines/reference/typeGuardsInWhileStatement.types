//// [tests/cases/conformance/expressions/typeGuards/typeGuardsInWhileStatement.ts] ////

=== typeGuardsInWhileStatement.ts ===
let cond: boolean;
>cond : boolean
>     : ^^^^^^^

function a(x: string | number) {
>a : (x: string | number) => void
>  : ^ ^^               ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^

    while (typeof x === "string") {
>typeof x === "string" : boolean
>                      : ^^^^^^^
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

        x; // string
>x : string
>  : ^^^^^^

        x = undefined;
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
    }
    x; // number
>x : number
>  : ^^^^^^
}
function b(x: string | number) {
>b : (x: string | number) => void
>  : ^ ^^               ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^

    while (typeof x === "string") {
>typeof x === "string" : boolean
>                      : ^^^^^^^
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

        if (cond) continue;
>cond : boolean
>     : ^^^^^^^

        x; // string
>x : string
>  : ^^^^^^

        x = undefined;
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
    }
    x; // number
>x : number
>  : ^^^^^^
}
function c(x: string | number) {
>c : (x: string | number) => void
>  : ^ ^^               ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^

    while (typeof x === "string") {
>typeof x === "string" : boolean
>                      : ^^^^^^^
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>"string" : "string"
>         : ^^^^^^^^

        if (cond) break;
>cond : boolean
>     : ^^^^^^^

        x; // string
>x : string
>  : ^^^^^^

        x = undefined;
>x = undefined : undefined
>              : ^^^^^^^^^
>x : string | number
>  : ^^^^^^^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
    }
    x; // string | number
>x : string | number
>  : ^^^^^^^^^^^^^^^
}

