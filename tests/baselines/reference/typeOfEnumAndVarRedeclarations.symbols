//// [tests/cases/compiler/typeOfEnumAndVarRedeclarations.ts] ////

=== typeOfEnumAndVarRedeclarations.ts ===
enum E {
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))

    a
>a : Symbol(E.a, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 8))
}
enum E {
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 2, 1))

    b = 1
>b : Symbol(E.b, Decl(typeOfEnumAndVarRedeclarations.ts, 3, 8))
}
var x = E;
>x : Symbol(x, Decl(typeOfEnumAndVarRedeclarations.ts, 6, 3), Decl(typeOfEnumAndVarRedeclarations.ts, 7, 3))
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))

var x: { readonly a: E; readonly b: E; readonly [x: number]: string; }; // Shouldnt error
>x : Symbol(x, Decl(typeOfEnumAndVarRedeclarations.ts, 6, 3), Decl(typeOfEnumAndVarRedeclarations.ts, 7, 3))
>a : Symbol(a, Decl(typeOfEnumAndVarRedeclarations.ts, 7, 8))
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))
>b : Symbol(b, Decl(typeOfEnumAndVarRedeclarations.ts, 7, 23))
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))
>x : Symbol(x, Decl(typeOfEnumAndVarRedeclarations.ts, 7, 49))

var y = E;
>y : Symbol(y, Decl(typeOfEnumAndVarRedeclarations.ts, 8, 3), Decl(typeOfEnumAndVarRedeclarations.ts, 9, 3))
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))

var y: { readonly a: E; readonly b: E; readonly [x: number]: string; readonly [x: number]: string } // two errors: the types are not identical and duplicate signatures
>y : Symbol(y, Decl(typeOfEnumAndVarRedeclarations.ts, 8, 3), Decl(typeOfEnumAndVarRedeclarations.ts, 9, 3))
>a : Symbol(a, Decl(typeOfEnumAndVarRedeclarations.ts, 9, 8))
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))
>b : Symbol(b, Decl(typeOfEnumAndVarRedeclarations.ts, 9, 23))
>E : Symbol(E, Decl(typeOfEnumAndVarRedeclarations.ts, 0, 0))
>x : Symbol(x, Decl(typeOfEnumAndVarRedeclarations.ts, 9, 49))
>x : Symbol(x, Decl(typeOfEnumAndVarRedeclarations.ts, 9, 79))

