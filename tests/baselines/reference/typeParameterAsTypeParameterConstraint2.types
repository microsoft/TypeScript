//// [tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraint2.ts] ////

=== typeParameterAsTypeParameterConstraint2.ts ===
// using a type parameter as a constraint for a type parameter is invalid
// these should be errors unless otherwise noted

function foo<T, U extends T>(x: T, y: U): U { return y; } // this is now an error
>foo : <T, U extends T>(x: T, y: U) => U
>    : ^ ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ 
>x : T
>  : ^
>y : U
>  : ^
>y : U
>  : ^

foo(1, '');
>foo(1, '') : number
>           : ^^^^^^
>foo : <T, U extends T>(x: T, y: U) => U
>    : ^ ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ 
>1 : 1
>  : ^
>'' : ""
>   : ^^

foo(1, {});
>foo(1, {}) : number
>           : ^^^^^^
>foo : <T, U extends T>(x: T, y: U) => U
>    : ^ ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ 
>1 : 1
>  : ^
>{} : {}
>   : ^^

interface NumberVariant extends Number {
    x: number;
>x : number
>  : ^^^^^^
}
var n: NumberVariant;
>n : NumberVariant
>  : ^^^^^^^^^^^^^

var r3 = foo(1, n);
>r3 : number
>   : ^^^^^^
>foo(1, n) : number
>          : ^^^^^^
>foo : <T, U extends T>(x: T, y: U) => U
>    : ^ ^^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ 
>1 : 1
>  : ^
>n : NumberVariant
>  : ^^^^^^^^^^^^^

function foo2<T, U extends { length: T }>(x: T, y: U) { return y; } // this is now an error
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>     : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^ ^^ ^^^^^^
>length : T
>       : ^
>x : T
>  : ^
>y : U
>  : ^
>y : U
>  : ^

foo2(1, { length: '' });
>foo2(1, { length: '' }) : { length: number; }
>                        : ^^^^^^^^^^^^^^^^^^^
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>     : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^ ^^ ^^^^^^
>1 : 1
>  : ^
>{ length: '' } : { length: string; }
>               : ^^^^^^^^^^^^^^^^^^^
>length : string
>       : ^^^^^^
>'' : ""
>   : ^^

foo2(1, { length: {} });
>foo2(1, { length: {} }) : { length: number; }
>                        : ^^^^^^^^^^^^^^^^^^^
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>     : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^ ^^ ^^^^^^
>1 : 1
>  : ^
>{ length: {} } : { length: {}; }
>               : ^^^^^^^^^^^^^^^
>length : {}
>       : ^^
>{} : {}
>   : ^^

foo2([], ['']);
>foo2([], ['']) : { length: any[]; }
>               : ^^^^^^^^^^^^^^^^^^
>foo2 : <T, U extends { length: T; }>(x: T, y: U) => U
>     : ^ ^^ ^^^^^^^^^              ^^ ^^ ^^ ^^ ^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>[''] : string[]
>     : ^^^^^^^^
>'' : ""
>   : ^^

