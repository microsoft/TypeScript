//// [tests/cases/compiler/typeParameterCompatibilityAccrossDeclarations.ts] ////

=== typeParameterCompatibilityAccrossDeclarations.ts ===
var a = {
>a : { x: <T>(y: T) => T; }
>  : ^^^^^^ ^^ ^^ ^^^^^ ^^^
>{   x: function <T>(y: T): T { return null; }} : { x: <T>(y: T) => T; }
>                                               : ^^^^^^ ^^ ^^ ^^^^^ ^^^

   x: function <T>(y: T): T { return null; }
>x : <T>(y: T) => T
>  : ^ ^^ ^^ ^^^^^ 
>function <T>(y: T): T { return null; } : <T>(y: T) => T
>                                       : ^ ^^ ^^ ^^^^^ 
>y : T
>  : ^
}
var a2 = {
>a2 : { x: (y: any) => any; }
>   : ^^^^^^ ^^   ^^^^^   ^^^
>{   x: function (y: any): any { return null; }} : { x: (y: any) => any; }
>                                                : ^^^^^^ ^^   ^^^^^   ^^^

   x: function (y: any): any { return null; }
>x : (y: any) => any
>  : ^ ^^   ^^^^^   
>function (y: any): any { return null; } : (y: any) => any
>                                        : ^ ^^   ^^^^^   
>y : any
}
export interface I {
   x<T>(y: T): T;
>x : <T>(y: T) => T
>  : ^ ^^ ^^ ^^^^^ 
>y : T
>  : ^
}
export interface I2 {
   x(y: any): any;
>x : (y: any) => any
>  : ^ ^^   ^^^^^   
>y : any
}
 
var i: I;
>i : I
>  : ^

var i2: I2;
>i2 : I2
>   : ^^
 
a = i; // error
>a = i : I
>      : ^
>a : { x: <T>(y: T) => T; }
>  : ^^^^^^ ^^ ^^ ^^^^^ ^^^
>i : I
>  : ^

i = a; // error
>i = a : { x: <T>(y: T) => T; }
>      : ^^^^^^ ^^ ^^ ^^^^^ ^^^
>i : I
>  : ^
>a : { x: <T>(y: T) => T; }
>  : ^^^^^^ ^^ ^^ ^^^^^ ^^^
 
a2 = i2; // no error
>a2 = i2 : I2
>        : ^^
>a2 : { x: (y: any) => any; }
>   : ^^^^^^ ^^   ^^^^^   ^^^
>i2 : I2
>   : ^^

i2 = a2; // no error
>i2 = a2 : { x: (y: any) => any; }
>        : ^^^^^^ ^^   ^^^^^   ^^^
>i2 : I2
>   : ^^
>a2 : { x: (y: any) => any; }
>   : ^^^^^^ ^^   ^^^^^   ^^^

