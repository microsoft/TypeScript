//// [tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiersWithIntersection.ts] ////

=== typeParameterConstModifiersWithIntersection.ts ===
// https://github.com/microsoft/TypeScript/issues/55778

interface Config<T1 extends { type: string }> {
>type : string
>     : ^^^^^^

  useIt: T1;
>useIt : T1
>      : ^^
}

declare function test<
>test : <T1 extends { type: string; }, const TConfig extends Config<T1>>(config: { produceThing: T1; } & TConfig) => TConfig
>     : ^  ^^^^^^^^^                 ^^^^^^^^       ^^^^^^^^^          ^^      ^^                               ^^^^^       

  T1 extends { type: string },
>type : string
>     : ^^^^^^

  const TConfig extends Config<T1>,
>(config: { produceThing: T1 } & TConfig): TConfig;
>config : { produceThing: T1; } & TConfig
>       : ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^
>produceThing : T1
>             : ^^

const result = test({
>result : { readonly produceThing: { type: "foo"; }; readonly useIt: { readonly type: "foo"; }; readonly extra: 10; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>test({  produceThing: {} as {    type: "foo";  },  useIt: {    type: "foo",  },  extra: 10,}) : { readonly produceThing: { type: "foo"; }; readonly useIt: { readonly type: "foo"; }; readonly extra: 10; }
>                                                                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>test : <T1 extends { type: string; }, const TConfig extends Config<T1>>(config: { produceThing: T1; } & TConfig) => TConfig
>     : ^  ^^^^^^^^^                 ^^^^^^^^       ^^^^^^^^^          ^^      ^^                               ^^^^^       
>{  produceThing: {} as {    type: "foo";  },  useIt: {    type: "foo",  },  extra: 10,} : { produceThing: { type: "foo"; }; useIt: { type: "foo"; }; extra: 10; }
>                                                                                        : ^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  produceThing: {} as {
>produceThing : { type: "foo"; }
>             : ^^^^^^^^     ^^^
>{} as {    type: "foo";  } : { type: "foo"; }
>                           : ^^^^^^^^     ^^^
>{} : {}
>   : ^^

    type: "foo";
>type : "foo"
>     : ^^^^^

  },
  useIt: {
>useIt : { type: "foo"; }
>      : ^^^^^^^^^^^^^^^^
>{    type: "foo",  } : { type: "foo"; }
>                     : ^^^^^^^^^^^^^^^^

    type: "foo",
>type : "foo"
>     : ^^^^^
>"foo" : "foo"
>      : ^^^^^

  },
  extra: 10,
>extra : 10
>      : ^^
>10 : 10
>   : ^^

});
