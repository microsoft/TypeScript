//// [tests/cases/compiler/typeParameterConstrainedToOuterTypeParameter.ts] ////

=== typeParameterConstrainedToOuterTypeParameter.ts ===
interface A<T> {
    <U extends T>(x: U[])
>x : U[]
>  : ^^^
}

interface B<T> {
    <U extends T>(x: U)
>x : U
>  : ^
}

var a: A<string>
>a : A<string>
>  : ^^^^^^^^^

var b: B<string> = a; // assignment should be legal (both U's get instantiated to any for comparison)
>b : B<string>
>  : ^^^^^^^^^
>a : A<string>
>  : ^^^^^^^^^

