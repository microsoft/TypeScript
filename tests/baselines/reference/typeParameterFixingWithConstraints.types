//// [tests/cases/compiler/typeParameterFixingWithConstraints.ts] ////

=== typeParameterFixingWithConstraints.ts ===
interface IBar {
    [barId: string]: any;
>barId : string
>      : ^^^^^^
}

interface IFoo {
    foo<TBar extends IBar>(bar: TBar, bar1: (bar: TBar) => TBar, bar2: (bar: TBar) => TBar): TBar;
>foo : <TBar extends IBar>(bar: TBar, bar1: (bar: TBar) => TBar, bar2: (bar: TBar) => TBar) => TBar
>    : ^    ^^^^^^^^^    ^^   ^^    ^^    ^^                   ^^    ^^                   ^^^^^    
>bar : TBar
>    : ^^^^
>bar1 : (bar: TBar) => TBar
>     : ^   ^^    ^^^^^    
>bar : TBar
>    : ^^^^
>bar2 : (bar: TBar) => TBar
>     : ^   ^^    ^^^^^    
>bar : TBar
>    : ^^^^
}

var foo: IFoo;
>foo : IFoo
>    : ^^^^

foo.foo({ bar: null }, bar => null, bar => null);
>foo.foo({ bar: null }, bar => null, bar => null) : { bar: any; }
>                                                 : ^^^^^^^^^^^^^
>foo.foo : <TBar extends IBar>(bar: TBar, bar1: (bar: TBar) => TBar, bar2: (bar: TBar) => TBar) => TBar
>        : ^    ^^^^^^^^^    ^^   ^^    ^^    ^^                   ^^    ^^                   ^^^^^    
>foo : IFoo
>    : ^^^^
>foo : <TBar extends IBar>(bar: TBar, bar1: (bar: TBar) => TBar, bar2: (bar: TBar) => TBar) => TBar
>    : ^    ^^^^^^^^^    ^^   ^^    ^^    ^^                   ^^    ^^                   ^^^^^    
>{ bar: null } : { bar: null; }
>              : ^^^^^^^^^^^^^^
>bar : null
>    : ^^^^
>bar => null : (bar: { bar: any; }) => any
>            : ^   ^^^^^^^^^^^^^^^^^^^^^^^
>bar : { bar: any; }
>    : ^^^^^^^^^^^^^
>bar => null : (bar: { bar: any; }) => any
>            : ^   ^^^^^^^^^^^^^^^^^^^^^^^
>bar : { bar: any; }
>    : ^^^^^^^^^^^^^

