//// [tests/cases/compiler/typePredicateFreshLiteralWidening.ts] ////

=== typePredicateFreshLiteralWidening.ts ===
type Narrowable = string | number | bigint | boolean;
>Narrowable : Narrowable
>           : ^^^^^^^^^^

type Narrow<A> = (A extends Narrowable ? A : never) | ({
>Narrow : Narrow<A>
>       : ^^^^^^^^^

    [K in keyof A]: Narrow<A[K]>;
});

const satisfies =
>satisfies : <TWide>() => <TNarrow extends TWide>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>          : ^     ^^^^^^^^                     ^^                       ^^^^^^^^^^^^^^^^^^^^

  <TWide,>() =>
><TWide,>() =>  <TNarrow extends TWide>(narrow: Narrow<TNarrow>) =>    narrow : <TWide>() => <TNarrow extends TWide>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>                                                                             : ^     ^^^^^^^^                     ^^                       ^^^^^^^^^^^^^^^^^^^^

  <TNarrow extends TWide>(narrow: Narrow<TNarrow>) =>
><TNarrow extends TWide>(narrow: Narrow<TNarrow>) =>    narrow : <TNarrow extends TWide>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>                                                              : ^       ^^^^^^^^^     ^^      ^^               ^^^^^^^^^^^^^^^^^^^^
>narrow : Narrow<TNarrow>
>       : ^^^^^^^^^^^^^^^

    narrow;
>narrow : Narrow<TNarrow>
>       : ^^^^^^^^^^^^^^^

/* ========================================================================== */

const isNotNull = <T,>(value: T | null): value is T => value !== null;
>isNotNull : <T>(value: T | null) => value is T
>          : ^ ^^     ^^        ^^^^^          
><T,>(value: T | null): value is T => value !== null : <T>(value: T | null) => value is T
>                                                    : ^ ^^     ^^        ^^^^^          
>value : T | null
>      : ^^^^^^^^
>value !== null : boolean
>               : ^^^^^^^
>value : T | null
>      : ^^^^^^^^

type Item = { value: string | null };
>Item : Item
>     : ^^^^
>value : string | null
>      : ^^^^^^^^^^^^^

const item1 = satisfies<Item>()({ value: "1" });
>item1 : { value: "1"; }
>      : ^^^^^^^^^^^^^^^
>satisfies<Item>()({ value: "1" }) : { value: "1"; }
>                                  : ^^^^^^^^^^^^^^^
>satisfies<Item>() : <TNarrow extends Item>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>                  : ^       ^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>satisfies : <TWide>() => <TNarrow extends TWide>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>          : ^     ^^^^^^^^                     ^^                       ^^^^^^^^^^^^^^^^^^^^
>{ value: "1" } : { value: "1"; }
>               : ^^^^^^^^^^^^^^^
>value : "1"
>      : ^^^
>"1" : "1"
>    : ^^^

const item2 = satisfies<Item>()({ value: "2" });
>item2 : { value: "2"; }
>      : ^^^^^^^^^^^^^^^
>satisfies<Item>()({ value: "2" }) : { value: "2"; }
>                                  : ^^^^^^^^^^^^^^^
>satisfies<Item>() : <TNarrow extends Item>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>                  : ^       ^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>satisfies : <TWide>() => <TNarrow extends TWide>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>          : ^     ^^^^^^^^                     ^^                       ^^^^^^^^^^^^^^^^^^^^
>{ value: "2" } : { value: "2"; }
>               : ^^^^^^^^^^^^^^^
>value : "2"
>      : ^^^
>"2" : "2"
>    : ^^^

const item3 = satisfies<Item>()({ value: null });
>item3 : { value: null; }
>      : ^^^^^^^^^^^^^^^^
>satisfies<Item>()({ value: null }) : { value: null; }
>                                   : ^^^^^^^^^^^^^^^^
>satisfies<Item>() : <TNarrow extends Item>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>                  : ^       ^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>satisfies : <TWide>() => <TNarrow extends TWide>(narrow: Narrow<TNarrow>) => Narrow<TNarrow>
>          : ^     ^^^^^^^^                     ^^                       ^^^^^^^^^^^^^^^^^^^^
>{ value: null } : { value: null; }
>                : ^^^^^^^^^^^^^^^^
>value : null
>      : ^^^^

const values2: Array<"1" | "2" | null> = ["1", "2", null];
>values2 : ("1" | "2" | null)[]
>        : ^^^^^^^^^^^^^^^^^^^^
>["1", "2", null] : ("1" | "2" | null)[]
>                 : ^^^^^^^^^^^^^^^^^^^^
>"1" : "1"
>    : ^^^
>"2" : "2"
>    : ^^^

const filteredValues2 = values2.filter(isNotNull);
>filteredValues2 : ("1" | "2")[]
>                : ^^^^^^^^^^^^^
>values2.filter(isNotNull) : ("1" | "2")[]
>                          : ^^^^^^^^^^^^^
>values2.filter : { <S extends "1" | "2" | null>(predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => value is S, thisArg?: any): S[]; (predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => unknown, thisArg?: any): ("1" | "2" | null)[]; }
>               : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>values2 : ("1" | "2" | null)[]
>        : ^^^^^^^^^^^^^^^^^^^^
>filter : { <S extends "1" | "2" | null>(predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => value is S, thisArg?: any): S[]; (predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => unknown, thisArg?: any): ("1" | "2" | null)[]; }
>       : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>isNotNull : <T>(value: T | null) => value is T
>          : ^ ^^     ^^        ^^^^^          

const values1 = [item1, item2, item3].map(item => item.value);
>values1 : ("1" | "2" | null)[]
>        : ^^^^^^^^^^^^^^^^^^^^
>[item1, item2, item3].map(item => item.value) : ("1" | "2" | null)[]
>                                              : ^^^^^^^^^^^^^^^^^^^^
>[item1, item2, item3].map : <U>(callbackfn: (value: { value: "1"; } | { value: "2"; } | { value: null; }, index: number, array: ({ value: "1"; } | { value: "2"; } | { value: null; })[]) => U, thisArg?: any) => U[]
>                          : ^ ^^          ^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^
>[item1, item2, item3] : ({ value: "1"; } | { value: "2"; } | { value: null; })[]
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item1 : { value: "1"; }
>      : ^^^^^^^^^^^^^^^
>item2 : { value: "2"; }
>      : ^^^^^^^^^^^^^^^
>item3 : { value: null; }
>      : ^^^^^^^^^^^^^^^^
>map : <U>(callbackfn: (value: { value: "1"; } | { value: "2"; } | { value: null; }, index: number, array: ({ value: "1"; } | { value: "2"; } | { value: null; })[]) => U, thisArg?: any) => U[]
>    : ^ ^^          ^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^
>item => item.value : (item: { value: "1"; } | { value: "2"; } | { value: null; }) => "1" | "2" | null
>                   : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : { value: "1"; } | { value: "2"; } | { value: null; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item.value : "1" | "2" | null
>           : ^^^^^^^^^^^^^^^^
>item : { value: "1"; } | { value: "2"; } | { value: null; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value : "1" | "2" | null
>      : ^^^^^^^^^^^^^^^^

const filteredValues1 = values1.filter(isNotNull);
>filteredValues1 : ("1" | "2")[]
>                : ^^^^^^^^^^^^^
>values1.filter(isNotNull) : ("1" | "2")[]
>                          : ^^^^^^^^^^^^^
>values1.filter : { <S extends "1" | "2" | null>(predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => value is S, thisArg?: any): S[]; (predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => unknown, thisArg?: any): ("1" | "2" | null)[]; }
>               : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>values1 : ("1" | "2" | null)[]
>        : ^^^^^^^^^^^^^^^^^^^^
>filter : { <S extends "1" | "2" | null>(predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => value is S, thisArg?: any): S[]; (predicate: (value: "1" | "2" | null, index: number, array: ("1" | "2" | null)[]) => unknown, thisArg?: any): ("1" | "2" | null)[]; }
>       : ^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^^^^^^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>isNotNull : <T>(value: T | null) => value is T
>          : ^ ^^     ^^        ^^^^^          

