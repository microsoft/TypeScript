//// [tests/cases/compiler/typeValueConflict2.ts] ////

=== typeValueConflict2.ts ===
namespace M1 {
>M1 : Symbol(M1, Decl(typeValueConflict2.ts, 0, 0))

    export class A<T> {
>A : Symbol(A, Decl(typeValueConflict2.ts, 0, 14))
>T : Symbol(T, Decl(typeValueConflict2.ts, 1, 19))

        constructor(a: T) {
>a : Symbol(a, Decl(typeValueConflict2.ts, 2, 20))
>T : Symbol(T, Decl(typeValueConflict2.ts, 1, 19))
        }
    }
}
namespace M2 {
>M2 : Symbol(M2, Decl(typeValueConflict2.ts, 5, 1))

    var M1 = 0;
>M1 : Symbol(M1, Decl(typeValueConflict2.ts, 7, 7))

    // Should error.  M1 should bind to the variable, not to the module.
    class B extends M1.A<string> {
>B : Symbol(B, Decl(typeValueConflict2.ts, 7, 15))
>M1.A : Symbol(M1.A, Decl(typeValueConflict2.ts, 0, 14))
>M1 : Symbol(M1, Decl(typeValueConflict2.ts, 0, 0))
>A : Symbol(M1.A, Decl(typeValueConflict2.ts, 0, 14))
    }
}
namespace M3 {
>M3 : Symbol(M3, Decl(typeValueConflict2.ts, 11, 1))

    // Shouldn't error
    class B extends M1.A<string> {
>B : Symbol(B, Decl(typeValueConflict2.ts, 12, 14))
>M1.A : Symbol(M1.A, Decl(typeValueConflict2.ts, 0, 14))
>M1 : Symbol(M1, Decl(typeValueConflict2.ts, 0, 0))
>A : Symbol(M1.A, Decl(typeValueConflict2.ts, 0, 14))
    }
}

