//// [tests/cases/compiler/typeVariableConstraintedToAliasNotAssignableToUnion.ts] ////

=== typeVariableConstraintedToAliasNotAssignableToUnion.ts ===
declare class TableClass<S = any> {
>TableClass : TableClass<S>
>           : ^^^^^^^^^^^^^

    _field: S;
>_field : S
>       : ^
}

export type Table = TableClass;
>Table : Table
>      : ^^^^^

interface Something {
    prop: number;
>prop : number
>     : ^^^^^^
}

interface SomethingElse {
    prop2: string;
>prop2 : string
>      : ^^^^^^
}

declare let aBoolean: boolean;
>aBoolean : boolean
>         : ^^^^^^^

declare let aStringOrNumber: string | number;
>aStringOrNumber : string | number
>                : ^^^^^^^^^^^^^^^

declare let aStringOrSomething: string | Something;
>aStringOrSomething : string | Something
>                   : ^^^^^^^^^^^^^^^^^^

declare let someUnion: Something | SomethingElse;
>someUnion : Something | SomethingElse
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^

function fn<T extends Table>(o: T) {
>fn : <T extends Table>(o: T) => void
>   : ^ ^^^^^^^^^     ^^ ^^ ^^^^^^^^^
>o : T
>  : ^

    aBoolean = o;
>aBoolean = o : T
>             : ^
>aBoolean : boolean
>         : ^^^^^^^
>o : T
>  : ^

    aStringOrNumber = o;
>aStringOrNumber = o : T
>                    : ^
>aStringOrNumber : string | number
>                : ^^^^^^^^^^^^^^^
>o : T
>  : ^

    aStringOrSomething = o;
>aStringOrSomething = o : T
>                       : ^
>aStringOrSomething : string | Something
>                   : ^^^^^^^^^^^^^^^^^^
>o : T
>  : ^

    someUnion = o;
>someUnion = o : T
>              : ^
>someUnion : Something | SomethingElse
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>o : T
>  : ^
}

function fn2<T extends TableClass>(o: T) {
>fn2 : <T extends TableClass>(o: T) => void
>    : ^ ^^^^^^^^^          ^^ ^^ ^^^^^^^^^
>o : T
>  : ^

    aBoolean = o;
>aBoolean = o : T
>             : ^
>aBoolean : boolean
>         : ^^^^^^^
>o : T
>  : ^

    aStringOrNumber = o;
>aStringOrNumber = o : T
>                    : ^
>aStringOrNumber : string | number
>                : ^^^^^^^^^^^^^^^
>o : T
>  : ^

    aStringOrSomething = o;
>aStringOrSomething = o : T
>                       : ^
>aStringOrSomething : string | Something
>                   : ^^^^^^^^^^^^^^^^^^
>o : T
>  : ^

    someUnion = o;
>someUnion = o : T
>              : ^
>someUnion : Something | SomethingElse
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>o : T
>  : ^
}

declare const o: Table;
>o : Table
>  : ^^^^^

aBoolean = o;
>aBoolean = o : Table
>             : ^^^^^
>aBoolean : boolean
>         : ^^^^^^^
>o : Table
>  : ^^^^^

aStringOrNumber = o;
>aStringOrNumber = o : Table
>                    : ^^^^^
>aStringOrNumber : string | number
>                : ^^^^^^^^^^^^^^^
>o : Table
>  : ^^^^^

aStringOrSomething = o;
>aStringOrSomething = o : Table
>                       : ^^^^^
>aStringOrSomething : string | Something
>                   : ^^^^^^^^^^^^^^^^^^
>o : Table
>  : ^^^^^

someUnion = o;
>someUnion = o : Table
>              : ^^^^^
>someUnion : Something | SomethingElse
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>o : Table
>  : ^^^^^

