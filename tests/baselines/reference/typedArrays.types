//// [tests/cases/compiler/typedArrays.ts] ////

=== typedArrays.ts ===
function CreateTypedArrayTypes() {
>CreateTypedArrayTypes : () => any[]
>                      : ^^^^^^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array;
>typedArrays[0] = Int8Array : Int8ArrayConstructor
>                           : ^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^

    typedArrays[1] = Uint8Array;
>typedArrays[1] = Uint8Array : Uint8ArrayConstructor
>                            : ^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^

    typedArrays[2] = Int16Array;
>typedArrays[2] = Int16Array : Int16ArrayConstructor
>                            : ^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^

    typedArrays[3] = Uint16Array;
>typedArrays[3] = Uint16Array : Uint16ArrayConstructor
>                             : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^

    typedArrays[4] = Int32Array;
>typedArrays[4] = Int32Array : Int32ArrayConstructor
>                            : ^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^

    typedArrays[5] = Uint32Array;
>typedArrays[5] = Uint32Array : Uint32ArrayConstructor
>                             : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^

    typedArrays[6] = Float32Array;
>typedArrays[6] = Float32Array : Float32ArrayConstructor
>                              : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^

    typedArrays[7] = Float64Array;
>typedArrays[7] = Float64Array : Float64ArrayConstructor
>                              : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^

    typedArrays[8] = Uint8ClampedArray;
>typedArrays[8] = Uint8ClampedArray : Uint8ClampedArrayConstructor
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArrayInstancesFromLength(obj: number) {
>CreateTypedArrayInstancesFromLength : (obj: number) => any[]
>                                    : ^   ^^      ^^^^^^^^^^
>obj : number
>    : ^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = new Int8Array(obj);
>typedArrays[0] = new Int8Array(obj) : Int8Array<ArrayBuffer>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>new Int8Array(obj) : Int8Array<ArrayBuffer>
>                   : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[1] = new Uint8Array(obj);
>typedArrays[1] = new Uint8Array(obj) : Uint8Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>new Uint8Array(obj) : Uint8Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[2] = new Int16Array(obj);
>typedArrays[2] = new Int16Array(obj) : Int16Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>new Int16Array(obj) : Int16Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[3] = new Uint16Array(obj);
>typedArrays[3] = new Uint16Array(obj) : Uint16Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>new Uint16Array(obj) : Uint16Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[4] = new Int32Array(obj);
>typedArrays[4] = new Int32Array(obj) : Int32Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>new Int32Array(obj) : Int32Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[5] = new Uint32Array(obj);
>typedArrays[5] = new Uint32Array(obj) : Uint32Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>new Uint32Array(obj) : Uint32Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[6] = new Float32Array(obj);
>typedArrays[6] = new Float32Array(obj) : Float32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>new Float32Array(obj) : Float32Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[7] = new Float64Array(obj);
>typedArrays[7] = new Float64Array(obj) : Float64Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>new Float64Array(obj) : Float64Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    typedArrays[8] = new Uint8ClampedArray(obj);
>typedArrays[8] = new Uint8ClampedArray(obj) : Uint8ClampedArray<ArrayBuffer>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>new Uint8ClampedArray(obj) : Uint8ClampedArray<ArrayBuffer>
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : number
>    : ^^^^^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArrayInstancesFromArray(obj: number[]) {
>CreateTypedArrayInstancesFromArray : (obj: number[]) => any[]
>                                   : ^   ^^        ^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = new Int8Array(obj);
>typedArrays[0] = new Int8Array(obj) : Int8Array<ArrayBuffer>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>new Int8Array(obj) : Int8Array<ArrayBuffer>
>                   : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[1] = new Uint8Array(obj);
>typedArrays[1] = new Uint8Array(obj) : Uint8Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>new Uint8Array(obj) : Uint8Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[2] = new Int16Array(obj);
>typedArrays[2] = new Int16Array(obj) : Int16Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>new Int16Array(obj) : Int16Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[3] = new Uint16Array(obj);
>typedArrays[3] = new Uint16Array(obj) : Uint16Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>new Uint16Array(obj) : Uint16Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[4] = new Int32Array(obj);
>typedArrays[4] = new Int32Array(obj) : Int32Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>new Int32Array(obj) : Int32Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[5] = new Uint32Array(obj);
>typedArrays[5] = new Uint32Array(obj) : Uint32Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>new Uint32Array(obj) : Uint32Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[6] = new Float32Array(obj);
>typedArrays[6] = new Float32Array(obj) : Float32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>new Float32Array(obj) : Float32Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[7] = new Float64Array(obj);
>typedArrays[7] = new Float64Array(obj) : Float64Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>new Float64Array(obj) : Float64Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[8] = new Uint8ClampedArray(obj);
>typedArrays[8] = new Uint8ClampedArray(obj) : Uint8ClampedArray<ArrayBuffer>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>new Uint8ClampedArray(obj) : Uint8ClampedArray<ArrayBuffer>
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateIntegerTypedArraysFromArray2(obj:number[]) {
>CreateIntegerTypedArraysFromArray2 : (obj: number[]) => any[]
>                                   : ^   ^^        ^^^^^^^^^^
>obj : number[]
>    : ^^^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.from(obj);
>typedArrays[0] = Int8Array.from(obj) : Int8Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.from(obj) : Int8Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>               : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[1] = Uint8Array.from(obj);
>typedArrays[1] = Uint8Array.from(obj) : Uint8Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.from(obj) : Uint8Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[2] = Int16Array.from(obj);
>typedArrays[2] = Int16Array.from(obj) : Int16Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.from(obj) : Int16Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[3] = Uint16Array.from(obj);
>typedArrays[3] = Uint16Array.from(obj) : Uint16Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.from(obj) : Uint16Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[4] = Int32Array.from(obj);
>typedArrays[4] = Int32Array.from(obj) : Int32Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.from(obj) : Int32Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[5] = Uint32Array.from(obj);
>typedArrays[5] = Uint32Array.from(obj) : Uint32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.from(obj) : Uint32Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[6] = Float32Array.from(obj);
>typedArrays[6] = Float32Array.from(obj) : Float32Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.from(obj) : Float32Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[7] = Float64Array.from(obj);
>typedArrays[7] = Float64Array.from(obj) : Float64Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.from(obj) : Float64Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : number[]
>    : ^^^^^^^^

    typedArrays[8] = Uint8ClampedArray.from(obj);
>typedArrays[8] = Uint8ClampedArray.from(obj) : Uint8ClampedArray<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.from(obj) : Uint8ClampedArray<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>                       : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>obj : number[]
>    : ^^^^^^^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateIntegerTypedArraysFromArrayLike(obj:ArrayLike<number>) {
>CreateIntegerTypedArraysFromArrayLike : (obj: ArrayLike<number>) => any[]
>                                      : ^   ^^                 ^^^^^^^^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.from(obj);
>typedArrays[0] = Int8Array.from(obj) : Int8Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.from(obj) : Int8Array<ArrayBuffer>
>                    : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>               : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[1] = Uint8Array.from(obj);
>typedArrays[1] = Uint8Array.from(obj) : Uint8Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.from(obj) : Uint8Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[2] = Int16Array.from(obj);
>typedArrays[2] = Int16Array.from(obj) : Int16Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.from(obj) : Int16Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[3] = Uint16Array.from(obj);
>typedArrays[3] = Uint16Array.from(obj) : Uint16Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.from(obj) : Uint16Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[4] = Int32Array.from(obj);
>typedArrays[4] = Int32Array.from(obj) : Int32Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.from(obj) : Int32Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[5] = Uint32Array.from(obj);
>typedArrays[5] = Uint32Array.from(obj) : Uint32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.from(obj) : Uint32Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[6] = Float32Array.from(obj);
>typedArrays[6] = Float32Array.from(obj) : Float32Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.from(obj) : Float32Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[7] = Float64Array.from(obj);
>typedArrays[7] = Float64Array.from(obj) : Float64Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.from(obj) : Float64Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    typedArrays[8] = Uint8ClampedArray.from(obj);
>typedArrays[8] = Uint8ClampedArray.from(obj) : Uint8ClampedArray<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.from(obj) : Uint8ClampedArray<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>                       : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArraysOf(obj) {
>CreateTypedArraysOf : (obj: any) => any[]
>                    : ^   ^^^^^^^^^^^^^^^
>obj : any

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.of(...obj);
>typedArrays[0] = Int8Array.of(...obj) : Int8Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.of(...obj) : Int8Array<ArrayBuffer>
>                     : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.of : (...items: number[]) => Int8Array<ArrayBuffer>
>             : ^^^^     ^^        ^^^^^                      
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Int8Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                      
>...obj : any
>obj : any

    typedArrays[1] = Uint8Array.of(...obj);
>typedArrays[1] = Uint8Array.of(...obj) : Uint8Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.of(...obj) : Uint8Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.of : (...items: number[]) => Uint8Array<ArrayBuffer>
>              : ^^^^     ^^        ^^^^^                       
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint8Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                       
>...obj : any
>obj : any

    typedArrays[2] = Int16Array.of(...obj);
>typedArrays[2] = Int16Array.of(...obj) : Int16Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.of(...obj) : Int16Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.of : (...items: number[]) => Int16Array<ArrayBuffer>
>              : ^^^^     ^^        ^^^^^                       
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Int16Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                       
>...obj : any
>obj : any

    typedArrays[3] = Uint16Array.of(...obj);
>typedArrays[3] = Uint16Array.of(...obj) : Uint16Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.of(...obj) : Uint16Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.of : (...items: number[]) => Uint16Array<ArrayBuffer>
>               : ^^^^     ^^        ^^^^^                        
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint16Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                        
>...obj : any
>obj : any

    typedArrays[4] = Int32Array.of(...obj);
>typedArrays[4] = Int32Array.of(...obj) : Int32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.of(...obj) : Int32Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.of : (...items: number[]) => Int32Array<ArrayBuffer>
>              : ^^^^     ^^        ^^^^^                       
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Int32Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                       
>...obj : any
>obj : any

    typedArrays[5] = Uint32Array.of(...obj);
>typedArrays[5] = Uint32Array.of(...obj) : Uint32Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.of(...obj) : Uint32Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.of : (...items: number[]) => Uint32Array<ArrayBuffer>
>               : ^^^^     ^^        ^^^^^                        
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint32Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                        
>...obj : any
>obj : any

    typedArrays[6] = Float32Array.of(...obj);
>typedArrays[6] = Float32Array.of(...obj) : Float32Array<ArrayBuffer>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.of(...obj) : Float32Array<ArrayBuffer>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.of : (...items: number[]) => Float32Array<ArrayBuffer>
>                : ^^^^     ^^        ^^^^^                         
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Float32Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                         
>...obj : any
>obj : any

    typedArrays[7] = Float64Array.of(...obj);
>typedArrays[7] = Float64Array.of(...obj) : Float64Array<ArrayBuffer>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.of(...obj) : Float64Array<ArrayBuffer>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.of : (...items: number[]) => Float64Array<ArrayBuffer>
>                : ^^^^     ^^        ^^^^^                         
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Float64Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                         
>...obj : any
>obj : any

    typedArrays[8] = Uint8ClampedArray.of(...obj);
>typedArrays[8] = Uint8ClampedArray.of(...obj) : Uint8ClampedArray<ArrayBuffer>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.of(...obj) : Uint8ClampedArray<ArrayBuffer>
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.of : (...items: number[]) => Uint8ClampedArray<ArrayBuffer>
>                     : ^^^^     ^^        ^^^^^                              
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint8ClampedArray<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                              
>...obj : any
>obj : any

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArraysOf2() {
>CreateTypedArraysOf2 : () => any[]
>                     : ^^^^^^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.of(1,2,3,4);
>typedArrays[0] = Int8Array.of(1,2,3,4) : Int8Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.of(1,2,3,4) : Int8Array<ArrayBuffer>
>                      : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.of : (...items: number[]) => Int8Array<ArrayBuffer>
>             : ^^^^     ^^        ^^^^^                      
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Int8Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                      
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[1] = Uint8Array.of(1,2,3,4);
>typedArrays[1] = Uint8Array.of(1,2,3,4) : Uint8Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.of(1,2,3,4) : Uint8Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.of : (...items: number[]) => Uint8Array<ArrayBuffer>
>              : ^^^^     ^^        ^^^^^                       
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint8Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                       
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[2] = Int16Array.of(1,2,3,4);
>typedArrays[2] = Int16Array.of(1,2,3,4) : Int16Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.of(1,2,3,4) : Int16Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.of : (...items: number[]) => Int16Array<ArrayBuffer>
>              : ^^^^     ^^        ^^^^^                       
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Int16Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                       
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[3] = Uint16Array.of(1,2,3,4);
>typedArrays[3] = Uint16Array.of(1,2,3,4) : Uint16Array<ArrayBuffer>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.of(1,2,3,4) : Uint16Array<ArrayBuffer>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.of : (...items: number[]) => Uint16Array<ArrayBuffer>
>               : ^^^^     ^^        ^^^^^                        
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint16Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                        
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[4] = Int32Array.of(1,2,3,4);
>typedArrays[4] = Int32Array.of(1,2,3,4) : Int32Array<ArrayBuffer>
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.of(1,2,3,4) : Int32Array<ArrayBuffer>
>                       : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.of : (...items: number[]) => Int32Array<ArrayBuffer>
>              : ^^^^     ^^        ^^^^^                       
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Int32Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                       
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[5] = Uint32Array.of(1,2,3,4);
>typedArrays[5] = Uint32Array.of(1,2,3,4) : Uint32Array<ArrayBuffer>
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.of(1,2,3,4) : Uint32Array<ArrayBuffer>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.of : (...items: number[]) => Uint32Array<ArrayBuffer>
>               : ^^^^     ^^        ^^^^^                        
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint32Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                        
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[6] = Float32Array.of(1,2,3,4);
>typedArrays[6] = Float32Array.of(1,2,3,4) : Float32Array<ArrayBuffer>
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.of(1,2,3,4) : Float32Array<ArrayBuffer>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.of : (...items: number[]) => Float32Array<ArrayBuffer>
>                : ^^^^     ^^        ^^^^^                         
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Float32Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                         
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[7] = Float64Array.of(1,2,3,4);
>typedArrays[7] = Float64Array.of(1,2,3,4) : Float64Array<ArrayBuffer>
>                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.of(1,2,3,4) : Float64Array<ArrayBuffer>
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.of : (...items: number[]) => Float64Array<ArrayBuffer>
>                : ^^^^     ^^        ^^^^^                         
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Float64Array<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                         
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    typedArrays[8] = Uint8ClampedArray.of(1,2,3,4);
>typedArrays[8] = Uint8ClampedArray.of(1,2,3,4) : Uint8ClampedArray<ArrayBuffer>
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.of(1,2,3,4) : Uint8ClampedArray<ArrayBuffer>
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.of : (...items: number[]) => Uint8ClampedArray<ArrayBuffer>
>                     : ^^^^     ^^        ^^^^^                              
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>of : (...items: number[]) => Uint8ClampedArray<ArrayBuffer>
>   : ^^^^     ^^        ^^^^^                              
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArraysFromMapFn2<T>(obj:ArrayLike<T>, mapFn: (n:T, v:number)=> number) {
>CreateTypedArraysFromMapFn2 : <T>(obj: ArrayLike<T>, mapFn: (n: T, v: number) => number) => any[]
>                            : ^ ^^   ^^            ^^     ^^                           ^^^^^^^^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>n : T
>  : ^
>v : number
>  : ^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.from(obj, mapFn);
>typedArrays[0] = Int8Array.from(obj, mapFn) : Int8Array<ArrayBuffer>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.from(obj, mapFn) : Int8Array<ArrayBuffer>
>                           : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>               : ^^^         ^^                 ^^^                      ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                      ^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                      ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                      ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[1] = Uint8Array.from(obj, mapFn);
>typedArrays[1] = Uint8Array.from(obj, mapFn) : Uint8Array<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.from(obj, mapFn) : Uint8Array<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[2] = Int16Array.from(obj, mapFn);
>typedArrays[2] = Int16Array.from(obj, mapFn) : Int16Array<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.from(obj, mapFn) : Int16Array<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[3] = Uint16Array.from(obj, mapFn);
>typedArrays[3] = Uint16Array.from(obj, mapFn) : Uint16Array<ArrayBuffer>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.from(obj, mapFn) : Uint16Array<ArrayBuffer>
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[4] = Int32Array.from(obj, mapFn);
>typedArrays[4] = Int32Array.from(obj, mapFn) : Int32Array<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.from(obj, mapFn) : Int32Array<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[5] = Uint32Array.from(obj, mapFn);
>typedArrays[5] = Uint32Array.from(obj, mapFn) : Uint32Array<ArrayBuffer>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.from(obj, mapFn) : Uint32Array<ArrayBuffer>
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[6] = Float32Array.from(obj, mapFn);
>typedArrays[6] = Float32Array.from(obj, mapFn) : Float32Array<ArrayBuffer>
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.from(obj, mapFn) : Float32Array<ArrayBuffer>
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[7] = Float64Array.from(obj, mapFn);
>typedArrays[7] = Float64Array.from(obj, mapFn) : Float64Array<ArrayBuffer>
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.from(obj, mapFn) : Float64Array<ArrayBuffer>
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn);
>typedArrays[8] = Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray<ArrayBuffer>
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray<ArrayBuffer>
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>                       : ^^^         ^^                 ^^^                              ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                              ^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                              ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                              ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArraysFromMapFn(obj:ArrayLike<number>, mapFn: (n:number, v:number)=> number) {
>CreateTypedArraysFromMapFn : (obj: ArrayLike<number>, mapFn: (n: number, v: number) => number) => any[]
>                           : ^   ^^                 ^^     ^^                                ^^^^^^^^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>n : number
>  : ^^^^^^
>v : number
>  : ^^^^^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.from(obj, mapFn);
>typedArrays[0] = Int8Array.from(obj, mapFn) : Int8Array<ArrayBuffer>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.from(obj, mapFn) : Int8Array<ArrayBuffer>
>                           : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>               : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[1] = Uint8Array.from(obj, mapFn);
>typedArrays[1] = Uint8Array.from(obj, mapFn) : Uint8Array<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.from(obj, mapFn) : Uint8Array<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[2] = Int16Array.from(obj, mapFn);
>typedArrays[2] = Int16Array.from(obj, mapFn) : Int16Array<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.from(obj, mapFn) : Int16Array<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[3] = Uint16Array.from(obj, mapFn);
>typedArrays[3] = Uint16Array.from(obj, mapFn) : Uint16Array<ArrayBuffer>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.from(obj, mapFn) : Uint16Array<ArrayBuffer>
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[4] = Int32Array.from(obj, mapFn);
>typedArrays[4] = Int32Array.from(obj, mapFn) : Int32Array<ArrayBuffer>
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.from(obj, mapFn) : Int32Array<ArrayBuffer>
>                            : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[5] = Uint32Array.from(obj, mapFn);
>typedArrays[5] = Uint32Array.from(obj, mapFn) : Uint32Array<ArrayBuffer>
>                                              : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.from(obj, mapFn) : Uint32Array<ArrayBuffer>
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[6] = Float32Array.from(obj, mapFn);
>typedArrays[6] = Float32Array.from(obj, mapFn) : Float32Array<ArrayBuffer>
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.from(obj, mapFn) : Float32Array<ArrayBuffer>
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[7] = Float64Array.from(obj, mapFn);
>typedArrays[7] = Float64Array.from(obj, mapFn) : Float64Array<ArrayBuffer>
>                                               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.from(obj, mapFn) : Float64Array<ArrayBuffer>
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn);
>typedArrays[8] = Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray<ArrayBuffer>
>                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray<ArrayBuffer>
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>                       : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArraysFromThisObj(obj:ArrayLike<number>, mapFn: (n:number, v:number)=> number, thisArg: {}) {
>CreateTypedArraysFromThisObj : (obj: ArrayLike<number>, mapFn: (n: number, v: number) => number, thisArg: {}) => any[]
>                             : ^   ^^                 ^^     ^^                                ^^       ^^  ^^^^^^^^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>n : number
>  : ^^^^^^
>v : number
>  : ^^^^^^
>thisArg : {}
>        : ^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.from(obj, mapFn, thisArg);
>typedArrays[0] = Int8Array.from(obj, mapFn, thisArg) : Int8Array<ArrayBuffer>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.from(obj, mapFn, thisArg) : Int8Array<ArrayBuffer>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>               : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                      ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                      ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg);
>typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg) : Uint8Array<ArrayBuffer>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.from(obj, mapFn, thisArg) : Uint8Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[2] = Int16Array.from(obj, mapFn, thisArg);
>typedArrays[2] = Int16Array.from(obj, mapFn, thisArg) : Int16Array<ArrayBuffer>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.from(obj, mapFn, thisArg) : Int16Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg);
>typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg) : Uint16Array<ArrayBuffer>
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.from(obj, mapFn, thisArg) : Uint16Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[4] = Int32Array.from(obj, mapFn, thisArg);
>typedArrays[4] = Int32Array.from(obj, mapFn, thisArg) : Int32Array<ArrayBuffer>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.from(obj, mapFn, thisArg) : Int32Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg);
>typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg) : Uint32Array<ArrayBuffer>
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.from(obj, mapFn, thisArg) : Uint32Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[6] = Float32Array.from(obj, mapFn, thisArg);
>typedArrays[6] = Float32Array.from(obj, mapFn, thisArg) : Float32Array<ArrayBuffer>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.from(obj, mapFn, thisArg) : Float32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[7] = Float64Array.from(obj, mapFn, thisArg);
>typedArrays[7] = Float64Array.from(obj, mapFn, thisArg) : Float64Array<ArrayBuffer>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.from(obj, mapFn, thisArg) : Float64Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg);
>typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray<ArrayBuffer>
>                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray<ArrayBuffer>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>                       : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                              ^^^ ^^         ^^            ^^     ^^                           ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^ ^^        ^^           ^^     ^^^                           ^^       ^^^   ^^^                              ^^^
>obj : ArrayLike<number>
>    : ^^^^^^^^^^^^^^^^^
>mapFn : (n: number, v: number) => number
>      : ^ ^^      ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}

function CreateTypedArraysFromThisObj2<T>(obj:ArrayLike<T>, mapFn: (n:T, v:number)=> number, thisArg: {}) {
>CreateTypedArraysFromThisObj2 : <T>(obj: ArrayLike<T>, mapFn: (n: T, v: number) => number, thisArg: {}) => any[]
>                              : ^ ^^   ^^            ^^     ^^                           ^^       ^^  ^^^^^^^^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>n : T
>  : ^
>v : number
>  : ^^^^^^
>thisArg : {}
>        : ^^

    var typedArrays = [];
>typedArrays : any[]
>            : ^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

    typedArrays[0] = Int8Array.from(obj, mapFn, thisArg);
>typedArrays[0] = Int8Array.from(obj, mapFn, thisArg) : Int8Array<ArrayBuffer>
>                                                     : ^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[0] : any
>typedArrays : any[]
>            : ^^^^^
>0 : 0
>  : ^
>Int8Array.from(obj, mapFn, thisArg) : Int8Array<ArrayBuffer>
>                                    : ^^^^^^^^^^^^^^^^^^^^^^
>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>               : ^^^         ^^                 ^^^                      ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                      ^^^
>Int8Array : Int8ArrayConstructor
>          : ^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (elements: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                      ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                      ^^^        ^^                ^^^                      ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                      ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg);
>typedArrays[1] = Uint8Array.from(obj, mapFn, thisArg) : Uint8Array<ArrayBuffer>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[1] : any
>typedArrays : any[]
>            : ^^^^^
>1 : 1
>  : ^
>Uint8Array.from(obj, mapFn, thisArg) : Uint8Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>Uint8Array : Uint8ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (elements: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[2] = Int16Array.from(obj, mapFn, thisArg);
>typedArrays[2] = Int16Array.from(obj, mapFn, thisArg) : Int16Array<ArrayBuffer>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[2] : any
>typedArrays : any[]
>            : ^^^^^
>2 : 2
>  : ^
>Int16Array.from(obj, mapFn, thisArg) : Int16Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>Int16Array : Int16ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (elements: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg);
>typedArrays[3] = Uint16Array.from(obj, mapFn, thisArg) : Uint16Array<ArrayBuffer>
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[3] : any
>typedArrays : any[]
>            : ^^^^^
>3 : 3
>  : ^
>Uint16Array.from(obj, mapFn, thisArg) : Uint16Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>Uint16Array : Uint16ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (elements: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[4] = Int32Array.from(obj, mapFn, thisArg);
>typedArrays[4] = Int32Array.from(obj, mapFn, thisArg) : Int32Array<ArrayBuffer>
>                                                      : ^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[4] : any
>typedArrays : any[]
>            : ^^^^^
>4 : 4
>  : ^
>Int32Array.from(obj, mapFn, thisArg) : Int32Array<ArrayBuffer>
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^
>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>                : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>Int32Array : Int32ArrayConstructor
>           : ^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (elements: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                       ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                       ^^^        ^^                ^^^                       ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                       ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg);
>typedArrays[5] = Uint32Array.from(obj, mapFn, thisArg) : Uint32Array<ArrayBuffer>
>                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[5] : any
>typedArrays : any[]
>            : ^^^^^
>5 : 5
>  : ^
>Uint32Array.from(obj, mapFn, thisArg) : Uint32Array<ArrayBuffer>
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^
>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>                 : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>Uint32Array : Uint32ArrayConstructor
>            : ^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (elements: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                        ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                        ^^^        ^^                ^^^                        ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                        ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[6] = Float32Array.from(obj, mapFn, thisArg);
>typedArrays[6] = Float32Array.from(obj, mapFn, thisArg) : Float32Array<ArrayBuffer>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[6] : any
>typedArrays : any[]
>            : ^^^^^
>6 : 6
>  : ^
>Float32Array.from(obj, mapFn, thisArg) : Float32Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>Float32Array : Float32ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (elements: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[7] = Float64Array.from(obj, mapFn, thisArg);
>typedArrays[7] = Float64Array.from(obj, mapFn, thisArg) : Float64Array<ArrayBuffer>
>                                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[7] : any
>typedArrays : any[]
>            : ^^^^^
>7 : 7
>  : ^
>Float64Array.from(obj, mapFn, thisArg) : Float64Array<ArrayBuffer>
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^
>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>                  : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>Float64Array : Float64ArrayConstructor
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (elements: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                         ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                         ^^^        ^^                ^^^                         ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                         ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg);
>typedArrays[8] = Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray<ArrayBuffer>
>                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typedArrays[8] : any
>typedArrays : any[]
>            : ^^^^^
>8 : 8
>  : ^
>Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray<ArrayBuffer>
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>                       : ^^^         ^^                 ^^^                              ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                              ^^^
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(elements: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
>     : ^^^         ^^                 ^^^                              ^^^^^^^^         ^^              ^^     ^^                             ^^       ^^^   ^^^                              ^^^        ^^                ^^^                              ^^^^^^^^        ^^             ^^     ^^^                             ^^       ^^^   ^^^                              ^^^
>obj : ArrayLike<T>
>    : ^^^^^^^^^^^^
>mapFn : (n: T, v: number) => number
>      : ^ ^^ ^^ ^^      ^^^^^      
>thisArg : {}
>        : ^^

    return typedArrays;
>typedArrays : any[]
>            : ^^^^^
}
