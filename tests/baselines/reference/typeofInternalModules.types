//// [tests/cases/compiler/typeofInternalModules.ts] ////

=== typeofInternalModules.ts ===
module Outer {
>Outer : typeof Outer
>      : ^^^^^^^^^^^^

    export module instantiated {
>instantiated : typeof instantiated
>             : ^^^^^^^^^^^^^^^^^^^

        export class C { }
>C : C
>  : ^
    }
    export module uninstantiated {
        export interface P { }
    }
}

import importInst = Outer.instantiated;
>importInst : typeof importInst
>           : ^^^^^^^^^^^^^^^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^
>instantiated : typeof importInst
>             : ^^^^^^^^^^^^^^^^^

import importUninst = Outer.uninstantiated;
>importUninst : any
>             : ^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^
>uninstantiated : any
>               : ^^^

var x1: typeof importInst.C = importInst.C;
>x1 : typeof importInst.C
>   : ^^^^^^^^^^^^^^^^^^^
>importInst.C : typeof importInst.C
>             : ^^^^^^^^^^^^^^^^^^^
>importInst : typeof importInst
>           : ^^^^^^^^^^^^^^^^^
>C : typeof importInst.C
>  : ^^^^^^^^^^^^^^^^^^^
>importInst.C : typeof importInst.C
>             : ^^^^^^^^^^^^^^^^^^^
>importInst : typeof importInst
>           : ^^^^^^^^^^^^^^^^^
>C : typeof importInst.C
>  : ^^^^^^^^^^^^^^^^^^^

var x2: importInst.C = new x1();
>x2 : importInst.C
>   : ^^^^^^^^^^^^
>importInst : any
>           : ^^^
>new x1() : importInst.C
>         : ^^^^^^^^^^^^
>x1 : typeof importInst.C
>   : ^^^^^^^^^^^^^^^^^^^

var x3: typeof importUninst.P; // Error again
>x3 : any
>   : ^^^
>importUninst.P : any
>               : ^^^
>importUninst : any
>             : ^^^
>P : any
>  : ^^^

var x4: Outer = Outer;
>x4 : Outer
>   : ^^^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^

var x5: typeof importInst;
>x5 : typeof importInst
>   : ^^^^^^^^^^^^^^^^^
>importInst : typeof importInst
>           : ^^^^^^^^^^^^^^^^^

x5 = Outer;
>x5 = Outer : typeof Outer
>           : ^^^^^^^^^^^^
>x5 : typeof importInst
>   : ^^^^^^^^^^^^^^^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^

x5 = Outer.instantiated;
>x5 = Outer.instantiated : typeof importInst
>                        : ^^^^^^^^^^^^^^^^^
>x5 : typeof importInst
>   : ^^^^^^^^^^^^^^^^^
>Outer.instantiated : typeof importInst
>                   : ^^^^^^^^^^^^^^^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^
>instantiated : typeof importInst
>             : ^^^^^^^^^^^^^^^^^

var x6: typeof importUninst;
>x6 : any
>   : ^^^
>importUninst : any
>             : ^^^

var x7: typeof Outer = Outer;
>x7 : typeof Outer
>   : ^^^^^^^^^^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^
>Outer : typeof Outer
>      : ^^^^^^^^^^^^

x7 = importInst;
>x7 = importInst : typeof importInst
>                : ^^^^^^^^^^^^^^^^^
>x7 : typeof Outer
>   : ^^^^^^^^^^^^
>importInst : typeof importInst
>           : ^^^^^^^^^^^^^^^^^

