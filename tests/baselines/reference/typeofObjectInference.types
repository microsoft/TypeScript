//// [tests/cases/compiler/typeofObjectInference.ts] ////

=== typeofObjectInference.ts ===
let val = 1
>val : number
>    : ^^^^^^
>1 : 1
>  : ^

function decorateA<O extends any>(fn: (first: {value: typeof val}) => O) {
>decorateA : <O extends unknown>(fn: (first: { value: typeof val; }) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                                    ^^^^^^^^^^^ 
>fn : (first: { value: typeof val; }) => O
>   : ^     ^^                      ^^^^^ 
>first : { value: typeof val; }
>      : ^^^^^^^^^          ^^^
>value : number
>      : ^^^^^^
>val : number
>    : ^^^^^^

    return (): O => fn({value: val})
>(): O => fn({value: val}) : () => O
>                          : ^^^^^^ 
>fn({value: val}) : O
>                 : ^
>fn : (first: { value: typeof val; }) => O
>   : ^     ^^                      ^^^^^ 
>{value: val} : { value: number; }
>             : ^^^^^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>val : number
>    : ^^^^^^
}
let a = decorateA(({value}) => 5)
>a : () => number
>  : ^^^^^^^^^^^^
>decorateA(({value}) => 5) : () => number
>                          : ^^^^^^^^^^^^
>decorateA : <O extends unknown>(fn: (first: { value: typeof val; }) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                                    ^^^^^^^^^^^ 
>({value}) => 5 : ({ value }: { value: typeof val; }) => number
>               : ^         ^^^^^^^^^^^          ^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>5 : 5
>  : ^

function decorateB<O extends any>(fn: (first: typeof val) => O) {
>decorateB : <O extends unknown>(fn: (first: typeof val) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                        ^^^^^^^^^^^ 
>fn : (first: typeof val) => O
>   : ^     ^^          ^^^^^ 
>first : number
>      : ^^^^^^
>val : number
>    : ^^^^^^

    return (): O => fn(val)
>(): O => fn(val) : () => O
>                 : ^^^^^^ 
>fn(val) : O
>        : ^
>fn : (first: typeof val) => O
>   : ^     ^^          ^^^^^ 
>val : number
>    : ^^^^^^
}
let b = decorateB((value) => 5)
>b : () => number
>  : ^^^^^^^^^^^^
>decorateB((value) => 5) : () => number
>                        : ^^^^^^^^^^^^
>decorateB : <O extends unknown>(fn: (first: typeof val) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                        ^^^^^^^^^^^ 
>(value) => 5 : (value: number) => number
>             : ^     ^^^^^^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>5 : 5
>  : ^

function decorateC<O extends any>(fn: (first: {value: number}) => O) {
>decorateC : <O extends unknown>(fn: (first: { value: number; }) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                                ^^^^^^^^^^^ 
>fn : (first: { value: number; }) => O
>   : ^     ^^                  ^^^^^ 
>first : { value: number; }
>      : ^^^^^^^^^      ^^^
>value : number
>      : ^^^^^^

    return (): O => fn({value: val})
>(): O => fn({value: val}) : () => O
>                          : ^^^^^^ 
>fn({value: val}) : O
>                 : ^
>fn : (first: { value: number; }) => O
>   : ^     ^^                  ^^^^^ 
>{value: val} : { value: number; }
>             : ^^^^^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>val : number
>    : ^^^^^^
}
let c = decorateC(({value}) => 5)
>c : () => number
>  : ^^^^^^^^^^^^
>decorateC(({value}) => 5) : () => number
>                          : ^^^^^^^^^^^^
>decorateC : <O extends unknown>(fn: (first: { value: number; }) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                                ^^^^^^^^^^^ 
>({value}) => 5 : ({ value }: { value: number; }) => number
>               : ^         ^^^^^^^^^^^      ^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>5 : 5
>  : ^

type First = {value: typeof val}
>First : First
>      : ^^^^^
>value : number
>      : ^^^^^^
>val : number
>    : ^^^^^^

function decorateD<O extends any>(fn: (first: First) => O) {
>decorateD : <O extends unknown>(fn: (first: First) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                   ^^^^^^^^^^^ 
>fn : (first: First) => O
>   : ^     ^^     ^^^^^ 
>first : First
>      : ^^^^^

    return (): O => fn({value: val})
>(): O => fn({value: val}) : () => O
>                          : ^^^^^^ 
>fn({value: val}) : O
>                 : ^
>fn : (first: First) => O
>   : ^     ^^     ^^^^^ 
>{value: val} : { value: number; }
>             : ^^^^^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>val : number
>    : ^^^^^^
}
let d = decorateD(({value}) => 5)
>d : () => number
>  : ^^^^^^^^^^^^
>decorateD(({value}) => 5) : () => number
>                          : ^^^^^^^^^^^^
>decorateD : <O extends unknown>(fn: (first: First) => O) => () => O
>          : ^ ^^^^^^^^^^^^^^^^^^  ^^                   ^^^^^^^^^^^ 
>({value}) => 5 : ({ value }: First) => number
>               : ^         ^^^^^^^^^^^^^^^^^^
>value : number
>      : ^^^^^^
>5 : 5
>  : ^

