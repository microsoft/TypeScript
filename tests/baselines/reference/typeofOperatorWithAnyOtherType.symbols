//// [tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithAnyOtherType.ts] ////

=== typeofOperatorWithAnyOtherType.ts ===
// typeof  operator on any type

var ANY: any;
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))

var ANY1;
>ANY1 : Symbol(ANY1, Decl(typeofOperatorWithAnyOtherType.ts, 3, 3))

var ANY2: any[] = ["", ""];
>ANY2 : Symbol(ANY2, Decl(typeofOperatorWithAnyOtherType.ts, 4, 3))

var obj: () => {}
>obj : Symbol(obj, Decl(typeofOperatorWithAnyOtherType.ts, 5, 3))

var obj1 = { x: "a", y: () => { }};
>obj1 : Symbol(obj1, Decl(typeofOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))
>y : Symbol(y, Decl(typeofOperatorWithAnyOtherType.ts, 6, 20))

function foo(): any {
>foo : Symbol(foo, Decl(typeofOperatorWithAnyOtherType.ts, 6, 35))

    var a;
>a : Symbol(a, Decl(typeofOperatorWithAnyOtherType.ts, 9, 7))

    return a;
>a : Symbol(a, Decl(typeofOperatorWithAnyOtherType.ts, 9, 7))
}
class A {
>A : Symbol(A, Decl(typeofOperatorWithAnyOtherType.ts, 11, 1))

    public a: any;
>a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))

    static foo() {
>foo : Symbol(A.foo, Decl(typeofOperatorWithAnyOtherType.ts, 13, 18))

        var a;
>a : Symbol(a, Decl(typeofOperatorWithAnyOtherType.ts, 15, 11))

        return a;
>a : Symbol(a, Decl(typeofOperatorWithAnyOtherType.ts, 15, 11))
    }
}
namespace M {
>M : Symbol(M, Decl(typeofOperatorWithAnyOtherType.ts, 18, 1))

    export var n: any;
>n : Symbol(n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))
}
var objA = new A();
>objA : Symbol(objA, Decl(typeofOperatorWithAnyOtherType.ts, 22, 3))
>A : Symbol(A, Decl(typeofOperatorWithAnyOtherType.ts, 11, 1))

// any type var
var ResultIsString1 = typeof ANY1;
>ResultIsString1 : Symbol(ResultIsString1, Decl(typeofOperatorWithAnyOtherType.ts, 25, 3))
>ANY1 : Symbol(ANY1, Decl(typeofOperatorWithAnyOtherType.ts, 3, 3))

var ResultIsString2 = typeof ANY2;
>ResultIsString2 : Symbol(ResultIsString2, Decl(typeofOperatorWithAnyOtherType.ts, 26, 3))
>ANY2 : Symbol(ANY2, Decl(typeofOperatorWithAnyOtherType.ts, 4, 3))

var ResultIsString3 = typeof A;
>ResultIsString3 : Symbol(ResultIsString3, Decl(typeofOperatorWithAnyOtherType.ts, 27, 3))
>A : Symbol(A, Decl(typeofOperatorWithAnyOtherType.ts, 11, 1))

var ResultIsString4 = typeof M;
>ResultIsString4 : Symbol(ResultIsString4, Decl(typeofOperatorWithAnyOtherType.ts, 28, 3))
>M : Symbol(M, Decl(typeofOperatorWithAnyOtherType.ts, 18, 1))

var ResultIsString5 = typeof obj;
>ResultIsString5 : Symbol(ResultIsString5, Decl(typeofOperatorWithAnyOtherType.ts, 29, 3))
>obj : Symbol(obj, Decl(typeofOperatorWithAnyOtherType.ts, 5, 3))

var ResultIsString6 = typeof obj1;
>ResultIsString6 : Symbol(ResultIsString6, Decl(typeofOperatorWithAnyOtherType.ts, 30, 3))
>obj1 : Symbol(obj1, Decl(typeofOperatorWithAnyOtherType.ts, 6, 3))

// any type literal
var ResultIsString7 = typeof undefined;
>ResultIsString7 : Symbol(ResultIsString7, Decl(typeofOperatorWithAnyOtherType.ts, 33, 3))
>undefined : Symbol(undefined)

var ResultIsString8 = typeof null;
>ResultIsString8 : Symbol(ResultIsString8, Decl(typeofOperatorWithAnyOtherType.ts, 34, 3))

var ResultIsString9 = typeof {};
>ResultIsString9 : Symbol(ResultIsString9, Decl(typeofOperatorWithAnyOtherType.ts, 35, 3))

// any type expressions
var ResultIsString10 = typeof ANY2[0];
>ResultIsString10 : Symbol(ResultIsString10, Decl(typeofOperatorWithAnyOtherType.ts, 38, 3))
>ANY2 : Symbol(ANY2, Decl(typeofOperatorWithAnyOtherType.ts, 4, 3))

var ResultIsString11 = typeof objA.a;
>ResultIsString11 : Symbol(ResultIsString11, Decl(typeofOperatorWithAnyOtherType.ts, 39, 3))
>objA.a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))
>objA : Symbol(objA, Decl(typeofOperatorWithAnyOtherType.ts, 22, 3))
>a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))

var ResultIsString12 = typeof obj1.x;
>ResultIsString12 : Symbol(ResultIsString12, Decl(typeofOperatorWithAnyOtherType.ts, 40, 3))
>obj1.x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))
>obj1 : Symbol(obj1, Decl(typeofOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))

var ResultIsString13 = typeof M.n;
>ResultIsString13 : Symbol(ResultIsString13, Decl(typeofOperatorWithAnyOtherType.ts, 41, 3))
>M.n : Symbol(M.n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))
>M : Symbol(M, Decl(typeofOperatorWithAnyOtherType.ts, 18, 1))
>n : Symbol(M.n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))

var ResultIsString14 = typeof foo();
>ResultIsString14 : Symbol(ResultIsString14, Decl(typeofOperatorWithAnyOtherType.ts, 42, 3))
>foo : Symbol(foo, Decl(typeofOperatorWithAnyOtherType.ts, 6, 35))

var ResultIsString15 = typeof A.foo();
>ResultIsString15 : Symbol(ResultIsString15, Decl(typeofOperatorWithAnyOtherType.ts, 43, 3))
>A.foo : Symbol(A.foo, Decl(typeofOperatorWithAnyOtherType.ts, 13, 18))
>A : Symbol(A, Decl(typeofOperatorWithAnyOtherType.ts, 11, 1))
>foo : Symbol(A.foo, Decl(typeofOperatorWithAnyOtherType.ts, 13, 18))

var ResultIsString16 = typeof (ANY + ANY1);
>ResultIsString16 : Symbol(ResultIsString16, Decl(typeofOperatorWithAnyOtherType.ts, 44, 3))
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))
>ANY1 : Symbol(ANY1, Decl(typeofOperatorWithAnyOtherType.ts, 3, 3))

var ResultIsString17 = typeof (null + undefined);
>ResultIsString17 : Symbol(ResultIsString17, Decl(typeofOperatorWithAnyOtherType.ts, 45, 3))
>undefined : Symbol(undefined)

var ResultIsString18 = typeof (null + null);
>ResultIsString18 : Symbol(ResultIsString18, Decl(typeofOperatorWithAnyOtherType.ts, 46, 3))

var ResultIsString19 = typeof (undefined + undefined);
>ResultIsString19 : Symbol(ResultIsString19, Decl(typeofOperatorWithAnyOtherType.ts, 47, 3))
>undefined : Symbol(undefined)
>undefined : Symbol(undefined)

// multiple typeof  operators
var ResultIsString20 = typeof typeof ANY;
>ResultIsString20 : Symbol(ResultIsString20, Decl(typeofOperatorWithAnyOtherType.ts, 50, 3))
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))

var ResultIsString21 = typeof typeof typeof (ANY + ANY1);
>ResultIsString21 : Symbol(ResultIsString21, Decl(typeofOperatorWithAnyOtherType.ts, 51, 3))
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))
>ANY1 : Symbol(ANY1, Decl(typeofOperatorWithAnyOtherType.ts, 3, 3))

// miss assignment operators
typeof ANY;
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))

typeof ANY1;
>ANY1 : Symbol(ANY1, Decl(typeofOperatorWithAnyOtherType.ts, 3, 3))

typeof ANY2[0];
>ANY2 : Symbol(ANY2, Decl(typeofOperatorWithAnyOtherType.ts, 4, 3))

typeof ANY, ANY1;
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))
>ANY1 : Symbol(ANY1, Decl(typeofOperatorWithAnyOtherType.ts, 3, 3))

typeof obj1;
>obj1 : Symbol(obj1, Decl(typeofOperatorWithAnyOtherType.ts, 6, 3))

typeof obj1.x;
>obj1.x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))
>obj1 : Symbol(obj1, Decl(typeofOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))

typeof objA.a;
>objA.a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))
>objA : Symbol(objA, Decl(typeofOperatorWithAnyOtherType.ts, 22, 3))
>a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))

typeof M.n;
>M.n : Symbol(M.n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))
>M : Symbol(M, Decl(typeofOperatorWithAnyOtherType.ts, 18, 1))
>n : Symbol(M.n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))

// use typeof in type query
var z: any;
>z : Symbol(z, Decl(typeofOperatorWithAnyOtherType.ts, 64, 3))

var x: any[];
>x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 65, 3))

var r: () => any;
>r : Symbol(r, Decl(typeofOperatorWithAnyOtherType.ts, 66, 3))

z: typeof ANY;
>ANY : Symbol(ANY, Decl(typeofOperatorWithAnyOtherType.ts, 2, 3))

x: typeof ANY2;
>ANY2 : Symbol(ANY2, Decl(typeofOperatorWithAnyOtherType.ts, 4, 3))

r: typeof foo;
>foo : Symbol(foo, Decl(typeofOperatorWithAnyOtherType.ts, 6, 35))

z: typeof objA.a;
>objA.a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))
>objA : Symbol(objA, Decl(typeofOperatorWithAnyOtherType.ts, 22, 3))
>a : Symbol(A.a, Decl(typeofOperatorWithAnyOtherType.ts, 12, 9))

z: typeof A.foo;
>A.foo : Symbol(A.foo, Decl(typeofOperatorWithAnyOtherType.ts, 13, 18))
>A : Symbol(A, Decl(typeofOperatorWithAnyOtherType.ts, 11, 1))
>foo : Symbol(A.foo, Decl(typeofOperatorWithAnyOtherType.ts, 13, 18))

z: typeof M.n;
>M.n : Symbol(M.n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))
>M : Symbol(M, Decl(typeofOperatorWithAnyOtherType.ts, 18, 1))
>n : Symbol(M.n, Decl(typeofOperatorWithAnyOtherType.ts, 20, 14))

z: typeof obj1.x;
>obj1.x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))
>obj1 : Symbol(obj1, Decl(typeofOperatorWithAnyOtherType.ts, 6, 3))
>x : Symbol(x, Decl(typeofOperatorWithAnyOtherType.ts, 6, 12))

