//// [tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithEnumType.ts] ////

=== typeofOperatorWithEnumType.ts ===
// typeof  operator on enum type

enum ENUM { };
>ENUM : ENUM
>     : ^^^^

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1
>      : ^^^^^
>A : ENUM1.A
>  : ^^^^^^^
>B : ENUM1.B
>  : ^^^^^^^
>"" : (typeof ENUM1)[""]
>   : ^^^^^^^^^^^^^^^^^^

// enum type var
var ResultIsString1 = typeof ENUM;
>ResultIsString1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^

var ResultIsString2 = typeof ENUM1;
>ResultIsString2 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof ENUM1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^

// enum type expressions
var ResultIsString3 = typeof ENUM1["A"];
>ResultIsString3 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof ENUM1["A"] : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM1["A"] : ENUM1.A
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"A" : "A"
>    : ^^^

var ResultIsString4 = typeof (ENUM[0] + ENUM1["B"]);
>ResultIsString4 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof (ENUM[0] + ENUM1["B"]) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(ENUM[0] + ENUM1["B"]) : string
>                       : ^^^^^^
>ENUM[0] + ENUM1["B"] : string
>                     : ^^^^^^
>ENUM[0] : string
>        : ^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^
>0 : 0
>  : ^
>ENUM1["B"] : ENUM1.B
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"B" : "B"
>    : ^^^

// multiple typeof  operators
var ResultIsString5 = typeof typeof ENUM;
>ResultIsString5 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^

var ResultIsString6 = typeof typeof typeof (ENUM[0] + ENUM1.B);
>ResultIsString6 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof typeof typeof (ENUM[0] + ENUM1.B) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof typeof (ENUM[0] + ENUM1.B) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>typeof (ENUM[0] + ENUM1.B) : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(ENUM[0] + ENUM1.B) : string
>                    : ^^^^^^
>ENUM[0] + ENUM1.B : string
>                  : ^^^^^^
>ENUM[0] : string
>        : ^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^
>0 : 0
>  : ^
>ENUM1.B : ENUM1.B
>        : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>B : ENUM1.B
>  : ^^^^^^^

// miss assignment operators
typeof ENUM;
>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^

typeof ENUM1;
>typeof ENUM1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^

typeof ENUM1["B"];
>typeof ENUM1["B"] : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM1["B"] : ENUM1.B
>           : ^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^
>"B" : "B"
>    : ^^^

typeof ENUM, ENUM1;
>typeof ENUM, ENUM1 : typeof ENUM1
>                   : ^^^^^^^^^^^^
>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^

// use typeof in type query
enum z { };
>z : z
>  : ^

z: typeof ENUM;
>z : any
>  : ^^^
>typeof ENUM : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM : typeof ENUM
>     : ^^^^^^^^^^^

z: typeof ENUM1;
>z : any
>  : ^^^
>typeof ENUM1 : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>ENUM1 : typeof ENUM1
>      : ^^^^^^^^^^^^

