//// [tests/cases/conformance/types/forAwait/types.forAwait.es2018.1.ts] ////

=== types.forAwait.es2018.1.ts ===
declare const asyncIterable: AsyncIterable<number>;
>asyncIterable : AsyncIterable<number>
>              : ^^^^^^^^^^^^^^^^^^^^^

declare const iterable: Iterable<number>;
>iterable : Iterable<number>
>         : ^^^^^^^^^^^^^^^^

declare const iterableOfPromise: Iterable<Promise<number>>;
>iterableOfPromise : Iterable<Promise<number>>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^

async function f1() {
>f1 : () => Promise<void>
>   : ^^^^^^^^^^^^^^^^^^^

    let y: number;
>y : number
>  : ^^^^^^

    for await (const x of asyncIterable) {
>x : number
>  : ^^^^^^
>asyncIterable : AsyncIterable<number>
>              : ^^^^^^^^^^^^^^^^^^^^^
    }
    for await (const x of iterable) {
>x : number
>  : ^^^^^^
>iterable : Iterable<number>
>         : ^^^^^^^^^^^^^^^^
    }
    for await (const x of iterableOfPromise) {
>x : number
>  : ^^^^^^
>iterableOfPromise : Iterable<Promise<number>>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    for await (y of asyncIterable) {
>y : number
>  : ^^^^^^
>asyncIterable : AsyncIterable<number>
>              : ^^^^^^^^^^^^^^^^^^^^^
    }
    for await (y of iterable) {
>y : number
>  : ^^^^^^
>iterable : Iterable<number>
>         : ^^^^^^^^^^^^^^^^
    }
    for await (y of iterableOfPromise) {
>y : number
>  : ^^^^^^
>iterableOfPromise : Iterable<Promise<number>>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
    }
}
async function * f2() {
>f2 : () => AsyncGenerator<never, void, unknown>
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    let y: number;
>y : number
>  : ^^^^^^

    for await (const x of asyncIterable) {
>x : number
>  : ^^^^^^
>asyncIterable : AsyncIterable<number>
>              : ^^^^^^^^^^^^^^^^^^^^^
    }
    for await (const x of iterable) {
>x : number
>  : ^^^^^^
>iterable : Iterable<number>
>         : ^^^^^^^^^^^^^^^^
    }
    for await (const x of iterableOfPromise) {
>x : number
>  : ^^^^^^
>iterableOfPromise : Iterable<Promise<number>>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
    }
    for await (y of asyncIterable) {
>y : number
>  : ^^^^^^
>asyncIterable : AsyncIterable<number>
>              : ^^^^^^^^^^^^^^^^^^^^^
    }
    for await (y of iterable) {
>y : number
>  : ^^^^^^
>iterable : Iterable<number>
>         : ^^^^^^^^^^^^^^^^
    }
    for await (y of iterableOfPromise) {
>y : number
>  : ^^^^^^
>iterableOfPromise : Iterable<Promise<number>>
>                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
    }
}

