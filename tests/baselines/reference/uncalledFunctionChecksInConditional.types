//// [tests/cases/compiler/uncalledFunctionChecksInConditional.ts] ////

=== uncalledFunctionChecksInConditional.ts ===
declare function isFoo(): boolean;
>isFoo : () => boolean
>      : ^^^^^^       

declare function isBar(): boolean;
>isBar : () => boolean
>      : ^^^^^^       

declare const isUndefinedFoo: (() => boolean) | undefined;
>isUndefinedFoo : (() => boolean) | undefined
>               : ^^^^^^^       ^^^^^^^^^^^^^

if (isFoo) {
>isFoo : () => boolean
>      : ^^^^^^       

    // error on isFoo
}

if (isFoo || isBar) {
>isFoo || isBar : () => boolean
>               : ^^^^^^       
>isFoo : () => boolean
>      : ^^^^^^       
>isBar : () => boolean
>      : ^^^^^^       

    // error on isFoo, isBar
}

if (isFoo || isFoo()) {
>isFoo || isFoo() : () => boolean
>                 : ^^^^^^       
>isFoo : () => boolean
>      : ^^^^^^       
>isFoo() : boolean
>        : ^^^^^^^
>isFoo : () => boolean
>      : ^^^^^^       

    // error on isFoo
}

if (isUndefinedFoo || isFoo()) {
>isUndefinedFoo || isFoo() : boolean | (() => boolean)
>                          : ^^^^^^^^^^^^^^^^^       ^
>isUndefinedFoo : (() => boolean) | undefined
>               : ^^^^^^^       ^^^^^^^^^^^^^
>isFoo() : boolean
>        : ^^^^^^^
>isFoo : () => boolean
>      : ^^^^^^       

    // no error
}

if (isFoo && isFoo()) {
>isFoo && isFoo() : boolean
>                 : ^^^^^^^
>isFoo : () => boolean
>      : ^^^^^^       
>isFoo() : boolean
>        : ^^^^^^^
>isFoo : () => boolean
>      : ^^^^^^       

    // no error
}

declare const x: boolean;
>x : boolean
>  : ^^^^^^^

declare const ux: boolean | undefined;
>ux : boolean | undefined
>   : ^^^^^^^^^^^^^^^^^^^

declare const y: boolean;
>y : boolean
>  : ^^^^^^^

declare const uy: boolean | undefined;
>uy : boolean | undefined
>   : ^^^^^^^^^^^^^^^^^^^

declare function z(): boolean;
>z : () => boolean
>  : ^^^^^^       

declare const uz: (() => boolean) | undefined;
>uz : (() => boolean) | undefined
>   : ^^^^^^^       ^^^^^^^^^^^^^

if (x || isFoo) {
>x || isFoo : true | (() => boolean)
>           : ^^^^^^^^^^^^^^       ^
>x : boolean
>  : ^^^^^^^
>isFoo : () => boolean
>      : ^^^^^^       

    // error on isFoo
}

if (isFoo || x) {
>isFoo || x : () => boolean
>           : ^^^^^^       
>isFoo : () => boolean
>      : ^^^^^^       
>x : boolean
>  : ^^^^^^^

    // error on isFoo
}

if (x || y || z() || isFoo) {
>x || y || z() || isFoo : true | (() => boolean)
>                       : ^^^^^^^^^^^^^^       ^
>x || y || z() : boolean
>              : ^^^^^^^
>x || y : boolean
>       : ^^^^^^^
>x : boolean
>  : ^^^^^^^
>y : boolean
>  : ^^^^^^^
>z() : boolean
>    : ^^^^^^^
>z : () => boolean
>  : ^^^^^^       
>isFoo : () => boolean
>      : ^^^^^^       

    // error on isFoo
}

if (x || uy || z || isUndefinedFoo) {
>x || uy || z || isUndefinedFoo : true | (() => boolean)
>                               : ^^^^^^^^^^^^^^       ^
>x || uy || z : true | (() => boolean)
>             : ^^^^^^^^^^^^^^       ^
>x || uy : boolean | undefined
>        : ^^^^^^^^^^^^^^^^^^^
>x : boolean
>  : ^^^^^^^
>uy : boolean | undefined
>   : ^^^^^^^^^^^^^^^^^^^
>z : () => boolean
>  : ^^^^^^       
>isUndefinedFoo : (() => boolean) | undefined
>               : ^^^^^^^       ^^^^^^^^^^^^^

    // error on z
}

if (ux || y || uz || isFoo) {
>ux || y || uz || isFoo : true | (() => boolean)
>                       : ^^^^^^^^^^^^^^       ^
>ux || y || uz : true | (() => boolean) | undefined
>              : ^^^^^^^^^^^^^^       ^^^^^^^^^^^^^
>ux || y : boolean
>        : ^^^^^^^
>ux : boolean | undefined
>   : ^^^^^^^^^^^^^^^^^^^
>y : boolean
>  : ^^^^^^^
>uz : (() => boolean) | undefined
>   : ^^^^^^^       ^^^^^^^^^^^^^
>isFoo : () => boolean
>      : ^^^^^^       

    // error on isFoo
}

if (x && z) {
>x && z : false | (() => boolean)
>       : ^^^^^^^^^^^^^^^       ^
>x : boolean
>  : ^^^^^^^
>z : () => boolean
>  : ^^^^^^       

    // no error
    z();
>z() : boolean
>    : ^^^^^^^
>z : () => boolean
>  : ^^^^^^       
}
