//// [tests/cases/compiler/uncalledFunctionChecksInConditional2.ts] ////

=== Performance Stats ===
Type Count: 1,000

=== uncalledFunctionChecksInConditional2.ts ===
{
  const perf = window.performance
>perf : Performance
>     : ^^^^^^^^^^^
>window.performance : Performance
>                   : ^^^^^^^^^^^
>window : Window & typeof globalThis
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>performance : Performance
>            : ^^^^^^^^^^^

  // Simplified
  if (
    perf &&
>perf &&    perf.measure &&    perf.clearMarks &&    perf.clearMeasures : (measureName?: string) => void
>                                                                       : ^           ^^^      ^^^^^    
>perf &&    perf.measure &&    perf.clearMarks : (markName?: string) => void
>                                              : ^        ^^^      ^^^^^    
>perf &&    perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>                        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^

    perf.measure &&
>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>             : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^
>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  

    perf.clearMarks &&
>perf.clearMarks : (markName?: string) => void
>                : ^        ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMarks : (markName?: string) => void
>           : ^        ^^^      ^^^^^    

    perf.clearMeasures
>perf.clearMeasures : (measureName?: string) => void
>                   : ^           ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMeasures : (measureName?: string) => void
>              : ^           ^^^      ^^^^^    

  ) {
    perf.measure("");
>perf.measure("") : PerformanceMeasure
>                 : ^^^^^^^^^^^^^^^^^^
>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>             : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^
>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>"" : ""
>   : ^^

    perf.clearMarks("")
>perf.clearMarks("") : void
>                    : ^^^^
>perf.clearMarks : (markName?: string) => void
>                : ^        ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMarks : (markName?: string) => void
>           : ^        ^^^      ^^^^^    
>"" : ""
>   : ^^

    perf.clearMeasures("")
>perf.clearMeasures("") : void
>                       : ^^^^
>perf.clearMeasures : (measureName?: string) => void
>                   : ^           ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMeasures : (measureName?: string) => void
>              : ^           ^^^      ^^^^^    
>"" : ""
>   : ^^
  }

  // With ||
  if (
    perf &&
>perf &&    perf.mark &&    perf.measure || !!true : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>                                                  : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf &&    perf.mark &&    perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>                                        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf &&    perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>                     : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^

    perf.mark &&
>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>          : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^
>mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>     : ^        ^^      ^^           ^^^                      ^^^^^               

    perf.measure || !!true
>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>             : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^
>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^

  ) {
    perf.mark("");
>perf.mark("") : PerformanceMark
>              : ^^^^^^^^^^^^^^^
>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>          : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^
>mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>     : ^        ^^      ^^           ^^^                      ^^^^^               
>"" : ""
>   : ^^
  }

  // With ??
  if (
    (
>(      perf &&      perf.mark &&      perf.measure    ) ?? !!true : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>                                                                  : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>(      perf &&      perf.mark &&      perf.measure    ) : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>                                                        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  

      perf &&
>perf &&      perf.mark &&      perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>                                            : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf &&      perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>                       : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^

      perf.mark &&
>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>          : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^
>mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>     : ^        ^^      ^^           ^^^                      ^^^^^               

      perf.measure
>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>             : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^
>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  

    ) ?? !!true
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^

  ) {
    perf.mark("");
>perf.mark("") : PerformanceMark
>              : ^^^^^^^^^^^^^^^
>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>          : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^
>mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>     : ^        ^^      ^^           ^^^                      ^^^^^               
>"" : ""
>   : ^^
  }
};

// Original #49192
declare let inBrowser: boolean;
>inBrowser : boolean
>          : ^^^^^^^
{
  let mark;
>mark : any
>     : ^^^

  let measure;
>measure : any
>        : ^^^

  const perf = inBrowser && window.performance
>perf : false | Performance
>     : ^^^^^^^^^^^^^^^^^^^
>inBrowser && window.performance : false | Performance
>                                : ^^^^^^^^^^^^^^^^^^^
>inBrowser : boolean
>          : ^^^^^^^
>window.performance : Performance
>                   : ^^^^^^^^^^^
>window : Window & typeof globalThis
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>performance : Performance
>            : ^^^^^^^^^^^

  /* istanbul ignore if */
  if (
    perf &&
>perf &&    perf.mark &&    perf.measure &&    perf.clearMarks &&    perf.clearMeasures : false | ((measureName?: string) => void)
>                                                                                       : ^^^^^^^^^^           ^^^      ^^^^^    ^
>perf &&    perf.mark &&    perf.measure &&    perf.clearMarks : false | ((markName?: string) => void)
>                                                              : ^^^^^^^^^^        ^^^      ^^^^^    ^
>perf &&    perf.mark &&    perf.measure : false | ((measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure)
>                                        : ^^^^^^^^^^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  ^
>perf &&    perf.mark : false | ((markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark)
>                     : ^^^^^^^^^^        ^^      ^^           ^^^                      ^^^^^               ^
>perf : false | Performance
>     : ^^^^^^^^^^^^^^^^^^^

    perf.mark &&
>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>          : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^
>mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>     : ^        ^^      ^^           ^^^                      ^^^^^               

    perf.measure &&
>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>             : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^
>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  

    perf.clearMarks &&
>perf.clearMarks : (markName?: string) => void
>                : ^        ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMarks : (markName?: string) => void
>           : ^        ^^^      ^^^^^    

    perf.clearMeasures
>perf.clearMeasures : (measureName?: string) => void
>                   : ^           ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMeasures : (measureName?: string) => void
>              : ^           ^^^      ^^^^^    

  ) {
    mark = (tag) => perf.mark(tag)
>mark = (tag) => perf.mark(tag) : (tag: any) => PerformanceMark
>                               : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^
>mark : any
>     : ^^^
>(tag) => perf.mark(tag) : (tag: any) => PerformanceMark
>                        : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^
>tag : any
>    : ^^^
>perf.mark(tag) : PerformanceMark
>               : ^^^^^^^^^^^^^^^
>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>          : ^        ^^      ^^           ^^^                      ^^^^^               
>perf : Performance
>     : ^^^^^^^^^^^
>mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
>     : ^        ^^      ^^           ^^^                      ^^^^^               
>tag : any
>    : ^^^

    measure = (name, startTag, endTag) => {
>measure = (name, startTag, endTag) => {      perf.measure(name, startTag, endTag)      perf.clearMarks(startTag)      perf.clearMarks(endTag)      // perf.clearMeasures(name)    } : (name: any, startTag: any, endTag: any) => void
>                                                                                                                                                                                    : ^    ^^^^^^^        ^^^^^^^      ^^^^^^^^^^^^^^
>measure : any
>        : ^^^
>(name, startTag, endTag) => {      perf.measure(name, startTag, endTag)      perf.clearMarks(startTag)      perf.clearMarks(endTag)      // perf.clearMeasures(name)    } : (name: any, startTag: any, endTag: any) => void
>                                                                                                                                                                          : ^    ^^^^^^^        ^^^^^^^      ^^^^^^^^^^^^^^
>name : any
>     : ^^^
>startTag : any
>         : ^^^
>endTag : any
>       : ^^^

      perf.measure(name, startTag, endTag)
>perf.measure(name, startTag, endTag) : PerformanceMeasure
>                                     : ^^^^^^^^^^^^^^^^^^
>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>             : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>perf : Performance
>     : ^^^^^^^^^^^
>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
>        : ^           ^^      ^^                     ^^^                                  ^^       ^^^      ^^^^^                  
>name : any
>     : ^^^
>startTag : any
>         : ^^^
>endTag : any
>       : ^^^

      perf.clearMarks(startTag)
>perf.clearMarks(startTag) : void
>                          : ^^^^
>perf.clearMarks : (markName?: string) => void
>                : ^        ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMarks : (markName?: string) => void
>           : ^        ^^^      ^^^^^    
>startTag : any
>         : ^^^

      perf.clearMarks(endTag)
>perf.clearMarks(endTag) : void
>                        : ^^^^
>perf.clearMarks : (markName?: string) => void
>                : ^        ^^^      ^^^^^    
>perf : Performance
>     : ^^^^^^^^^^^
>clearMarks : (markName?: string) => void
>           : ^        ^^^      ^^^^^    
>endTag : any
>       : ^^^

      // perf.clearMeasures(name)
    }
  }
};

let _isMobile: boolean;
>_isMobile : boolean
>          : ^^^^^^^

function isMobile() {
>isMobile : () => boolean
>         : ^^^^^^^^^^^^^

  if (_isMobile === undefined) {
>_isMobile === undefined : boolean
>                        : ^^^^^^^
>_isMobile : boolean
>          : ^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

    const isMobileMatch =
>isMobileMatch : false | MediaQueryList
>              : ^^^^^^^^^^^^^^^^^^^^^^

      typeof window !== 'undefined' &&
>typeof window !== 'undefined' &&      window.matchMedia && // no error      window.matchMedia('(max-device-width: 680px)') : false | MediaQueryList
>                                                                                                                           : ^^^^^^^^^^^^^^^^^^^^^^
>typeof window !== 'undefined' &&      window.matchMedia : false | (((query: string) => MediaQueryList) & ((query: string) => MediaQueryList))
>                                                        : ^^^^^^^^^^^     ^^      ^^^^^              ^^^^^^     ^^      ^^^^^              ^^
>typeof window !== 'undefined' : boolean
>                              : ^^^^^^^
>typeof window : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>window : Window & typeof globalThis
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>'undefined' : "undefined"
>            : ^^^^^^^^^^^

      window.matchMedia && // no error
>window.matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
>                  : ^^     ^^      ^^^^^              ^^^^^^     ^^      ^^^^^              ^
>window : Window & typeof globalThis
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
>           : ^^     ^^      ^^^^^              ^^^^^^     ^^      ^^^^^              ^

      window.matchMedia('(max-device-width: 680px)');
>window.matchMedia('(max-device-width: 680px)') : MediaQueryList
>                                               : ^^^^^^^^^^^^^^
>window.matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
>                  : ^^     ^^      ^^^^^              ^^^^^^     ^^      ^^^^^              ^
>window : Window & typeof globalThis
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
>           : ^^     ^^      ^^^^^              ^^^^^^     ^^      ^^^^^              ^
>'(max-device-width: 680px)' : "(max-device-width: 680px)"
>                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^

    _isMobile = isMobileMatch && isMobileMatch.matches;
>_isMobile = isMobileMatch && isMobileMatch.matches : boolean
>                                                   : ^^^^^^^
>_isMobile : boolean
>          : ^^^^^^^
>isMobileMatch && isMobileMatch.matches : boolean
>                                       : ^^^^^^^
>isMobileMatch : false | MediaQueryList
>              : ^^^^^^^^^^^^^^^^^^^^^^
>isMobileMatch.matches : boolean
>                      : ^^^^^^^
>isMobileMatch : MediaQueryList
>              : ^^^^^^^^^^^^^^
>matches : boolean
>        : ^^^^^^^
  }
  return _isMobile;
>_isMobile : boolean
>          : ^^^^^^^
}

