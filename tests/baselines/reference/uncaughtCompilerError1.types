//// [tests/cases/compiler/uncaughtCompilerError1.ts] ////

=== uncaughtCompilerError1.ts ===
declare var index, lineTokens, token, tokens;
>index : any
>lineTokens : any
>token : any
>tokens : any

function f() {
>f : () => { appendText: string; advanceCount: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    if (lineTokens[index].trim() === '=' && index > 0 && token.type === '' && tokens[index - 1].type === 'attribute.name.html') {
>lineTokens[index].trim() === '=' && index > 0 && token.type === '' && tokens[index - 1].type === 'attribute.name.html' : boolean
>                                                                                                                       : ^^^^^^^
>lineTokens[index].trim() === '=' && index > 0 && token.type === '' : boolean
>                                                                   : ^^^^^^^
>lineTokens[index].trim() === '=' && index > 0 : boolean
>                                              : ^^^^^^^
>lineTokens[index].trim() === '=' : boolean
>                                 : ^^^^^^^
>lineTokens[index].trim() : any
>lineTokens[index].trim : any
>lineTokens[index] : any
>                  : ^^^
>lineTokens : any
>index : any
>trim : any
>     : ^^^
>'=' : "="
>    : ^^^
>index > 0 : boolean
>          : ^^^^^^^
>index : any
>0 : 0
>  : ^
>token.type === '' : boolean
>                  : ^^^^^^^
>token.type : any
>token : any
>      : ^^^
>type : any
>     : ^^^
>'' : ""
>   : ^^
>tokens[index - 1].type === 'attribute.name.html' : boolean
>                                                 : ^^^^^^^
>tokens[index - 1].type : any
>tokens[index - 1] : any
>                  : ^^^
>tokens : any
>index - 1 : number
>          : ^^^^^^
>index : any
>1 : 1
>  : ^
>type : any
>     : ^^^
>'attribute.name.html' : "attribute.name.html"
>                      : ^^^^^^^^^^^^^^^^^^^^^

        if (index === (tokens.length - 1)) {
>index === (tokens.length - 1) : boolean
>                              : ^^^^^^^
>index : any
>(tokens.length - 1) : number
>                    : ^^^^^^
>tokens.length - 1 : number
>                  : ^^^^^^
>tokens.length : any
>tokens : any
>       : ^^^
>length : any
>       : ^^^
>1 : 1
>  : ^

            return { appendText: '\"\"', advanceCount: 1 };
>{ appendText: '\"\"', advanceCount: 1 } : { appendText: string; advanceCount: number; }
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>appendText : string
>           : ^^^^^^
>'\"\"' : "\"\""
>       : ^^^^^^
>advanceCount : number
>             : ^^^^^^
>1 : 1
>  : ^
        }
        else if (tokens[index + 1].type !== 'attribute.value.html' && tokens[index + 1].type !== '') {
>tokens[index + 1].type !== 'attribute.value.html' && tokens[index + 1].type !== '' : boolean
>                                                                                   : ^^^^^^^
>tokens[index + 1].type !== 'attribute.value.html' : boolean
>                                                  : ^^^^^^^
>tokens[index + 1].type : any
>tokens[index + 1] : any
>                  : ^^^
>tokens : any
>index + 1 : any
>index : any
>1 : 1
>  : ^
>type : any
>     : ^^^
>'attribute.value.html' : "attribute.value.html"
>                       : ^^^^^^^^^^^^^^^^^^^^^^
>tokens[index + 1].type !== '' : boolean
>                              : ^^^^^^^
>tokens[index + 1].type : any
>tokens[index + 1] : any
>                  : ^^^
>tokens : any
>index + 1 : any
>index : any
>1 : 1
>  : ^
>type : any
>     : ^^^
>'' : ""
>   : ^^

            return { appendText: '\"\"', advanceCount: 1 };
>{ appendText: '\"\"', advanceCount: 1 } : { appendText: string; advanceCount: number; }
>                                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>appendText : string
>           : ^^^^^^
>'\"\"' : "\"\""
>       : ^^^^^^
>advanceCount : number
>             : ^^^^^^
>1 : 1
>  : ^
        }
        return null;
    }
}

