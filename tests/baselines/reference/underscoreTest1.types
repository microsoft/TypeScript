//// [tests/cases/compiler/underscoreTest1.ts] ////

=== Performance Stats ===
Type Count: 1,000

=== underscoreTest1_underscoreTests.ts ===
/// <reference path="underscoreTest1_underscore.ts" />

declare var $;
>$ : any
>  : ^^^

declare function alert(x: string): void;
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>x : string
>  : ^^^^^^

_.each([1, 2, 3], (num) => alert(num.toString()));
>_.each([1, 2, 3], (num) => alert(num.toString())) : void
>                                                  : ^^^^
>_.each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>       : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>     : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>(num) => alert(num.toString()) : (num: number) => void
>                               : ^   ^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>alert(num.toString()) : void
>                      : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>num.toString() : string
>               : ^^^^^^
>num.toString : (radix?: number) => string
>             : ^     ^^^      ^^^^^      
>num : number
>    : ^^^^^^
>toString : (radix?: number) => string
>         : ^     ^^^      ^^^^^      

_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()));
>_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString())) : void
>                                                                                               : ^^^^
>_.each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>       : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>     : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : number
>    : ^^^^^^
>2 : 2
>  : ^
>three : number
>      : ^^^^^^
>3 : 3
>  : ^
>(value: number, key?: string) => alert(value.toString()) : (value: number, key?: string) => void
>                                                         : ^     ^^      ^^   ^^^      ^^^^^^^^^
>value : number
>      : ^^^^^^
>key : string
>    : ^^^^^^
>alert(value.toString()) : void
>                        : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>value.toString() : string
>                 : ^^^^^^
>value.toString : (radix?: number) => string
>               : ^     ^^^      ^^^^^      
>value : number
>      : ^^^^^^
>toString : (radix?: number) => string
>         : ^     ^^^      ^^^^^      

_.map([1, 2, 3], (num) => num * 3);
>_.map([1, 2, 3], (num) => num * 3) : number[]
>                                   : ^^^^^^^^
>_.map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
>      : ^^^ ^^ ^^    ^^   ^^        ^^               ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^               ^^       ^^^   ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
>    : ^^^ ^^ ^^    ^^   ^^        ^^               ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^               ^^       ^^^   ^^^   ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>(num) => num * 3 : (num: number) => number
>                 : ^   ^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num * 3 : number
>        : ^^^^^^
>num : number
>    : ^^^^^^
>3 : 3
>  : ^

_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3);
>_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3) : number[]
>                                                                                : ^^^^^^^^
>_.map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
>      : ^^^ ^^ ^^    ^^   ^^        ^^               ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^               ^^       ^^^   ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
>    : ^^^ ^^ ^^    ^^   ^^        ^^               ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^               ^^       ^^^   ^^^   ^^^
>{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : number
>    : ^^^^^^
>2 : 2
>  : ^
>three : number
>      : ^^^^^^
>3 : 3
>  : ^
>(value: number, key?: string) => value * 3 : (value: number, key?: string) => number
>                                           : ^     ^^      ^^   ^^^      ^^^^^^^^^^^
>value : number
>      : ^^^^^^
>key : string
>    : ^^^^^^
>value * 3 : number
>          : ^^^^^^
>value : number
>      : ^^^^^^
>3 : 3
>  : ^

var sum = _.reduce([1, 2, 3], (memo, num) => memo + num, 0);
>sum : number
>    : ^^^^^^
>_.reduce([1, 2, 3], (memo, num) => memo + num, 0) : number
>                                                  : ^^^^^^
>_.reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>         : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>(memo, num) => memo + num : (memo: number, num: number) => number
>                          : ^    ^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^
>memo : number
>     : ^^^^^^
>num : number
>    : ^^^^^^
>memo + num : number
>           : ^^^^^^
>memo : number
>     : ^^^^^^
>num : number
>    : ^^^^^^
>0 : 0
>  : ^

var list = [[0, 1], [2, 3], [4, 5]];
>list : number[][]
>     : ^^^^^^^^^^
>[[0, 1], [2, 3], [4, 5]] : number[][]
>                         : ^^^^^^^^^^
>[0, 1] : number[]
>       : ^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^
>[2, 3] : number[]
>       : ^^^^^^^^
>2 : 2
>  : ^
>3 : 3
>  : ^
>[4, 5] : number[]
>       : ^^^^^^^^
>4 : 4
>  : ^
>5 : 5
>  : ^

var flat = _.reduceRight(list, (a, b) => a.concat(b), []);
>flat : number[]
>     : ^^^^^^^^
>_.reduceRight(list, (a, b) => a.concat(b), []) : number[]
>                                               : ^^^^^^^^
>_.reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>              : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>            : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : number[][]
>     : ^^^^^^^^^^
>(a, b) => a.concat(b) : (a: number[], b: number[]) => number[]
>                      : ^ ^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^
>a : number[]
>  : ^^^^^^^^
>b : number[]
>  : ^^^^^^^^
>a.concat(b) : number[]
>            : ^^^^^^^^
>a.concat : { (...items: ConcatArray<number>[]): number[]; (...items: (number | ConcatArray<number>)[]): number[]; }
>         : ^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : number[]
>  : ^^^^^^^^
>concat : { (...items: ConcatArray<number>[]): number[]; (...items: (number | ConcatArray<number>)[]): number[]; }
>       : ^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b : number[]
>  : ^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

var even = _.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
>even : number
>     : ^^^^^^
>_.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : number
>                                                  : ^^^^^^
>_.find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^ ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
>     : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^ ^^^
>[1, 2, 3, 4, 5, 6] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>(num) => num % 2 == 0 : (num: number) => boolean
>                      : ^   ^^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num % 2 == 0 : boolean
>             : ^^^^^^^
>num % 2 : number
>        : ^^^^^^
>num : number
>    : ^^^^^^
>2 : 2
>  : ^
>0 : 0
>  : ^

var evens = _.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
>evens : number[]
>      : ^^^^^^^^
>_.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : number[]
>                                                    : ^^^^^^^^
>_.filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>         : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>[1, 2, 3, 4, 5, 6] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>(num) => num % 2 == 0 : (num: number) => boolean
>                      : ^   ^^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num % 2 == 0 : boolean
>             : ^^^^^^^
>num % 2 : number
>        : ^^^^^^
>num : number
>    : ^^^^^^
>2 : 2
>  : ^
>0 : 0
>  : ^

var listOfPlays = [{ title: "Cymbeline", author: "Shakespeare", year: 1611 }, { title: "The Tempest", author: "Shakespeare", year: 1611 }, { title: "Other", author: "Not Shakespeare", year: 2012 }];
>listOfPlays : { title: string; author: string; year: number; }[]
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[{ title: "Cymbeline", author: "Shakespeare", year: 1611 }, { title: "The Tempest", author: "Shakespeare", year: 1611 }, { title: "Other", author: "Not Shakespeare", year: 2012 }] : { title: string; author: string; year: number; }[]
>                                                                                                                                                                                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ title: "Cymbeline", author: "Shakespeare", year: 1611 } : { title: string; author: string; year: number; }
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>title : string
>      : ^^^^^^
>"Cymbeline" : "Cymbeline"
>            : ^^^^^^^^^^^
>author : string
>       : ^^^^^^
>"Shakespeare" : "Shakespeare"
>              : ^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>1611 : 1611
>     : ^^^^
>{ title: "The Tempest", author: "Shakespeare", year: 1611 } : { title: string; author: string; year: number; }
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>title : string
>      : ^^^^^^
>"The Tempest" : "The Tempest"
>              : ^^^^^^^^^^^^^
>author : string
>       : ^^^^^^
>"Shakespeare" : "Shakespeare"
>              : ^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>1611 : 1611
>     : ^^^^
>{ title: "Other", author: "Not Shakespeare", year: 2012 } : { title: string; author: string; year: number; }
>                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>title : string
>      : ^^^^^^
>"Other" : "Other"
>        : ^^^^^^^
>author : string
>       : ^^^^^^
>"Not Shakespeare" : "Not Shakespeare"
>                  : ^^^^^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>2012 : 2012
>     : ^^^^

_.where(listOfPlays, { author: "Shakespeare", year: 1611 });
>_.where(listOfPlays, { author: "Shakespeare", year: 1611 }) : { title: string; author: string; year: number; }[]
>                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>        : ^^^ ^^    ^^   ^^          ^^      ^^^   ^^^ ^^    ^^             ^^          ^^      ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>      : ^^^ ^^    ^^   ^^          ^^      ^^^   ^^^ ^^    ^^             ^^          ^^      ^^^   ^^^
>listOfPlays : { title: string; author: string; year: number; }[]
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ author: "Shakespeare", year: 1611 } : { author: string; year: number; }
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>author : string
>       : ^^^^^^
>"Shakespeare" : "Shakespeare"
>              : ^^^^^^^^^^^^^
>year : number
>     : ^^^^^^
>1611 : 1611
>     : ^^^^

var odds = _.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
>odds : number[]
>     : ^^^^^^^^
>_.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : number[]
>                                                    : ^^^^^^^^
>_.reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>         : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>[1, 2, 3, 4, 5, 6] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>(num) => num % 2 == 0 : (num: number) => boolean
>                      : ^   ^^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num % 2 == 0 : boolean
>             : ^^^^^^^
>num % 2 : number
>        : ^^^^^^
>num : number
>    : ^^^^^^
>2 : 2
>  : ^
>0 : 0
>  : ^

_.all([true, 1, null, 'yes'], _.identity);
>_.all([true, 1, null, 'yes'], _.identity) : boolean
>                                          : ^^^^^^^
>_.all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>      : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>    : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>[true, 1, null, 'yes'] : (string | number | true)[]
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>1 : 1
>  : ^
>'yes' : "yes"
>      : ^^^^^
>_.identity : <T>(value: T) => T
>           : ^ ^^     ^^ ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>identity : <T>(value: T) => T
>         : ^ ^^     ^^ ^^^^^ 

_.any([null, 0, 'yes', false]);
>_.any([null, 0, 'yes', false]) : boolean
>                               : ^^^^^^^
>_.any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>      : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>    : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>[null, 0, 'yes', false] : (string | number | false)[]
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>'yes' : "yes"
>      : ^^^^^
>false : false
>      : ^^^^^

_.contains([1, 2, 3], 3);
>_.contains([1, 2, 3], 3) : boolean
>                         : ^^^^^^^
>_.contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
>           : ^^^ ^^    ^^   ^^     ^^ ^^^       ^^^ ^^    ^^             ^^     ^^ ^^^       ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
>         : ^^^ ^^    ^^   ^^     ^^ ^^^       ^^^ ^^    ^^             ^^     ^^ ^^^       ^^^
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>3 : 3
>  : ^

_.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
>_.invoke([[5, 1, 7], [3, 2, 1]], 'sort') : any[]
>                                         : ^^^^^
>_.invoke : { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
>         : ^^^    ^^     ^^          ^^      ^^^^^    ^^     ^^^     ^^^    ^^               ^^          ^^      ^^^^^    ^^     ^^^     ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>invoke : { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
>       : ^^^    ^^     ^^          ^^      ^^^^^    ^^     ^^^     ^^^    ^^               ^^          ^^      ^^^^^    ^^     ^^^     ^^^
>[[5, 1, 7], [3, 2, 1]] : number[][]
>                       : ^^^^^^^^^^
>[5, 1, 7] : number[]
>          : ^^^^^^^^
>5 : 5
>  : ^
>1 : 1
>  : ^
>7 : 7
>  : ^
>[3, 2, 1] : number[]
>          : ^^^^^^^^
>3 : 3
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^
>'sort' : "sort"
>       : ^^^^^^

var stooges = [{ name: 'moe', age: 40 }, { name: 'larry', age: 50 }, { name: 'curly', age: 60 }];
>stooges : { name: string; age: number; }[]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[{ name: 'moe', age: 40 }, { name: 'larry', age: 50 }, { name: 'curly', age: 60 }] : { name: string; age: number; }[]
>                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ name: 'moe', age: 40 } : { name: string; age: number; }
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>age : number
>    : ^^^^^^
>40 : 40
>   : ^^
>{ name: 'larry', age: 50 } : { name: string; age: number; }
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'larry' : "larry"
>        : ^^^^^^^
>age : number
>    : ^^^^^^
>50 : 50
>   : ^^
>{ name: 'curly', age: 60 } : { name: string; age: number; }
>                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'curly' : "curly"
>        : ^^^^^^^
>age : number
>    : ^^^^^^
>60 : 60
>   : ^^

_.pluck(stooges, 'name');
>_.pluck(stooges, 'name') : any[]
>                         : ^^^^^
>_.pluck : { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
>        : ^^^    ^^     ^^            ^^      ^^^     ^^^    ^^               ^^            ^^      ^^^     ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>pluck : { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
>      : ^^^    ^^     ^^            ^^      ^^^     ^^^    ^^               ^^            ^^      ^^^     ^^^
>stooges : { name: string; age: number; }[]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'name' : "name"
>       : ^^^^^^

_.max(stooges, (stooge) => stooge.age);
>_.max(stooges, (stooge) => stooge.age) : { name: string; age: number; }
>                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
>      : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^ ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
>    : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^ ^^^
>stooges : { name: string; age: number; }[]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(stooge) => stooge.age : (stooge: { name: string; age: number; }) => number
>                       : ^      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>stooge : { name: string; age: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>stooge.age : number
>           : ^^^^^^
>stooge : { name: string; age: number; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>age : number
>    : ^^^^^^

var numbers = [10, 5, 100, 2, 1000];
>numbers : number[]
>        : ^^^^^^^^
>[10, 5, 100, 2, 1000] : number[]
>                      : ^^^^^^^^
>10 : 10
>   : ^^
>5 : 5
>  : ^
>100 : 100
>    : ^^^
>2 : 2
>  : ^
>1000 : 1000
>     : ^^^^

_.min(numbers);
>_.min(numbers) : number
>               : ^^^^^^
>_.min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
>      : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^ ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
>    : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^ ^^^
>numbers : number[]
>        : ^^^^^^^^

_.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num));
>_.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num)) : number[]
>                                                     : ^^^^^^^^
>_.sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
>         : ^^^ ^^    ^^   ^^        ^^                 ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                 ^^       ^^^   ^^^   ^^^ ^^    ^^   ^^            ^^      ^^^   ^^^ ^^    ^^             ^^            ^^      ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
>       : ^^^ ^^    ^^   ^^        ^^                 ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                 ^^       ^^^   ^^^   ^^^ ^^    ^^   ^^            ^^      ^^^   ^^^ ^^    ^^             ^^            ^^      ^^^   ^^^
>[1, 2, 3, 4, 5, 6] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^
>(num) => Math.sin(num) : (num: number) => number
>                       : ^   ^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>Math.sin(num) : number
>              : ^^^^^^
>Math.sin : (x: number) => number
>         : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>sin : (x: number) => number
>    : ^ ^^      ^^^^^      
>num : number
>    : ^^^^^^


// not sure how this is typechecking at all.. Math.floor(e) is number not string..?
_([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e));
>_([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e)) : Dictionary<number[]>
>                                                                                      : ^^^^^^^^^^^^^^^^^^^^
>_([1.3, 2.1, 2.4]).groupBy : { (iterator?: Iterator_<number, any>, context?: any): Dictionary<number[]>; (propertyName: string): Dictionary<number[]>; }
>                           : ^^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>_([1.3, 2.1, 2.4]) : Underscore.WrappedArray<number>
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>[1.3, 2.1, 2.4] : number[]
>                : ^^^^^^^^
>1.3 : 1.3
>    : ^^^
>2.1 : 2.1
>    : ^^^
>2.4 : 2.4
>    : ^^^
>groupBy : { (iterator?: Iterator_<number, any>, context?: any): Dictionary<number[]>; (propertyName: string): Dictionary<number[]>; }
>        : ^^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>(e: number, i?: number, list?: number[]) => Math.floor(e) : (e: number, i?: number, list?: number[]) => number
>                                                          : ^ ^^      ^^ ^^^      ^^    ^^^        ^^^^^^^^^^^
>e : number
>  : ^^^^^^
>i : number
>  : ^^^^^^
>list : number[]
>     : ^^^^^^^^
>Math.floor(e) : number
>              : ^^^^^^
>Math.floor : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>floor : (x: number) => number
>      : ^ ^^      ^^^^^      
>e : number
>  : ^^^^^^

_.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num));
>_.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num)) : Dictionary<number[]>
>                                                             : ^^^^^^^^^^^^^^^^^^^^
>_.groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
>          : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^   ^^            ^^      ^^^               ^^^ ^^    ^^             ^^            ^^      ^^^               ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
>        : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^   ^^            ^^      ^^^               ^^^ ^^    ^^             ^^            ^^      ^^^               ^^^
>[1.3, 2.1, 2.4] : number[]
>                : ^^^^^^^^
>1.3 : 1.3
>    : ^^^
>2.1 : 2.1
>    : ^^^
>2.4 : 2.4
>    : ^^^
>(num: number) => Math.floor(num) : (num: number) => number
>                                 : ^   ^^      ^^^^^^^^^^^
>num : number
>    : ^^^^^^
>Math.floor(num) : number
>                : ^^^^^^
>Math.floor : (x: number) => number
>           : ^ ^^      ^^^^^      
>Math : Math
>     : ^^^^
>floor : (x: number) => number
>      : ^ ^^      ^^^^^      
>num : number
>    : ^^^^^^

_.groupBy(['one', 'two', 'three'], 'length');
>_.groupBy(['one', 'two', 'three'], 'length') : Dictionary<string[]>
>                                             : ^^^^^^^^^^^^^^^^^^^^
>_.groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
>          : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^   ^^            ^^      ^^^               ^^^ ^^    ^^             ^^            ^^      ^^^               ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
>        : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^               ^^^ ^^    ^^   ^^            ^^      ^^^               ^^^ ^^    ^^             ^^            ^^      ^^^               ^^^
>['one', 'two', 'three'] : string[]
>                        : ^^^^^^^^
>'one' : "one"
>      : ^^^^^
>'two' : "two"
>      : ^^^^^
>'three' : "three"
>        : ^^^^^^^
>'length' : "length"
>         : ^^^^^^^^

_.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd');
>_.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd') : Dictionary<number>
>                                                                   : ^^^^^^^^^^^^^^^^^^
>_.countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
>          : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^                  ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^                  ^^^ ^^    ^^   ^^            ^^      ^^^                  ^^^ ^^    ^^             ^^            ^^      ^^^                  ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
>        : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^                  ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^                  ^^^ ^^    ^^   ^^            ^^      ^^^                  ^^^ ^^    ^^             ^^            ^^      ^^^                  ^^^
>[1, 2, 3, 4, 5] : number[]
>                : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>(num) => num % 2 == 0 ? 'even' : 'odd' : (num: number) => "even" | "odd"
>                                       : ^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num % 2 == 0 ? 'even' : 'odd' : "even" | "odd"
>                              : ^^^^^^^^^^^^^^
>num % 2 == 0 : boolean
>             : ^^^^^^^
>num % 2 : number
>        : ^^^^^^
>num : number
>    : ^^^^^^
>2 : 2
>  : ^
>0 : 0
>  : ^
>'even' : "even"
>       : ^^^^^^
>'odd' : "odd"
>      : ^^^^^

_.shuffle([1, 2, 3, 4, 5, 6]);
>_.shuffle([1, 2, 3, 4, 5, 6]) : number[]
>                              : ^^^^^^^^
>_.shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>          : ^^^ ^^    ^^   ^^^   ^^^ ^^    ^^             ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
>        : ^^^ ^^    ^^   ^^^   ^^^ ^^    ^^             ^^^   ^^^
>[1, 2, 3, 4, 5, 6] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>6 : 6
>  : ^

// (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);

_.size({ one: 1, two: 2, three: 3 });
>_.size({ one: 1, two: 2, three: 3 }) : number
>                                     : ^^^^^^
>_.size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
>       : ^^^ ^^    ^^   ^^^      ^^^ ^^    ^^             ^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
>     : ^^^ ^^    ^^   ^^^      ^^^ ^^    ^^             ^^^      ^^^
>{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : number
>    : ^^^^^^
>2 : 2
>  : ^
>three : number
>      : ^^^^^^
>3 : 3
>  : ^

///////////////////////////////////////////////////////////////////////////////////////

_.first([5, 4, 3, 2, 1]);
>_.first([5, 4, 3, 2, 1]) : number
>                         : ^^^^^^
>_.first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
>        : ^^^ ^^    ^^   ^^^ ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
>      : ^^^ ^^    ^^   ^^^ ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>[5, 4, 3, 2, 1] : number[]
>                : ^^^^^^^^
>5 : 5
>  : ^
>4 : 4
>  : ^
>3 : 3
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^

_.initial([5, 4, 3, 2, 1]);
>_.initial([5, 4, 3, 2, 1]) : number
>                           : ^^^^^^
>_.initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
>          : ^^^ ^^    ^^   ^^^ ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
>        : ^^^ ^^    ^^   ^^^ ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>[5, 4, 3, 2, 1] : number[]
>                : ^^^^^^^^
>5 : 5
>  : ^
>4 : 4
>  : ^
>3 : 3
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^

_.last([5, 4, 3, 2, 1]);
>_.last([5, 4, 3, 2, 1]) : number
>                        : ^^^^^^
>_.last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
>       : ^^^ ^^    ^^   ^^^ ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
>     : ^^^ ^^    ^^   ^^^ ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>[5, 4, 3, 2, 1] : number[]
>                : ^^^^^^^^
>5 : 5
>  : ^
>4 : 4
>  : ^
>3 : 3
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^

_.rest([5, 4, 3, 2, 1]);
>_.rest([5, 4, 3, 2, 1]) : number[]
>                        : ^^^^^^^^
>_.rest : <T>(list: T[], index?: number) => T[]
>       : ^ ^^    ^^   ^^     ^^^      ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>rest : <T>(list: T[], index?: number) => T[]
>     : ^ ^^    ^^   ^^     ^^^      ^^^^^   
>[5, 4, 3, 2, 1] : number[]
>                : ^^^^^^^^
>5 : 5
>  : ^
>4 : 4
>  : ^
>3 : 3
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^

_.compact([0, 1, false, 2, '', 3]);
>_.compact([0, 1, false, 2, '', 3]) : (string | number | boolean)[]
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.compact : <T>(list: T[]) => T[]
>          : ^ ^^    ^^   ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>compact : <T>(list: T[]) => T[]
>        : ^ ^^    ^^   ^^^^^   
>[0, 1, false, 2, '', 3] : (string | number | false)[]
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>0 : 0
>  : ^
>1 : 1
>  : ^
>false : false
>      : ^^^^^
>2 : 2
>  : ^
>'' : ""
>   : ^^
>3 : 3
>  : ^

_.flatten([1, 2, 3, 4]);
>_.flatten([1, 2, 3, 4]) : unknown[]
>                        : ^^^^^^^^^
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>          : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>        : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>[1, 2, 3, 4] : number[]
>             : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^

_.flatten([1, [2]]);
>_.flatten([1, [2]]) : unknown[]
>                    : ^^^^^^^^^
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>          : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>        : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>[1, [2]] : (number | number[])[]
>         : ^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>[2] : number[]
>    : ^^^^^^^^
>2 : 2
>  : ^

// typescript doesn't like the elements being different
_.flatten([1, [2], [3, [[4]]]]);
>_.flatten([1, [2], [3, [[4]]]]) : unknown[]
>                                : ^^^^^^^^^
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>          : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>        : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>[1, [2], [3, [[4]]]] : (number | (number | number[][])[])[]
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>[2] : number[]
>    : ^^^^^^^^
>2 : 2
>  : ^
>[3, [[4]]] : (number | number[][])[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^
>3 : 3
>  : ^
>[[4]] : number[][]
>      : ^^^^^^^^^^
>[4] : number[]
>    : ^^^^^^^^
>4 : 4
>  : ^

_.flatten([1, [2], [3, [[4]]]], true);
>_.flatten([1, [2], [3, [[4]]]], true) : unknown[]
>                                      : ^^^^^^^^^
>_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>          : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
>        : ^^^ ^^    ^^     ^^^   ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>[1, [2], [3, [[4]]]] : (number | (number | number[][])[])[]
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>1 : 1
>  : ^
>[2] : number[]
>    : ^^^^^^^^
>2 : 2
>  : ^
>[3, [[4]]] : (number | number[][])[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^
>3 : 3
>  : ^
>[[4]] : number[][]
>      : ^^^^^^^^^^
>[4] : number[]
>    : ^^^^^^^^
>4 : 4
>  : ^
>true : true
>     : ^^^^

_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
>_.without([1, 2, 1, 0, 3, 1, 4], 0, 1) : number[]
>                                       : ^^^^^^^^
>_.without : <T>(list: T[], ...values: T[]) => T[]
>          : ^ ^^    ^^   ^^^^^      ^^   ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>without : <T>(list: T[], ...values: T[]) => T[]
>        : ^ ^^    ^^   ^^^^^      ^^   ^^^^^   
>[1, 2, 1, 0, 3, 1, 4] : number[]
>                      : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^
>0 : 0
>  : ^
>3 : 3
>  : ^
>1 : 1
>  : ^
>4 : 4
>  : ^
>0 : 0
>  : ^
>1 : 1
>  : ^

_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
>_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]) : number[]
>                                            : ^^^^^^^^
>_.union : <T>(...arrays: T[][]) => T[]
>        : ^ ^^^^^      ^^     ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>union : <T>(...arrays: T[][]) => T[]
>      : ^ ^^^^^      ^^     ^^^^^   
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>[101, 2, 1, 10] : number[]
>                : ^^^^^^^^
>101 : 101
>    : ^^^
>2 : 2
>  : ^
>1 : 1
>  : ^
>10 : 10
>   : ^^
>[2, 1] : number[]
>       : ^^^^^^^^
>2 : 2
>  : ^
>1 : 1
>  : ^

_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
>_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]) : number[]
>                                                   : ^^^^^^^^
>_.intersection : <T>(...arrays: T[][]) => T[]
>               : ^ ^^^^^      ^^     ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>intersection : <T>(...arrays: T[][]) => T[]
>             : ^ ^^^^^      ^^     ^^^^^   
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>[101, 2, 1, 10] : number[]
>                : ^^^^^^^^
>101 : 101
>    : ^^^
>2 : 2
>  : ^
>1 : 1
>  : ^
>10 : 10
>   : ^^
>[2, 1] : number[]
>       : ^^^^^^^^
>2 : 2
>  : ^
>1 : 1
>  : ^

_.difference([1, 2, 3, 4, 5], [5, 2, 10]);
>_.difference([1, 2, 3, 4, 5], [5, 2, 10]) : number[]
>                                          : ^^^^^^^^
>_.difference : <T>(list: T[], ...others: T[][]) => T[]
>             : ^ ^^    ^^   ^^^^^      ^^     ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>difference : <T>(list: T[], ...others: T[][]) => T[]
>           : ^ ^^    ^^   ^^^^^      ^^     ^^^^^   
>[1, 2, 3, 4, 5] : number[]
>                : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>4 : 4
>  : ^
>5 : 5
>  : ^
>[5, 2, 10] : number[]
>           : ^^^^^^^^
>5 : 5
>  : ^
>2 : 2
>  : ^
>10 : 10
>   : ^^

_.uniq([1, 2, 1, 3, 1, 4]);
>_.uniq([1, 2, 1, 3, 1, 4]) : number[]
>                           : ^^^^^^^^
>_.uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>       : ^^^ ^^    ^^   ^^        ^^^       ^^^   ^^^ ^^ ^^    ^^   ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>     : ^^^ ^^    ^^   ^^        ^^^       ^^^   ^^^ ^^ ^^    ^^   ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>[1, 2, 1, 3, 1, 4] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>1 : 1
>  : ^
>3 : 3
>  : ^
>1 : 1
>  : ^
>4 : 4
>  : ^

_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
>_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]) : Tuple3<string, number, boolean>[]
>                                                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
>      : ^^^  ^^  ^^  ^^    ^^  ^^    ^^^                ^^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^^                    ^^^  ^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^  ^^    ^^^                        ^^^^^^      ^^       ^^^       ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
>    : ^^^  ^^  ^^  ^^    ^^  ^^    ^^^                ^^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^^                    ^^^  ^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^  ^^    ^^^                        ^^^^^^      ^^       ^^^       ^^^
>['moe', 'larry', 'curly'] : string[]
>                          : ^^^^^^^^
>'moe' : "moe"
>      : ^^^^^
>'larry' : "larry"
>        : ^^^^^^^
>'curly' : "curly"
>        : ^^^^^^^
>[30, 40, 50] : number[]
>             : ^^^^^^^^
>30 : 30
>   : ^^
>40 : 40
>   : ^^
>50 : 50
>   : ^^
>[true, false, false] : boolean[]
>                     : ^^^^^^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^
>false : false
>      : ^^^^^

_.object(['moe', 'larry', 'curly'], [30, 40, 50]);
>_.object(['moe', 'larry', 'curly'], [30, 40, 50]) : any
>                                                  : ^^^
>_.object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
>         : ^^^    ^^       ^^^   ^^^    ^^        ^^      ^^     ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
>       : ^^^    ^^       ^^^   ^^^    ^^        ^^      ^^     ^^^   ^^^
>['moe', 'larry', 'curly'] : string[]
>                          : ^^^^^^^^
>'moe' : "moe"
>      : ^^^^^
>'larry' : "larry"
>        : ^^^^^^^
>'curly' : "curly"
>        : ^^^^^^^
>[30, 40, 50] : number[]
>             : ^^^^^^^^
>30 : 30
>   : ^^
>40 : 40
>   : ^^
>50 : 50
>   : ^^

_.object([['moe', 30], ['larry', 40], ['curly', 50]]);
>_.object([['moe', 30], ['larry', 40], ['curly', 50]]) : any
>                                                      : ^^^
>_.object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
>         : ^^^    ^^       ^^^   ^^^    ^^        ^^      ^^     ^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
>       : ^^^    ^^       ^^^   ^^^    ^^        ^^      ^^     ^^^   ^^^
>[['moe', 30], ['larry', 40], ['curly', 50]] : (string | number)[][]
>                                            : ^^^^^^^^^^^^^^^^^^^^^
>['moe', 30] : (string | number)[]
>            : ^^^^^^^^^^^^^^^^^^^
>'moe' : "moe"
>      : ^^^^^
>30 : 30
>   : ^^
>['larry', 40] : (string | number)[]
>              : ^^^^^^^^^^^^^^^^^^^
>'larry' : "larry"
>        : ^^^^^^^
>40 : 40
>   : ^^
>['curly', 50] : (string | number)[]
>              : ^^^^^^^^^^^^^^^^^^^
>'curly' : "curly"
>        : ^^^^^^^
>50 : 50
>   : ^^

_.indexOf([1, 2, 3], 2);
>_.indexOf([1, 2, 3], 2) : number
>                        : ^^^^^^
>_.indexOf : <T>(list: T[], value: T, isSorted?: boolean) => number
>          : ^ ^^    ^^   ^^     ^^ ^^        ^^^       ^^^^^      
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>indexOf : <T>(list: T[], value: T, isSorted?: boolean) => number
>        : ^ ^^    ^^   ^^     ^^ ^^        ^^^       ^^^^^      
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>2 : 2
>  : ^

_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
>_.lastIndexOf([1, 2, 3, 1, 2, 3], 2) : number
>                                     : ^^^^^^
>_.lastIndexOf : <T>(list: T[], value: T, fromIndex?: number) => number
>              : ^ ^^    ^^   ^^     ^^ ^^         ^^^      ^^^^^      
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>lastIndexOf : <T>(list: T[], value: T, fromIndex?: number) => number
>            : ^ ^^    ^^   ^^     ^^ ^^         ^^^      ^^^^^      
>[1, 2, 3, 1, 2, 3] : number[]
>                   : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>2 : 2
>  : ^

_.sortedIndex([10, 20, 30, 40, 50], 35);
>_.sortedIndex([10, 20, 30, 40, 50], 35) : number
>                                        : ^^^^^^
>_.sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
>              : ^^^ ^^    ^^   ^^   ^^ ^^            ^^      ^^^      ^^^ ^^    ^^   ^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
>            : ^^^ ^^    ^^   ^^   ^^ ^^            ^^      ^^^      ^^^ ^^    ^^   ^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^      ^^^
>[10, 20, 30, 40, 50] : number[]
>                     : ^^^^^^^^
>10 : 10
>   : ^^
>20 : 20
>   : ^^
>30 : 30
>   : ^^
>40 : 40
>   : ^^
>50 : 50
>   : ^^
>35 : 35
>   : ^^

_.range(10);
>_.range(10) : number[]
>            : ^^^^^^^^
>_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>        : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>10 : 10
>   : ^^

_.range(1, 11);
>_.range(1, 11) : number[]
>               : ^^^^^^^^
>_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>        : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>1 : 1
>  : ^
>11 : 11
>   : ^^

_.range(0, 30, 5);
>_.range(0, 30, 5) : number[]
>                  : ^^^^^^^^
>_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>        : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>0 : 0
>  : ^
>30 : 30
>   : ^^
>5 : 5
>  : ^

_.range(0, 30, 5);
>_.range(0, 30, 5) : number[]
>                  : ^^^^^^^^
>_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>        : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>0 : 0
>  : ^
>30 : 30
>   : ^^
>5 : 5
>  : ^

_.range(0);
>_.range(0) : number[]
>           : ^^^^^^^^
>_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>        : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>0 : 0
>  : ^

///////////////////////////////////////////////////////////////////////////////////////

var func = function (greeting) { return greeting + ': ' + this.name };
>func : (greeting: any) => string
>     : ^        ^^^^^^^^^^^^^^^^
>function (greeting) { return greeting + ': ' + this.name } : (greeting: any) => string
>                                                           : ^        ^^^^^^^^^^^^^^^^
>greeting : any
>         : ^^^
>greeting + ': ' + this.name : string
>                            : ^^^^^^
>greeting + ': ' : string
>                : ^^^^^^
>greeting : any
>         : ^^^
>': ' : ": "
>     : ^^^^
>this.name : any
>          : ^^^
>this : any
>     : ^^^
>name : any
>     : ^^^

// need a second var otherwise typescript thinks func signature is the above func type,
// instead of the newly returned _bind => func type.
var func2 = _.bind(func, { name: 'moe' }, 'hi');
>func2 : Function
>      : ^^^^^^^^
>_.bind(func, { name: 'moe' }, 'hi') : Function
>                                    : ^^^^^^^^
>_.bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
>       : ^^^ ^^^^^^^^^        ^^    ^^ ^^      ^^   ^^^ ^^^    ^^        ^^      ^^   ^^^^^    ^^     ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
>     : ^^^ ^^^^^^^^^        ^^    ^^ ^^      ^^   ^^^ ^^^    ^^        ^^      ^^   ^^^^^    ^^     ^^^        ^^^
>func : (greeting: any) => string
>     : ^        ^^^^^^^^^^^^^^^^
>{ name: 'moe' } : { name: string; }
>                : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>'hi' : "hi"
>     : ^^^^

func2();
>func2() : any
>        : ^^^
>func2 : Function
>      : ^^^^^^^^

var buttonView = {
>buttonView : { label: string; onClick: () => void; onHover: () => void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    label: 'underscore',    onClick: function () { alert('clicked: ' + this.label); },    onHover: function () { alert('hovering: ' + this.label); }} : { label: string; onClick: () => void; onHover: () => void; }
>                                                                                                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    label: 'underscore',
>label : string
>      : ^^^^^^
>'underscore' : "underscore"
>             : ^^^^^^^^^^^^

    onClick: function () { alert('clicked: ' + this.label); },
>onClick : () => void
>        : ^^^^^^^^^^
>function () { alert('clicked: ' + this.label); } : () => void
>                                                 : ^^^^^^^^^^
>alert('clicked: ' + this.label) : void
>                                : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>'clicked: ' + this.label : string
>                         : ^^^^^^
>'clicked: ' : "clicked: "
>            : ^^^^^^^^^^^
>this.label : any
>           : ^^^
>this : any
>     : ^^^
>label : any
>      : ^^^

    onHover: function () { alert('hovering: ' + this.label); }
>onHover : () => void
>        : ^^^^^^^^^^
>function () { alert('hovering: ' + this.label); } : () => void
>                                                  : ^^^^^^^^^^
>alert('hovering: ' + this.label) : void
>                                 : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>'hovering: ' + this.label : string
>                          : ^^^^^^
>'hovering: ' : "hovering: "
>             : ^^^^^^^^^^^^
>this.label : any
>           : ^^^
>this : any
>     : ^^^
>label : any
>      : ^^^

};
_.bindAll(buttonView);
>_.bindAll(buttonView) : { label: string; onClick: () => void; onHover: () => void; }
>                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.bindAll : <T>(object: T, ...methodNames: string[]) => T
>          : ^ ^^      ^^ ^^^^^           ^^        ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>bindAll : <T>(object: T, ...methodNames: string[]) => T
>        : ^ ^^      ^^ ^^^^^           ^^        ^^^^^ 
>buttonView : { label: string; onClick: () => void; onHover: () => void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

$('#underscore_button').bind('click', buttonView.onClick);
>$('#underscore_button').bind('click', buttonView.onClick) : any
>                                                          : ^^^
>$('#underscore_button').bind : any
>                             : ^^^
>$('#underscore_button') : any
>                        : ^^^
>$ : any
>  : ^^^
>'#underscore_button' : "#underscore_button"
>                     : ^^^^^^^^^^^^^^^^^^^^
>bind : any
>     : ^^^
>'click' : "click"
>        : ^^^^^^^
>buttonView.onClick : () => void
>                   : ^^^^^^^^^^
>buttonView : { label: string; onClick: () => void; onHover: () => void; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>onClick : () => void
>        : ^^^^^^^^^^

var fibonacci = _.memoize(function (n) {
>fibonacci : (n: any) => any
>          : ^ ^^^^^^^^^^^^^
>_.memoize(function (n) {    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);}) : (n: any) => any
>                                                                                      : ^ ^^^^^^^^^^^^^
>_.memoize : <T extends Function>(func: T, hashFunction?: Function) => T
>          : ^ ^^^^^^^^^        ^^    ^^ ^^            ^^^        ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>memoize : <T extends Function>(func: T, hashFunction?: Function) => T
>        : ^ ^^^^^^^^^        ^^    ^^ ^^            ^^^        ^^^^^ 
>function (n) {    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);} : (n: any) => any
>                                                                           : ^ ^^^^^^^^^^^^^
>n : any
>  : ^^^

    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
>n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2) : any
>                                                : ^^^
>n < 2 : boolean
>      : ^^^^^^^
>n : any
>  : ^^^
>2 : 2
>  : ^
>n : any
>  : ^^^
>fibonacci(n - 1) + fibonacci(n - 2) : any
>                                    : ^^^
>fibonacci(n - 1) : any
>                 : ^^^
>fibonacci : (n: any) => any
>          : ^ ^^^^^^^^^^^^^
>n - 1 : number
>      : ^^^^^^
>n : any
>  : ^^^
>1 : 1
>  : ^
>fibonacci(n - 2) : any
>                 : ^^^
>fibonacci : (n: any) => any
>          : ^ ^^^^^^^^^^^^^
>n - 2 : number
>      : ^^^^^^
>n : any
>  : ^^^
>2 : 2
>  : ^

});

var log = _.bind((message?: string, ...rest: string[]) => { }, Date);
>log : (message?: string, ...rest: string[]) => void
>    : ^       ^^^      ^^^^^    ^^        ^^^^^^^^^
>_.bind((message?: string, ...rest: string[]) => { }, Date) : (message?: string, ...rest: string[]) => void
>                                                           : ^       ^^^      ^^^^^    ^^        ^^^^^^^^^
>_.bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
>       : ^^^ ^^^^^^^^^        ^^    ^^ ^^      ^^   ^^^ ^^^    ^^        ^^      ^^   ^^^^^    ^^     ^^^        ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
>     : ^^^ ^^^^^^^^^        ^^    ^^ ^^      ^^   ^^^ ^^^    ^^        ^^      ^^   ^^^^^    ^^     ^^^        ^^^
>(message?: string, ...rest: string[]) => { } : (message?: string, ...rest: string[]) => void
>                                             : ^       ^^^      ^^^^^    ^^        ^^^^^^^^^
>message : string
>        : ^^^^^^
>rest : string[]
>     : ^^^^^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^

_.delay(log, 1000, 'logged later');
>_.delay(log, 1000, 'logged later') : number
>                                   : ^^^^^^
>_.delay : (func: Function, wait: number, ...args: any[]) => number
>        : ^    ^^        ^^    ^^      ^^^^^    ^^     ^^^^^      
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>delay : (func: Function, wait: number, ...args: any[]) => number
>      : ^    ^^        ^^    ^^      ^^^^^    ^^     ^^^^^      
>log : (message?: string, ...rest: string[]) => void
>    : ^       ^^^      ^^^^^    ^^        ^^^^^^^^^
>1000 : 1000
>     : ^^^^
>'logged later' : "logged later"
>               : ^^^^^^^^^^^^^^

_.defer(function () { alert('deferred'); });
>_.defer(function () { alert('deferred'); }) : number
>                                            : ^^^^^^
>_.defer : (func: Function, ...args: any[]) => number
>        : ^    ^^        ^^^^^    ^^     ^^^^^      
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>defer : (func: Function, ...args: any[]) => number
>      : ^    ^^        ^^^^^    ^^     ^^^^^      
>function () { alert('deferred'); } : () => void
>                                   : ^^^^^^^^^^
>alert('deferred') : void
>                  : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>'deferred' : "deferred"
>           : ^^^^^^^^^^

var updatePosition = () => alert('updating position...');
>updatePosition : () => void
>               : ^^^^^^^^^^
>() => alert('updating position...') : () => void
>                                    : ^^^^^^^^^^
>alert('updating position...') : void
>                              : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>'updating position...' : "updating position..."
>                       : ^^^^^^^^^^^^^^^^^^^^^^

var throttled = _.throttle(updatePosition, 100);
>throttled : () => void
>          : ^^^^^^^^^^
>_.throttle(updatePosition, 100) : () => void
>                                : ^^^^^^^^^^
>_.throttle : <T extends Function>(func: T, wait: number) => T
>           : ^ ^^^^^^^^^        ^^    ^^ ^^    ^^      ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>throttle : <T extends Function>(func: T, wait: number) => T
>         : ^ ^^^^^^^^^        ^^    ^^ ^^    ^^      ^^^^^ 
>updatePosition : () => void
>               : ^^^^^^^^^^
>100 : 100
>    : ^^^

$(null).scroll(throttled);
>$(null).scroll(throttled) : any
>                          : ^^^
>$(null).scroll : any
>               : ^^^
>$(null) : any
>        : ^^^
>$ : any
>  : ^^^
>scroll : any
>       : ^^^
>throttled : () => void
>          : ^^^^^^^^^^

var calculateLayout = () => alert('calculating layout...');
>calculateLayout : () => void
>                : ^^^^^^^^^^
>() => alert('calculating layout...') : () => void
>                                     : ^^^^^^^^^^
>alert('calculating layout...') : void
>                               : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>'calculating layout...' : "calculating layout..."
>                        : ^^^^^^^^^^^^^^^^^^^^^^^

var lazyLayout = _.debounce(calculateLayout, 300);
>lazyLayout : () => void
>           : ^^^^^^^^^^
>_.debounce(calculateLayout, 300) : () => void
>                                 : ^^^^^^^^^^
>_.debounce : <T extends Function>(func: T, wait: number, immediate?: boolean) => T
>           : ^ ^^^^^^^^^        ^^    ^^ ^^    ^^      ^^         ^^^       ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>debounce : <T extends Function>(func: T, wait: number, immediate?: boolean) => T
>         : ^ ^^^^^^^^^        ^^    ^^ ^^    ^^      ^^         ^^^       ^^^^^ 
>calculateLayout : () => void
>                : ^^^^^^^^^^
>300 : 300
>    : ^^^

$(null).resize(lazyLayout);
>$(null).resize(lazyLayout) : any
>                           : ^^^
>$(null).resize : any
>               : ^^^
>$(null) : any
>        : ^^^
>$ : any
>  : ^^^
>resize : any
>       : ^^^
>lazyLayout : () => void
>           : ^^^^^^^^^^

var createApplication = () => alert('creating application...');
>createApplication : () => void
>                  : ^^^^^^^^^^
>() => alert('creating application...') : () => void
>                                       : ^^^^^^^^^^
>alert('creating application...') : void
>                                 : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>'creating application...' : "creating application..."
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^

var initialize = _.once(createApplication);
>initialize : () => void
>           : ^^^^^^^^^^
>_.once(createApplication) : () => void
>                          : ^^^^^^^^^^
>_.once : <T extends Function>(func: T) => T
>       : ^ ^^^^^^^^^        ^^    ^^ ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>once : <T extends Function>(func: T) => T
>     : ^ ^^^^^^^^^        ^^    ^^ ^^^^^ 
>createApplication : () => void
>                  : ^^^^^^^^^^

initialize();
>initialize() : void
>             : ^^^^
>initialize : () => void
>           : ^^^^^^^^^^

initialize();
>initialize() : void
>             : ^^^^
>initialize : () => void
>           : ^^^^^^^^^^

var notes: any[];
>notes : any[]
>      : ^^^^^

var render = () => alert("rendering...");
>render : () => void
>       : ^^^^^^^^^^
>() => alert("rendering...") : () => void
>                            : ^^^^^^^^^^
>alert("rendering...") : void
>                      : ^^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^
>"rendering..." : "rendering..."
>               : ^^^^^^^^^^^^^^

var renderNotes = _.after(notes.length, render);
>renderNotes : () => void
>            : ^^^^^^^^^^
>_.after(notes.length, render) : () => void
>                              : ^^^^^^^^^^
>_.after : <T extends Function>(count: number, func: T) => T
>        : ^ ^^^^^^^^^        ^^     ^^      ^^    ^^ ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>after : <T extends Function>(count: number, func: T) => T
>      : ^ ^^^^^^^^^        ^^     ^^      ^^    ^^ ^^^^^ 
>notes.length : number
>             : ^^^^^^
>notes : any[]
>      : ^^^^^
>length : number
>       : ^^^^^^
>render : () => void
>       : ^^^^^^^^^^

_.each(notes, (note) => note.asyncSave({ success: renderNotes }));
>_.each(notes, (note) => note.asyncSave({ success: renderNotes })) : void
>                                                                  : ^^^^
>_.each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>       : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>     : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>notes : any[]
>      : ^^^^^
>(note) => note.asyncSave({ success: renderNotes }) : (note: any) => any
>                                                   : ^    ^^^^^^^^^^^^^
>note : any
>     : ^^^
>note.asyncSave({ success: renderNotes }) : any
>                                         : ^^^
>note.asyncSave : any
>               : ^^^
>note : any
>     : ^^^
>asyncSave : any
>          : ^^^
>{ success: renderNotes } : { success: () => void; }
>                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>success : () => void
>        : ^^^^^^^^^^
>renderNotes : () => void
>            : ^^^^^^^^^^

var hello = function (name) { return "hello: " + name; };
>hello : (name: any) => string
>      : ^    ^^^^^^^^^^^^^^^^
>function (name) { return "hello: " + name; } : (name: any) => string
>                                             : ^    ^^^^^^^^^^^^^^^^
>name : any
>     : ^^^
>"hello: " + name : string
>                 : ^^^^^^
>"hello: " : "hello: "
>          : ^^^^^^^^^
>name : any
>     : ^^^

hello = _.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; });
>hello = _.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; }) : (name: any) => string
>                                                                                     : ^    ^^^^^^^^^^^^^^^^
>hello : (name: any) => string
>      : ^    ^^^^^^^^^^^^^^^^
>_.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; }) : (name: any) => string
>                                                                             : ^    ^^^^^^^^^^^^^^^^
>_.wrap : <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
>       : ^ ^^^^^^^^^        ^^    ^^ ^^       ^^                                ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>wrap : <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
>     : ^ ^^^^^^^^^        ^^    ^^ ^^       ^^                                ^^^^^ 
>hello : (name: any) => string
>      : ^    ^^^^^^^^^^^^^^^^
>(func, arg) => { return "before, " + func(arg) + ", after"; } : (func: (name: any) => string, arg: any) => string
>                                                              : ^    ^^^    ^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^
>func : (name: any) => string
>     : ^    ^^^^^^^^^^^^^^^^
>arg : any
>    : ^^^
>"before, " + func(arg) + ", after" : string
>                                   : ^^^^^^
>"before, " + func(arg) : string
>                       : ^^^^^^
>"before, " : "before, "
>           : ^^^^^^^^^^
>func(arg) : string
>          : ^^^^^^
>func : (name: any) => string
>     : ^    ^^^^^^^^^^^^^^^^
>arg : any
>    : ^^^
>", after" : ", after"
>          : ^^^^^^^^^

hello("moe");
>hello("moe") : string
>             : ^^^^^^
>hello : (name: any) => string
>      : ^    ^^^^^^^^^^^^^^^^
>"moe" : "moe"
>      : ^^^^^

var greet = function (name) { return "hi: " + name; };
>greet : (name: any) => string
>      : ^    ^^^^^^^^^^^^^^^^
>function (name) { return "hi: " + name; } : (name: any) => string
>                                          : ^    ^^^^^^^^^^^^^^^^
>name : any
>     : ^^^
>"hi: " + name : string
>              : ^^^^^^
>"hi: " : "hi: "
>       : ^^^^^^
>name : any
>     : ^^^

var exclaim = function (statement) { return statement + "!"; };
>exclaim : (statement: any) => string
>        : ^         ^^^^^^^^^^^^^^^^
>function (statement) { return statement + "!"; } : (statement: any) => string
>                                                 : ^         ^^^^^^^^^^^^^^^^
>statement : any
>          : ^^^
>statement + "!" : string
>                : ^^^^^^
>statement : any
>          : ^^^
>"!" : "!"
>    : ^^^

var welcome = _.compose(exclaim, greet);
>welcome : Function
>        : ^^^^^^^^
>_.compose(exclaim, greet) : Function
>                          : ^^^^^^^^
>_.compose : (...funcs: Function[]) => Function
>          : ^^^^     ^^          ^^^^^        
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>compose : (...funcs: Function[]) => Function
>        : ^^^^     ^^          ^^^^^        
>exclaim : (statement: any) => string
>        : ^         ^^^^^^^^^^^^^^^^
>greet : (name: any) => string
>      : ^    ^^^^^^^^^^^^^^^^

welcome('moe');
>welcome('moe') : any
>               : ^^^
>welcome : Function
>        : ^^^^^^^^
>'moe' : "moe"
>      : ^^^^^

///////////////////////////////////////////////////////////////////////////////////////

_.keys({ one: 1, two: 2, three: 3 });
>_.keys({ one: 1, two: 2, three: 3 }) : string[]
>                                     : ^^^^^^^^
>_.keys : (object: any) => string[]
>       : ^      ^^   ^^^^^        
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>keys : (object: any) => string[]
>     : ^      ^^   ^^^^^        
>{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : number
>    : ^^^^^^
>2 : 2
>  : ^
>three : number
>      : ^^^^^^
>3 : 3
>  : ^

_.values({ one: 1, two: 2, three: 3 });
>_.values({ one: 1, two: 2, three: 3 }) : any[]
>                                       : ^^^^^
>_.values : (object: any) => any[]
>         : ^      ^^   ^^^^^     
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>values : (object: any) => any[]
>       : ^      ^^   ^^^^^     
>{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : number
>    : ^^^^^^
>2 : 2
>  : ^
>three : number
>      : ^^^^^^
>3 : 3
>  : ^

_.pairs({ one: 1, two: 2, three: 3 });
>_.pairs({ one: 1, two: 2, three: 3 }) : any[][]
>                                      : ^^^^^^^
>_.pairs : (object: any) => any[][]
>        : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>pairs : (object: any) => any[][]
>      : ^      ^^   ^^^^^       
>{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>one : number
>    : ^^^^^^
>1 : 1
>  : ^
>two : number
>    : ^^^^^^
>2 : 2
>  : ^
>three : number
>      : ^^^^^^
>3 : 3
>  : ^

_.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" });
>_.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" }) : any
>                                                            : ^^^
>_.invert : (object: any) => any
>         : ^      ^^   ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>invert : (object: any) => any
>       : ^      ^^   ^^^^^   
>{ Moe: "Moses", Larry: "Louis", Curly: "Jerome" } : { Moe: string; Larry: string; Curly: string; }
>                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Moe : string
>    : ^^^^^^
>"Moses" : "Moses"
>        : ^^^^^^^
>Larry : string
>      : ^^^^^^
>"Louis" : "Louis"
>        : ^^^^^^^
>Curly : string
>      : ^^^^^^
>"Jerome" : "Jerome"
>         : ^^^^^^^^

_.functions(_);
>_.functions(_) : string[]
>               : ^^^^^^^^
>_.functions : (object: any) => string[]
>            : ^      ^^   ^^^^^        
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>functions : (object: any) => string[]
>          : ^      ^^   ^^^^^        
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^

_.extend({ name: 'moe' }, { age: 50 });
>_.extend({ name: 'moe' }, { age: 50 }) : { name: string; }
>                                       : ^^^^^^^^^^^^^^^^^
>_.extend : <T>(destination: T, ...sources: any[]) => T
>         : ^ ^^           ^^ ^^^^^       ^^     ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>extend : <T>(destination: T, ...sources: any[]) => T
>       : ^ ^^           ^^ ^^^^^       ^^     ^^^^^ 
>{ name: 'moe' } : { name: string; }
>                : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>{ age: 50 } : { age: number; }
>            : ^^^^^^^^^^^^^^^^
>age : number
>    : ^^^^^^
>50 : 50
>   : ^^

_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age');
>_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age') : { name: string; age: number; userid: string; }
>                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.pick : <T>(object: T, ...keys: string[]) => T
>       : ^ ^^      ^^ ^^^^^    ^^        ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>pick : <T>(object: T, ...keys: string[]) => T
>     : ^ ^^      ^^ ^^^^^    ^^        ^^^^^ 
>{ name: 'moe', age: 50, userid: 'moe1' } : { name: string; age: number; userid: string; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>age : number
>    : ^^^^^^
>50 : 50
>   : ^^
>userid : string
>       : ^^^^^^
>'moe1' : "moe1"
>       : ^^^^^^
>'name' : "name"
>       : ^^^^^^
>'age' : "age"
>      : ^^^^^

_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid');
>_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid') : { name: string; age: number; userid: string; }
>                                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.omit : <T>(object: T, ...keys: string[]) => T
>       : ^ ^^      ^^ ^^^^^    ^^        ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>omit : <T>(object: T, ...keys: string[]) => T
>     : ^ ^^      ^^ ^^^^^    ^^        ^^^^^ 
>{ name: 'moe', age: 50, userid: 'moe1' } : { name: string; age: number; userid: string; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>age : number
>    : ^^^^^^
>50 : 50
>   : ^^
>userid : string
>       : ^^^^^^
>'moe1' : "moe1"
>       : ^^^^^^
>'userid' : "userid"
>         : ^^^^^^^^

var iceCream = { flavor: "chocolate" };
>iceCream : { flavor: string; }
>         : ^^^^^^^^^^^^^^^^^^^
>{ flavor: "chocolate" } : { flavor: string; }
>                        : ^^^^^^^^^^^^^^^^^^^
>flavor : string
>       : ^^^^^^
>"chocolate" : "chocolate"
>            : ^^^^^^^^^^^

_.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" });
>_.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" }) : { flavor: string; }
>                                                               : ^^^^^^^^^^^^^^^^^^^
>_.defaults : <T>(object: T, ...defaults: any[]) => T
>           : ^ ^^      ^^ ^^^^^        ^^     ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>defaults : <T>(object: T, ...defaults: any[]) => T
>         : ^ ^^      ^^ ^^^^^        ^^     ^^^^^ 
>iceCream : { flavor: string; }
>         : ^^^^^^^^^^^^^^^^^^^
>{ flavor: "vanilla", sprinkles: "lots" } : { flavor: string; sprinkles: string; }
>                                         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>flavor : string
>       : ^^^^^^
>"vanilla" : "vanilla"
>          : ^^^^^^^^^
>sprinkles : string
>          : ^^^^^^
>"lots" : "lots"
>       : ^^^^^^

_.clone({ name: 'moe' });
>_.clone({ name: 'moe' }) : { name: string; }
>                         : ^^^^^^^^^^^^^^^^^
>_.clone : <T>(object: T) => T
>        : ^ ^^      ^^ ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>clone : <T>(object: T) => T
>      : ^ ^^      ^^ ^^^^^ 
>{ name: 'moe' } : { name: string; }
>                : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^

_.chain([1, 2, 3, 200])
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value() : number[]
>                                                                                                                                                         : ^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value : () => number[]
>                                                                                                                                                       : ^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num }) : Underscore.ChainedArray<number>
>                                                                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map : <U>(iterator: Iterator_<number, U>, context?: any) => Underscore.ChainedArray<U>
>                                                                                                        : ^ ^^        ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert) : Underscore.ChainedArray<number>
>                                                                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap : (interceptor: (object: number[]) => void) => Underscore.ChainedArray<number>
>                                                                                    : ^           ^^^      ^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; }) : Underscore.ChainedArray<number>
>                                                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200])    .filter : (iterator: Iterator_<number, boolean>, context?: any) => Underscore.ChainedArray<number>
>                                   : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain([1, 2, 3, 200]) : Underscore.ChainedArray<number>
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.chain : { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
>        : ^^^ ^^    ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^ ^^    ^^             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^ ^^   ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>chain : { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
>      : ^^^ ^^    ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^ ^^    ^^             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^ ^^   ^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^
>[1, 2, 3, 200] : number[]
>               : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^
>200 : 200
>    : ^^^

    .filter(function (num) { return num % 2 == 0; })
>filter : (iterator: Iterator_<number, boolean>, context?: any) => Underscore.ChainedArray<number>
>       : ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>function (num) { return num % 2 == 0; } : (num: number) => boolean
>                                        : ^   ^^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num % 2 == 0 : boolean
>             : ^^^^^^^
>num % 2 : number
>        : ^^^^^^
>num : number
>    : ^^^^^^
>2 : 2
>  : ^
>0 : 0
>  : ^

    .tap(<any>alert)
>tap : (interceptor: (object: number[]) => void) => Underscore.ChainedArray<number>
>    : ^           ^^^      ^^^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
><any>alert : any
>           : ^^^
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^

    .map(function (num) { return num * num })
>map : <U>(iterator: Iterator_<number, U>, context?: any) => Underscore.ChainedArray<U>
>    : ^ ^^        ^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>function (num) { return num * num } : (num: number) => number
>                                    : ^   ^^^^^^^^^^^^^^^^^^^
>num : number
>    : ^^^^^^
>num * num : number
>          : ^^^^^^
>num : number
>    : ^^^^^^
>num : number
>    : ^^^^^^

    .value();
>value : () => number[]
>      : ^^^^^^^^^^^^^^

_.has({ a: 1, b: 2, c: 3 }, "b");
>_.has({ a: 1, b: 2, c: 3 }, "b") : boolean
>                                 : ^^^^^^^
>_.has : (object: any, key: string) => boolean
>      : ^      ^^   ^^   ^^      ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>has : (object: any, key: string) => boolean
>    : ^      ^^   ^^   ^^      ^^^^^       
>{ a: 1, b: 2, c: 3 } : { a: number; b: number; c: number; }
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>b : number
>  : ^^^^^^
>2 : 2
>  : ^
>c : number
>  : ^^^^^^
>3 : 3
>  : ^
>"b" : "b"
>    : ^^^

var moe = { name: 'moe', luckyNumbers: [13, 27, 34] };
>moe : { name: string; luckyNumbers: number[]; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ name: 'moe', luckyNumbers: [13, 27, 34] } : { name: string; luckyNumbers: number[]; }
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>luckyNumbers : number[]
>             : ^^^^^^^^
>[13, 27, 34] : number[]
>             : ^^^^^^^^
>13 : 13
>   : ^^
>27 : 27
>   : ^^
>34 : 34
>   : ^^

var clone = { name: 'moe', luckyNumbers: [13, 27, 34] };
>clone : { name: string; luckyNumbers: number[]; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ name: 'moe', luckyNumbers: [13, 27, 34] } : { name: string; luckyNumbers: number[]; }
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^
>luckyNumbers : number[]
>             : ^^^^^^^^
>[13, 27, 34] : number[]
>             : ^^^^^^^^
>13 : 13
>   : ^^
>27 : 27
>   : ^^
>34 : 34
>   : ^^

moe == clone;
>moe == clone : boolean
>             : ^^^^^^^
>moe : { name: string; luckyNumbers: number[]; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>clone : { name: string; luckyNumbers: number[]; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_.isEqual(moe, clone);
>_.isEqual(moe, clone) : boolean
>                      : ^^^^^^^
>_.isEqual : <T>(object: T, other: T) => boolean
>          : ^ ^^      ^^ ^^     ^^ ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isEqual : <T>(object: T, other: T) => boolean
>        : ^ ^^      ^^ ^^     ^^ ^^^^^       
>moe : { name: string; luckyNumbers: number[]; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>clone : { name: string; luckyNumbers: number[]; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_.isEmpty([1, 2, 3]);
>_.isEmpty([1, 2, 3]) : boolean
>                     : ^^^^^^^
>_.isEmpty : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isEmpty : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

_.isEmpty({});
>_.isEmpty({}) : boolean
>              : ^^^^^^^
>_.isEmpty : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isEmpty : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>{} : {}
>   : ^^

_.isElement($('body')[0]);
>_.isElement($('body')[0]) : boolean
>                          : ^^^^^^^
>_.isElement : (object: any) => boolean
>            : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isElement : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>$('body')[0] : any
>             : ^^^
>$('body') : any
>          : ^^^
>$ : any
>  : ^^^
>'body' : "body"
>       : ^^^^^^
>0 : 0
>  : ^

(function () { return _.isArray(arguments); })();
>(function () { return _.isArray(arguments); })() : boolean
>                                                 : ^^^^^^^
>(function () { return _.isArray(arguments); }) : () => boolean
>                                               : ^^^^^^^^^^^^^
>function () { return _.isArray(arguments); } : () => boolean
>                                             : ^^^^^^^^^^^^^
>_.isArray(arguments) : boolean
>                     : ^^^^^^^
>_.isArray : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isArray : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>arguments : IArguments
>          : ^^^^^^^^^^

_.isArray([1, 2, 3]);
>_.isArray([1, 2, 3]) : boolean
>                     : ^^^^^^^
>_.isArray : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isArray : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

_.isObject({});
>_.isObject({}) : boolean
>               : ^^^^^^^
>_.isObject : (value: any) => boolean
>           : ^     ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isObject : (value: any) => boolean
>         : ^     ^^   ^^^^^       
>{} : {}
>   : ^^

_.isObject(1);
>_.isObject(1) : boolean
>              : ^^^^^^^
>_.isObject : (value: any) => boolean
>           : ^     ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isObject : (value: any) => boolean
>         : ^     ^^   ^^^^^       
>1 : 1
>  : ^


// (() => { return _.isArguments(arguments); })(1, 2, 3);
_.isArguments([1, 2, 3]);
>_.isArguments([1, 2, 3]) : boolean
>                         : ^^^^^^^
>_.isArguments : (object: any) => boolean
>              : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isArguments : (object: any) => boolean
>            : ^      ^^   ^^^^^       
>[1, 2, 3] : number[]
>          : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^
>3 : 3
>  : ^

_.isFunction(alert);
>_.isFunction(alert) : boolean
>                    : ^^^^^^^
>_.isFunction : (object: any) => boolean
>             : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isFunction : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>alert : { (message?: any): void; (x: string): void; }
>      : ^^^       ^^^   ^^^    ^^^ ^^      ^^^    ^^^

_.isString("moe");
>_.isString("moe") : boolean
>                  : ^^^^^^^
>_.isString : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isString : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>"moe" : "moe"
>      : ^^^^^

_.isNumber(8.4 * 5);
>_.isNumber(8.4 * 5) : boolean
>                    : ^^^^^^^
>_.isNumber : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isNumber : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>8.4 * 5 : number
>        : ^^^^^^
>8.4 : 8.4
>    : ^^^
>5 : 5
>  : ^

_.isFinite(-101);
>_.isFinite(-101) : boolean
>                 : ^^^^^^^
>_.isFinite : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isFinite : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>-101 : -101
>     : ^^^^
>101 : 101
>    : ^^^

_.isFinite(-Infinity);
>_.isFinite(-Infinity) : boolean
>                      : ^^^^^^^
>_.isFinite : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isFinite : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>-Infinity : number
>          : ^^^^^^
>Infinity : number
>         : ^^^^^^

_.isBoolean(null);
>_.isBoolean(null) : boolean
>                  : ^^^^^^^
>_.isBoolean : (object: any) => boolean
>            : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isBoolean : (object: any) => boolean
>          : ^      ^^   ^^^^^       

_.isDate(new Date());
>_.isDate(new Date()) : boolean
>                     : ^^^^^^^
>_.isDate : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isDate : (object: any) => boolean
>       : ^      ^^   ^^^^^       
>new Date() : Date
>           : ^^^^
>Date : DateConstructor
>     : ^^^^^^^^^^^^^^^

_.isRegExp(/moe/);
>_.isRegExp(/moe/) : boolean
>                  : ^^^^^^^
>_.isRegExp : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isRegExp : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>/moe/ : RegExp
>      : ^^^^^^

_.isNaN(NaN);
>_.isNaN(NaN) : boolean
>             : ^^^^^^^
>_.isNaN : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isNaN : (object: any) => boolean
>      : ^      ^^   ^^^^^       
>NaN : number
>    : ^^^^^^

isNaN(undefined);
>isNaN(undefined) : boolean
>                 : ^^^^^^^
>isNaN : (number: number) => boolean
>      : ^      ^^      ^^^^^       
>undefined : undefined
>          : ^^^^^^^^^

_.isNaN(undefined);
>_.isNaN(undefined) : boolean
>                   : ^^^^^^^
>_.isNaN : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isNaN : (object: any) => boolean
>      : ^      ^^   ^^^^^       
>undefined : undefined
>          : ^^^^^^^^^

_.isNull(null);
>_.isNull(null) : boolean
>               : ^^^^^^^
>_.isNull : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isNull : (object: any) => boolean
>       : ^      ^^   ^^^^^       

_.isNull(undefined);
>_.isNull(undefined) : boolean
>                    : ^^^^^^^
>_.isNull : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isNull : (object: any) => boolean
>       : ^      ^^   ^^^^^       
>undefined : undefined
>          : ^^^^^^^^^

_.isUndefined((<any>null).missingVariable);
>_.isUndefined((<any>null).missingVariable) : boolean
>                                           : ^^^^^^^
>_.isUndefined : (value: any) => boolean
>              : ^     ^^   ^^^^^       
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>isUndefined : (value: any) => boolean
>            : ^     ^^   ^^^^^       
>(<any>null).missingVariable : any
>                            : ^^^
>(<any>null) : any
>            : ^^^
><any>null : any
>          : ^^^
>missingVariable : any
>                : ^^^

///////////////////////////////////////////////////////////////////////////////////////

var underscore = _.noConflict();
>underscore : Underscore.Static
>           : ^^^^^^^^^^^^^^^^^
>_.noConflict() : Underscore.Static
>               : ^^^^^^^^^^^^^^^^^
>_.noConflict : () => Underscore.Static
>             : ^^^^^^^^^^^^^^^^^^^^^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>noConflict : () => Underscore.Static
>           : ^^^^^^^^^^^^^^^^^^^^^^^

var moe2 = { name: 'moe' };
>moe2 : { name: string; }
>     : ^^^^^^^^^^^^^^^^^
>{ name: 'moe' } : { name: string; }
>                : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^

moe2 === _.identity(moe);
>moe2 === _.identity(moe) : boolean
>                         : ^^^^^^^
>moe2 : { name: string; }
>     : ^^^^^^^^^^^^^^^^^
>_.identity(moe) : { name: string; luckyNumbers: number[]; }
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_.identity : <T>(value: T) => T
>           : ^ ^^     ^^ ^^^^^ 
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>identity : <T>(value: T) => T
>         : ^ ^^     ^^ ^^^^^ 
>moe : { name: string; luckyNumbers: number[]; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

var genie;
>genie : any
>      : ^^^

_.times(3, function (n) { genie.grantWishNumber(n); });
>_.times(3, function (n) { genie.grantWishNumber(n); }) : void[]
>                                                       : ^^^^^^
>_.times : <U>(n: number, iterator: Iterator_<number, U>, context?: any) => U[]
>        : ^ ^^ ^^      ^^        ^^                    ^^       ^^^   ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>times : <U>(n: number, iterator: Iterator_<number, U>, context?: any) => U[]
>      : ^ ^^ ^^      ^^        ^^                    ^^       ^^^   ^^^^^   
>3 : 3
>  : ^
>function (n) { genie.grantWishNumber(n); } : (n: number) => void
>                                           : ^ ^^^^^^^^^^^^^^^^^
>n : number
>  : ^^^^^^
>genie.grantWishNumber(n) : any
>                         : ^^^
>genie.grantWishNumber : any
>                      : ^^^
>genie : any
>      : ^^^
>grantWishNumber : any
>                : ^^^
>n : number
>  : ^^^^^^

_.random(0, 100);
>_.random(0, 100) : number
>                 : ^^^^^^
>_.random : { (max: number): number; (min: number, max: number): number; }
>         : ^^^   ^^      ^^^      ^^^   ^^      ^^   ^^      ^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>random : { (max: number): number; (min: number, max: number): number; }
>       : ^^^   ^^      ^^^      ^^^   ^^      ^^   ^^      ^^^      ^^^
>0 : 0
>  : ^
>100 : 100
>    : ^^^

_.mixin({
>_.mixin({    capitalize: function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    }}) : void
>                                                                                                                                      : ^^^^
>_.mixin : (object: any) => void
>        : ^      ^^   ^^^^^    
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>mixin : (object: any) => void
>      : ^      ^^   ^^^^^    
>{    capitalize: function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    }} : { capitalize: (string: any) => any; }
>                                                                                                                             : ^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^

    capitalize: function (string) {
>capitalize : (string: any) => any
>           : ^      ^^^^^^^^^^^^^
>function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    } : (string: any) => any
>                                                                                                           : ^      ^^^^^^^^^^^^^
>string : any
>       : ^^^

        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
>string.charAt(0).toUpperCase() + string.substring(1).toLowerCase() : any
>                                                                   : ^^^
>string.charAt(0).toUpperCase() : any
>                               : ^^^
>string.charAt(0).toUpperCase : any
>                             : ^^^
>string.charAt(0) : any
>                 : ^^^
>string.charAt : any
>              : ^^^
>string : any
>       : ^^^
>charAt : any
>       : ^^^
>0 : 0
>  : ^
>toUpperCase : any
>            : ^^^
>string.substring(1).toLowerCase() : any
>                                  : ^^^
>string.substring(1).toLowerCase : any
>                                : ^^^
>string.substring(1) : any
>                    : ^^^
>string.substring : any
>                 : ^^^
>string : any
>       : ^^^
>substring : any
>          : ^^^
>1 : 1
>  : ^
>toLowerCase : any
>            : ^^^
    }
});
(<any>_("fabio")).capitalize();
>(<any>_("fabio")).capitalize() : any
>                               : ^^^
>(<any>_("fabio")).capitalize : any
>                             : ^^^
>(<any>_("fabio")) : any
>                  : ^^^
><any>_("fabio") : any
>                : ^^^
>_("fabio") : Underscore.WrappedObject<string>
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>"fabio" : "fabio"
>        : ^^^^^^^
>capitalize : any
>           : ^^^

_.uniqueId('contact_');
>_.uniqueId('contact_') : string
>                       : ^^^^^^
>_.uniqueId : { (): number; (prefix: string): string; }
>           : ^^^^^^      ^^^      ^^      ^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>uniqueId : { (): number; (prefix: string): string; }
>         : ^^^^^^      ^^^      ^^      ^^^      ^^^
>'contact_' : "contact_"
>           : ^^^^^^^^^^

_.escape('Curly, Larry & Moe');
>_.escape('Curly, Larry & Moe') : string
>                               : ^^^^^^
>_.escape : (s: string) => string
>         : ^ ^^      ^^^^^      
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>escape : (s: string) => string
>       : ^ ^^      ^^^^^      
>'Curly, Larry & Moe' : "Curly, Larry & Moe"
>                     : ^^^^^^^^^^^^^^^^^^^^

var object = { cheese: 'crumpets', stuff: function () { return 'nonsense'; } };
>object : { cheese: string; stuff: () => string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ cheese: 'crumpets', stuff: function () { return 'nonsense'; } } : { cheese: string; stuff: () => string; }
>                                                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>cheese : string
>       : ^^^^^^
>'crumpets' : "crumpets"
>           : ^^^^^^^^^^
>stuff : () => string
>      : ^^^^^^^^^^^^
>function () { return 'nonsense'; } : () => string
>                                   : ^^^^^^^^^^^^
>'nonsense' : "nonsense"
>           : ^^^^^^^^^^

_.result(object, 'cheese');
>_.result(object, 'cheese') : any
>                           : ^^^
>_.result : (object: any, property: string) => any
>         : ^      ^^   ^^        ^^      ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>result : (object: any, property: string) => any
>       : ^      ^^   ^^        ^^      ^^^^^   
>object : { cheese: string; stuff: () => string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'cheese' : "cheese"
>         : ^^^^^^^^

_.result(object, 'stuff');
>_.result(object, 'stuff') : any
>                          : ^^^
>_.result : (object: any, property: string) => any
>         : ^      ^^   ^^        ^^      ^^^^^   
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>result : (object: any, property: string) => any
>       : ^      ^^   ^^        ^^      ^^^^^   
>object : { cheese: string; stuff: () => string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'stuff' : "stuff"
>        : ^^^^^^^

var compiled = _.template("hello: <%= name %>");
>compiled : (data: any) => string
>         : ^    ^^   ^^^^^      
>_.template("hello: <%= name %>") : (data: any) => string
>                                 : ^    ^^   ^^^^^      
>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>           : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>"hello: <%= name %>" : "hello: <%= name %>"
>                     : ^^^^^^^^^^^^^^^^^^^^

compiled({ name: 'moe' });
>compiled({ name: 'moe' }) : string
>                          : ^^^^^^
>compiled : (data: any) => string
>         : ^    ^^   ^^^^^      
>{ name: 'moe' } : { name: string; }
>                : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>'moe' : "moe"
>      : ^^^^^

var list2 = "<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>";
>list2 : string
>      : ^^^^^^
>"<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>" : "<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>"
>                                                                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_.template(list2, { people: ['moe', 'curly', 'larry'] });
>_.template(list2, { people: ['moe', 'curly', 'larry'] }) : string
>                                                         : ^^^^^^
>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>           : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>list2 : string
>      : ^^^^^^
>{ people: ['moe', 'curly', 'larry'] } : { people: string[]; }
>                                      : ^^^^^^^^^^^^^^^^^^^^^
>people : string[]
>       : ^^^^^^^^
>['moe', 'curly', 'larry'] : string[]
>                          : ^^^^^^^^
>'moe' : "moe"
>      : ^^^^^
>'curly' : "curly"
>        : ^^^^^^^
>'larry' : "larry"
>        : ^^^^^^^

var template = _.template("<b><%- value %></b>");
>template : (data: any) => string
>         : ^    ^^   ^^^^^      
>_.template("<b><%- value %></b>") : (data: any) => string
>                                  : ^    ^^   ^^^^^      
>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>           : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>"<b><%- value %></b>" : "<b><%- value %></b>"
>                      : ^^^^^^^^^^^^^^^^^^^^^

template({ value: '<script>' });
>template({ value: '<script>' }) : string
>                                : ^^^^^^
>template : (data: any) => string
>         : ^    ^^   ^^^^^      
>{ value: '<script>' } : { value: string; }
>                      : ^^^^^^^^^^^^^^^^^^
>value : string
>      : ^^^^^^
>'<script>' : "<script>"
>           : ^^^^^^^^^^

var compiled2 = _.template("<% print('Hello ' + epithet); %>");
>compiled2 : (data: any) => string
>          : ^    ^^   ^^^^^      
>_.template("<% print('Hello ' + epithet); %>") : (data: any) => string
>                                               : ^    ^^   ^^^^^      
>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>           : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>"<% print('Hello ' + epithet); %>" : "<% print('Hello ' + epithet); %>"
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

compiled2({ epithet: "stooge" });
>compiled2({ epithet: "stooge" }) : string
>                                 : ^^^^^^
>compiled2 : (data: any) => string
>          : ^    ^^   ^^^^^      
>{ epithet: "stooge" } : { epithet: string; }
>                      : ^^^^^^^^^^^^^^^^^^^^
>epithet : string
>        : ^^^^^^
>"stooge" : "stooge"
>         : ^^^^^^^^

_.templateSettings = {
>_.templateSettings = {    interpolate: /\{\{(.+?)\}\}/g} : { interpolate: RegExp; }
>                                                         : ^^^^^^^^^^^^^^^^^^^^^^^^
>_.templateSettings : Underscore.TemplateSettings
>                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>templateSettings : Underscore.TemplateSettings
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    interpolate: /\{\{(.+?)\}\}/g} : { interpolate: RegExp; }
>                                    : ^^^^^^^^^^^^^^^^^^^^^^^^

    interpolate: /\{\{(.+?)\}\}/g
>interpolate : RegExp
>            : ^^^^^^
>/\{\{(.+?)\}\}/g : RegExp
>                 : ^^^^^^

};
var template2 = _.template("Hello {{ name }}!");
>template2 : (data: any) => string
>          : ^    ^^   ^^^^^      
>_.template("Hello {{ name }}!") : (data: any) => string
>                                : ^    ^^   ^^^^^      
>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>           : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>"Hello {{ name }}!" : "Hello {{ name }}!"
>                    : ^^^^^^^^^^^^^^^^^^^

template2({ name: "Mustache" });
>template2({ name: "Mustache" }) : string
>                                : ^^^^^^
>template2 : (data: any) => string
>          : ^    ^^   ^^^^^      
>{ name: "Mustache" } : { name: string; }
>                     : ^^^^^^^^^^^^^^^^^
>name : string
>     : ^^^^^^
>"Mustache" : "Mustache"
>           : ^^^^^^^^^^

_.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' });
>_.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' }) : string
>                                                                                       : ^^^^^^
>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>           : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^      ^^^
>"Using 'with': <%= data.answer %>" : "Using 'with': <%= data.answer %>"
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{ answer: 'no' } : { answer: string; }
>                 : ^^^^^^^^^^^^^^^^^^^
>answer : string
>       : ^^^^^^
>'no' : "no"
>     : ^^^^
>{ variable: 'data' } : { variable: string; }
>                     : ^^^^^^^^^^^^^^^^^^^^^
>variable : string
>         : ^^^^^^
>'data' : "data"
>       : ^^^^^^

=== underscoreTest1_underscore.ts ===
interface Dictionary<T> {
    [x: string]: T;
>x : string
>  : ^^^^^^
}

interface Iterator_<T, U> {
    (value: T, index: any, list: any): U;
>value : T
>      : ^
>index : any
>      : ^^^
>list : any
>     : ^^^
}

interface Reducer<T, U> {
    (accumulator: U, value: T, index: any, list: any): U;
>accumulator : U
>            : ^
>value : T
>      : ^
>index : any
>      : ^^^
>list : any
>     : ^^^
}

interface Tuple2<T0, T1> extends Array<any> {
    0: T0;
>0 : T0
>  : ^^

    1: T1;
>1 : T1
>  : ^^
}

interface Tuple3<T0, T1, T2> extends Array<any> {
    0: T0;
>0 : T0
>  : ^^

    1: T1;
>1 : T1
>  : ^^

    2: T2;
>2 : T2
>  : ^^
}

interface Tuple4<T0, T1, T2, T3> extends Array<any> {
    0: T0;
>0 : T0
>  : ^^

    1: T1;
>1 : T1
>  : ^^

    2: T2;
>2 : T2
>  : ^^

    3: T3;
>3 : T3
>  : ^^
}

module Underscore {
    export interface WrappedObject<T> {
        keys(): string[];
>keys : () => string[]
>     : ^^^^^^        

        values(): any[];
>values : () => any[]
>       : ^^^^^^     

        pairs(): any[][];
>pairs : () => any[][]
>      : ^^^^^^       

        invert(): any;
>invert : () => any
>       : ^^^^^^   

        functions(): string[];
>functions : () => string[]
>          : ^^^^^^        

        methods(): string[];
>methods : () => string[]
>        : ^^^^^^        

        extend(...sources: any[]): T;
>extend : (...sources: any[]) => T
>       : ^^^^       ^^     ^^^^^ 
>sources : any[]
>        : ^^^^^

        pick(...keys: string[]): T;
>pick : (...keys: string[]) => T
>     : ^^^^    ^^        ^^^^^ 
>keys : string[]
>     : ^^^^^^^^

        omit(...keys: string[]): T;
>omit : (...keys: string[]) => T
>     : ^^^^    ^^        ^^^^^ 
>keys : string[]
>     : ^^^^^^^^

        defaults(...defaults: any[]): T;
>defaults : (...defaults: any[]) => T
>         : ^^^^        ^^     ^^^^^ 
>defaults : any[]
>         : ^^^^^

        clone(): T;
>clone : () => T
>      : ^^^^^^ 

        tap(interceptor: (object: T) => void): T;
>tap : (interceptor: (object: T) => void) => T
>    : ^           ^^                   ^^^^^ 
>interceptor : (object: T) => void
>            : ^      ^^ ^^^^^    
>object : T
>       : ^

        has(key: string): boolean;
>has : (key: string) => boolean
>    : ^   ^^      ^^^^^       
>key : string
>    : ^^^^^^

        isEqual(other: T): boolean;
>isEqual : (other: T) => boolean
>        : ^     ^^ ^^^^^       
>other : T
>      : ^

        isEmpty(): boolean;
>isEmpty : () => boolean
>        : ^^^^^^       

        isElement(): boolean;
>isElement : () => boolean
>          : ^^^^^^       

        isArray(): boolean;
>isArray : () => boolean
>        : ^^^^^^       

        isObject(): boolean;
>isObject : () => boolean
>         : ^^^^^^       

        isArguments(): boolean;
>isArguments : () => boolean
>            : ^^^^^^       

        isFunction(): boolean;
>isFunction : () => boolean
>           : ^^^^^^       

        isString(): boolean;
>isString : () => boolean
>         : ^^^^^^       

        isNumber(): boolean;
>isNumber : () => boolean
>         : ^^^^^^       

        isFinite(): boolean;
>isFinite : () => boolean
>         : ^^^^^^       

        isBoolean(): boolean;
>isBoolean : () => boolean
>          : ^^^^^^       

        isDate(): boolean;
>isDate : () => boolean
>       : ^^^^^^       

        isRegExp(): boolean;
>isRegExp : () => boolean
>         : ^^^^^^       

        isNaN(): boolean;
>isNaN : () => boolean
>      : ^^^^^^       

        isNull(): boolean;
>isNull : () => boolean
>       : ^^^^^^       

        isUndefined(): boolean;
>isUndefined : () => boolean
>            : ^^^^^^       

        value(): T;
>value : () => T
>      : ^^^^^^ 
    }

    export interface WrappedFunction<T extends Function> extends WrappedObject<T> {
        bind(object: any): T;
>bind : { (object: any): T; (object: any, ...args: any[]): Function; }
>     : ^^^      ^^   ^^^ ^^^      ^^   ^^^^^    ^^     ^^^        ^^^
>object : any
>       : ^^^

        bind(object: any, ...args: any[]): Function;
>bind : { (object: any): T; (object: any, ...args: any[]): Function; }
>     : ^^^      ^^   ^^^ ^^^      ^^   ^^^^^    ^^     ^^^        ^^^
>object : any
>       : ^^^
>args : any[]
>     : ^^^^^

        bindAll(...methodNames: string[]): T;
>bindAll : (...methodNames: string[]) => T
>        : ^^^^           ^^        ^^^^^ 
>methodNames : string[]
>            : ^^^^^^^^

        partial(...args: any[]): Function;
>partial : (...args: any[]) => Function
>        : ^^^^    ^^     ^^^^^        
>args : any[]
>     : ^^^^^

        memoize(hashFunction?: Function): T;
>memoize : (hashFunction?: Function) => T
>        : ^            ^^^        ^^^^^ 
>hashFunction : Function
>             : ^^^^^^^^

        delay(wait: number, ...args: any[]): number;
>delay : (wait: number, ...args: any[]) => number
>      : ^    ^^      ^^^^^    ^^     ^^^^^      
>wait : number
>     : ^^^^^^
>args : any[]
>     : ^^^^^

        defer(...args: any[]): number;
>defer : (...args: any[]) => number
>      : ^^^^    ^^     ^^^^^      
>args : any[]
>     : ^^^^^

        throttle(wait: number): T;
>throttle : (wait: number) => T
>         : ^    ^^      ^^^^^ 
>wait : number
>     : ^^^^^^

        debounce(wait: number, immediate?: boolean): T;
>debounce : (wait: number, immediate?: boolean) => T
>         : ^    ^^      ^^         ^^^       ^^^^^ 
>wait : number
>     : ^^^^^^
>immediate : boolean
>          : ^^^^^^^

        once(): T;
>once : () => T
>     : ^^^^^^ 

        wrap(wrapper: (func: T, ...args: any[]) => any): T;
>wrap : (wrapper: (func: T, ...args: any[]) => any) => T
>     : ^       ^^                                ^^^^^ 
>wrapper : (func: T, ...args: any[]) => any
>        : ^    ^^ ^^^^^    ^^     ^^^^^   
>func : T
>     : ^
>args : any[]
>     : ^^^^^

        compose(...funcs: Function[]): Function;
>compose : (...funcs: Function[]) => Function
>        : ^^^^     ^^          ^^^^^        
>funcs : Function[]
>      : ^^^^^^^^^^
    }

    export interface WrappedArray<T> extends WrappedObject<Array<T>> {
        each(iterator: Iterator_<T, void>, context?: any): void;
>each : (iterator: Iterator_<T, void>, context?: any) => void
>     : ^        ^^                  ^^       ^^^   ^^^^^    
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        forEach(iterator: Iterator_<T, void>, context?: any): void;
>forEach : (iterator: Iterator_<T, void>, context?: any) => void
>        : ^        ^^                  ^^       ^^^   ^^^^^    
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        map<U>(iterator: Iterator_<T, U>, context?: any): U[];
>map : <U>(iterator: Iterator_<T, U>, context?: any) => U[]
>    : ^ ^^        ^^               ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
>collect : <U>(iterator: Iterator_<T, U>, context?: any) => U[]
>        : ^ ^^        ^^               ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        find(iterator: Iterator_<T, boolean>, context?: any): T;
>find : (iterator: Iterator_<T, boolean>, context?: any) => T
>     : ^        ^^                     ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        detect(iterator: Iterator_<T, boolean>, context?: any): T;
>detect : (iterator: Iterator_<T, boolean>, context?: any) => T
>       : ^        ^^                     ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        filter(iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : (iterator: Iterator_<T, boolean>, context?: any) => T[]
>       : ^        ^^                     ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        select(iterator: Iterator_<T, boolean>, context?: any): T[];
>select : (iterator: Iterator_<T, boolean>, context?: any) => T[]
>       : ^        ^^                     ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        where(properties: Object): T[];
>where : (properties: Object) => T[]
>      : ^          ^^      ^^^^^   
>properties : Object
>           : ^^^^^^

        findWhere(properties: Object): T;
>findWhere : (properties: Object) => T
>          : ^          ^^      ^^^^^ 
>properties : Object
>           : ^^^^^^

        reject(iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : (iterator: Iterator_<T, boolean>, context?: any) => T[]
>       : ^        ^^                     ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>      : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>    : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>     : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>    : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        contains(value: T): boolean;
>contains : (value: T) => boolean
>         : ^     ^^ ^^^^^       
>value : T
>      : ^

        include(value: T): boolean;
>include : (value: T) => boolean
>        : ^     ^^ ^^^^^       
>value : T
>      : ^

        invoke(methodName: string, ...args: any[]): any[];
>invoke : (methodName: string, ...args: any[]) => any[]
>       : ^          ^^      ^^^^^    ^^     ^^^^^     
>methodName : string
>           : ^^^^^^
>args : any[]
>     : ^^^^^

        pluck(propertyName: string): any[];
>pluck : (propertyName: string) => any[]
>      : ^            ^^      ^^^^^     
>propertyName : string
>             : ^^^^^^

        max(iterator?: Iterator_<T, any>, context?: any): T;
>max : (iterator?: Iterator_<T, any>, context?: any) => T
>    : ^        ^^^                 ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        min(iterator?: Iterator_<T, any>, context?: any): T;
>min : (iterator?: Iterator_<T, any>, context?: any) => T
>    : ^        ^^^                 ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { (iterator: Iterator_<T, any>, context?: any): T[]; (propertyName: string): T[]; }
>       : ^^^        ^^                 ^^       ^^^   ^^^   ^^^            ^^      ^^^   ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(propertyName: string): T[];
>sortBy : { (iterator: Iterator_<T, any>, context?: any): T[]; (propertyName: string): T[]; }
>       : ^^^        ^^                 ^^       ^^^   ^^^   ^^^            ^^      ^^^   ^^^
>propertyName : string
>             : ^^^^^^

        groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        groupBy(propertyName: string): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>propertyName : string
>             : ^^^^^^

        countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                  ^^^            ^^      ^^^                  ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        countBy(propertyName: string): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                  ^^^            ^^      ^^^                  ^^^
>propertyName : string
>             : ^^^^^^

        shuffle(): T[];
>shuffle : () => T[]
>        : ^^^^^^   

        toArray(): T[];
>toArray : () => T[]
>        : ^^^^^^   

        size(): number;
>size : () => number
>     : ^^^^^^      

        first(): T;
>first : { (): T; (count: number): T[]; }
>      : ^^^^^^ ^^^     ^^      ^^^   ^^^

        first(count: number): T[];
>first : { (): T; (count: number): T[]; }
>      : ^^^^^^ ^^^     ^^      ^^^   ^^^
>count : number
>      : ^^^^^^

        head(): T;
>head : { (): T; (count: number): T[]; }
>     : ^^^^^^ ^^^     ^^      ^^^   ^^^

        head(count: number): T[];
>head : { (): T; (count: number): T[]; }
>     : ^^^^^^ ^^^     ^^      ^^^   ^^^
>count : number
>      : ^^^^^^

        take(): T;
>take : { (): T; (count: number): T[]; }
>     : ^^^^^^ ^^^     ^^      ^^^   ^^^

        take(count: number): T[];
>take : { (): T; (count: number): T[]; }
>     : ^^^^^^ ^^^     ^^      ^^^   ^^^
>count : number
>      : ^^^^^^

        initial(): T;
>initial : { (): T; (count: number): T[]; }
>        : ^^^^^^ ^^^     ^^      ^^^   ^^^

        initial(count: number): T[];
>initial : { (): T; (count: number): T[]; }
>        : ^^^^^^ ^^^     ^^      ^^^   ^^^
>count : number
>      : ^^^^^^

        last(): T;
>last : { (): T; (count: number): T[]; }
>     : ^^^^^^ ^^^     ^^      ^^^   ^^^

        last(count: number): T[];
>last : { (): T; (count: number): T[]; }
>     : ^^^^^^ ^^^     ^^      ^^^   ^^^
>count : number
>      : ^^^^^^

        rest(index?: number): T[];
>rest : (index?: number) => T[]
>     : ^     ^^^      ^^^^^   
>index : number
>      : ^^^^^^

        compact(): T[];
>compact : () => T[]
>        : ^^^^^^   

        flatten<U>(shallow?: boolean): U[];
>flatten : <U>(shallow?: boolean) => U[]
>        : ^ ^^       ^^^       ^^^^^   
>shallow : boolean
>        : ^^^^^^^

        without(...values: T[]): T[];
>without : (...values: T[]) => T[]
>        : ^^^^      ^^   ^^^^^   
>values : T[]
>       : ^^^

        union(...arrays: T[][]): T[];
>union : (...arrays: T[][]) => T[]
>      : ^^^^      ^^     ^^^^^   
>arrays : T[][]
>       : ^^^^^

        intersection(...arrays: T[][]): T[];
>intersection : (...arrays: T[][]) => T[]
>             : ^^^^      ^^     ^^^^^   
>arrays : T[][]
>       : ^^^^^

        difference(...others: T[][]): T[];
>difference : (...others: T[][]) => T[]
>           : ^^^^      ^^     ^^^^^   
>others : T[][]
>       : ^^^^^

        uniq(isSorted?: boolean): T[];
>uniq : { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>     : ^^^        ^^^       ^^^   ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>isSorted : boolean
>         : ^^^^^^^

        uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>uniq : { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>     : ^^^        ^^^       ^^^   ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>isSorted : boolean
>         : ^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        unique(isSorted?: boolean): T[];
>unique : { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>       : ^^^        ^^^       ^^^   ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>isSorted : boolean
>         : ^^^^^^^

        unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>unique : { (isSorted?: boolean): T[]; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>       : ^^^        ^^^       ^^^   ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>isSorted : boolean
>         : ^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        zip(...arrays: any[][]): any[][];
>zip : (...arrays: any[][]) => any[][]
>    : ^^^^      ^^       ^^^^^       
>arrays : any[][]
>       : ^^^^^^^

        object(): any;
>object : { (): any; (values: any[]): any; }
>       : ^^^^^^   ^^^      ^^     ^^^   ^^^

        object(values: any[]): any;
>object : { (): any; (values: any[]): any; }
>       : ^^^^^^   ^^^      ^^     ^^^   ^^^
>values : any[]
>       : ^^^^^

        indexOf(value: T, isSorted?: boolean): number;
>indexOf : (value: T, isSorted?: boolean) => number
>        : ^     ^^ ^^        ^^^       ^^^^^      
>value : T
>      : ^
>isSorted : boolean
>         : ^^^^^^^

        lastIndexOf(value: T, fromIndex?: number): number;
>lastIndexOf : (value: T, fromIndex?: number) => number
>            : ^     ^^ ^^         ^^^      ^^^^^      
>value : T
>      : ^
>fromIndex : number
>          : ^^^^^^

        sortedIndex(obj: T, propertyName: string): number;
>sortedIndex : { (obj: T, propertyName: string): number; (obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
>            : ^^^   ^^ ^^            ^^      ^^^      ^^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^      ^^^
>obj : T
>    : ^
>propertyName : string
>             : ^^^^^^

        sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): number;
>sortedIndex : { (obj: T, propertyName: string): number; (obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
>            : ^^^   ^^ ^^            ^^      ^^^      ^^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^      ^^^
>obj : T
>    : ^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        // Methods from Array
        concat(...items: T[]): T[];
>concat : (...items: T[]) => T[]
>       : ^^^^     ^^   ^^^^^   
>items : T[]
>      : ^^^

        join(separator?: string): string;
>join : (separator?: string) => string
>     : ^         ^^^      ^^^^^      
>separator : string
>          : ^^^^^^

        pop(): T;
>pop : () => T
>    : ^^^^^^ 

        push(...items: T[]): number;
>push : (...items: T[]) => number
>     : ^^^^     ^^   ^^^^^      
>items : T[]
>      : ^^^

        reverse(): T[];
>reverse : () => T[]
>        : ^^^^^^   

        shift(): T;
>shift : () => T
>      : ^^^^^^ 

        slice(start: number, end?: number): T[];
>slice : (start: number, end?: number) => T[]
>      : ^     ^^      ^^   ^^^      ^^^^^   
>start : number
>      : ^^^^^^
>end : number
>    : ^^^^^^

        sort(compareFn?: (a: T, b: T) => number): T[];
>sort : (compareFn?: (a: T, b: T) => number) => T[]
>     : ^         ^^^                      ^^^^^   
>compareFn : (a: T, b: T) => number
>          : ^ ^^ ^^ ^^ ^^^^^      
>a : T
>  : ^
>b : T
>  : ^

        splice(start: number): T[];
>splice : { (start: number): T[]; (start: number, deleteCount: number, ...items: T[]): T[]; }
>       : ^^^     ^^      ^^^   ^^^     ^^      ^^           ^^      ^^^^^     ^^   ^^^   ^^^
>start : number
>      : ^^^^^^

        splice(start: number, deleteCount: number, ...items: T[]): T[];
>splice : { (start: number): T[]; (start: number, deleteCount: number, ...items: T[]): T[]; }
>       : ^^^     ^^      ^^^   ^^^     ^^      ^^           ^^      ^^^^^     ^^   ^^^   ^^^
>start : number
>      : ^^^^^^
>deleteCount : number
>            : ^^^^^^
>items : T[]
>      : ^^^

        unshift(...items: T[]): number;
>unshift : (...items: T[]) => number
>        : ^^^^     ^^   ^^^^^      
>items : T[]
>      : ^^^
    }

    export interface WrappedDictionary<T> extends WrappedObject<Dictionary<T>> {
        each(iterator: Iterator_<T, void>, context?: any): void;
>each : (iterator: Iterator_<T, void>, context?: any) => void
>     : ^        ^^                  ^^       ^^^   ^^^^^    
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        forEach(iterator: Iterator_<T, void>, context?: any): void;
>forEach : (iterator: Iterator_<T, void>, context?: any) => void
>        : ^        ^^                  ^^       ^^^   ^^^^^    
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        map<U>(iterator: Iterator_<T, U>, context?: any): U[];
>map : <U>(iterator: Iterator_<T, U>, context?: any) => U[]
>    : ^ ^^        ^^               ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
>collect : <U>(iterator: Iterator_<T, U>, context?: any) => U[]
>        : ^ ^^        ^^               ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        find(iterator: Iterator_<T, boolean>, context?: any): T;
>find : (iterator: Iterator_<T, boolean>, context?: any) => T
>     : ^        ^^                     ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        detect(iterator: Iterator_<T, boolean>, context?: any): T;
>detect : (iterator: Iterator_<T, boolean>, context?: any) => T
>       : ^        ^^                     ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        filter(iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : (iterator: Iterator_<T, boolean>, context?: any) => T[]
>       : ^        ^^                     ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        select(iterator: Iterator_<T, boolean>, context?: any): T[];
>select : (iterator: Iterator_<T, boolean>, context?: any) => T[]
>       : ^        ^^                     ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        where(properties: Object): T[];
>where : (properties: Object) => T[]
>      : ^          ^^      ^^^^^   
>properties : Object
>           : ^^^^^^

        findWhere(properties: Object): T;
>findWhere : (properties: Object) => T
>          : ^          ^^      ^^^^^ 
>properties : Object
>           : ^^^^^^

        reject(iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : (iterator: Iterator_<T, boolean>, context?: any) => T[]
>       : ^        ^^                     ^^       ^^^   ^^^^^   
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>      : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>    : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>     : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : (iterator?: Iterator_<T, boolean>, context?: any) => boolean
>    : ^        ^^^                     ^^       ^^^   ^^^^^       
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        contains(value: T): boolean;
>contains : (value: T) => boolean
>         : ^     ^^ ^^^^^       
>value : T
>      : ^

        include(value: T): boolean;
>include : (value: T) => boolean
>        : ^     ^^ ^^^^^       
>value : T
>      : ^

        invoke(methodName: string, ...args: any[]): any[];
>invoke : (methodName: string, ...args: any[]) => any[]
>       : ^          ^^      ^^^^^    ^^     ^^^^^     
>methodName : string
>           : ^^^^^^
>args : any[]
>     : ^^^^^

        pluck(propertyName: string): any[];
>pluck : (propertyName: string) => any[]
>      : ^            ^^      ^^^^^     
>propertyName : string
>             : ^^^^^^

        max(iterator?: Iterator_<T, any>, context?: any): T;
>max : (iterator?: Iterator_<T, any>, context?: any) => T
>    : ^        ^^^                 ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        min(iterator?: Iterator_<T, any>, context?: any): T;
>min : (iterator?: Iterator_<T, any>, context?: any) => T
>    : ^        ^^^                 ^^       ^^^   ^^^^^ 
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { (iterator: Iterator_<T, any>, context?: any): T[]; (propertyName: string): T[]; }
>       : ^^^        ^^                 ^^       ^^^   ^^^   ^^^            ^^      ^^^   ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(propertyName: string): T[];
>sortBy : { (iterator: Iterator_<T, any>, context?: any): T[]; (propertyName: string): T[]; }
>       : ^^^        ^^                 ^^       ^^^   ^^^   ^^^            ^^      ^^^   ^^^
>propertyName : string
>             : ^^^^^^

        groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        groupBy(propertyName: string): Dictionary<T[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; (propertyName: string): Dictionary<T[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>propertyName : string
>             : ^^^^^^

        countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                  ^^^            ^^      ^^^                  ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        countBy(propertyName: string): Dictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; (propertyName: string): Dictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                  ^^^            ^^      ^^^                  ^^^
>propertyName : string
>             : ^^^^^^

        shuffle(): T[];
>shuffle : () => T[]
>        : ^^^^^^   

        toArray(): T[];
>toArray : () => T[]
>        : ^^^^^^   

        size(): number;
>size : () => number
>     : ^^^^^^      
    }

    export interface ChainedObject<T> {
        keys(): ChainedArray<string>;
>keys : () => ChainedArray<string>
>     : ^^^^^^                    

        values(): ChainedArray<any>;
>values : () => ChainedArray<any>
>       : ^^^^^^                 

        pairs(): ChainedArray<any[]>;
>pairs : () => ChainedArray<any[]>
>      : ^^^^^^                   

        invert(): ChainedObject<any>;
>invert : () => ChainedObject<any>
>       : ^^^^^^                  

        functions(): ChainedArray<string>;
>functions : () => ChainedArray<string>
>          : ^^^^^^                    

        methods(): ChainedArray<string>;
>methods : () => ChainedArray<string>
>        : ^^^^^^                    

        extend(...sources: any[]): ChainedObject<T>;
>extend : (...sources: any[]) => ChainedObject<T>
>       : ^^^^       ^^     ^^^^^                
>sources : any[]
>        : ^^^^^

        pick(...keys: string[]): ChainedObject<T>;
>pick : (...keys: string[]) => ChainedObject<T>
>     : ^^^^    ^^        ^^^^^                
>keys : string[]
>     : ^^^^^^^^

        omit(...keys: string[]): ChainedObject<T>;
>omit : (...keys: string[]) => ChainedObject<T>
>     : ^^^^    ^^        ^^^^^                
>keys : string[]
>     : ^^^^^^^^

        defaults(...defaults: any[]): ChainedObject<T>;
>defaults : (...defaults: any[]) => ChainedObject<T>
>         : ^^^^        ^^     ^^^^^                
>defaults : any[]
>         : ^^^^^

        clone(): ChainedObject<T>;
>clone : () => ChainedObject<T>
>      : ^^^^^^                

        tap(interceptor: (object: T) => void): ChainedObject<T>;
>tap : (interceptor: (object: T) => void) => ChainedObject<T>
>    : ^           ^^                   ^^^^^                
>interceptor : (object: T) => void
>            : ^      ^^ ^^^^^    
>object : T
>       : ^

        has(key: string): ChainedObject<boolean>;
>has : (key: string) => ChainedObject<boolean>
>    : ^   ^^      ^^^^^                      
>key : string
>    : ^^^^^^

        isEqual(other: T): ChainedObject<boolean>;
>isEqual : (other: T) => ChainedObject<boolean>
>        : ^     ^^ ^^^^^                      
>other : T
>      : ^

        isEmpty(): ChainedObject<boolean>;
>isEmpty : () => ChainedObject<boolean>
>        : ^^^^^^                      

        isElement(): ChainedObject<boolean>;
>isElement : () => ChainedObject<boolean>
>          : ^^^^^^                      

        isArray(): ChainedObject<boolean>;
>isArray : () => ChainedObject<boolean>
>        : ^^^^^^                      

        isObject(): ChainedObject<boolean>;
>isObject : () => ChainedObject<boolean>
>         : ^^^^^^                      

        isArguments(): ChainedObject<boolean>;
>isArguments : () => ChainedObject<boolean>
>            : ^^^^^^                      

        isFunction(): ChainedObject<boolean>;
>isFunction : () => ChainedObject<boolean>
>           : ^^^^^^                      

        isString(): ChainedObject<boolean>;
>isString : () => ChainedObject<boolean>
>         : ^^^^^^                      

        isNumber(): ChainedObject<boolean>;
>isNumber : () => ChainedObject<boolean>
>         : ^^^^^^                      

        isFinite(): ChainedObject<boolean>;
>isFinite : () => ChainedObject<boolean>
>         : ^^^^^^                      

        isBoolean(): ChainedObject<boolean>;
>isBoolean : () => ChainedObject<boolean>
>          : ^^^^^^                      

        isDate(): ChainedObject<boolean>;
>isDate : () => ChainedObject<boolean>
>       : ^^^^^^                      

        isRegExp(): ChainedObject<boolean>;
>isRegExp : () => ChainedObject<boolean>
>         : ^^^^^^                      

        isNaN(): ChainedObject<boolean>;
>isNaN : () => ChainedObject<boolean>
>      : ^^^^^^                      

        isNull(): ChainedObject<boolean>;
>isNull : () => ChainedObject<boolean>
>       : ^^^^^^                      

        isUndefined(): ChainedObject<boolean>;
>isUndefined : () => ChainedObject<boolean>
>            : ^^^^^^                      

        value(): T;
>value : () => T
>      : ^^^^^^ 
    }

    export interface ChainedArray<T> extends ChainedObject<Array<T>> {
        each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>each : (iterator: Iterator_<T, void>, context?: any) => ChainedObject<void>
>     : ^        ^^                  ^^       ^^^   ^^^^^                   
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>forEach : (iterator: Iterator_<T, void>, context?: any) => ChainedObject<void>
>        : ^        ^^                  ^^       ^^^   ^^^^^                   
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>map : <U>(iterator: Iterator_<T, U>, context?: any) => ChainedArray<U>
>    : ^ ^^        ^^               ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>collect : <U>(iterator: Iterator_<T, U>, context?: any) => ChainedArray<U>
>        : ^ ^^        ^^               ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>find : (iterator: Iterator_<T, boolean>, context?: any) => ChainedObject<T>
>     : ^        ^^                     ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>detect : (iterator: Iterator_<T, boolean>, context?: any) => ChainedObject<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>filter : (iterator: Iterator_<T, boolean>, context?: any) => ChainedArray<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>select : (iterator: Iterator_<T, boolean>, context?: any) => ChainedArray<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        where(properties: Object): ChainedArray<T>;
>where : (properties: Object) => ChainedArray<T>
>      : ^          ^^      ^^^^^               
>properties : Object
>           : ^^^^^^

        findWhere(properties: Object): ChainedObject<T>;
>findWhere : (properties: Object) => ChainedObject<T>
>          : ^          ^^      ^^^^^                
>properties : Object
>           : ^^^^^^

        reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>reject : (iterator: Iterator_<T, boolean>, context?: any) => ChainedArray<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>every : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>      : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>all : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>    : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>some : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>     : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>any : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>    : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        contains(value: T): ChainedObject<boolean>;
>contains : (value: T) => ChainedObject<boolean>
>         : ^     ^^ ^^^^^                      
>value : T
>      : ^

        include(value: T): ChainedObject<boolean>;
>include : (value: T) => ChainedObject<boolean>
>        : ^     ^^ ^^^^^                      
>value : T
>      : ^

        invoke(methodName: string, ...args: any[]): ChainedArray<any>;
>invoke : (methodName: string, ...args: any[]) => ChainedArray<any>
>       : ^          ^^      ^^^^^    ^^     ^^^^^                 
>methodName : string
>           : ^^^^^^
>args : any[]
>     : ^^^^^

        pluck(propertyName: string): ChainedArray<any>;
>pluck : (propertyName: string) => ChainedArray<any>
>      : ^            ^^      ^^^^^                 
>propertyName : string
>             : ^^^^^^

        max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>max : (iterator?: Iterator_<T, any>, context?: any) => ChainedObject<T>
>    : ^        ^^^                 ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>min : (iterator?: Iterator_<T, any>, context?: any) => ChainedObject<T>
>    : ^        ^^^                 ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
>       : ^^^        ^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(propertyName: string): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
>       : ^^^        ^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>propertyName : string
>             : ^^^^^^

        // Should return ChainedDictionary<T[]>, but expansive recursion not allowed
        groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                        ^^^            ^^      ^^^                        ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        groupBy(propertyName: string): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                        ^^^            ^^      ^^^                        ^^^
>propertyName : string
>             : ^^^^^^

        countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                         ^^^            ^^      ^^^                         ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        countBy(propertyName: string): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                         ^^^            ^^      ^^^                         ^^^
>propertyName : string
>             : ^^^^^^

        shuffle(): ChainedArray<T>;
>shuffle : () => ChainedArray<T>
>        : ^^^^^^               

        toArray(): ChainedArray<T>;
>toArray : () => ChainedArray<T>
>        : ^^^^^^               

        size(): ChainedObject<number>;
>size : () => ChainedObject<number>
>     : ^^^^^^                     

        first(): ChainedObject<T>;
>first : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>      : ^^^^^^                ^^^     ^^      ^^^               ^^^

        first(count: number): ChainedArray<T>;
>first : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>      : ^^^^^^                ^^^     ^^      ^^^               ^^^
>count : number
>      : ^^^^^^

        head(): ChainedObject<T>;
>head : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>     : ^^^^^^                ^^^     ^^      ^^^               ^^^

        head(count: number): ChainedArray<T>;
>head : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>     : ^^^^^^                ^^^     ^^      ^^^               ^^^
>count : number
>      : ^^^^^^

        take(): ChainedObject<T>;
>take : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>     : ^^^^^^                ^^^     ^^      ^^^               ^^^

        take(count: number): ChainedArray<T>;
>take : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>     : ^^^^^^                ^^^     ^^      ^^^               ^^^
>count : number
>      : ^^^^^^

        initial(): ChainedObject<T>;
>initial : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>        : ^^^^^^                ^^^     ^^      ^^^               ^^^

        initial(count: number): ChainedArray<T>;
>initial : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>        : ^^^^^^                ^^^     ^^      ^^^               ^^^
>count : number
>      : ^^^^^^

        last(): ChainedObject<T>;
>last : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>     : ^^^^^^                ^^^     ^^      ^^^               ^^^

        last(count: number): ChainedArray<T>;
>last : { (): ChainedObject<T>; (count: number): ChainedArray<T>; }
>     : ^^^^^^                ^^^     ^^      ^^^               ^^^
>count : number
>      : ^^^^^^

        rest(index?: number): ChainedArray<T>;
>rest : (index?: number) => ChainedArray<T>
>     : ^     ^^^      ^^^^^               
>index : number
>      : ^^^^^^

        compact(): ChainedArray<T>;
>compact : () => ChainedArray<T>
>        : ^^^^^^               

        flatten<U>(shallow?: boolean): ChainedArray<U>;
>flatten : <U>(shallow?: boolean) => ChainedArray<U>
>        : ^ ^^       ^^^       ^^^^^               
>shallow : boolean
>        : ^^^^^^^

        without(...values: T[]): ChainedArray<T>;
>without : (...values: T[]) => ChainedArray<T>
>        : ^^^^      ^^   ^^^^^               
>values : T[]
>       : ^^^

        union(...arrays: T[][]): ChainedArray<T>;
>union : (...arrays: T[][]) => ChainedArray<T>
>      : ^^^^      ^^     ^^^^^               
>arrays : T[][]
>       : ^^^^^

        intersection(...arrays: T[][]): ChainedArray<T>;
>intersection : (...arrays: T[][]) => ChainedArray<T>
>             : ^^^^      ^^     ^^^^^               
>arrays : T[][]
>       : ^^^^^

        difference(...others: T[][]): ChainedArray<T>;
>difference : (...others: T[][]) => ChainedArray<T>
>           : ^^^^      ^^     ^^^^^               
>others : T[][]
>       : ^^^^^

        uniq(isSorted?: boolean): ChainedArray<T>;
>uniq : { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>; }
>     : ^^^        ^^^       ^^^               ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^               ^^^
>isSorted : boolean
>         : ^^^^^^^

        uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>uniq : { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>; }
>     : ^^^        ^^^       ^^^               ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^               ^^^
>isSorted : boolean
>         : ^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        unique(isSorted?: boolean): ChainedArray<T>;
>unique : { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>; }
>       : ^^^        ^^^       ^^^               ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^               ^^^
>isSorted : boolean
>         : ^^^^^^^

        unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>unique : { (isSorted?: boolean): ChainedArray<T>; <U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>; }
>       : ^^^        ^^^       ^^^               ^^^ ^^        ^^       ^^        ^^               ^^       ^^^   ^^^               ^^^
>isSorted : boolean
>         : ^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        zip(...arrays: any[][]): ChainedArray<any[]>;
>zip : (...arrays: any[][]) => ChainedArray<any[]>
>    : ^^^^      ^^       ^^^^^                   
>arrays : any[][]
>       : ^^^^^^^

        object(): ChainedObject<any>;
>object : { (): ChainedObject<any>; (values: any[]): ChainedObject<any>; }
>       : ^^^^^^                  ^^^      ^^     ^^^                  ^^^

        object(values: any[]): ChainedObject<any>;
>object : { (): ChainedObject<any>; (values: any[]): ChainedObject<any>; }
>       : ^^^^^^                  ^^^      ^^     ^^^                  ^^^
>values : any[]
>       : ^^^^^

        indexOf(value: T, isSorted?: boolean): ChainedObject<number>;
>indexOf : (value: T, isSorted?: boolean) => ChainedObject<number>
>        : ^     ^^ ^^        ^^^       ^^^^^                     
>value : T
>      : ^
>isSorted : boolean
>         : ^^^^^^^

        lastIndexOf(value: T, fromIndex?: number): ChainedObject<number>;
>lastIndexOf : (value: T, fromIndex?: number) => ChainedObject<number>
>            : ^     ^^ ^^         ^^^      ^^^^^                     
>value : T
>      : ^
>fromIndex : number
>          : ^^^^^^

        sortedIndex(obj: T, propertyName: string): ChainedObject<number>;
>sortedIndex : { (obj: T, propertyName: string): ChainedObject<number>; (obj: T, iterator?: Iterator_<T, any>, context?: any): ChainedObject<number>; }
>            : ^^^   ^^ ^^            ^^      ^^^                     ^^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^                     ^^^
>obj : T
>    : ^
>propertyName : string
>             : ^^^^^^

        sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): ChainedObject<number>;
>sortedIndex : { (obj: T, propertyName: string): ChainedObject<number>; (obj: T, iterator?: Iterator_<T, any>, context?: any): ChainedObject<number>; }
>            : ^^^   ^^ ^^            ^^      ^^^                     ^^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^                     ^^^
>obj : T
>    : ^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        // Methods from Array
        concat(...items: T[]): ChainedArray<T>;
>concat : (...items: T[]) => ChainedArray<T>
>       : ^^^^     ^^   ^^^^^               
>items : T[]
>      : ^^^

        join(separator?: string): ChainedObject<string>;
>join : (separator?: string) => ChainedObject<string>
>     : ^         ^^^      ^^^^^                     
>separator : string
>          : ^^^^^^

        pop(): ChainedObject<T>;
>pop : () => ChainedObject<T>
>    : ^^^^^^                

        push(...items: T[]): ChainedObject<number>;
>push : (...items: T[]) => ChainedObject<number>
>     : ^^^^     ^^   ^^^^^                     
>items : T[]
>      : ^^^

        reverse(): ChainedArray<T>;
>reverse : () => ChainedArray<T>
>        : ^^^^^^               

        shift(): ChainedObject<T>;
>shift : () => ChainedObject<T>
>      : ^^^^^^                

        slice(start: number, end?: number): ChainedArray<T>;
>slice : (start: number, end?: number) => ChainedArray<T>
>      : ^     ^^      ^^   ^^^      ^^^^^               
>start : number
>      : ^^^^^^
>end : number
>    : ^^^^^^

        sort(compareFn?: (a: T, b: T) => number): ChainedArray<T>;
>sort : (compareFn?: (a: T, b: T) => number) => ChainedArray<T>
>     : ^         ^^^                      ^^^^^               
>compareFn : (a: T, b: T) => number
>          : ^ ^^ ^^ ^^ ^^^^^      
>a : T
>  : ^
>b : T
>  : ^

        splice(start: number): ChainedArray<T>;
>splice : { (start: number): ChainedArray<T>; (start: number, deleteCount: number, ...items: T[]): ChainedArray<T>; }
>       : ^^^     ^^      ^^^               ^^^     ^^      ^^           ^^      ^^^^^     ^^   ^^^               ^^^
>start : number
>      : ^^^^^^

        splice(start: number, deleteCount: number, ...items: T[]): ChainedArray<T>;
>splice : { (start: number): ChainedArray<T>; (start: number, deleteCount: number, ...items: T[]): ChainedArray<T>; }
>       : ^^^     ^^      ^^^               ^^^     ^^      ^^           ^^      ^^^^^     ^^   ^^^               ^^^
>start : number
>      : ^^^^^^
>deleteCount : number
>            : ^^^^^^
>items : T[]
>      : ^^^

        unshift(...items: T[]): ChainedObject<number>;
>unshift : (...items: T[]) => ChainedObject<number>
>        : ^^^^     ^^   ^^^^^                     
>items : T[]
>      : ^^^

        // Methods from ChainedObject with promoted return types
        extend(...sources: any[]): ChainedArray<T>;
>extend : (...sources: any[]) => ChainedArray<T>
>       : ^^^^       ^^     ^^^^^               
>sources : any[]
>        : ^^^^^

        pick(...keys: string[]): ChainedArray<T>;
>pick : (...keys: string[]) => ChainedArray<T>
>     : ^^^^    ^^        ^^^^^               
>keys : string[]
>     : ^^^^^^^^

        omit(...keys: string[]): ChainedArray<T>;
>omit : (...keys: string[]) => ChainedArray<T>
>     : ^^^^    ^^        ^^^^^               
>keys : string[]
>     : ^^^^^^^^

        defaults(...defaults: any[]): ChainedArray<T>;
>defaults : (...defaults: any[]) => ChainedArray<T>
>         : ^^^^        ^^     ^^^^^               
>defaults : any[]
>         : ^^^^^

        clone(): ChainedArray<T>;
>clone : () => ChainedArray<T>
>      : ^^^^^^               

        tap(interceptor: (object: T[]) => void): ChainedArray<T>;
>tap : (interceptor: (object: T[]) => void) => ChainedArray<T>
>    : ^           ^^                     ^^^^^               
>interceptor : (object: T[]) => void
>            : ^      ^^   ^^^^^    
>object : T[]
>       : ^^^
    }

    export interface ChainedDictionary<T> extends ChainedObject<Dictionary<T>> {
        each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>each : (iterator: Iterator_<T, void>, context?: any) => ChainedObject<void>
>     : ^        ^^                  ^^       ^^^   ^^^^^                   
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
>forEach : (iterator: Iterator_<T, void>, context?: any) => ChainedObject<void>
>        : ^        ^^                  ^^       ^^^   ^^^^^                   
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>map : <U>(iterator: Iterator_<T, U>, context?: any) => ChainedArray<U>
>    : ^ ^^        ^^               ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
>collect : <U>(iterator: Iterator_<T, U>, context?: any) => ChainedArray<U>
>        : ^ ^^        ^^               ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduce : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldl : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>inject : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>       : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>reduceRight : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>            : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
>foldr : { (iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>; <U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>; }
>      : ^^^        ^^             ^^            ^^^ ^^       ^^^   ^^^                ^^^ ^^        ^^             ^^            ^^ ^^       ^^^   ^^^                ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>find : (iterator: Iterator_<T, boolean>, context?: any) => ChainedObject<T>
>     : ^        ^^                     ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
>detect : (iterator: Iterator_<T, boolean>, context?: any) => ChainedObject<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>filter : (iterator: Iterator_<T, boolean>, context?: any) => ChainedArray<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>select : (iterator: Iterator_<T, boolean>, context?: any) => ChainedArray<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        where(properties: Object): ChainedArray<T>;
>where : (properties: Object) => ChainedArray<T>
>      : ^          ^^      ^^^^^               
>properties : Object
>           : ^^^^^^

        findWhere(properties: Object): ChainedObject<T>;
>findWhere : (properties: Object) => ChainedObject<T>
>          : ^          ^^      ^^^^^                
>properties : Object
>           : ^^^^^^

        reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
>reject : (iterator: Iterator_<T, boolean>, context?: any) => ChainedArray<T>
>       : ^        ^^                     ^^       ^^^   ^^^^^               
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>every : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>      : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>all : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>    : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>some : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>     : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
>any : (iterator?: Iterator_<T, boolean>, context?: any) => ChainedObject<boolean>
>    : ^        ^^^                     ^^       ^^^   ^^^^^                      
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        contains(value: T): ChainedObject<boolean>;
>contains : (value: T) => ChainedObject<boolean>
>         : ^     ^^ ^^^^^                      
>value : T
>      : ^

        include(value: T): ChainedObject<boolean>;
>include : (value: T) => ChainedObject<boolean>
>        : ^     ^^ ^^^^^                      
>value : T
>      : ^

        invoke(methodName: string, ...args: any[]): ChainedArray<any>;
>invoke : (methodName: string, ...args: any[]) => ChainedArray<any>
>       : ^          ^^      ^^^^^    ^^     ^^^^^                 
>methodName : string
>           : ^^^^^^
>args : any[]
>     : ^^^^^

        pluck(propertyName: string): ChainedArray<any>;
>pluck : (propertyName: string) => ChainedArray<any>
>      : ^            ^^      ^^^^^                 
>propertyName : string
>             : ^^^^^^

        max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>max : (iterator?: Iterator_<T, any>, context?: any) => ChainedObject<T>
>    : ^        ^^^                 ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
>min : (iterator?: Iterator_<T, any>, context?: any) => ChainedObject<T>
>    : ^        ^^^                 ^^       ^^^   ^^^^^                
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
>       : ^^^        ^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy(propertyName: string): ChainedArray<T>;
>sortBy : { (iterator: Iterator_<T, any>, context?: any): ChainedArray<T>; (propertyName: string): ChainedArray<T>; }
>       : ^^^        ^^                 ^^       ^^^   ^^^               ^^^            ^^      ^^^               ^^^
>propertyName : string
>             : ^^^^^^

        // Should return ChainedDictionary<T[]>, but expansive recursion not allowed
        groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                        ^^^            ^^      ^^^                        ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        groupBy(propertyName: string): ChainedDictionary<any[]>;
>groupBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>; (propertyName: string): ChainedDictionary<any[]>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                        ^^^            ^^      ^^^                        ^^^
>propertyName : string
>             : ^^^^^^

        countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                         ^^^            ^^      ^^^                         ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        countBy(propertyName: string): ChainedDictionary<number>;
>countBy : { (iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>; (propertyName: string): ChainedDictionary<number>; }
>        : ^^^        ^^^                 ^^       ^^^   ^^^                         ^^^            ^^      ^^^                         ^^^
>propertyName : string
>             : ^^^^^^

        shuffle(): ChainedArray<T>;
>shuffle : () => ChainedArray<T>
>        : ^^^^^^               

        toArray(): ChainedArray<T>;
>toArray : () => ChainedArray<T>
>        : ^^^^^^               

        size(): ChainedObject<number>;
>size : () => ChainedObject<number>
>     : ^^^^^^                     

        // Methods from ChainedObject with promoted return types
        extend(...sources: any[]): ChainedDictionary<T>;
>extend : (...sources: any[]) => ChainedDictionary<T>
>       : ^^^^       ^^     ^^^^^                    
>sources : any[]
>        : ^^^^^

        pick(...keys: string[]): ChainedDictionary<T>;
>pick : (...keys: string[]) => ChainedDictionary<T>
>     : ^^^^    ^^        ^^^^^                    
>keys : string[]
>     : ^^^^^^^^

        omit(...keys: string[]): ChainedDictionary<T>;
>omit : (...keys: string[]) => ChainedDictionary<T>
>     : ^^^^    ^^        ^^^^^                    
>keys : string[]
>     : ^^^^^^^^

        defaults(...defaults: any[]): ChainedDictionary<T>;
>defaults : (...defaults: any[]) => ChainedDictionary<T>
>         : ^^^^        ^^     ^^^^^                    
>defaults : any[]
>         : ^^^^^

        clone(): ChainedDictionary<T>;
>clone : () => ChainedDictionary<T>
>      : ^^^^^^                    

        tap(interceptor: (object: Dictionary<T>) => void): ChainedDictionary<T>;
>tap : (interceptor: (object: Dictionary<T>) => void) => ChainedDictionary<T>
>    : ^           ^^                               ^^^^^                    
>interceptor : (object: Dictionary<T>) => void
>            : ^      ^^             ^^^^^    
>object : Dictionary<T>
>       : ^^^^^^^^^^^^^
    }

    export interface TemplateSettings {
        evaluate?: RegExp;
>evaluate : RegExp
>         : ^^^^^^

        interpolate?: RegExp;
>interpolate : RegExp
>            : ^^^^^^

        escape?: RegExp;
>escape : RegExp
>       : ^^^^^^

        variable?: string;
>variable : string
>         : ^^^^^^
    }

    export interface Static {
        <T>(list: T[]): WrappedArray<T>;
>list : T[]
>     : ^^^

        <T>(list: Dictionary<T>): WrappedDictionary<T>;
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^

        <T extends Function>(func: T): WrappedFunction<T>;
>func : T
>     : ^

        <T>(obj: T): WrappedObject<T>;
>obj : T
>    : ^

        chain<T>(list: T[]): ChainedArray<T>;
>chain : { <T>(list: T[]): ChainedArray<T>; <T_1>(list: Dictionary<T_1>): ChainedDictionary<T_1>; <T_1>(obj: T_1): ChainedObject<T_1>; }
>      : ^^^ ^^    ^^   ^^^               ^^^^^^^^    ^^               ^^^                      ^^^^^^^^   ^^   ^^^                  ^^^
>list : T[]
>     : ^^^

        chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
>chain : { <T_1>(list: T_1[]): ChainedArray<T_1>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T_1>(obj: T_1): ChainedObject<T_1>; }
>      : ^^^^^^^^    ^^     ^^^                 ^^^ ^^    ^^             ^^^                    ^^^^^^^^   ^^   ^^^                  ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^

        chain<T>(obj: T): ChainedObject<T>;
>chain : { <T_1>(list: T_1[]): ChainedArray<T_1>; <T_1>(list: Dictionary<T_1>): ChainedDictionary<T_1>; <T>(obj: T): ChainedObject<T>; }
>      : ^^^^^^^^    ^^     ^^^                 ^^^^^^^^    ^^               ^^^                      ^^^ ^^   ^^ ^^^                ^^^
>obj : T
>    : ^

        each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, void>, context?: any): void; }
>     : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^^^^^^    ^^               ^^        ^^                    ^^       ^^^   ^^^    ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
>each : { <T_1>(list: T_1[], iterator: Iterator_<T_1, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>     : ^^^^^^^^    ^^     ^^        ^^                    ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
>forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, void>, context?: any): void; }
>        : ^^^ ^^    ^^   ^^        ^^                  ^^       ^^^   ^^^    ^^^^^^^^    ^^               ^^        ^^                    ^^       ^^^   ^^^    ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
>forEach : { <T_1>(list: T_1[], iterator: Iterator_<T_1, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
>        : ^^^^^^^^    ^^     ^^        ^^                    ^^       ^^^   ^^^    ^^^ ^^    ^^             ^^        ^^                  ^^       ^^^   ^^^    ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, void>
>         : ^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        map<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T_1, U_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; }
>    : ^^^ ^^ ^^    ^^   ^^        ^^               ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                   ^^       ^^^   ^^^     ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        map<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
>map : { <T_1, U_1>(list: T_1[], iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
>    : ^^^^^^^^^^^^^    ^^     ^^        ^^                   ^^       ^^^   ^^^     ^^^ ^^ ^^    ^^             ^^        ^^               ^^       ^^^   ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        collect<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T_1, U_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; }
>        : ^^^ ^^ ^^    ^^   ^^        ^^               ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                   ^^       ^^^   ^^^     ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        collect<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
>collect : { <T_1, U_1>(list: T_1[], iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
>        : ^^^^^^^^^^^^^    ^^     ^^        ^^                   ^^       ^^^   ^^^     ^^^ ^^ ^^    ^^             ^^        ^^               ^^       ^^^   ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        reduce<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>       : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduce<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
>       : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduce<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>       : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduce<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^     ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldl<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>      : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldl<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
>      : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldl<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>      : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldl<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^     ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        inject<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>       : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        inject<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
>       : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        inject<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>       : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        inject<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>       : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^     ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduceRight<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>            : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduceRight<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
>            : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        reduceRight<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>            : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        reduceRight<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>            : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^     ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldr<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>      : ^^^ ^^    ^^   ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldr<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
>      : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^   ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^               ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        foldr<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
>foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
>      : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^ ^^    ^^             ^^        ^^             ^^            ^^^ ^^       ^^^   ^^^ ^^^^^^^^ ^^    ^^               ^^        ^^               ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, T>
>         : ^^^^^^^^^^^^^
>initialValue : T
>             : ^
>context : any
>        : ^^^

        foldr<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
>foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
>      : ^^^^^^^^    ^^     ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^^^^^^^^^^^    ^^     ^^        ^^                 ^^            ^^   ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                 ^^            ^^^   ^^       ^^^   ^^^   ^^^ ^^ ^^    ^^             ^^        ^^             ^^            ^^ ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Reducer<T, U>
>         : ^^^^^^^^^^^^^
>initialValue : U
>             : ^
>context : any
>        : ^^^

        find<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
>find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1; }
>     : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                       ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        find<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
>find : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
>     : ^^^^^^^^    ^^     ^^        ^^                       ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        detect<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
>detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^                       ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        detect<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
>detect : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
>       : ^^^^^^^^    ^^     ^^        ^^                       ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        filter<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                       ^^       ^^^   ^^^     ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        filter<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
>filter : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>       : ^^^^^^^^    ^^     ^^        ^^                       ^^       ^^^   ^^^     ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        select<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
>select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                       ^^       ^^^   ^^^     ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        select<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
>select : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>       : ^^^^^^^^    ^^     ^^        ^^                       ^^       ^^^   ^^^     ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        where<T>(list: T[], properties: Object): T[];
>where : { <T>(list: T[], properties: Object): T[]; <T_1>(list: Dictionary<T_1>, properties: Object): T_1[]; }
>      : ^^^ ^^    ^^   ^^          ^^      ^^^   ^^^^^^^^    ^^               ^^          ^^      ^^^     ^^^
>list : T[]
>     : ^^^
>properties : Object
>           : ^^^^^^

        where<T>(list: Dictionary<T>, properties: Object): T[];
>where : { <T_1>(list: T_1[], properties: Object): T_1[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
>      : ^^^^^^^^    ^^     ^^          ^^      ^^^     ^^^ ^^    ^^             ^^          ^^      ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>properties : Object
>           : ^^^^^^

        findWhere<T>(list: T[], properties: Object): T;
>findWhere : { <T>(list: T[], properties: Object): T; <T_1>(list: Dictionary<T_1>, properties: Object): T_1; }
>          : ^^^ ^^    ^^   ^^          ^^      ^^^ ^^^^^^^^    ^^               ^^          ^^      ^^^   ^^^
>list : T[]
>     : ^^^
>properties : Object
>           : ^^^^^^

        findWhere<T>(list: Dictionary<T>, properties: Object): T;
>findWhere : { <T_1>(list: T_1[], properties: Object): T_1; <T>(list: Dictionary<T>, properties: Object): T; }
>          : ^^^^^^^^    ^^     ^^          ^^      ^^^   ^^^ ^^    ^^             ^^          ^^      ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>properties : Object
>           : ^^^^^^

        reject<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
>       : ^^^ ^^    ^^   ^^        ^^                     ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                       ^^       ^^^   ^^^     ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        reject<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
>reject : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
>       : ^^^^^^^^    ^^     ^^        ^^                       ^^       ^^^   ^^^     ^^^ ^^    ^^             ^^        ^^                     ^^       ^^^   ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        every<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
>      : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^^^^^^    ^^               ^^        ^^^                       ^^       ^^^   ^^^       ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        every<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>every : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>      : ^^^^^^^^    ^^     ^^        ^^^                       ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        all<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
>    : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^^^^^^    ^^               ^^        ^^^                       ^^       ^^^   ^^^       ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        all<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>all : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>    : ^^^^^^^^    ^^     ^^        ^^^                       ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        some<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
>     : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^^^^^^    ^^               ^^        ^^^                       ^^       ^^^   ^^^       ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        some<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>some : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>     : ^^^^^^^^    ^^     ^^        ^^^                       ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        any<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
>    : ^^^ ^^    ^^   ^^        ^^^                     ^^       ^^^   ^^^       ^^^^^^^^    ^^               ^^        ^^^                       ^^       ^^^   ^^^       ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        any<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
>any : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
>    : ^^^^^^^^    ^^     ^^        ^^^                       ^^       ^^^   ^^^       ^^^ ^^    ^^             ^^        ^^^                     ^^       ^^^   ^^^       ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, boolean>
>         : ^^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        contains<T>(list: T[], value: T): boolean;
>contains : { <T>(list: T[], value: T): boolean; <T_1>(list: Dictionary<T_1>, value: T_1): boolean; }
>         : ^^^ ^^    ^^   ^^     ^^ ^^^       ^^^^^^^^    ^^               ^^     ^^   ^^^       ^^^
>list : T[]
>     : ^^^
>value : T
>      : ^

        contains<T>(list: Dictionary<T>, value: T): boolean;
>contains : { <T_1>(list: T_1[], value: T_1): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
>         : ^^^^^^^^    ^^     ^^     ^^   ^^^       ^^^ ^^    ^^             ^^     ^^ ^^^       ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>value : T
>      : ^

        include<T>(list: T[], value: T): boolean;
>include : { <T>(list: T[], value: T): boolean; <T_1>(list: Dictionary<T_1>, value: T_1): boolean; }
>        : ^^^ ^^    ^^   ^^     ^^ ^^^       ^^^^^^^^    ^^               ^^     ^^   ^^^       ^^^
>list : T[]
>     : ^^^
>value : T
>      : ^

        include<T>(list: Dictionary<T>, value: T): boolean;
>include : { <T_1>(list: T_1[], value: T_1): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
>        : ^^^^^^^^    ^^     ^^     ^^   ^^^       ^^^ ^^    ^^             ^^     ^^ ^^^       ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>value : T
>      : ^

        invoke(list: any[], methodName: string, ...args: any[]): any[];
>invoke : { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
>       : ^^^    ^^     ^^          ^^      ^^^^^    ^^     ^^^     ^^^    ^^               ^^          ^^      ^^^^^    ^^     ^^^     ^^^
>list : any[]
>     : ^^^^^
>methodName : string
>           : ^^^^^^
>args : any[]
>     : ^^^^^

        invoke(list: Dictionary<any>, methodName: string, ...args: any[]): any[];
>invoke : { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
>       : ^^^    ^^     ^^          ^^      ^^^^^    ^^     ^^^     ^^^    ^^               ^^          ^^      ^^^^^    ^^     ^^^     ^^^
>list : Dictionary<any>
>     : ^^^^^^^^^^^^^^^
>methodName : string
>           : ^^^^^^
>args : any[]
>     : ^^^^^

        pluck(list: any[], propertyName: string): any[];
>pluck : { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
>      : ^^^    ^^     ^^            ^^      ^^^     ^^^    ^^               ^^            ^^      ^^^     ^^^
>list : any[]
>     : ^^^^^
>propertyName : string
>             : ^^^^^^

        pluck(list: Dictionary<any>, propertyName: string): any[];
>pluck : { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
>      : ^^^    ^^     ^^            ^^      ^^^     ^^^    ^^               ^^            ^^      ^^^     ^^^
>list : Dictionary<any>
>     : ^^^^^^^^^^^^^^^
>propertyName : string
>             : ^^^^^^

        max<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
>max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): T_1; }
>    : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        max<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
>max : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): T_1; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
>    : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        min<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
>min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): T_1; }
>    : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^ ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        min<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
>min : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): T_1; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
>    : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^   ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^ ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy<T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
>       : ^^^ ^^    ^^   ^^        ^^                 ^^       ^^^   ^^^   ^^^^^^^^    ^^               ^^        ^^                   ^^       ^^^   ^^^     ^^^^^^^^    ^^     ^^            ^^      ^^^     ^^^^^^^^    ^^               ^^            ^^      ^^^     ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy<T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[];
>sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
>       : ^^^^^^^^    ^^     ^^        ^^                   ^^       ^^^   ^^^     ^^^ ^^    ^^             ^^        ^^                 ^^       ^^^   ^^^   ^^^^^^^^    ^^     ^^            ^^      ^^^     ^^^^^^^^    ^^               ^^            ^^      ^^^     ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        sortBy<T>(list: T[], propertyName: string): T[];
>sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T>(list: T[], propertyName: string): T[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
>       : ^^^^^^^^    ^^     ^^        ^^                   ^^       ^^^   ^^^     ^^^^^^^^    ^^               ^^        ^^                   ^^       ^^^   ^^^     ^^^ ^^    ^^   ^^            ^^      ^^^   ^^^^^^^^    ^^               ^^            ^^      ^^^     ^^^
>list : T[]
>     : ^^^
>propertyName : string
>             : ^^^^^^

        sortBy<T>(list: Dictionary<T>, propertyName: string): T[];
>sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
>       : ^^^^^^^^    ^^     ^^        ^^                   ^^       ^^^   ^^^     ^^^^^^^^    ^^               ^^        ^^                   ^^       ^^^   ^^^     ^^^^^^^^    ^^     ^^            ^^      ^^^     ^^^ ^^    ^^             ^^            ^^      ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>propertyName : string
>             : ^^^^^^

        groupBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
>        : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^               ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^                 ^^^^^^^^    ^^     ^^            ^^      ^^^                 ^^^^^^^^    ^^               ^^            ^^      ^^^                 ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        groupBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
>groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
>        : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^                 ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^               ^^^^^^^^    ^^     ^^            ^^      ^^^                 ^^^^^^^^    ^^               ^^            ^^      ^^^                 ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        groupBy<T>(list: T[], propertyName: string): Dictionary<T[]>;
>groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
>        : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^                 ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^                 ^^^ ^^    ^^   ^^            ^^      ^^^               ^^^^^^^^    ^^               ^^            ^^      ^^^                 ^^^
>list : T[]
>     : ^^^
>propertyName : string
>             : ^^^^^^

        groupBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>;
>groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
>        : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^                 ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^                 ^^^^^^^^    ^^     ^^            ^^      ^^^                 ^^^ ^^    ^^             ^^            ^^      ^^^               ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>propertyName : string
>             : ^^^^^^

        countBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
>        : ^^^ ^^    ^^   ^^        ^^^                 ^^       ^^^   ^^^                  ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^                  ^^^^^^^^    ^^     ^^            ^^      ^^^                  ^^^^^^^^    ^^               ^^            ^^      ^^^                  ^^^
>list : T[]
>     : ^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        countBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
>countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
>        : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^                  ^^^ ^^    ^^             ^^        ^^^                 ^^       ^^^   ^^^                  ^^^^^^^^    ^^     ^^            ^^      ^^^                  ^^^^^^^^    ^^               ^^            ^^      ^^^                  ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        countBy<T>(list: T[], propertyName: string): Dictionary<number>;
>countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
>        : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^                  ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^                  ^^^ ^^    ^^   ^^            ^^      ^^^                  ^^^^^^^^    ^^               ^^            ^^      ^^^                  ^^^
>list : T[]
>     : ^^^
>propertyName : string
>             : ^^^^^^

        countBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<number>;
>countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
>        : ^^^^^^^^    ^^     ^^        ^^^                   ^^       ^^^   ^^^                  ^^^^^^^^    ^^               ^^        ^^^                   ^^       ^^^   ^^^                  ^^^^^^^^    ^^     ^^            ^^      ^^^                  ^^^ ^^    ^^             ^^            ^^      ^^^                  ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^
>propertyName : string
>             : ^^^^^^

        shuffle<T>(list: T[]): T[];
>shuffle : { <T>(list: T[]): T[]; <T_1>(list: Dictionary<T_1>): T_1[]; }
>        : ^^^ ^^    ^^   ^^^   ^^^^^^^^    ^^               ^^^     ^^^
>list : T[]
>     : ^^^

        shuffle<T>(list: Dictionary<T>): T[];
>shuffle : { <T_1>(list: T_1[]): T_1[]; <T>(list: Dictionary<T>): T[]; }
>        : ^^^^^^^^    ^^     ^^^     ^^^ ^^    ^^             ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^

        toArray<T>(list: T[]): T[];
>toArray : { <T>(list: T[]): T[]; <T_1>(list: Dictionary<T_1>): T_1[]; }
>        : ^^^ ^^    ^^   ^^^   ^^^^^^^^    ^^               ^^^     ^^^
>list : T[]
>     : ^^^

        toArray<T>(list: Dictionary<T>): T[];
>toArray : { <T_1>(list: T_1[]): T_1[]; <T>(list: Dictionary<T>): T[]; }
>        : ^^^^^^^^    ^^     ^^^     ^^^ ^^    ^^             ^^^   ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^

        size<T>(list: T[]): number;
>size : { <T>(list: T[]): number; <T_1>(list: Dictionary<T_1>): number; }
>     : ^^^ ^^    ^^   ^^^      ^^^^^^^^    ^^               ^^^      ^^^
>list : T[]
>     : ^^^

        size<T>(list: Dictionary<T>): number;
>size : { <T_1>(list: T_1[]): number; <T>(list: Dictionary<T>): number; }
>     : ^^^^^^^^    ^^     ^^^      ^^^ ^^    ^^             ^^^      ^^^
>list : Dictionary<T>
>     : ^^^^^^^^^^^^^

        first<T>(list: T[]): T;
>first : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
>      : ^^^ ^^    ^^   ^^^ ^^^^^^^^    ^^     ^^     ^^      ^^^     ^^^
>list : T[]
>     : ^^^

        first<T>(list: T[], count: number): T[];
>first : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
>      : ^^^^^^^^    ^^     ^^^   ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>list : T[]
>     : ^^^
>count : number
>      : ^^^^^^

        head<T>(list: T[]): T;
>head : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
>     : ^^^ ^^    ^^   ^^^ ^^^^^^^^    ^^     ^^     ^^      ^^^     ^^^
>list : T[]
>     : ^^^

        head<T>(list: T[], count: number): T[];
>head : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
>     : ^^^^^^^^    ^^     ^^^   ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>list : T[]
>     : ^^^
>count : number
>      : ^^^^^^

        take<T>(list: T[]): T;
>take : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
>     : ^^^ ^^    ^^   ^^^ ^^^^^^^^    ^^     ^^     ^^      ^^^     ^^^
>list : T[]
>     : ^^^

        take<T>(list: T[], count: number): T[];
>take : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
>     : ^^^^^^^^    ^^     ^^^   ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>list : T[]
>     : ^^^
>count : number
>      : ^^^^^^

        initial<T>(list: T[]): T;
>initial : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
>        : ^^^ ^^    ^^   ^^^ ^^^^^^^^    ^^     ^^     ^^      ^^^     ^^^
>list : T[]
>     : ^^^

        initial<T>(list: T[], count: number): T[];
>initial : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
>        : ^^^^^^^^    ^^     ^^^   ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>list : T[]
>     : ^^^
>count : number
>      : ^^^^^^

        last<T>(list: T[]): T;
>last : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
>     : ^^^ ^^    ^^   ^^^ ^^^^^^^^    ^^     ^^     ^^      ^^^     ^^^
>list : T[]
>     : ^^^

        last<T>(list: T[], count: number): T[];
>last : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
>     : ^^^^^^^^    ^^     ^^^   ^^^ ^^    ^^   ^^     ^^      ^^^   ^^^
>list : T[]
>     : ^^^
>count : number
>      : ^^^^^^

        rest<T>(list: T[], index?: number): T[];
>rest : <T>(list: T[], index?: number) => T[]
>     : ^ ^^    ^^   ^^     ^^^      ^^^^^   
>list : T[]
>     : ^^^
>index : number
>      : ^^^^^^

        compact<T>(list: T[]): T[];
>compact : <T>(list: T[]) => T[]
>        : ^ ^^    ^^   ^^^^^   
>list : T[]
>     : ^^^

        flatten<T>(list: T[][]): T[];
>flatten : { <T>(list: T[][]): T[]; <T_1>(array: any[], shallow?: boolean): T_1[]; }
>        : ^^^ ^^    ^^     ^^^   ^^^^^^^^     ^^     ^^       ^^^       ^^^     ^^^
>list : T[][]
>     : ^^^^^

        flatten<T>(array: any[], shallow?: boolean): T[];
>flatten : { <T_1>(list: T_1[][]): T_1[]; <T>(array: any[], shallow?: boolean): T[]; }
>        : ^^^^^^^^    ^^       ^^^     ^^^ ^^     ^^     ^^       ^^^       ^^^   ^^^
>array : any[]
>      : ^^^^^
>shallow : boolean
>        : ^^^^^^^

        without<T>(list: T[], ...values: T[]): T[];
>without : <T>(list: T[], ...values: T[]) => T[]
>        : ^ ^^    ^^   ^^^^^      ^^   ^^^^^   
>list : T[]
>     : ^^^
>values : T[]
>       : ^^^

        union<T>(...arrays: T[][]): T[];
>union : <T>(...arrays: T[][]) => T[]
>      : ^ ^^^^^      ^^     ^^^^^   
>arrays : T[][]
>       : ^^^^^

        intersection<T>(...arrays: T[][]): T[];
>intersection : <T>(...arrays: T[][]) => T[]
>             : ^ ^^^^^      ^^     ^^^^^   
>arrays : T[][]
>       : ^^^^^

        difference<T>(list: T[], ...others: T[][]): T[];
>difference : <T>(list: T[], ...others: T[][]) => T[]
>           : ^ ^^    ^^   ^^^^^      ^^     ^^^^^   
>list : T[]
>     : ^^^
>others : T[][]
>       : ^^^^^

        uniq<T>(list: T[], isSorted?: boolean): T[];
>uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T_1, U>(list: T_1[], isSorted: boolean, iterator: Iterator_<T_1, U>, context?: any): U[]; }
>     : ^^^ ^^    ^^   ^^        ^^^       ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^       ^^        ^^                 ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>isSorted : boolean
>         : ^^^^^^^

        uniq<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>uniq : { <T_1>(list: T_1[], isSorted?: boolean): T_1[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>     : ^^^^^^^^    ^^     ^^        ^^^       ^^^     ^^^ ^^ ^^    ^^   ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>isSorted : boolean
>         : ^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        unique<T>(list: T[], isSorted?: boolean): T[];
>unique : { <T>(list: T[], isSorted?: boolean): T[]; <T_1, U>(list: T_1[], isSorted: boolean, iterator: Iterator_<T_1, U>, context?: any): U[]; }
>       : ^^^ ^^    ^^   ^^        ^^^       ^^^   ^^^^^^^^ ^^    ^^     ^^        ^^       ^^        ^^                 ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>isSorted : boolean
>         : ^^^^^^^

        unique<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
>unique : { <T_1>(list: T_1[], isSorted?: boolean): T_1[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
>       : ^^^^^^^^    ^^     ^^        ^^^       ^^^     ^^^ ^^ ^^    ^^   ^^        ^^       ^^        ^^               ^^       ^^^   ^^^   ^^^
>list : T[]
>     : ^^^
>isSorted : boolean
>         : ^^^^^^^
>iterator : Iterator_<T, U>
>         : ^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        zip<T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[];
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0_1, T1_1, T2>(a0: T0_1[], a1: T1_1[], a2: T2[]): Tuple3<T0_1, T1_1, T2>[]; <T0_1, T1_1, T2, T3>(a0: T0_1[], a1: T1_1[], a2: T2[], a3: T3[]): Tuple4<T0_1, T1_1, T2, T3>[]; (...arrays: any[][]): any[][]; }
>    : ^^^  ^^  ^^  ^^    ^^  ^^    ^^^                ^^^^^^^^^^^^^^^  ^^  ^^      ^^  ^^      ^^  ^^    ^^^                        ^^^^^^^^^^^^^^^  ^^  ^^  ^^      ^^  ^^      ^^  ^^    ^^  ^^    ^^^                            ^^^^^^      ^^       ^^^       ^^^
>a0 : T0[]
>   : ^^^^
>a1 : T1[]
>   : ^^^^

        zip<T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[];
>zip : { <T0_1, T1_1>(a0: T0_1[], a1: T1_1[]): Tuple2<T0_1, T1_1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0_1, T1_1, T2_1, T3>(a0: T0_1[], a1: T1_1[], a2: T2_1[], a3: T3[]): Tuple4<T0_1, T1_1, T2_1, T3>[]; (...arrays: any[][]): any[][]; }
>    : ^^^^^^^^^^^^^^^  ^^      ^^  ^^      ^^^                    ^^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^^                    ^^^^^^^^^^^^^^^^^^^^^  ^^  ^^      ^^  ^^      ^^  ^^      ^^  ^^    ^^^                              ^^^^^^      ^^       ^^^       ^^^
>a0 : T0[]
>   : ^^^^
>a1 : T1[]
>   : ^^^^
>a2 : T2[]
>   : ^^^^

        zip<T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[];
>zip : { <T0_1, T1_1>(a0: T0_1[], a1: T1_1[]): Tuple2<T0_1, T1_1>[]; <T0_1, T1_1, T2_1>(a0: T0_1[], a1: T1_1[], a2: T2_1[]): Tuple3<T0_1, T1_1, T2_1>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
>    : ^^^^^^^^^^^^^^^  ^^      ^^  ^^      ^^^                    ^^^^^^^^^^^^^^^^^^^^^  ^^      ^^  ^^      ^^  ^^      ^^^                          ^^^  ^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^  ^^    ^^^                        ^^^^^^      ^^       ^^^       ^^^
>a0 : T0[]
>   : ^^^^
>a1 : T1[]
>   : ^^^^
>a2 : T2[]
>   : ^^^^
>a3 : T3[]
>   : ^^^^

        zip(...arrays: any[][]): any[][];
>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
>    : ^^^  ^^  ^^  ^^    ^^  ^^    ^^^                ^^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^^                    ^^^  ^^  ^^  ^^  ^^  ^^    ^^  ^^    ^^  ^^    ^^  ^^    ^^^                        ^^^^^^      ^^       ^^^       ^^^
>arrays : any[][]
>       : ^^^^^^^

        object(list: any[][]): any;
>object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
>       : ^^^    ^^       ^^^   ^^^    ^^        ^^      ^^     ^^^   ^^^
>list : any[][]
>     : ^^^^^^^

        object(keys: string[], values: any[]): any;
>object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
>       : ^^^    ^^       ^^^   ^^^    ^^        ^^      ^^     ^^^   ^^^
>keys : string[]
>     : ^^^^^^^^
>values : any[]
>       : ^^^^^

        indexOf<T>(list: T[], value: T, isSorted?: boolean): number;
>indexOf : <T>(list: T[], value: T, isSorted?: boolean) => number
>        : ^ ^^    ^^   ^^     ^^ ^^        ^^^       ^^^^^      
>list : T[]
>     : ^^^
>value : T
>      : ^
>isSorted : boolean
>         : ^^^^^^^

        lastIndexOf<T>(list: T[], value: T, fromIndex?: number): number;
>lastIndexOf : <T>(list: T[], value: T, fromIndex?: number) => number
>            : ^ ^^    ^^   ^^     ^^ ^^         ^^^      ^^^^^      
>list : T[]
>     : ^^^
>value : T
>      : ^
>fromIndex : number
>          : ^^^^^^

        sortedIndex<T>(list: T[], obj: T, propertyName: string): number;
>sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T_1>(list: T_1[], obj: T_1, iterator?: Iterator_<T_1, any>, context?: any): number; }
>            : ^^^ ^^    ^^   ^^   ^^ ^^            ^^      ^^^      ^^^^^^^^    ^^     ^^   ^^   ^^        ^^^                   ^^       ^^^   ^^^      ^^^
>list : T[]
>     : ^^^
>obj : T
>    : ^
>propertyName : string
>             : ^^^^^^

        sortedIndex<T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number;
>sortedIndex : { <T_1>(list: T_1[], obj: T_1, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
>            : ^^^^^^^^    ^^     ^^   ^^   ^^            ^^      ^^^      ^^^ ^^    ^^   ^^   ^^ ^^        ^^^                 ^^       ^^^   ^^^      ^^^
>list : T[]
>     : ^^^
>obj : T
>    : ^
>iterator : Iterator_<T, any>
>         : ^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        range(stop: number): number[];
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>stop : number
>     : ^^^^^^

        range(start: number, stop: number, step?: number): number[];
>range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
>      : ^^^    ^^      ^^^        ^^^     ^^      ^^    ^^      ^^    ^^^      ^^^        ^^^
>start : number
>      : ^^^^^^
>stop : number
>     : ^^^^^^
>step : number
>     : ^^^^^^

        bind<T extends Function>(func: T, object: any): T;
>bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
>     : ^^^ ^^^^^^^^^        ^^    ^^ ^^      ^^   ^^^ ^^^    ^^        ^^      ^^   ^^^^^    ^^     ^^^        ^^^
>func : T
>     : ^
>object : any
>       : ^^^

        bind(func: Function, object: any, ...args: any[]): Function;
>bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
>     : ^^^ ^^^^^^^^^        ^^    ^^ ^^      ^^   ^^^ ^^^    ^^        ^^      ^^   ^^^^^    ^^     ^^^        ^^^
>func : Function
>     : ^^^^^^^^
>object : any
>       : ^^^
>args : any[]
>     : ^^^^^

        bindAll<T>(object: T, ...methodNames: string[]): T;
>bindAll : <T>(object: T, ...methodNames: string[]) => T
>        : ^ ^^      ^^ ^^^^^           ^^        ^^^^^ 
>object : T
>       : ^
>methodNames : string[]
>            : ^^^^^^^^

        partial(func: Function, ...args: any[]): Function;
>partial : (func: Function, ...args: any[]) => Function
>        : ^    ^^        ^^^^^    ^^     ^^^^^        
>func : Function
>     : ^^^^^^^^
>args : any[]
>     : ^^^^^

        memoize<T extends Function>(func: T, hashFunction?: Function): T;
>memoize : <T extends Function>(func: T, hashFunction?: Function) => T
>        : ^ ^^^^^^^^^        ^^    ^^ ^^            ^^^        ^^^^^ 
>func : T
>     : ^
>hashFunction : Function
>             : ^^^^^^^^

        delay(func: Function, wait: number, ...args: any[]): number;
>delay : (func: Function, wait: number, ...args: any[]) => number
>      : ^    ^^        ^^    ^^      ^^^^^    ^^     ^^^^^      
>func : Function
>     : ^^^^^^^^
>wait : number
>     : ^^^^^^
>args : any[]
>     : ^^^^^

        defer(func: Function, ...args: any[]): number;
>defer : (func: Function, ...args: any[]) => number
>      : ^    ^^        ^^^^^    ^^     ^^^^^      
>func : Function
>     : ^^^^^^^^
>args : any[]
>     : ^^^^^

        throttle<T extends Function>(func: T, wait: number): T;
>throttle : <T extends Function>(func: T, wait: number) => T
>         : ^ ^^^^^^^^^        ^^    ^^ ^^    ^^      ^^^^^ 
>func : T
>     : ^
>wait : number
>     : ^^^^^^

        debounce<T extends Function>(func: T, wait: number, immediate?: boolean): T;
>debounce : <T extends Function>(func: T, wait: number, immediate?: boolean) => T
>         : ^ ^^^^^^^^^        ^^    ^^ ^^    ^^      ^^         ^^^       ^^^^^ 
>func : T
>     : ^
>wait : number
>     : ^^^^^^
>immediate : boolean
>          : ^^^^^^^

        once<T extends Function>(func: T): T;
>once : <T extends Function>(func: T) => T
>     : ^ ^^^^^^^^^        ^^    ^^ ^^^^^ 
>func : T
>     : ^

        after<T extends Function>(count: number, func: T): T;
>after : <T extends Function>(count: number, func: T) => T
>      : ^ ^^^^^^^^^        ^^     ^^      ^^    ^^ ^^^^^ 
>count : number
>      : ^^^^^^
>func : T
>     : ^

        wrap<T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any): T;
>wrap : <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
>     : ^ ^^^^^^^^^        ^^    ^^ ^^       ^^                                ^^^^^ 
>func : T
>     : ^
>wrapper : (func: T, ...args: any[]) => any
>        : ^    ^^ ^^^^^    ^^     ^^^^^   
>func : T
>     : ^
>args : any[]
>     : ^^^^^

        compose(...funcs: Function[]): Function;
>compose : (...funcs: Function[]) => Function
>        : ^^^^     ^^          ^^^^^        
>funcs : Function[]
>      : ^^^^^^^^^^

        keys(object: any): string[];
>keys : (object: any) => string[]
>     : ^      ^^   ^^^^^        
>object : any
>       : ^^^

        values(object: any): any[];
>values : (object: any) => any[]
>       : ^      ^^   ^^^^^     
>object : any
>       : ^^^

        pairs(object: any): any[][];
>pairs : (object: any) => any[][]
>      : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        invert(object: any): any;
>invert : (object: any) => any
>       : ^      ^^   ^^^^^   
>object : any
>       : ^^^

        functions(object: any): string[];
>functions : (object: any) => string[]
>          : ^      ^^   ^^^^^        
>object : any
>       : ^^^

        methods(object: any): string[];
>methods : (object: any) => string[]
>        : ^      ^^   ^^^^^        
>object : any
>       : ^^^

        extend<T>(destination: T, ...sources: any[]): T;
>extend : <T>(destination: T, ...sources: any[]) => T
>       : ^ ^^           ^^ ^^^^^       ^^     ^^^^^ 
>destination : T
>            : ^
>sources : any[]
>        : ^^^^^

        pick<T>(object: T, ...keys: string[]): T;
>pick : <T>(object: T, ...keys: string[]) => T
>     : ^ ^^      ^^ ^^^^^    ^^        ^^^^^ 
>object : T
>       : ^
>keys : string[]
>     : ^^^^^^^^

        omit<T>(object: T, ...keys: string[]): T;
>omit : <T>(object: T, ...keys: string[]) => T
>     : ^ ^^      ^^ ^^^^^    ^^        ^^^^^ 
>object : T
>       : ^
>keys : string[]
>     : ^^^^^^^^

        defaults<T>(object: T, ...defaults: any[]): T;
>defaults : <T>(object: T, ...defaults: any[]) => T
>         : ^ ^^      ^^ ^^^^^        ^^     ^^^^^ 
>object : T
>       : ^
>defaults : any[]
>         : ^^^^^

        clone<T>(object: T): T;
>clone : <T>(object: T) => T
>      : ^ ^^      ^^ ^^^^^ 
>object : T
>       : ^

        tap<T>(object: T, interceptor: (object: T) => void): T;
>tap : <T>(object: T, interceptor: (object: T) => void) => T
>    : ^ ^^      ^^ ^^           ^^                   ^^^^^ 
>object : T
>       : ^
>interceptor : (object: T) => void
>            : ^      ^^ ^^^^^    
>object : T
>       : ^

        has(object: any, key: string): boolean;
>has : (object: any, key: string) => boolean
>    : ^      ^^   ^^   ^^      ^^^^^       
>object : any
>       : ^^^
>key : string
>    : ^^^^^^

        isEqual<T>(object: T, other: T): boolean;
>isEqual : <T>(object: T, other: T) => boolean
>        : ^ ^^      ^^ ^^     ^^ ^^^^^       
>object : T
>       : ^
>other : T
>      : ^

        isEmpty(object: any): boolean;
>isEmpty : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isElement(object: any): boolean;
>isElement : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isArray(object: any): boolean;
>isArray : (object: any) => boolean
>        : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isObject(value: any): boolean;
>isObject : (value: any) => boolean
>         : ^     ^^   ^^^^^       
>value : any
>      : ^^^

        isArguments(object: any): boolean;
>isArguments : (object: any) => boolean
>            : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isFunction(object: any): boolean;
>isFunction : (object: any) => boolean
>           : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isString(object: any): boolean;
>isString : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isNumber(object: any): boolean;
>isNumber : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isFinite(object: any): boolean;
>isFinite : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isBoolean(object: any): boolean;
>isBoolean : (object: any) => boolean
>          : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isDate(object: any): boolean;
>isDate : (object: any) => boolean
>       : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isRegExp(object: any): boolean;
>isRegExp : (object: any) => boolean
>         : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isNaN(object: any): boolean;
>isNaN : (object: any) => boolean
>      : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isNull(object: any): boolean;
>isNull : (object: any) => boolean
>       : ^      ^^   ^^^^^       
>object : any
>       : ^^^

        isUndefined(value: any): boolean;
>isUndefined : (value: any) => boolean
>            : ^     ^^   ^^^^^       
>value : any
>      : ^^^

        noConflict(): Static;
>noConflict : () => Static
>           : ^^^^^^      

        identity<T>(value: T): T;
>identity : <T>(value: T) => T
>         : ^ ^^     ^^ ^^^^^ 
>value : T
>      : ^

        times<U>(n: number, iterator: Iterator_<number, U>, context?: any): U[];
>times : <U>(n: number, iterator: Iterator_<number, U>, context?: any) => U[]
>      : ^ ^^ ^^      ^^        ^^                    ^^       ^^^   ^^^^^   
>n : number
>  : ^^^^^^
>iterator : Iterator_<number, U>
>         : ^^^^^^^^^^^^^^^^^^^^
>context : any
>        : ^^^

        random(max: number): number;
>random : { (max: number): number; (min: number, max: number): number; }
>       : ^^^   ^^      ^^^      ^^^   ^^      ^^   ^^      ^^^      ^^^
>max : number
>    : ^^^^^^

        random(min: number, max: number): number;
>random : { (max: number): number; (min: number, max: number): number; }
>       : ^^^   ^^      ^^^      ^^^   ^^      ^^   ^^      ^^^      ^^^
>min : number
>    : ^^^^^^
>max : number
>    : ^^^^^^

        mixin(object: any): void;
>mixin : (object: any) => void
>      : ^      ^^   ^^^^^    
>object : any
>       : ^^^

        uniqueId(): number;
>uniqueId : { (): number; (prefix: string): string; }
>         : ^^^^^^      ^^^      ^^      ^^^      ^^^

        uniqueId(prefix: string): string;
>uniqueId : { (): number; (prefix: string): string; }
>         : ^^^^^^      ^^^      ^^      ^^^      ^^^
>prefix : string
>       : ^^^^^^

        escape(s: string): string;
>escape : (s: string) => string
>       : ^ ^^      ^^^^^      
>s : string
>  : ^^^^^^

        unescape(s: string): string;
>unescape : (s: string) => string
>         : ^ ^^      ^^^^^      
>s : string
>  : ^^^^^^

        result(object: any, property: string): any;
>result : (object: any, property: string) => any
>       : ^      ^^   ^^        ^^      ^^^^^   
>object : any
>       : ^^^
>property : string
>         : ^^^^^^

        templateSettings: TemplateSettings;
>templateSettings : TemplateSettings
>                 : ^^^^^^^^^^^^^^^^

        template(templateString: string): (data: any) => string;
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^                ^^^      ^^^
>templateString : string
>               : ^^^^^^
>data : any
>     : ^^^

        template(templateString: string, data: any, settings?: TemplateSettings): string;
>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
>         : ^^^              ^^      ^^^                     ^^^              ^^      ^^    ^^   ^^        ^^^                ^^^      ^^^
>templateString : string
>               : ^^^^^^
>data : any
>     : ^^^
>settings : TemplateSettings
>         : ^^^^^^^^^^^^^^^^
    }
}

declare var _: Underscore.Static;
>_ : Underscore.Static
>  : ^^^^^^^^^^^^^^^^^
>Underscore : any
>           : ^^^

