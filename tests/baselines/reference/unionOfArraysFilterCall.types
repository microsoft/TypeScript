//// [tests/cases/compiler/unionOfArraysFilterCall.ts] ////

=== unionOfArraysFilterCall.ts ===
interface Fizz {
    id: number;
>id : number
>   : ^^^^^^

    fizz: string;
>fizz : string
>     : ^^^^^^
}

interface Buzz {
    id: number;
>id : number
>   : ^^^^^^

    buzz: string;
>buzz : string
>     : ^^^^^^
}

([] as Fizz[] | Buzz[]).filter(item => item.id < 5);
>([] as Fizz[] | Buzz[]).filter(item => item.id < 5) : (Buzz | Fizz)[]
>                                                    : ^^^^^^^^^^^^^^^
>([] as Fizz[] | Buzz[]).filter : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>                               : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>([] as Fizz[] | Buzz[]) : Buzz[] | Fizz[]
>                        : ^^^^^^^^^^^^^^^
>[] as Fizz[] | Buzz[] : Buzz[] | Fizz[]
>                      : ^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>filter : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): Buzz[]; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>       : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>item => item.id < 5 : (item: Buzz | Fizz) => boolean
>                    : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>item.id < 5 : boolean
>            : ^^^^^^^
>item.id : number
>        : ^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>id : number
>   : ^^^^^^
>5 : 5
>  : ^

([] as Fizz[] | readonly Buzz[]).filter(item => item.id < 5); 
>([] as Fizz[] | readonly Buzz[]).filter(item => item.id < 5) : (Buzz | Fizz)[]
>                                                             : ^^^^^^^^^^^^^^^
>([] as Fizz[] | readonly Buzz[]).filter : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>                                        : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>([] as Fizz[] | readonly Buzz[]) : Fizz[] | readonly Buzz[]
>                                 : ^^^^^^^^^^^^^^^^^^^^^^^^
>[] as Fizz[] | readonly Buzz[] : Fizz[] | readonly Buzz[]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>filter : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>       : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>item => item.id < 5 : (item: Buzz | Fizz) => boolean
>                    : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>item.id < 5 : boolean
>            : ^^^^^^^
>item.id : number
>        : ^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>id : number
>   : ^^^^^^
>5 : 5
>  : ^

([] as Fizz[] | Buzz[]).find(item => item);
>([] as Fizz[] | Buzz[]).find(item => item) : Buzz | Fizz
>                                           : ^^^^^^^^^^^
>([] as Fizz[] | Buzz[]).find : { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; }
>                             : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^
>([] as Fizz[] | Buzz[]) : Buzz[] | Fizz[]
>                        : ^^^^^^^^^^^^^^^
>[] as Fizz[] | Buzz[] : Buzz[] | Fizz[]
>                      : ^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>find : { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; }
>     : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^
>item => item : (item: Buzz | Fizz) => Buzz | Fizz
>             : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^

declare function isFizz(x: unknown): x is Fizz;
>isFizz : (x: unknown) => x is Fizz
>       : ^ ^^       ^^^^^         
>x : unknown
>  : ^^^^^^^

([] as Fizz[] | Buzz[]).find(isFizz);
>([] as Fizz[] | Buzz[]).find(isFizz) : Fizz
>                                     : ^^^^
>([] as Fizz[] | Buzz[]).find : { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; }
>                             : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^
>([] as Fizz[] | Buzz[]) : Buzz[] | Fizz[]
>                        : ^^^^^^^^^^^^^^^
>[] as Fizz[] | Buzz[] : Buzz[] | Fizz[]
>                      : ^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>find : { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; }
>     : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^
>isFizz : (x: unknown) => x is Fizz
>       : ^ ^^       ^^^^^         

declare function isBuzz(x: unknown): x is Buzz;
>isBuzz : (x: unknown) => x is Buzz
>       : ^ ^^       ^^^^^         
>x : unknown
>  : ^^^^^^^

([] as Fizz[] | Buzz[]).find(isBuzz);
>([] as Fizz[] | Buzz[]).find(isBuzz) : Buzz
>                                     : ^^^^
>([] as Fizz[] | Buzz[]).find : { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; }
>                             : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^
>([] as Fizz[] | Buzz[]) : Buzz[] | Fizz[]
>                        : ^^^^^^^^^^^^^^^
>[] as Fizz[] | Buzz[] : Buzz[] | Fizz[]
>                      : ^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>find : { <S extends Buzz>(predicate: (value: Buzz, index: number, obj: Buzz[]) => value is S, thisArg?: any): S; (predicate: (value: Buzz, index: number, obj: Buzz[]) => unknown, thisArg?: any): Buzz; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, obj: Fizz[]) => value is S, thisArg?: any): S; (predicate: (value: Fizz, index: number, obj: Fizz[]) => unknown, thisArg?: any): Fizz; }
>     : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^   ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^
>isBuzz : (x: unknown) => x is Buzz
>       : ^ ^^       ^^^^^         

([] as Fizz[] | Buzz[]).every(item => item.id < 5);
>([] as Fizz[] | Buzz[]).every(item => item.id < 5) : boolean
>                                                   : ^^^^^^^
>([] as Fizz[] | Buzz[]).every : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): boolean; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): boolean; }
>                              : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^        ^  ^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^       ^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^        ^  ^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^       ^^^
>([] as Fizz[] | Buzz[]) : Buzz[] | Fizz[]
>                        : ^^^^^^^^^^^^^^^
>[] as Fizz[] | Buzz[] : Buzz[] | Fizz[]
>                      : ^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>every : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: Buzz[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Buzz, index: number, array: Buzz[]) => unknown, thisArg?: any): boolean; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): boolean; }
>      : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^        ^  ^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^       ^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^        ^  ^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^       ^^^
>item => item.id < 5 : (item: Buzz | Fizz) => boolean
>                    : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>item.id < 5 : boolean
>            : ^^^^^^^
>item.id : number
>        : ^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>id : number
>   : ^^^^^^
>5 : 5
>  : ^

([] as Fizz[] | Buzz[]).reduce(item => item);
>([] as Fizz[] | Buzz[]).reduce(item => item) : Buzz | Fizz
>                                             : ^^^^^^^^^^^
>([] as Fizz[] | Buzz[]).reduce : { (callbackfn: (previousValue: Buzz, currentValue: Buzz, currentIndex: number, array: Buzz[]) => Buzz): Buzz; (callbackfn: (previousValue: Buzz, currentValue: Buzz, currentIndex: number, array: Buzz[]) => Buzz, initialValue: Buzz): Buzz; <U>(callbackfn: (previousValue: U, currentValue: Buzz, currentIndex: number, array: Buzz[]) => U, initialValue: U): U; } | { (callbackfn: (previousValue: Fizz, currentValue: Fizz, currentIndex: number, array: Fizz[]) => Fizz): Fizz; (callbackfn: (previousValue: Fizz, currentValue: Fizz, currentIndex: number, array: Fizz[]) => Fizz, initialValue: Fizz): Fizz; <U>(callbackfn: (previousValue: U, currentValue: Fizz, currentIndex: number, array: Fizz[]) => U, initialValue: U): U; }

>([] as Fizz[] | Buzz[]) : Buzz[] | Fizz[]
>                        : ^^^^^^^^^^^^^^^
>[] as Fizz[] | Buzz[] : Buzz[] | Fizz[]
>                      : ^^^^^^^^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^
>reduce : { (callbackfn: (previousValue: Buzz, currentValue: Buzz, currentIndex: number, array: Buzz[]) => Buzz): Buzz; (callbackfn: (previousValue: Buzz, currentValue: Buzz, currentIndex: number, array: Buzz[]) => Buzz, initialValue: Buzz): Buzz; <U>(callbackfn: (previousValue: U, currentValue: Buzz, currentIndex: number, array: Buzz[]) => U, initialValue: U): U; } | { (callbackfn: (previousValue: Fizz, currentValue: Fizz, currentIndex: number, array: Fizz[]) => Fizz): Fizz; (callbackfn: (previousValue: Fizz, currentValue: Fizz, currentIndex: number, array: Fizz[]) => Fizz, initialValue: Fizz): Fizz; <U>(callbackfn: (previousValue: U, currentValue: Fizz, currentIndex: number, array: Fizz[]) => U, initialValue: U): U; }

>item => item : (item: Buzz | Fizz) => Buzz | Fizz
>             : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^


([] as [Fizz] | readonly [Buzz?]).filter(item => item?.id < 5);
>([] as [Fizz] | readonly [Buzz?]).filter(item => item?.id < 5) : (Buzz | Fizz)[]
>                                                               : ^^^^^^^^^^^^^^^
>([] as [Fizz] | readonly [Buzz?]).filter : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>                                         : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>([] as [Fizz] | readonly [Buzz?]) : [Fizz] | readonly [Buzz?]
>                                  : ^^^^^^^^^^^^^^^^^^^^^^^^^
>[] as [Fizz] | readonly [Buzz?] : [Fizz] | readonly [Buzz?]
>                                : ^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : []
>   : ^^
>filter : { <S extends Buzz>(predicate: (value: Buzz, index: number, array: readonly Buzz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Buzz, index: number, array: readonly Buzz[]) => unknown, thisArg?: any): Buzz[]; } | { <S extends Fizz>(predicate: (value: Fizz, index: number, array: Fizz[]) => value is S, thisArg?: any): S[]; (predicate: (value: Fizz, index: number, array: Fizz[]) => unknown, thisArg?: any): Fizz[]; }
>       : ^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^       ^^^   ^^^^^^^^^         ^^^     ^^^^^^^^     ^^      ^^     ^^^^^^^^^^^^^       ^^       ^^^   ^^^^^^^^^^^^
>item => item?.id < 5 : (item: Buzz | Fizz) => boolean
>                     : ^    ^^^^^^^^^^^^^^^^^^^^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>item?.id < 5 : boolean
>             : ^^^^^^^
>item?.id : number
>         : ^^^^^^
>item : Buzz | Fizz
>     : ^^^^^^^^^^^
>id : number
>   : ^^^^^^
>5 : 5
>  : ^

