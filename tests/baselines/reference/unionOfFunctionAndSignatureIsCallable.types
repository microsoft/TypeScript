//// [tests/cases/compiler/unionOfFunctionAndSignatureIsCallable.ts] ////

=== unionOfFunctionAndSignatureIsCallable.ts ===
function f1(c1: Function, c2: () => object,  callable: typeof c1 | typeof c2) {
>f1 : (c1: Function, c2: () => object, callable: typeof c1 | typeof c2) => void
>   : ^  ^^        ^^  ^^            ^^        ^^                     ^^^^^^^^^
>c1 : Function
>   : ^^^^^^^^
>c2 : () => object
>   : ^^^^^^      
>callable : Function | (() => object)
>         : ^^^^^^^^^^^^^^^^^^      ^
>c1 : Function
>   : ^^^^^^^^
>c2 : () => object
>   : ^^^^^^      

    const a = c1();
>a : any
>c1() : any
>c1 : Function
>   : ^^^^^^^^

    const b = c2();
>b : object
>  : ^^^^^^
>c2() : object
>     : ^^^^^^
>c2 : () => object
>   : ^^^^^^      

    const c = callable();
>c : error
>callable() : error
>callable : Function | (() => object)
>         : ^^^^^^^^^^^^^^^^^^      ^
}

function f2(fetcherParams: object | (() => object)) {
>f2 : (fetcherParams: object | (() => object)) => void
>   : ^             ^^                       ^^^^^^^^^
>fetcherParams : object | (() => object)
>              : ^^^^^^^^^^^^^^^^      ^

    const data = typeof fetcherParams === 'function'
>data : error
>typeof fetcherParams === 'function'        ? fetcherParams()        : fetcherParams : error
>typeof fetcherParams === 'function' : boolean
>                                    : ^^^^^^^
>typeof fetcherParams : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fetcherParams : object | (() => object)
>              : ^^^^^^^^^^^^^^^^      ^
>'function' : "function"
>           : ^^^^^^^^^^

        ? fetcherParams()
>fetcherParams() : error
>fetcherParams : Function | (() => object)
>              : ^^^^^^^^^^^^^^^^^^      ^

        : fetcherParams
>fetcherParams : object
>              : ^^^^^^
}

