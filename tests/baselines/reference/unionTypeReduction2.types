//// [tests/cases/conformance/types/union/unionTypeReduction2.ts] ////

=== unionTypeReduction2.ts ===
function f1(x: { f(): void }, y: { f(x?: string): void }) {
>f1 : (x: { f(): void; }, y: { f(x?: string): void; }) => void
>   : ^ ^^              ^^ ^^                        ^^^^^^^^^
>x : { f(): void; }
>  : ^^^^^^^    ^^^
>f : () => void
>  : ^^^^^^    
>y : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    let z = !!true ? x : y;  // { f(x?: string): void }
>z : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>!!true ? x : y : { f(x?: string): void; }
>               : ^^^^ ^^^      ^^^    ^^^
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>x : { f(): void; }
>  : ^^^^^^^    ^^^
>y : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^

    z.f();
>z.f() : void
>      : ^^^^
>z.f : (x?: string) => void
>    : ^ ^^^      ^^^^^    
>z : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    z.f('hello');
>z.f('hello') : void
>             : ^^^^
>z.f : (x?: string) => void
>    : ^ ^^^      ^^^^^    
>z : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>'hello' : "hello"
>        : ^^^^^^^
}

function f2(x: { f(x: string | undefined): void }, y: { f(x?: string): void }) {
>f2 : (x: { f(x: string | undefined): void; }, y: { f(x?: string): void; }) => void
>   : ^ ^^                                   ^^ ^^                        ^^^^^^^^^
>x : { f(x: string | undefined): void; }
>  : ^^^^ ^^                  ^^^    ^^^
>f : (x: string | undefined) => void
>  : ^ ^^                  ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>y : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    let z = !!true ? x : y;  // { f(x?: string): void }
>z : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>!!true ? x : y : { f(x?: string): void; }
>               : ^^^^ ^^^      ^^^    ^^^
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>x : { f(x: string | undefined): void; }
>  : ^^^^ ^^                  ^^^    ^^^
>y : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^

    z.f();
>z.f() : void
>      : ^^^^
>z.f : (x?: string) => void
>    : ^ ^^^      ^^^^^    
>z : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    z.f('hello');
>z.f('hello') : void
>             : ^^^^
>z.f : (x?: string) => void
>    : ^ ^^^      ^^^^^    
>z : { f(x?: string): void; }
>  : ^^^^ ^^^      ^^^    ^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>'hello' : "hello"
>        : ^^^^^^^
}

function f3(x: () => void, y: (x?: string) => void) {
>f3 : (x: () => void, y: (x?: string) => void) => void
>   : ^ ^^          ^^ ^^                    ^^^^^^^^^
>x : () => void
>  : ^^^^^^    
>y : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    let f = !!true ? x : y;  // (x?: string) => void
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>!!true ? x : y : (x?: string) => void
>               : ^ ^^^      ^^^^^    
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>x : () => void
>  : ^^^^^^    
>y : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    f();
>f() : void
>    : ^^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    f('hello');
>f('hello') : void
>           : ^^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>'hello' : "hello"
>        : ^^^^^^^
}

function f4(x: (x: string | undefined) => void, y: (x?: string) => void) {
>f4 : (x: (x: string | undefined) => void, y: (x?: string) => void) => void
>   : ^ ^^                               ^^ ^^                    ^^^^^^^^^
>x : (x: string | undefined) => void
>  : ^ ^^                  ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>y : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    let f = !!true ? x : y;  // (x?: string) => void
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>!!true ? x : y : (x?: string) => void
>               : ^ ^^^      ^^^^^    
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>x : (x: string | undefined) => void
>  : ^ ^^                  ^^^^^    
>y : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    f();
>f() : void
>    : ^^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    f('hello');
>f('hello') : void
>           : ^^^^
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>'hello' : "hello"
>        : ^^^^^^^
}

function f5(x: (x: string | undefined) => void, y: (x?: 'hello') => void) {
>f5 : (x: (x: string | undefined) => void, y: (x?: "hello") => void) => void
>   : ^ ^^                               ^^ ^^                     ^^^^^^^^^
>x : (x: string | undefined) => void
>  : ^ ^^                  ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^
>y : (x?: "hello") => void
>  : ^ ^^^       ^^^^^    
>x : "hello" | undefined
>  : ^^^^^^^^^^^^^^^^^^^

    let f = !!true ? x : y;  // (x?: 'hello') => void
>f : (x?: "hello") => void
>  : ^ ^^^       ^^^^^    
>!!true ? x : y : (x?: "hello") => void
>               : ^ ^^^       ^^^^^    
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>x : (x: string | undefined) => void
>  : ^ ^^                  ^^^^^    
>y : (x?: "hello") => void
>  : ^ ^^^       ^^^^^    

    f();
>f() : void
>    : ^^^^
>f : (x?: "hello") => void
>  : ^ ^^^       ^^^^^    

    f('hello');
>f('hello') : void
>           : ^^^^
>f : (x?: "hello") => void
>  : ^ ^^^       ^^^^^    
>'hello' : "hello"
>        : ^^^^^^^
}

function f6(x: (x: 'hello' | undefined) => void, y: (x?: string) => void) {
>f6 : (x: (x: "hello" | undefined) => void, y: (x?: string) => void) => void
>   : ^ ^^                                ^^ ^^                    ^^^^^^^^^
>x : (x: "hello" | undefined) => void
>  : ^ ^^                   ^^^^^    
>x : "hello" | undefined
>  : ^^^^^^^^^^^^^^^^^^^
>y : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    let f = !!true ? x : y;  // (x: 'hello' | undefined) => void
>f : (x: "hello" | undefined) => void
>  : ^ ^^                   ^^^^^    
>!!true ? x : y : (x: "hello" | undefined) => void
>               : ^ ^^                   ^^^^^    
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>x : (x: "hello" | undefined) => void
>  : ^ ^^                   ^^^^^    
>y : (x?: string) => void
>  : ^ ^^^      ^^^^^    

    f();  // Error
>f() : void
>    : ^^^^
>f : (x: "hello" | undefined) => void
>  : ^ ^^                   ^^^^^    

    f('hello');
>f('hello') : void
>           : ^^^^
>f : (x: "hello" | undefined) => void
>  : ^ ^^                   ^^^^^    
>'hello' : "hello"
>        : ^^^^^^^
}

type A = {
>A : A
>  : ^

    f(): void;
>f : () => void
>  : ^^^^^^    
}

type B = {
>B : B
>  : ^

    f(x?: string): void;
>f : (x?: string) => void
>  : ^ ^^^      ^^^^^    
>x : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    g(): void;
>g : () => void
>  : ^^^^^^    
}

function f11(a: A, b: B) {
>f11 : (a: A, b: B) => void
>    : ^ ^^ ^^ ^^ ^^^^^^^^^
>a : A
>  : ^
>b : B
>  : ^

    let z = !!true ? a : b;  // A | B
>z : A | B
>  : ^^^^^
>!!true ? a : b : A | B
>               : ^^^^^
>!!true : true
>       : ^^^^
>!true : false
>      : ^^^^^
>true : true
>     : ^^^^
>a : A
>  : ^
>b : B
>  : ^

    z.f();
>z.f() : void
>      : ^^^^
>z.f : ((x?: string) => void) | (() => void)
>    : ^^ ^^^      ^^^^^    ^^^^^^^^^^^    ^
>z : A | B
>  : ^^^^^
>f : ((x?: string) => void) | (() => void)
>  : ^^ ^^^      ^^^^^    ^^^^^^^^^^^    ^

    z.f('hello');
>z.f('hello') : void
>             : ^^^^
>z.f : ((x?: string) => void) | (() => void)
>    : ^^ ^^^      ^^^^^    ^^^^^^^^^^^    ^
>z : A | B
>  : ^^^^^
>f : ((x?: string) => void) | (() => void)
>  : ^^ ^^^      ^^^^^    ^^^^^^^^^^^    ^
>'hello' : "hello"
>        : ^^^^^^^
}

// Repro from #35414

interface ReturnVal {
    something(): void;
>something : () => void
>          : ^^^^^^    
}

const k: ReturnVal = { something() { } }
>k : ReturnVal
>  : ^^^^^^^^^
>{ something() { } } : { something(): void; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^
>something : () => void
>          : ^^^^^^^^^^

declare const val: ReturnVal;
>val : ReturnVal
>    : ^^^^^^^^^

function run(options: { something?(b?: string): void }) {
>run : (options: { something?(b?: string): void; }) => void
>    : ^       ^^                                 ^^^^^^^^^
>options : { something?(b?: string): void; }
>        : ^^^^^^^^^^^^^ ^^^      ^^^    ^^^
>something : ((b?: string) => void) | undefined
>          : ^^ ^^^      ^^^^^    ^^^^^^^^^^^^^
>b : string | undefined
>  : ^^^^^^^^^^^^^^^^^^

    const something = options.something ?? val.something;
>something : (b?: string) => void
>          : ^ ^^^      ^^^^^    
>options.something ?? val.something : (b?: string) => void
>                                   : ^ ^^^      ^^^^^    
>options.something : ((b?: string) => void) | undefined
>                  : ^^ ^^^      ^^^^^    ^^^^^^^^^^^^^
>options : { something?(b?: string): void; }
>        : ^^^^^^^^^^^^^ ^^^      ^^^    ^^^
>something : ((b?: string) => void) | undefined
>          : ^^ ^^^      ^^^^^    ^^^^^^^^^^^^^
>val.something : () => void
>              : ^^^^^^    
>val : ReturnVal
>    : ^^^^^^^^^
>something : () => void
>          : ^^^^^^    

    something('');
>something('') : void
>              : ^^^^
>something : (b?: string) => void
>          : ^ ^^^      ^^^^^    
>'' : ""
>   : ^^
}

