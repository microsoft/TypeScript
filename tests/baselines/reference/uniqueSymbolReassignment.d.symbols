//// [tests/cases/compiler/uniqueSymbolReassignment.d.ts] ////

=== uniqueSymbolReassignment.d.ts ===
declare function myFunction(): void;
>myFunction : Symbol(myFunction, Decl(uniqueSymbolReassignment.d.ts, 0, 0), Decl(uniqueSymbolReassignment.d.ts, 0, 36))

declare namespace myFunction {
>myFunction : Symbol(myFunction, Decl(uniqueSymbolReassignment.d.ts, 0, 0), Decl(uniqueSymbolReassignment.d.ts, 0, 36))

    const mySymbol: unique symbol;
>mySymbol : Symbol(mySymbol, Decl(uniqueSymbolReassignment.d.ts, 2, 9))

    const anotherUnique: unique symbol;
>anotherUnique : Symbol(anotherUnique, Decl(uniqueSymbolReassignment.d.ts, 3, 9))

    var nonUnique1: typeof nonUniqueSymbol1;
>nonUnique1 : Symbol(nonUnique1, Decl(uniqueSymbolReassignment.d.ts, 4, 7))
>nonUniqueSymbol1 : Symbol(nonUniqueSymbol1, Decl(uniqueSymbolReassignment.d.ts, 9, 13))

    var nonUnique2: typeof nonUniqueSymbol2;
>nonUnique2 : Symbol(nonUnique2, Decl(uniqueSymbolReassignment.d.ts, 5, 7))
>nonUniqueSymbol2 : Symbol(nonUniqueSymbol2, Decl(uniqueSymbolReassignment.d.ts, 10, 13))

    var normalVar: string;
>normalVar : Symbol(normalVar, Decl(uniqueSymbolReassignment.d.ts, 6, 7))

    var symbolName: string;
>symbolName : Symbol(symbolName, Decl(uniqueSymbolReassignment.d.ts, 7, 7))
}
declare const nonUniqueSymbol1: unique symbol;
>nonUniqueSymbol1 : Symbol(nonUniqueSymbol1, Decl(uniqueSymbolReassignment.d.ts, 9, 13))

declare const nonUniqueSymbol2: unique symbol;
>nonUniqueSymbol2 : Symbol(nonUniqueSymbol2, Decl(uniqueSymbolReassignment.d.ts, 10, 13))

export { myFunction };
>myFunction : Symbol(myFunction, Decl(uniqueSymbolReassignment.d.ts, 11, 8))

