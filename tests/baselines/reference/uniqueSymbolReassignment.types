//// [tests/cases/compiler/uniqueSymbolReassignment.ts] ////

=== uniqueSymbolReassignment.ts ===
// This is a unique symbol (const + Symbol())
const mySymbol = Symbol('Symbols.mySymbol');
>mySymbol : unique symbol
>         : ^^^^^^^^^^^^^
>Symbol('Symbols.mySymbol') : unique symbol
>                           : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>'Symbols.mySymbol' : "Symbols.mySymbol"
>                   : ^^^^^^^^^^^^^^^^^^

const Symbols = {
>Symbols : { readonly mySymbol: unique symbol; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    mySymbol} as const : { readonly mySymbol: unique symbol; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    mySymbol} : { readonly mySymbol: unique symbol; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    mySymbol
>mySymbol : unique symbol
>         : ^^^^^^^^^^^^^

} as const;

const anotherUnique = Symbol('symbols.anotherUnique');
>anotherUnique : unique symbol
>              : ^^^^^^^^^^^^^
>Symbol('symbols.anotherUnique') : unique symbol
>                                : ^^^^^^^^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>'symbols.anotherUnique' : "symbols.anotherUnique"
>                        : ^^^^^^^^^^^^^^^^^^^^^^^

const Symbols2 = {
>Symbols2 : { readonly anotherUnique: unique symbol; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    anotherUnique} as const : { readonly anotherUnique: unique symbol; }
>                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    anotherUnique} : { readonly anotherUnique: unique symbol; }
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    anotherUnique
>anotherUnique : unique symbol
>              : ^^^^^^^^^^^^^

} as const;

function myFunction() {}
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^

// Attach the unique ones
myFunction.mySymbol = Symbols.mySymbol;
>myFunction.mySymbol = Symbols.mySymbol : unique symbol
>                                       : ^^^^^^^^^^^^^
>myFunction.mySymbol : unique symbol
>                    : ^^^^^^^^^^^^^
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^
>mySymbol : unique symbol
>         : ^^^^^^^^^^^^^
>Symbols.mySymbol : unique symbol
>                 : ^^^^^^^^^^^^^
>Symbols : { readonly mySymbol: unique symbol; }
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>mySymbol : unique symbol
>         : ^^^^^^^^^^^^^

myFunction.anotherUnique = Symbols2.anotherUnique;
>myFunction.anotherUnique = Symbols2.anotherUnique : unique symbol
>                                                  : ^^^^^^^^^^^^^
>myFunction.anotherUnique : unique symbol
>                         : ^^^^^^^^^^^^^
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^
>anotherUnique : unique symbol
>              : ^^^^^^^^^^^^^
>Symbols2.anotherUnique : unique symbol
>                       : ^^^^^^^^^^^^^
>Symbols2 : { readonly anotherUnique: unique symbol; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>anotherUnique : unique symbol
>              : ^^^^^^^^^^^^^

// Non-unique symbols (regular Symbol() without const)
let nonUniqueSymbol1 = Symbol('nonUnique1');
>nonUniqueSymbol1 : symbol
>                 : ^^^^^^
>Symbol('nonUnique1') : symbol
>                     : ^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>'nonUnique1' : "nonUnique1"
>             : ^^^^^^^^^^^^

let nonUniqueSymbol2 = Symbol('nonUnique2');
>nonUniqueSymbol2 : symbol
>                 : ^^^^^^
>Symbol('nonUnique2') : symbol
>                     : ^^^^^^
>Symbol : SymbolConstructor
>       : ^^^^^^^^^^^^^^^^^
>'nonUnique2' : "nonUnique2"
>             : ^^^^^^^^^^^^

// Plain text variables (not symbols at all)
const normalVar = "not a symbol";
>normalVar : "not a symbol"
>          : ^^^^^^^^^^^^^^
>"not a symbol" : "not a symbol"
>               : ^^^^^^^^^^^^^^

const symbolName = "this contains symbol but is not one";
>symbolName : "this contains symbol but is not one"
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>"this contains symbol but is not one" : "this contains symbol but is not one"
>                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Attach those as well
myFunction.nonUnique1 = nonUniqueSymbol1;
>myFunction.nonUnique1 = nonUniqueSymbol1 : symbol
>                                         : ^^^^^^
>myFunction.nonUnique1 : symbol
>                      : ^^^^^^
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^
>nonUnique1 : symbol
>           : ^^^^^^
>nonUniqueSymbol1 : symbol
>                 : ^^^^^^

myFunction.nonUnique2 = nonUniqueSymbol2;
>myFunction.nonUnique2 = nonUniqueSymbol2 : symbol
>                                         : ^^^^^^
>myFunction.nonUnique2 : symbol
>                      : ^^^^^^
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^
>nonUnique2 : symbol
>           : ^^^^^^
>nonUniqueSymbol2 : symbol
>                 : ^^^^^^

myFunction.normalVar = normalVar;
>myFunction.normalVar = normalVar : "not a symbol"
>                                 : ^^^^^^^^^^^^^^
>myFunction.normalVar : string
>                     : ^^^^^^
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^
>normalVar : string
>          : ^^^^^^
>normalVar : "not a symbol"
>          : ^^^^^^^^^^^^^^

myFunction.symbolName = symbolName;
>myFunction.symbolName = symbolName : "this contains symbol but is not one"
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>myFunction.symbolName : string
>                      : ^^^^^^
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^
>symbolName : string
>           : ^^^^^^
>symbolName : "this contains symbol but is not one"
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

export { myFunction };
>myFunction : typeof myFunction
>           : ^^^^^^^^^^^^^^^^^

