//// [tests/cases/compiler/unparenthesizedConstructorTypeInUnionOrIntersection.ts] ////

=== unparenthesizedConstructorTypeInUnionOrIntersection.ts ===
type U1 = string | new () => void;
>U1 : U1
>   : ^^

type U2 = string | new (foo: number) => void
>U2 : U2
>   : ^^
>foo : number
>    : ^^^^^^

type U3 = | new () => number
>U3 : new () => number
>   : ^^^^^^^^^^      

type U4 = | new (foo?: number) => void;
>U4 : new (foo?: number) => void
>   : ^^^^^   ^^^      ^^^^^    
>foo : number
>    : ^^^^^^

type U5 = string | new (number: number, foo?: string) => void | number;
>U5 : U5
>   : ^^
>number : number
>       : ^^^^^^
>foo : string
>    : ^^^^^^

type U6 =
>U6 : U6
>   : ^^

  | string
  | new (...args: any[]) => void
>args : any[]
>     : ^^^^^

  | number;

type I1 = string & new () => void;
>I1 : I1
>   : ^^

type I2 = string & new (...foo: number[]) => void;
>I2 : I2
>   : ^^
>foo : number[]
>    : ^^^^^^^^

type I3 = & new () => boolean
>I3 : new () => boolean
>   : ^^^^^^^^^^       

type I4 = & new () => boolean & null;
>I4 : new () => boolean & null
>   : ^^^^^^^^^^              

type I5 = string & new (any: any, any2: any) => any & any;
>I5 : I5
>   : ^^
>any : any
>    : ^^^
>any2 : any
>     : ^^^

type I6 =
>I6 : I6
>   : ^^

  & string
  & new (foo: any) => void;
>foo : any
>    : ^^^

type M1 = string | number & string | new () => number;
>M1 : M1
>   : ^^

type M2 = any & string | any & new () => void;
>M2 : any
>   : ^^^

type M3 = any & new (foo: any) => void | new () => void & any;
>M3 : any
>   : ^^^
>foo : any
>    : ^^^

type OK1 = string | (new ()=> void);
>OK1 : OK1
>    : ^^^

type OK2 = string | (new ()=> string | number);
>OK2 : OK2
>    : ^^^

