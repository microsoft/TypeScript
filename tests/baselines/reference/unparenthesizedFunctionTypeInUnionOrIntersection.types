//// [tests/cases/compiler/unparenthesizedFunctionTypeInUnionOrIntersection.ts] ////

=== unparenthesizedFunctionTypeInUnionOrIntersection.ts ===
type U1 = string | () => void;
>U1 : U1
>   : ^^

type U2 = string | (foo: number) => void
>U2 : U2
>   : ^^
>foo : number
>    : ^^^^^^

type U3 = | () => number
>U3 : () => number
>   : ^^^^^^      

type U4 = | (foo?: number) => void;
>U4 : (foo?: number) => void
>   : ^   ^^^      ^^^^^    
>foo : number
>    : ^^^^^^

type U5 = string | (number: number, foo?: string) => void | number;
>U5 : U5
>   : ^^
>number : number
>       : ^^^^^^
>foo : string
>    : ^^^^^^

type U6 =
>U6 : U6
>   : ^^

  | string
  | (...args: any[]) => void
>args : any[]
>     : ^^^^^

  | number;

type I1 = string & () => void;
>I1 : I1
>   : ^^

type I2 = string & (...foo: number[]) => void;
>I2 : I2
>   : ^^
>foo : number[]
>    : ^^^^^^^^

type I3 = & () => boolean
>I3 : () => boolean
>   : ^^^^^^       

type I4 = & () => boolean & null;
>I4 : () => boolean & null
>   : ^^^^^^              

type I5 = string & (any: any, any2: any) => any & any;
>I5 : I5
>   : ^^
>any : any
>    : ^^^
>any2 : any
>     : ^^^

type I6 =
>I6 : I6
>   : ^^

  & string
  & (foo: any) => void;
>foo : any
>    : ^^^

type M1 = string | number & string | () => number;
>M1 : M1
>   : ^^

type M2 = any & string | any & () => void;
>M2 : any
>   : ^^^

type M3 = any & (foo: any) => void | () => void & any;
>M3 : any
>   : ^^^
>foo : any
>    : ^^^

type OK1 = string | (number);
>OK1 : OK1
>    : ^^^

type OK2 = string | ((number));
>OK2 : OK2
>    : ^^^

type OK3 = string | (()=> void);
>OK3 : OK3
>    : ^^^

type OK4 = string | (()=> string | number);
>OK4 : OK4
>    : ^^^

