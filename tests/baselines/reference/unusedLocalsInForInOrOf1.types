//// [tests/cases/compiler/unusedLocalsInForInOrOf1.ts] ////

=== unusedLocalsInForInOrOf1.ts ===
for (let x of [1, 2]) {
>x : number
>  : ^^^^^^
>[1, 2] : number[]
>       : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

  function f() {
>f : () => void
>  : ^^^^^^^^^^

    x;
>x : number
>  : ^^^^^^
  }
}

for (let x of [1, 2]) {
>x : number
>  : ^^^^^^
>[1, 2] : number[]
>       : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

  let f = () => {
>f : () => void
>  : ^^^^^^^^^^
>() => {    x;  } : () => void
>                 : ^^^^^^^^^^

    x;
>x : number
>  : ^^^^^^

  };
}

for (const x of [1, 2]) {
>x : number
>  : ^^^^^^
>[1, 2] : number[]
>       : ^^^^^^^^
>1 : 1
>  : ^
>2 : 2
>  : ^

  function g() {
>g : () => void
>  : ^^^^^^^^^^

    x;
>x : number
>  : ^^^^^^
  }
}

for (let x in { a: 1, b: 2 }) {
>x : string
>  : ^^^^^^
>{ a: 1, b: 2 } : { a: number; b: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>b : number
>  : ^^^^^^
>2 : 2
>  : ^

  function f2() {
>f2 : () => void
>   : ^^^^^^^^^^

    x;
>x : string
>  : ^^^^^^
  }
}

for (let x in { a: 1, b: 2 }) {
>x : string
>  : ^^^^^^
>{ a: 1, b: 2 } : { a: number; b: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>b : number
>  : ^^^^^^
>2 : 2
>  : ^

  let f2 = () => {
>f2 : () => void
>   : ^^^^^^^^^^
>() => {    x;  } : () => void
>                 : ^^^^^^^^^^

    x;
>x : string
>  : ^^^^^^

  };
}

for (const x in { a: 1, b: 2 }) {
>x : string
>  : ^^^^^^
>{ a: 1, b: 2 } : { a: number; b: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>b : number
>  : ^^^^^^
>2 : 2
>  : ^

  function g2() {
>g2 : () => void
>   : ^^^^^^^^^^

    x;
>x : string
>  : ^^^^^^
  }
}

for (let { x } of [{ x: 1 }, { x: 2 }]) {
>x : number
>  : ^^^^^^
>[{ x: 1 }, { x: 2 }] : { x: number; }[]
>                     : ^^^^^^^^^^^^^^^^
>{ x: 1 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>{ x: 2 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

  function f3() {
>f3 : () => void
>   : ^^^^^^^^^^

    x;
>x : number
>  : ^^^^^^
  }
}

for (let { x } of [{ x: 1 }, { x: 2 }]) {
>x : number
>  : ^^^^^^
>[{ x: 1 }, { x: 2 }] : { x: number; }[]
>                     : ^^^^^^^^^^^^^^^^
>{ x: 1 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>{ x: 2 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

  let f3 = () => {
>f3 : () => void
>   : ^^^^^^^^^^
>() => {    x;  } : () => void
>                 : ^^^^^^^^^^

    x;
>x : number
>  : ^^^^^^

  };
}

for (const { x } of [{ x: 1 }, { x: 2 }]) {
>x : number
>  : ^^^^^^
>[{ x: 1 }, { x: 2 }] : { x: number; }[]
>                     : ^^^^^^^^^^^^^^^^
>{ x: 1 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>{ x: 2 } : { x: number; }
>         : ^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

  function g3() {
>g3 : () => void
>   : ^^^^^^^^^^

    x;
>x : number
>  : ^^^^^^
  }
}

