//// [tests/cases/conformance/es2018/useRegexpGroups.ts] ////

=== useRegexpGroups.ts ===
let re = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/u;
>re : RegExp
>   : ^^^^^^
>/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/u : RegExp
>                                                : ^^^^^^

let result = re.exec("2015-01-02");
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>re.exec("2015-01-02") : RegExpExecArray
>                      : ^^^^^^^^^^^^^^^
>re.exec : (string: string) => RegExpExecArray | null
>        : ^      ^^      ^^^^^                      
>re : RegExp
>   : ^^^^^^
>exec : (string: string) => RegExpExecArray | null
>     : ^      ^^      ^^^^^                      
>"2015-01-02" : "2015-01-02"
>             : ^^^^^^^^^^^^

let date = result[0];
>date : string
>     : ^^^^^^
>result[0] : string
>          : ^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>0 : 0
>  : ^

let year1 = result.groups.year;
>year1 : string
>      : ^^^^^^
>result.groups.year : string
>                   : ^^^^^^
>result.groups : { [key: string]: string; }
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>groups : { [key: string]: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>year : string
>     : ^^^^^^

let year2 = result[1];
>year2 : string
>      : ^^^^^^
>result[1] : string
>          : ^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>1 : 1
>  : ^

let month1 = result.groups.month;
>month1 : string
>       : ^^^^^^
>result.groups.month : string
>                    : ^^^^^^
>result.groups : { [key: string]: string; }
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>groups : { [key: string]: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>month : string
>      : ^^^^^^

let month2 = result[2];
>month2 : string
>       : ^^^^^^
>result[2] : string
>          : ^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>2 : 2
>  : ^

let day1 = result.groups.day;
>day1 : string
>     : ^^^^^^
>result.groups.day : string
>                  : ^^^^^^
>result.groups : { [key: string]: string; }
>              : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>groups : { [key: string]: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>day : string
>    : ^^^^^^

let day2 = result[3];
>day2 : string
>     : ^^^^^^
>result[3] : string
>          : ^^^^^^
>result : RegExpExecArray
>       : ^^^^^^^^^^^^^^^
>3 : 3
>  : ^

let foo = "foo".match(/(?<bar>foo)/)!.groups.foo;
>foo : string
>    : ^^^^^^
>"foo".match(/(?<bar>foo)/)!.groups.foo : string
>                                       : ^^^^^^
>"foo".match(/(?<bar>foo)/)!.groups : { [key: string]: string; }
>                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>"foo".match(/(?<bar>foo)/)! : RegExpMatchArray
>                            : ^^^^^^^^^^^^^^^^
>"foo".match(/(?<bar>foo)/) : RegExpMatchArray
>                           : ^^^^^^^^^^^^^^^^
>"foo".match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
>            : ^^^      ^^               ^^^                       ^^^       ^^                                                            ^^^                       ^^^
>"foo" : "foo"
>      : ^^^^^
>match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
>      : ^^^      ^^               ^^^                       ^^^       ^^                                                            ^^^                       ^^^
>/(?<bar>foo)/ : RegExp
>              : ^^^^^^
>groups : { [key: string]: string; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : string
>    : ^^^^^^

