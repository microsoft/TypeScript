usedBeforeAssignedTypeAssertion.ts(28,6): error TS2588: Cannot assign to 'm' because it is a constant.
usedBeforeAssignedTypeAssertion.ts(41,10): error TS2540: Cannot assign to 'prop' because it is a read-only property.
usedBeforeAssignedTypeAssertion.ts(47,12): error TS2454: Variable 'uninitialized' is used before being assigned.


==== usedBeforeAssignedTypeAssertion.ts (3 errors) ====
    // Test case for type assertion (angle bracket syntax) - assignment should not error
    function testTypeAssertion() {
        let x: number;
        (<any>x) = 42; // Should not error - this is an assignment
    }
    
    // Test case for 'as' expression - assignment should not error 
    function testAsExpression() {
        let y: number;
        (y as any) = 42; // Should not error - this is an assignment
    }
    
    // Test case for parenthesized expression (should already work)
    function testParentheses() {
        let z: number;
        (z) = 42; // Should not error - this is an assignment
    }
    
    // Test case with nested type assertions
    function testNested() {
        let nested: any;
        ((nested as any) as unknown) = "test"; // Should not error
    }
    
    // Test case for const assignment via type assertion - should error
    function testConstAssignment() {
        const m = 32;
        (m as any) = 16; // Should error - cannot assign to const
         ~
!!! error TS2588: Cannot assign to 'm' because it is a constant.
    }
    
    // Test case for readonly property assignment via type assertion - should error
    function testReadonlyPropertyAssignment() {
        interface ReadonlyInterface {
            readonly prop: number;
        }
        
        let obj: ReadonlyInterface;
        obj = { prop: 42 };
        
        // Should error - cannot assign to readonly property, even through type assertion
        (obj.prop as any) = 100;
             ~~~~
!!! error TS2540: Cannot assign to 'prop' because it is a read-only property.
    }
    
    // Test cases that should still produce errors for proper context
    function shouldStillError() {
        let uninitialized: number;
        return uninitialized; // Should error - never assigned
               ~~~~~~~~~~~~~
!!! error TS2454: Variable 'uninitialized' is used before being assigned.
    }