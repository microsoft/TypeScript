//// [tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithIteratorObject.ts] ////

=== usingDeclarationsWithIteratorObject.ts ===
declare const i: Iterator<string, undefined>;
>i : Symbol(i, Decl(usingDeclarationsWithIteratorObject.ts, 0, 13))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))

declare const io: IteratorObject<string, undefined, unknown>;
>io : Symbol(io, Decl(usingDeclarationsWithIteratorObject.ts, 1, 13))
>IteratorObject : Symbol(IteratorObject, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.disposable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))

declare const g: Generator<string, void>;
>g : Symbol(g, Decl(usingDeclarationsWithIteratorObject.ts, 2, 13))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))

class MyIterator extends Iterator<string> {
>MyIterator : Symbol(MyIterator, Decl(usingDeclarationsWithIteratorObject.ts, 2, 41))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))

    next() { return { done: true, value: undefined }; }
>next : Symbol(MyIterator.next, Decl(usingDeclarationsWithIteratorObject.ts, 4, 43))
>done : Symbol(done, Decl(usingDeclarationsWithIteratorObject.ts, 5, 21))
>value : Symbol(value, Decl(usingDeclarationsWithIteratorObject.ts, 5, 33))
>undefined : Symbol(undefined)
}

function f() {
>f : Symbol(f, Decl(usingDeclarationsWithIteratorObject.ts, 6, 1))

    // should pass
    using it0 = io;
>it0 : Symbol(it0, Decl(usingDeclarationsWithIteratorObject.ts, 10, 9))
>io : Symbol(io, Decl(usingDeclarationsWithIteratorObject.ts, 1, 13))

    using it1 = g;
>it1 : Symbol(it1, Decl(usingDeclarationsWithIteratorObject.ts, 11, 9))
>g : Symbol(g, Decl(usingDeclarationsWithIteratorObject.ts, 2, 13))

    using it2 = Iterator.from(i)
>it2 : Symbol(it2, Decl(usingDeclarationsWithIteratorObject.ts, 12, 9))
>Iterator.from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))
>Iterator : Symbol(Iterator, Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.esnext.iterator.d.ts, --, --))
>from : Symbol(IteratorConstructor.from, Decl(lib.esnext.iterator.d.ts, --, --))
>i : Symbol(i, Decl(usingDeclarationsWithIteratorObject.ts, 0, 13))

    using it3 = new MyIterator();
>it3 : Symbol(it3, Decl(usingDeclarationsWithIteratorObject.ts, 13, 9))
>MyIterator : Symbol(MyIterator, Decl(usingDeclarationsWithIteratorObject.ts, 2, 41))

    using it4 = [].values();
>it4 : Symbol(it4, Decl(usingDeclarationsWithIteratorObject.ts, 14, 9))
>[].values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
>values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))

    using it5 = new Map<string, string>().entries();
>it5 : Symbol(it5, Decl(usingDeclarationsWithIteratorObject.ts, 15, 9))
>new Map<string, string>().entries : Symbol(Map.entries, Decl(lib.es2015.iterable.d.ts, --, --))
>Map : Symbol(Map, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>entries : Symbol(Map.entries, Decl(lib.es2015.iterable.d.ts, --, --))

    using it6 = new Set<string>().keys();
>it6 : Symbol(it6, Decl(usingDeclarationsWithIteratorObject.ts, 16, 9))
>new Set<string>().keys : Symbol(Set.keys, Decl(lib.es2015.iterable.d.ts, --, --))
>Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.esnext.collection.d.ts, --, --))
>keys : Symbol(Set.keys, Decl(lib.es2015.iterable.d.ts, --, --))

    // should fail
    using it7 = i;
>it7 : Symbol(it7, Decl(usingDeclarationsWithIteratorObject.ts, 19, 9))
>i : Symbol(i, Decl(usingDeclarationsWithIteratorObject.ts, 0, 13))
}

