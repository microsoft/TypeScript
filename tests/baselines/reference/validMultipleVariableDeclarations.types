//// [tests/cases/conformance/statements/VariableStatements/validMultipleVariableDeclarations.ts] ////

=== validMultipleVariableDeclarations.ts ===
// all expected to be valid

var x: number;
>x : number
>  : ^^^^^^

var x = 2;
>x : number
>  : ^^^^^^
>2 : 2
>  : ^

if (true) {
>true : true
>     : ^^^^

    var x = 3;
>x : number
>  : ^^^^^^
>3 : 3
>  : ^

    for (var x = 0; ;) { }
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
}
var x = <number>undefined;
>x : number
>  : ^^^^^^
><number>undefined : number
>                  : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

// new declaration space, making redeclaring x as a string valid
function declSpace() {
>declSpace : () => void
>          : ^^^^^^^^^^

    var x = 'this is a string';
>x : string
>  : ^^^^^^
>'this is a string' : "this is a string"
>                   : ^^^^^^^^^^^^^^^^^^
}

interface Point { x: number; y: number; }
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^

var p: Point;
>p : Point
>  : ^^^^^

var p = { x: 1, y: 2 };
>p : Point
>  : ^^^^^
>{ x: 1, y: 2 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^

var p: Point = { x: 0, y: undefined };
>p : Point
>  : ^^^^^
>{ x: 0, y: undefined } : { x: number; y: undefined; }
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : undefined
>  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var p = { x: 1, y: <number>undefined };
>p : Point
>  : ^^^^^
>{ x: 1, y: <number>undefined } : { x: number; y: number; }
>                               : ^^^^^^^^^^^^^^^^      ^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
><number>undefined : number
>                  : ^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var p: { x: number; y: number; } = { x: 1, y: 2 };
>p : Point
>  : ^^^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>{ x: 1, y: 2 } : { x: number; y: number; }
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^
>y : number
>  : ^^^^^^
>2 : 2
>  : ^

var p = <{ x: number; y: number; }>{ x: 0, y: undefined };
>p : Point
>  : ^^^^^
><{ x: number; y: number; }>{ x: 0, y: undefined } : { x: number; y: number; }
>                                                  : ^^^^^      ^^^^^      ^^^
>x : number
>  : ^^^^^^
>y : number
>  : ^^^^^^
>{ x: 0, y: undefined } : { x: number; y: undefined; }
>                       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>0 : 0
>  : ^
>y : undefined
>  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var p: typeof p;
>p : Point
>  : ^^^^^
>p : Point
>  : ^^^^^

var fn = function (s: string) { return 42; }
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^
>function (s: string) { return 42; } : (s: string) => number
>                                    : ^ ^^      ^^^^^^^^^^^
>s : string
>  : ^^^^^^
>42 : 42
>   : ^^

var fn = (s: string) => 3;
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^
>(s: string) => 3 : (s: string) => number
>                 : ^ ^^      ^^^^^^^^^^^
>s : string
>  : ^^^^^^
>3 : 3
>  : ^

var fn: (s: string) => number;
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^
>s : string
>  : ^^^^^^

var fn: { (s: string): number };
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^
>s : string
>  : ^^^^^^

var fn = <(s: string) => number> null;
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^
><(s: string) => number> null : (s: string) => number
>                             : ^ ^^      ^^^^^      
>s : string
>  : ^^^^^^

var fn: typeof fn;
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^
>fn : (s: string) => number
>   : ^ ^^      ^^^^^^^^^^^

var a: string[]; 
>a : string[]
>  : ^^^^^^^^

var a = ['a', 'b']
>a : string[]
>  : ^^^^^^^^
>['a', 'b'] : string[]
>           : ^^^^^^^^
>'a' : "a"
>    : ^^^
>'b' : "b"
>    : ^^^

var a = <string[]>[];
>a : string[]
>  : ^^^^^^^^
><string[]>[] : string[]
>             : ^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

var a: string[] = [];
>a : string[]
>  : ^^^^^^^^
>[] : undefined[]
>   : ^^^^^^^^^^^

var a = new Array<string>();
>a : string[]
>  : ^^^^^^^^
>new Array<string>() : string[]
>                    : ^^^^^^^^
>Array : ArrayConstructor
>      : ^^^^^^^^^^^^^^^^

var a: typeof a;
>a : string[]
>  : ^^^^^^^^
>a : string[]
>  : ^^^^^^^^

