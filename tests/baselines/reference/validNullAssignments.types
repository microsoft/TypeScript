//// [tests/cases/conformance/types/primitives/null/validNullAssignments.ts] ////

=== validNullAssignments.ts ===
var a: number = null;
>a : number
>  : ^^^^^^

var b: boolean = null;
>b : boolean
>  : ^^^^^^^

var c: string = null;
>c : string
>  : ^^^^^^

var d: void = null;
>d : void
>  : ^^^^

var e: typeof undefined = null;
>e : any
>  : ^^^
>undefined : undefined
>          : ^^^^^^^^^

e = null; // ok
>e = null : null
>         : ^^^^
>e : any
>  : ^^^

enum E { A }
>E : E
>  : ^
>A : E.A
>  : ^^^

E.A = null; // error
>E.A = null : null
>           : ^^^^
>E.A : any
>    : ^^^
>E : typeof E
>  : ^^^^^^^^
>A : any
>  : ^^^

class C { foo: string }
>C : C
>  : ^
>foo : string
>    : ^^^^^^

var f: C;
>f : C
>  : ^

f = null; // ok
>f = null : null
>         : ^^^^
>f : C
>  : ^

C = null; // error
>C = null : null
>         : ^^^^
>C : any
>  : ^^^

interface I { foo: string }
>foo : string
>    : ^^^^^^

var g: I;
>g : I
>  : ^

g = null; // ok
>g = null : null
>         : ^^^^
>g : I
>  : ^

I = null; // error
>I = null : null
>         : ^^^^
>I : any
>  : ^^^

module M { export var x = 1; }
>M : typeof M
>  : ^^^^^^^^
>x : number
>  : ^^^^^^
>1 : 1
>  : ^

M = null; // error
>M = null : null
>         : ^^^^
>M : any
>  : ^^^

var h: { f(): void } = null;
>h : { f(): void; }
>  : ^^^^^^^    ^^^
>f : () => void
>  : ^^^^^^    

function i<T>(a: T) {
>i : <T>(a: T) => void
>  : ^ ^^ ^^ ^^^^^^^^^
>a : T
>  : ^

    a = null;
>a = null : null
>         : ^^^^
>a : T
>  : ^
}
i = null; // error
>i = null : null
>         : ^^^^
>i : any
>  : ^^^

