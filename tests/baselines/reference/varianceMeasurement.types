//// [tests/cases/compiler/varianceMeasurement.ts] ////

=== varianceMeasurement.ts ===
// The type below should be invariant in T but is measured as covariant because
// we don't analyze recursive references.

interface Foo1<T> {
  x: T;
>x : T
>  : ^

  y: Foo1<(arg: T) => void>;
>y : Foo1<(arg: T) => void>
>  : ^^^^^^   ^^ ^^^^^    ^
>arg : T
>    : ^
}

declare const f10: Foo1<string>;
>f10 : Foo1<string>
>    : ^^^^^^^^^^^^

const f11: Foo1<'a'> = f10;
>f11 : Foo1<"a">
>    : ^^^^^^^^^
>f10 : Foo1<string>
>    : ^^^^^^^^^^^^

const f12: Foo1<unknown> = f10;
>f12 : Foo1<unknown>
>    : ^^^^^^^^^^^^^
>f10 : Foo1<string>
>    : ^^^^^^^^^^^^

// The type below is invariant in T and is measured as such.

interface Foo2<T> {
  x: T;
>x : T
>  : ^

  y: { x: (arg: T) => void, y: Foo2<(arg: T) => void>; }
>y : { x: (arg: T) => void; y: Foo2<(arg: T) => void>; }
>  : ^^^^^                ^^^^^                      ^^^
>x : (arg: T) => void
>  : ^   ^^ ^^^^^    
>arg : T
>    : ^
>y : Foo2<(arg: T) => void>
>  : ^^^^^^   ^^ ^^^^^    ^
>arg : T
>    : ^
}

declare const f20: Foo2<string>;
>f20 : Foo2<string>
>    : ^^^^^^^^^^^^

const f21: Foo2<'a'> = f20;
>f21 : Foo2<"a">
>    : ^^^^^^^^^
>f20 : Foo2<string>
>    : ^^^^^^^^^^^^

const f22: Foo2<unknown> = f20;
>f22 : Foo2<unknown>
>    : ^^^^^^^^^^^^^
>f20 : Foo2<string>
>    : ^^^^^^^^^^^^

// The type below should be invariant in T but is measured as covariant because
// we don't analyze recursive references.

type Foo3<T> = {
>Foo3 : Foo3<T>
>     : ^^^^^^^

  x: T;
>x : T
>  : ^

  y: Foo3<(arg: T) => void>;
>y : Foo3<(arg: T) => void>
>  : ^^^^^^   ^^ ^^^^^    ^
>arg : T
>    : ^
}

declare const f30: Foo3<string>;
>f30 : Foo3<string>
>    : ^^^^^^^^^^^^

const f31: Foo3<'a'> = f30;
>f31 : Foo3<"a">
>    : ^^^^^^^^^
>f30 : Foo3<string>
>    : ^^^^^^^^^^^^

const f32: Foo3<unknown> = f30;
>f32 : Foo3<unknown>
>    : ^^^^^^^^^^^^^
>f30 : Foo3<string>
>    : ^^^^^^^^^^^^

// The type below is invariant in T and is measured as such.

type Foo4<T> = {
>Foo4 : Foo4<T>
>     : ^^^^^^^

  x: T;
>x : T
>  : ^

  y: { x: (arg: T) => void, y: Foo4<(arg: T) => void>; }
>y : { x: (arg: T) => void; y: Foo4<(arg: T) => void>; }
>  : ^^^^^                ^^^^^                      ^^^
>x : (arg: T) => void
>  : ^   ^^ ^^^^^    
>arg : T
>    : ^
>y : Foo4<(arg: T) => void>
>  : ^^^^^^   ^^ ^^^^^    ^
>arg : T
>    : ^
}

declare const f40: Foo4<string>;
>f40 : Foo4<string>
>    : ^^^^^^^^^^^^

const f41: Foo4<'a'> = f40;
>f41 : Foo4<"a">
>    : ^^^^^^^^^
>f40 : Foo4<string>
>    : ^^^^^^^^^^^^

const f42: Foo4<unknown> = f40;
>f42 : Foo4<unknown>
>    : ^^^^^^^^^^^^^
>f40 : Foo4<string>
>    : ^^^^^^^^^^^^

// Repro from #3580

interface Fn<A, B> {
  (a: A): B;
>a : A
>  : ^

  then<C>(next: Fn<B, C>): Fn<A, C>;
>then : <C>(next: Fn<B, C>) => Fn<A, C>
>     : ^ ^^    ^^        ^^^^^        
>next : Fn<B, C>
>     : ^^^^^^^^
}

declare const fn: Fn<string, number>;
>fn : Fn<string, number>
>   : ^^^^^^^^^^^^^^^^^^

// Contravariant in A
const fn1: Fn<unknown, number> = fn;  // Error
>fn1 : Fn<unknown, number>
>    : ^^^^^^^^^^^^^^^^^^^
>fn : Fn<string, number>
>   : ^^^^^^^^^^^^^^^^^^

const fn2: Fn<'a', number> = fn;
>fn2 : Fn<"a", number>
>    : ^^^^^^^^^^^^^^^
>fn : Fn<string, number>
>   : ^^^^^^^^^^^^^^^^^^

// Covariant in B
const fn3: Fn<string, unknown> = fn;
>fn3 : Fn<string, unknown>
>    : ^^^^^^^^^^^^^^^^^^^
>fn : Fn<string, number>
>   : ^^^^^^^^^^^^^^^^^^

const fn4: Fn<string, 0> = fn;  // Error
>fn4 : Fn<string, 0>
>    : ^^^^^^^^^^^^^
>fn : Fn<string, number>
>   : ^^^^^^^^^^^^^^^^^^

// Repro from #39947

interface I<Dummy, V> {
  c: C<Dummy, V>;
>c : C<Dummy, V>
>  : ^^^^^^^^^^^
}

class C<Dummy, V> {
>C : C<Dummy, V>
>  : ^^^^^^^^^^^

  declare sub: I<Dummy, V>;
>sub : I<Dummy, V>
>    : ^^^^^^^^^^^

  declare covariance: V;
>covariance : V
>           : ^
}

const c1: C<unknown, string> = new C<unknown, number>();  // Error
>c1 : C<unknown, string>
>   : ^^^^^^^^^^^^^^^^^^
>new C<unknown, number>() : C<unknown, number>
>                         : ^^^^^^^^^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^

