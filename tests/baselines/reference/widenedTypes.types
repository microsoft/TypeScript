//// [tests/cases/compiler/widenedTypes.ts] ////

=== widenedTypes.ts ===
null instanceof (() => { });
>null instanceof (() => { }) : boolean
>                            : ^^^^^^^
>(() => { }) : () => void
>            : ^^^^^^^^^^
>() => { } : () => void
>          : ^^^^^^^^^^

({}) instanceof null; // Ok because null is a subtype of function
>({}) instanceof null : boolean
>                     : ^^^^^^^
>({}) : {}
>     : ^^
>{} : {}
>   : ^^

null in {};
>null in {} : boolean
>           : ^^^^^^^
>{} : {}
>   : ^^

"" in null;
>"" in null : boolean
>           : ^^^^^^^
>"" : ""
>   : ^^

for (var a in null) { }
>a : string
>  : ^^^^^^

var t = [3, (3, null)];
>t : number[]
>  : ^^^^^^^^
>[3, (3, null)] : number[]
>               : ^^^^^^^^
>3 : 3
>  : ^
>(3, null) : null
>          : ^^^^
>3, null : null
>        : ^^^^
>3 : 3
>  : ^

t[3] = "";
>t[3] = "" : ""
>          : ^^
>t[3] : number
>     : ^^^^^^
>t : number[]
>  : ^^^^^^^^
>3 : 3
>  : ^
>"" : ""
>   : ^^

var x: typeof undefined = 3;
>x : any
>  : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>3 : 3
>  : ^

x = 3;
>x = 3 : 3
>      : ^
>x : any
>  : ^^^
>3 : 3
>  : ^

var y;
>y : any
>  : ^^^

var u = [3, (y = null)];
>u : number[]
>  : ^^^^^^^^
>[3, (y = null)] : number[]
>                : ^^^^^^^^
>3 : 3
>  : ^
>(y = null) : null
>           : ^^^^
>y = null : null
>         : ^^^^
>y : any
>  : ^^^

u[3] = "";
>u[3] = "" : ""
>          : ^^
>u[3] : number
>     : ^^^^^^
>u : number[]
>  : ^^^^^^^^
>3 : 3
>  : ^
>"" : ""
>   : ^^

var ob: { x: typeof undefined } = { x: "" };
>ob : { x: typeof undefined; }
>   : ^^^^^                ^^^
>x : any
>  : ^^^
>undefined : undefined
>          : ^^^^^^^^^
>{ x: "" } : { x: string; }
>          : ^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>"" : ""
>   : ^^

// Highlights the difference between array literals and object literals
var arr: string[] = [3, null]; // not assignable because null is not widened. BCT is {}
>arr : string[]
>    : ^^^^^^^^
>[3, null] : number[]
>          : ^^^^^^^^
>3 : 3
>  : ^

var obj: { [x: string]: string; } = { x: 3, y: null }; // assignable because null is widened, and therefore BCT is any
>obj : { [x: string]: string; }
>    : ^^^^^^^^^^^^^^^^^^^^^^^^
>x : string
>  : ^^^^^^
>{ x: 3, y: null } : { x: number; y: null; }
>                  : ^^^^^^^^^^^^^^^^^^^^^^^
>x : number
>  : ^^^^^^
>3 : 3
>  : ^
>y : null
>  : ^^^^

