//// [tests/cases/compiler/wideningWithTopLevelTypeParameter.ts] ////

=== wideningWithTopLevelTypeParameter.ts ===
type C1<T> = T extends unknown ? T | undefined : never;
>C1 : C1<T>
>   : ^^^^^

type C2<T> = T extends unknown ? T | undefined : never;
>C2 : C2<T>
>   : ^^^^^

type C3<T> = T extends unknown ? T | undefined : never;
>C3 : C3<T>
>   : ^^^^^

type C4<T> = T extends unknown ? T | undefined : never;
>C4 : C4<T>
>   : ^^^^^

declare function f0<T>(x: T): [T];
>f0 : <T>(x: T) => [T]
>   : ^ ^^ ^^ ^^^^^   
>x : T
>  : ^

declare function f1<T>(x: C1<T>): [T];
>f1 : <T>(x: C1<T>) => [T]
>   : ^ ^^ ^^     ^^^^^   
>x : C1<T>
>  : ^^^^^

declare function f2<T>(x: C1<C2<T>>): [T];
>f2 : <T>(x: C1<C2<T>>) => [T]
>   : ^ ^^ ^^         ^^^^^   
>x : C1<C2<T>>
>  : ^^^^^^^^^

declare function f3<T>(x: C1<C2<C3<T>>>): [T];
>f3 : <T>(x: C1<C2<C3<T>>>) => [T]
>   : ^ ^^ ^^             ^^^^^   
>x : C1<C2<C3<T>>>
>  : ^^^^^^^^^^^^^

declare function f4<T>(x: C1<C2<C3<C4<T>>>>): [T];
>f4 : <T>(x: C1<C2<C3<C4<T>>>>) => [T]
>   : ^ ^^ ^^                 ^^^^^   
>x : C1<C2<C3<C4<T>>>>
>  : ^^^^^^^^^^^^^^^^^

const c0 = f0(7);  // [number]
>c0 : [number]
>   : ^^^^^^^^
>f0(7) : [number]
>      : ^^^^^^^^
>f0 : <T>(x: T) => [T]
>   : ^ ^^ ^^ ^^^^^   
>7 : 7
>  : ^

const c1 = f1(7);  // [number]
>c1 : [number]
>   : ^^^^^^^^
>f1(7) : [number]
>      : ^^^^^^^^
>f1 : <T>(x: C1<T>) => [T]
>   : ^ ^^ ^^     ^^^^^   
>7 : 7
>  : ^

const c2 = f2(7);  // [number]
>c2 : [number]
>   : ^^^^^^^^
>f2(7) : [number]
>      : ^^^^^^^^
>f2 : <T>(x: C1<C2<T>>) => [T]
>   : ^ ^^ ^^         ^^^^^   
>7 : 7
>  : ^

const c3 = f3(7);  // [number]
>c3 : [number]
>   : ^^^^^^^^
>f3(7) : [number]
>      : ^^^^^^^^
>f3 : <T>(x: C1<C2<C3<T>>>) => [T]
>   : ^ ^^ ^^             ^^^^^   
>7 : 7
>  : ^

const c4 = f4(7);  // [7] since we have an internal nesting limit of 3
>c4 : [7]
>   : ^^^
>f4(7) : [7]
>      : ^^^
>f4 : <T>(x: C1<C2<C3<C4<T>>>>) => [T]
>   : ^ ^^ ^^                 ^^^^^   
>7 : 7
>  : ^

// Repro from #52620

class FormControl<T> {
>FormControl : FormControl<T>
>            : ^^^^^^^^^^^^^^

    constructor(t: T extends undefined ? never : T) {}
>t : T extends undefined ? never : T
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

const a = new FormControl('');  // string
>a : FormControl<string>
>  : ^^^^^^^^^^^^^^^^^^^
>new FormControl('') : FormControl<string>
>                    : ^^^^^^^^^^^^^^^^^^^
>FormControl : typeof FormControl
>            : ^^^^^^^^^^^^^^^^^^
>'' : ""
>   : ^^

class FormControl2<T> {
>FormControl2 : FormControl2<T>
>             : ^^^^^^^^^^^^^^^

    constructor(t: T | string) {}
>t : string | T
>  : ^^^^^^^^^^
}

const b = new FormControl2('');  // string
>b : FormControl2<string>
>  : ^^^^^^^^^^^^^^^^^^^^
>new FormControl2('') : FormControl2<string>
>                     : ^^^^^^^^^^^^^^^^^^^^
>FormControl2 : typeof FormControl2
>             : ^^^^^^^^^^^^^^^^^^^
>'' : ""
>   : ^^

class FormControl3<T> {
>FormControl3 : FormControl3<T>
>             : ^^^^^^^^^^^^^^^

    constructor(t: T extends undefined ? never : T | string) {}
>t : T extends undefined ? never : string | T
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}

const c = new FormControl3('');  // string
>c : FormControl3<string>
>  : ^^^^^^^^^^^^^^^^^^^^
>new FormControl3('') : FormControl3<string>
>                     : ^^^^^^^^^^^^^^^^^^^^
>FormControl3 : typeof FormControl3
>             : ^^^^^^^^^^^^^^^^^^^
>'' : ""
>   : ^^

