//// [tests/cases/conformance/types/typeParameters/typeArgumentLists/wrappedAndRecursiveConstraints3.ts] ////

=== wrappedAndRecursiveConstraints3.ts ===
// no errors expected

class C<T extends { length: number }> {
>C : C<T>
>  : ^^^^
>length : number
>       : ^^^^^^

    constructor(x: T) { }
>x : T
>  : ^

    foo<U extends T>(x: U) {
>foo : <U extends T>(x: U) => <V extends U>(x: V) => V
>    : ^ ^^^^^^^^^ ^^ ^^ ^^^^^^ ^^^^^^^^^ ^^ ^^ ^^^^^^
>x : U
>  : ^

        function bar<V extends U>(x: V) {
>bar : <V extends U>(x: V) => V
>    : ^ ^^^^^^^^^ ^^ ^^ ^^^^^^
>x : V
>  : ^

            return x;
>x : V
>  : ^
        }
        return bar;
>bar : <V extends U>(x: V) => V
>    : ^ ^^^^^^^^^ ^^ ^^ ^^^^^^
    }
}

var c = new C({ length: 2 });
>c : C<{ length: number; }>
>  : ^^^^^^^^^^^^^^^^^^^^^^
>new C({ length: 2 }) : C<{ length: number; }>
>                     : ^^^^^^^^^^^^^^^^^^^^^^
>C : typeof C
>  : ^^^^^^^^
>{ length: 2 } : { length: number; }
>              : ^^^^^^^^^^^^^^^^^^^
>length : number
>       : ^^^^^^
>2 : 2
>  : ^

var r = c.foo({ length: 3, charAt: (x: number) => { '' } });
>r : <V extends { length: number; charAt: (x: number) => void; }>(x: V) => V
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^ ^^^^^^^^^
>c.foo({ length: 3, charAt: (x: number) => { '' } }) : <V extends { length: number; charAt: (x: number) => void; }>(x: V) => V
>                                                    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^ ^^^^^^^^^
>c.foo : <U extends { length: number; }>(x: U) => <V extends U>(x: V) => V
>      : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^^
>c : C<{ length: number; }>
>  : ^^^^^^^^^^^^^^^^^^^^^^
>foo : <U extends { length: number; }>(x: U) => <V extends U>(x: V) => V
>    : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^^
>{ length: 3, charAt: (x: number) => { '' } } : { length: number; charAt: (x: number) => void; }
>                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^
>length : number
>       : ^^^^^^
>3 : 3
>  : ^
>charAt : (x: number) => void
>       : ^ ^^      ^^^^^^^^^
>(x: number) => { '' } : (x: number) => void
>                      : ^ ^^      ^^^^^^^^^
>x : number
>  : ^^^^^^
>'' : ""
>   : ^^

var r2 = r('');
>r2 : string
>   : ^^^^^^
>r('') : ""
>      : ^^
>r : <V extends { length: number; charAt: (x: number) => void; }>(x: V) => V
>  : ^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^ ^^^^^^^^^
>'' : ""
>   : ^^

